// Package fiserv provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package fiserv

import (
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// ACSResponse defines model for ACSResponse.
type ACSResponse struct {

	// The ACS response to the CReq message. It can indicate the result of cardholder authentication or, in the case of an app-based model, also signal that further cardholder interaction is required to complete the authentication.
	CRes *string `json:"cRes,omitempty"`
}

// AVSResponse defines model for AVSResponse.
type AVSResponse struct {

	// The raw address verification response code returned by issuer. Please refer to response codes section in developer portal for more info.
	AssociationAvsResponse *string `json:"associationAvsResponse,omitempty"`

	// Response if postal code matches that on file.
	PostalCodeMatch *string `json:"postalCodeMatch,omitempty"`

	// Response if street matches that on file.
	StreetMatch *string `json:"streetMatch,omitempty"`
}

// AccessTokenRequest defines model for AccessTokenRequest.
type AccessTokenRequest struct {

	// Domain name.
	Domain string `json:"domain"`

	// Indicates whether public key is requested or not.
	PublicKeyRequired bool `json:"publicKeyRequired"`

	// The token value.
	Token string `json:"token"`
}

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {

	// Encyption algorithym. One way ECDH 256 bit key.
	Algorithm *string `json:"algorithm,omitempty"`

	// Echoes back the value from the request header for tracking.
	ClientRequestId *string `json:"clientRequestId,omitempty"`

	// Access token expiration time.
	ExpiresInSeconds *string `json:"expiresInSeconds,omitempty"`

	// Access token issued time in milliseconds.
	IssuedOn *string `json:"issuedOn,omitempty"`

	// Public key to encrypt data.
	PublicKeyBase64 *string `json:"publicKeyBase64,omitempty"`

	// The token status.
	Status *string `json:"status,omitempty"`

	// Access token for authentication.
	TokenId *string `json:"tokenId,omitempty"`
}

// AccountInfoLookupRequest defines model for AccountInfoLookupRequest.
type AccountInfoLookupRequest struct {

	// Object name of the account verification request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`
}

// AccountUpdaterResponse defines model for AccountUpdaterResponse.
type AccountUpdaterResponse struct {

	// Code for the error encountered when updating account.
	UpdatedAccountErrorCode *string `json:"updatedAccountErrorCode,omitempty"`

	// Status of the updated account. An account may have closed (C), the expiry date may have changed (E), the account may have changed (A), or the cardholder should be contacted (Q).
	UpdatedAccountStatus *string `json:"updatedAccountStatus,omitempty"`

	// Account updater replacement PAN or TransArmor token.
	UpdatedCard *string `json:"updatedCard,omitempty"`

	// New account number expiration date in MMYY format.
	UpdatedExpirationDate *string `json:"updatedExpirationDate,omitempty"`

	// Updated value of token.
	UpdatedToken *string `json:"updatedToken,omitempty"`
}

// AccountVerificationRequest defines model for AccountVerificationRequest.
type AccountVerificationRequest struct {

	// Merchant supplied tracking numbers.
	AdditionalDetails *AdditionalDetails `json:"additionalDetails,omitempty"`

	// Model for address information.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// The unique merchant transaction ID from the request, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Object name of the account verification request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`
}

// AchCreditTransaction defines model for AchCreditTransaction.
type AchCreditTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// ACH means automated clearing house. Contains properties common across TeleCheck message types. Abstract class, do not use this class directly, use one of its children.
	PaymentMethod TeleCheckAchPaymentMethod `json:"paymentMethod"`
}

// AchPostAuthTransaction defines model for AchPostAuthTransaction.
type AchPostAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`
}

// AchPreAuthTransaction defines model for AchPreAuthTransaction.
type AchPreAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// ACH means automated clearing house. Contains properties common across TeleCheck message types. Abstract class, do not use this class directly, use one of its children.
	PaymentMethod TeleCheckAchPaymentMethod `json:"paymentMethod"`
}

// AchRecurringType defines model for AchRecurringType.
type AchRecurringType string

// List of AchRecurringType
const (
	AchRecurringType_Recurring AchRecurringType = "Recurring"
	AchRecurringType_Single    AchRecurringType = "Single"
)

// AchResponse defines model for AchResponse.
type AchResponse struct {

	// Code provided if check is approved.
	ApprovalCode *string `json:"approvalCode,omitempty"`

	// Preferred flag.
	PreferredFlag *string `json:"preferredFlag,omitempty"`

	// Reference number.
	ReferenceNumber *string `json:"referenceNumber,omitempty"`

	// Response code for TeleCheck authentication decision in the sale response message.
	ResponseCode *string `json:"responseCode,omitempty"`

	// Indicates the result of the requested authorization and is returned in the sale response.
	TransactionStatus *string `json:"transactionStatus,omitempty"`
}

// AchReturnTransaction defines model for AchReturnTransaction.
type AchReturnTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`
}

// AchSaleTransaction defines model for AchSaleTransaction.
type AchSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// ACH means automated clearing house. Contains properties common across TeleCheck message types. Abstract class, do not use this class directly, use one of its children.
	PaymentMethod TeleCheckAchPaymentMethod `json:"paymentMethod"`
}

// AchVoidTransaction defines model for AchVoidTransaction.
type AchVoidTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`
}

// AdditionalAmountRate defines model for AdditionalAmountRate.
type AdditionalAmountRate struct {

	// Amount in 3 decimal 12 bytes total digit.
	Amount float32 `json:"amount"`

	// Rate in 3 decimal 12 bytes total digit.
	Rate float32 `json:"rate"`
}

// AdditionalDetails defines model for AdditionalDetails.
type AdditionalDetails struct {

	// Comments for the payment.
	Comments *string `json:"comments,omitempty"`

	// this is highRiskPurchaseIndicator.
	HighRiskPurchaseIndicator *bool `json:"highRiskPurchaseIndicator,omitempty"`

	// Invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// Indicates if the particular transaction is a deferred authorization.
	IpgDeferredAuth *bool `json:"ipgDeferredAuth,omitempty"`

	// The operator ID.
	OperatorId *string `json:"operatorId,omitempty"`

	// Purchase order number.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Provides request information that is necessary to generate receipts.
	Receipts *[]ReceiptRequestInfo `json:"receipts,omitempty"`

	// The sales system ID.
	SalesSystemId *string `json:"salesSystemId,omitempty"`

	// Strong customer authentication exemption type indicator.
	ScaExemptionType *string `json:"scaExemptionType,omitempty"`

	// Eight-character Visa merchant identifier (VMID) assigned by Visa, required for trusted merchant and delegated authentication.
	ScaVisaMerchantID *string `json:"scaVisaMerchantID,omitempty"`
}

// AdditionalTransactionDetails defines model for AdditionalTransactionDetails.
type AdditionalTransactionDetails struct {

	// Comment for the payment.
	Comments *string `json:"comments,omitempty"`

	// The type of debit disbursement transaction.
	DisbursementTransType *string `json:"disbursementTransType,omitempty"`

	// Invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// Purchase order number.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Provides receipt response data, if it has been requested.
	Receipts *[]Receipt `json:"receipts,omitempty"`

	// The wallet provider type.
	WalletProvider *string `json:"walletProvider,omitempty"`
}

// Address defines model for Address.
type Address struct {

	// First line of the street address.
	Address1 *string `json:"address1,omitempty"`

	// Second line of the street address.
	Address2 *string `json:"address2,omitempty"`

	// City or locality.
	City *string `json:"city,omitempty"`

	// Company name associated with the address.
	Company *string `json:"company,omitempty"`

	// ISO-3166-1  ALPHA-2, ALPHA-3, numeric or full country name. In the case of PaySecure endpoints, pass the country code in an ISO format.
	Country *string `json:"country,omitempty"`

	// ZIP code or postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State or province.
	Region *string `json:"region,omitempty"`
}

// Airline defines model for Airline.
type Airline struct {

	// The invoice number used by the airline.
	AirlineInvoiceNumber *string `json:"airlineInvoiceNumber,omitempty"`

	// The airline plan number associated with the transaction.
	AirlinePlanNumber *string `json:"airlinePlanNumber,omitempty"`

	// Identify the purchase of ancillary goods or services with a false value. If this element is not provided, the transaction is assumed to be a purchase of an airline ticket.
	AncillaryServiceCategory *[]struct {

		// Identifies the service purchased in the transaction if not a base ticket
		ServiceCategory string `json:"serviceCategory"`
	} `json:"ancillaryServiceCategory,omitempty"`

	// The carrier associated with the transaction.
	CarrierName *string `json:"carrierName,omitempty"`

	// The carrier that issued the ticket.
	IssuingCarrier *string `json:"issuingCarrier,omitempty"`

	// The passenger name associated with the transaction.
	PassengerName *string `json:"passengerName,omitempty"`

	// The number of any other tickets associated with the transaction ticket.
	RelatedTicketNumber *string `json:"relatedTicketNumber,omitempty"`

	// The reservation system used to create the ticket.
	ReservationSystem *string `json:"reservationSystem,omitempty"`

	// If the transaction is associated with a restricted class fare.
	Restricted *bool `json:"restricted,omitempty"`

	// The airline ticket number associated with the transaction.
	TicketNumber *string `json:"ticketNumber,omitempty"`

	// Identifies if the transaction is a ticket purchase.
	TicketPurchase *bool `json:"ticketPurchase,omitempty"`

	// The IATA code associated with the travel agency.
	TravelAgencyIataCode *string `json:"travelAgencyIataCode,omitempty"`

	// The business name of the travel agency.
	TravelAgencyName *string `json:"travelAgencyName,omitempty"`

	// Array containing up to 4 items that describe the route associated with the transaction.
	TravelRoute *[]struct {

		// The IATA code for the carrier.
		CarrierCode *string `json:"carrierCode,omitempty"`

		// Date of departure.
		DepartureDate *openapi_types.Date `json:"departureDate,omitempty"`

		// Fee charged by a country when a person leaves the country.
		DepartureTax *float32 `json:"departureTax,omitempty"`

		// The IATA code for the destination. airport.
		Destination *string `json:"destination,omitempty"`

		// The airline fare basis code.
		FareBasisCode *string `json:"fareBasisCode,omitempty"`

		// The airline flight number associated with the ticket.
		FlightNumber *string `json:"flightNumber,omitempty"`

		// The IATA code for the departure airport.
		Origin *string `json:"origin,omitempty"`

		// The airline code for the service class of the ticket.
		ServiceClass *string `json:"serviceClass,omitempty"`

		// Indicates whether the route is direct.
		StopoverType *string `json:"stopoverType,omitempty"`
	} `json:"travelRoute,omitempty"`
}

// AliPay defines model for AliPay.
type AliPay struct {

	// Use this to send order details that show up in the statement.
	OrderDetails string `json:"orderDetails"`

	// Use this to send an order title that shows up in the statement.
	OrderTitle string `json:"orderTitle"`

	// Use this to send payment-related information, such as customer identity ID.
	PaymentData string `json:"paymentData"`

	// Use this to indicate the type of machine-readable payment data for scanning.
	PaymentDataType string `json:"paymentDataType"`
}

// AliPayPaymentMethod defines model for AliPayPaymentMethod.
type AliPayPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema

	// The payment object for AliPay transactions. Use this to populate AliPay payment method details.
	AliPay AliPay `json:"aliPay"`
}

// AliPaySaleTransaction defines model for AliPaySaleTransaction.
type AliPaySaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment method containing AliPay information.
	PaymentMethod AliPayPaymentMethod `json:"paymentMethod"`
}

// Amount defines model for Amount.
type Amount struct {

	// Transaction amounts with multiple components.
	Components *AmountComponents `json:"components,omitempty"`

	// ISO 4217 currency code.
	Currency string `json:"currency"`

	// Sub component values must add up to total amount.
	Total float32 `json:"total"`
}

// AmountComponents defines model for AmountComponents.
type AmountComponents struct {

	// Cashback amount.
	Cashback *float32 `json:"cashback,omitempty"`

	// Local tax amount.
	LocalTax *float32 `json:"localTax,omitempty"`

	// Shipping amount.
	Shipping *float32 `json:"shipping,omitempty"`

	// Subtotal amount.
	Subtotal *float32 `json:"subtotal,omitempty"`

	// Tip amount.
	Tip *float32 `json:"tip,omitempty"`

	// Value-added tax amount.
	VatAmount *float32 `json:"vatAmount,omitempty"`
}

// AuthenticationRequest defines model for AuthenticationRequest.
type AuthenticationRequest struct {

	// Indicates what kind of authentication scheme the merchant wants to use on the card.
	AuthenticationType string `json:"authenticationType"`
}

// AuthenticationResult defines model for AuthenticationResult.
type AuthenticationResult struct {

	// Specifies the version of 3DS to be used where authentication was managed outside of the gateway.
	AuthenticationType string `json:"authenticationType"`
}

// AuthenticationUpdateRequest defines model for AuthenticationUpdateRequest.
type AuthenticationUpdateRequest struct {

	// Object name of the authentication update request.
	AuthenticationType string `json:"authenticationType"`

	// Model for address information.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// An optional Outlet ID for clients that support multiple stores in the same developer app.
	StoreId *string `json:"storeId,omitempty"`
}

// Background defines model for Background.
type Background struct {
	Body    *Body    `json:"body,omitempty"`
	Borders *Borders `json:"borders,omitempty"`
	Content *Content `json:"content,omitempty"`
	TopBar  *TopBar  `json:"topBar,omitempty"`
}

// BackgroundColor defines model for BackgroundColor.
type BackgroundColor struct {
	Content *Content `json:"content,omitempty"`
	Footer  *Footer  `json:"footer,omitempty"`
	Header  *Header  `json:"header,omitempty"`
}

// BancontactQR defines model for BancontactQR.
type BancontactQR struct {

	// Issuer Customer Reference.
	IssuerCustomerReference *string `json:"issuerCustomerReference,omitempty"`

	// Transaction Routing Means.
	TransactionRoutingMeans string `json:"transactionRoutingMeans"`
}

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {

	// Request identifier in API, can be used to request logs from the support team.
	ApiTraceId *string `json:"apiTraceId,omitempty"`

	// Echoes back the value in the request header for tracking.
	ClientRequestId *string `json:"clientRequestId,omitempty"`

	// The type of the response.
	ResponseType *ResponseType `json:"responseType,omitempty"`
}

// Billing defines model for Billing.
type Billing struct {

	// Model for address information.
	Address *Address `json:"address,omitempty"`

	// Customer birth date.
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// Customer contact information.
	Contact *Contact `json:"contact,omitempty"`

	// Customer ID for billing purpose.
	CustomerId *string `json:"customerId,omitempty"`

	// Billing name.
	Name *string `json:"name,omitempty"`
}

// BillingAddress defines model for BillingAddress.
type BillingAddress struct {

	// City.
	City *string `json:"city,omitempty"`

	// Country.
	Country *string `json:"country,omitempty"`

	// First name.
	FirstName *string `json:"firstName,omitempty"`

	// Last name.
	LastName *string `json:"lastName,omitempty"`

	// Middle name.
	MiddleName *string `json:"middleName,omitempty"`

	// Phone number.
	Phone *Phone `json:"phone,omitempty"`

	// State or province.
	StateProvince *string `json:"stateProvince,omitempty"`

	// First line of street address.
	Street string `json:"street"`

	// Second line of street address.
	Street2 *string `json:"street2,omitempty"`

	// Postal code.
	ZipPostalCode *string `json:"zipPostalCode,omitempty"`
}

// BlockCard defines model for BlockCard.
type BlockCard struct {

	// Use this field to send clear PAN or tokens other than TransArmor Token.
	CardNumber *string `json:"cardNumber,omitempty"`

	// The unique merchant transaction ID.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Client order ID.
	OrderId *string `json:"orderId,omitempty"`
}

// BlockDomain defines model for BlockDomain.
type BlockDomain struct {

	// Use this field to send domain name to be blocked.
	Domain *string `json:"domain,omitempty"`
}

// BlockIPAddress defines model for BlockIPAddress.
type BlockIPAddress struct {

	// Use this field to send IP address to be blocked.
	IpAddress *string `json:"ipAddress,omitempty"`

	// Client order ID.
	OrderId *string `json:"orderId,omitempty"`
}

// BlockName defines model for BlockName.
type BlockName struct {

	// Use this field to send name to be blocked.
	Name *string `json:"name,omitempty"`

	// Client order ID.
	OrderId *string `json:"orderId,omitempty"`
}

// BlockedCardNumber defines model for BlockedCardNumber.
type BlockedCardNumber struct {

	// Use this field to send clear PAN or tokens other than TransArmor Token.
	CardNumber *string `json:"cardNumber,omitempty"`

	// Token identifier.
	TokenIdentifier *string `json:"tokenIdentifier,omitempty"`
}

// BlockedItems defines model for BlockedItems.
type BlockedItems struct {

	// Object that holds information about card that should be blocked.
	BlockCard *BlockCard `json:"blockCard,omitempty"`

	// Object that holds information about domain that should be blocked.
	BlockDomain *BlockDomain `json:"blockDomain,omitempty"`

	// Object that holds information about IP address that should be blocked.
	BlockIPAddress *BlockIPAddress `json:"blockIPAddress,omitempty"`

	// Object that holds information about name that should be blocked.
	BlockName *BlockName `json:"blockName,omitempty"`
}

// Body defines model for Body.
type Body struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// Borders defines model for Borders.
type Borders struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// BrandingStyleConfigurationRequest defines model for BrandingStyleConfigurationRequest.
type BrandingStyleConfigurationRequest struct {
	Stores *[]StoreBrandingStyleConfiguration `json:"stores,omitempty"`
}

// BrandingStyleConfigurationResponse defines model for BrandingStyleConfigurationResponse.
type BrandingStyleConfigurationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema
	Stores *[]BrandingStyleConfigurationResult `json:"stores,omitempty"`
}

// BrandingStyleConfigurationResult defines model for BrandingStyleConfigurationResult.
type BrandingStyleConfigurationResult struct {

	// An optional outlet id for clients that support multiple stores in the same developer app.
	Id *string `json:"id,omitempty"`

	// Status from branding style configuration process.
	Status *string `json:"status,omitempty"`
}

// Button defines model for Button.
type Button struct {
	Hover   *Hover   `json:"hover,omitempty"`
	Primary *Primary `json:"primary,omitempty"`
}

// CarRental defines model for CarRental.
type CarRental struct {

	// The car rental agreement number.
	AgreementNumber *string `json:"agreementNumber,omitempty"`

	// Array containing information about charges other than the rental rate.
	ExtraCharges *[]struct {

		// Additional charge item.
		ChargeItem *string `json:"chargeItem,omitempty"`
	} `json:"extraCharges,omitempty"`

	// Indicates if the transaction is related to a no-show charge.
	NoShowIndicator *bool `json:"noShowIndicator,omitempty"`

	// The date the car rental begins.
	PickupDate *openapi_types.Date `json:"pickupDate,omitempty"`

	// The classification of the rental car.
	RentalClassId *string `json:"rentalClassId,omitempty"`

	// The name of the person renting the car.
	RenterName *string `json:"renterName,omitempty"`

	// The city where the rental ends and the car is returned.
	ReturnCity *string `json:"returnCity,omitempty"`

	// The date the car rental ends and the car is returned.
	ReturnDate *openapi_types.Date `json:"returnDate,omitempty"`
}

// Card defines model for Card.
type Card struct {

	// Use this field to send clear PAN or tokens other than TransArmor Token.
	CardNumber *string `json:"cardNumber,omitempty"`

	// A number that distinguishes between two plastic cards with the same card number in the event of the card being re-issued.
	CardReissuedNumber *string `json:"cardReissuedNumber,omitempty"`

	// The cardholder name as it appears on the card.
	CardholderName *string `json:"cardholderName,omitempty"`

	// CVV present indicator.
	Cvv *string `json:"cvv,omitempty"`

	// Payment method expiration date. Format is MMYYYY.
	ExpDate *string `json:"expDate,omitempty"`

	// The company (usually a bank) that issued the card.
	Issuer *string `json:"issuer,omitempty"`

	// TransArmor token value. Either the token fields or card number field must contain a value.
	TaToken *string `json:"taToken,omitempty"`

	// TransArmor token key to identify the merchant.
	TaTokenKey *string `json:"taTokenKey,omitempty"`
}

// CardFunction defines model for CardFunction.
type CardFunction string

// List of CardFunction
const (
	CardFunction_CREDIT    CardFunction = "CREDIT"
	CardFunction_DEBIT     CardFunction = "DEBIT"
	CardFunction_PREPAID   CardFunction = "PREPAID"
	CardFunction_UNDEFINED CardFunction = "UNDEFINED"
	CardFunction_VOUCHER   CardFunction = "VOUCHER"
)

// CardInfo defines model for CardInfo.
type CardInfo struct {

	// The card brand.
	Brand *string `json:"brand,omitempty"`

	// The product ID of the brand.
	BrandProductId *string `json:"brandProductId,omitempty"`

	// Card function. This field is required when performing transactions for Brazil merchants.
	CardFunction *CardFunction `json:"cardFunction,omitempty"`

	// Indicates whether it is a corporate or non-corporate card.
	CommercialCard *string `json:"commercialCard,omitempty"`

	// The country of the issuer.
	IssuerCountry *string `json:"issuerCountry,omitempty"`

	// The name of the issuer.
	IssuerName *string `json:"issuerName,omitempty"`
}

// CardInfoLookupRequest defines model for CardInfoLookupRequest.
type CardInfoLookupRequest struct {

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`

	// An optional outlet id for clients that support multiple stores in the same developer app.
	StoreId *string `json:"storeId,omitempty"`
}

// CardInfoLookupResponse defines model for CardInfoLookupResponse.
type CardInfoLookupResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// One or more card information retrieved based on BIN.
	CardDetails *[]CardInfo `json:"cardDetails,omitempty"`

	// Request status.
	RequestStatus *string `json:"requestStatus,omitempty"`
}

// CardVerificationRequest defines model for CardVerificationRequest.
type CardVerificationRequest struct {

	// Model for address information.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`
}

// ChinaDomestic defines model for ChinaDomestic.
type ChinaDomestic struct {

	// Use this to indicate the CUP bank ID if known.
	BankId *string `json:"bankId,omitempty"`

	// Use this to indicate the CUP customer ID if known.
	CustomerId *string `json:"customerId,omitempty"`

	// Use this to limit card functions to debit cards.
	LimitCardFunctionToDebit *bool `json:"limitCardFunctionToDebit,omitempty"`

	// Use this as unique identifier of WeChat user which is corresponded to the appid of merchant. The field is only applicable for ChinaDomesticPaymentMethod - brand = WECHAT_DOMESTIC
	OpenId *string `json:"openId,omitempty"`

	// Use this to indicate the product code according to the product category list.
	ProductCode string `json:"productCode"`

	// The product description.
	ProductDescription string `json:"productDescription"`

	// Rate amount in 3 decimal 12 bytes total digit.
	ProductPrice float32 `json:"productPrice"`

	// The quantity.
	ProductQuantity int `json:"productQuantity"`

	// Use this to indicate the product code according to the product category list.
	RedirectURL string `json:"redirectURL"`
}

// ChinaDomesticPaymentMethod defines model for ChinaDomesticPaymentMethod.
type ChinaDomesticPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema
	Brand string `json:"brand"`

	// The payment object for China-domestic transactions. Use this to populate all china domestic payment method details.
	ChinaDomestic ChinaDomestic `json:"chinaDomestic"`
}

// ChinaPnRSaleTransaction defines model for ChinaPnRSaleTransaction.
type ChinaPnRSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment method containing China Domestic information.
	PaymentMethod ChinaDomesticPaymentMethod `json:"paymentMethod"`
}

// ClassicMode defines model for ClassicMode.
type ClassicMode struct {

	// Object contains font properties.
	AmountTitle *FontProperties `json:"amountTitle,omitempty"`

	// Object contains font and color properties.
	Anchor *Properties `json:"anchor,omitempty"`

	// Object contains background color properties.
	BackgroundColor *BackgroundColor `json:"backgroundColor,omitempty"`

	// Object contains font and color properties.
	Buttons *Properties `json:"buttons,omitempty"`

	// Object contains font properties.
	IndividualText *FontProperties `json:"individualText,omitempty"`

	// Object contains font properties.
	Label *FontProperties `json:"label,omitempty"`

	// Object contains configurable style properties for mobile.
	Mobile *Mobile `json:"mobile,omitempty"`

	// Object contains font properties.
	NormalText *FontProperties `json:"normalText,omitempty"`

	// Object contains font properties.
	Superscription *FontProperties `json:"superscription,omitempty"`

	// Object contains font and color properties.
	SystemMessages *Properties `json:"systemMessages,omitempty"`
}

// ClearingDetails defines model for ClearingDetails.
type ClearingDetails struct {

	// Timestamp when the clearing has been processed. The used format is "YYYYMMDDhhmmss".
	BatchTimeStamp *string `json:"batchTimeStamp,omitempty"`

	// The array contains information about the clearing elements.
	ClearingElements *[]ClearingElement `json:"clearingElements,omitempty"`

	// Start receipt number for the clearing process.
	ReceiptNumberFrom *int32 `json:"receiptNumberFrom,omitempty"`

	// End receipt number for the clearing process.
	ReceiptNumberTo *int32 `json:"receiptNumberTo,omitempty"`

	// Trace number for the clearing process.
	TraceNumber *int32 `json:"traceNumber,omitempty"`
}

// ClearingElement defines model for ClearingElement.
type ClearingElement struct {

	// Contains the brand of the card.
	Brand *string `json:"brand,omitempty"`

	// Specifies the amount of clearing elements for a given brand.
	Count *int32 `json:"count,omitempty"`

	// Holds the total clearing value computed for a specific brand.
	Value *int64 `json:"value,omitempty"`
}

// ClientLocale defines model for ClientLocale.
type ClientLocale struct {

	// Country of the client.
	Country string `json:"country"`

	// Language used by client.
	Language string `json:"language"`
}

// ClientRegistration defines model for ClientRegistration.
type ClientRegistration struct {
	// Embedded struct due to allOf(#/components/schemas/FraudRegistration)
	FraudRegistration
	// Embedded fields due to inline allOf schema

	// Defines the type of the original transaction that is being evaluated for the Fraud Score.
	OriginalTransactionType *string `json:"originalTransactionType,omitempty"`
}

// Color defines model for Color.
type Color string

// CombinedMode defines model for CombinedMode.
type CombinedMode struct {

	// Object contains background style properties.
	Background *Background `json:"background,omitempty"`

	// Object contains button style properties.
	Button *Button `json:"button,omitempty"`

	// Object contains logo data.
	Logo *Logo `json:"logo,omitempty"`

	// Object contains text style properties.
	Text *Text `json:"text,omitempty"`
}

// ConnectMode defines model for ConnectMode.
type ConnectMode string

// List of ConnectMode
const (
	ConnectMode_Classic  ConnectMode = "Classic"
	ConnectMode_Combined ConnectMode = "Combined"
)

// Contact defines model for Contact.
type Contact struct {

	// Email address.
	Email *string `json:"email,omitempty"`

	// Fax number.
	Fax *string `json:"fax,omitempty"`

	// Mobile phone number.
	MobilePhone *string `json:"mobilePhone,omitempty"`

	// Primary phone number.
	Phone *string `json:"phone,omitempty"`
}

// Content defines model for Content.
type Content struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// CountryProfile defines model for CountryProfile.
type CountryProfile struct {

	// Country profile.
	Profile *int `json:"profile,omitempty"`
}

// CreatePaymentToken defines model for CreatePaymentToken.
type CreatePaymentToken struct {

	// Decline duplicate payment info if client token is supplied.
	DeclineDuplicates *bool `json:"declineDuplicates,omitempty"`

	// If the token is reusable.
	Reusable *bool `json:"reusable,omitempty"`

	// Client-supplied payment token value. Only applicable for DataVault tokenization scheme.
	Value *string `json:"value,omitempty"`
}

// CurrencyConversion defines model for CurrencyConversion.
type CurrencyConversion struct {

	// Type of currency conversion.
	ConversionType string `json:"conversionType"`

	// Inquiry rate id.
	InquiryRateId string `json:"inquiryRateId"`
}

// CurrencyConversionResponse defines model for CurrencyConversionResponse.
type CurrencyConversionResponse struct {

	// Dynamic Currency Conversion Applied.
	DccApplied *bool `json:"dccApplied,omitempty"`

	// Fields related to Currency Conversion Inquiry.
	ExchangeRateDetails *ExchangeRateDetails `json:"exchangeRateDetails,omitempty"`
}

// Customer defines model for Customer.
type Customer struct {

	// Customer address fields.
	Address *CustomerAddress `json:"address,omitempty"`

	// The customer's year of birth. Format is YYYY.
	DateOfBirth *string `json:"dateOfBirth,omitempty"`

	// Customer's email address.
	Email *string `json:"email,omitempty"`

	// Customer's first name.
	FirstName *string `json:"firstName,omitempty"`

	// The customers gender. Do not set this property if the customer does not specify a gender.
	Gender *string `json:"gender,omitempty"`

	// Unique ID for the customer, if registered. This field is required if the parent object is present.
	Id string `json:"id"`

	// Customer's last name.
	LastName *string `json:"lastName,omitempty"`

	// Customer's middle name.
	MiddleName *string `json:"middleName,omitempty"`

	// The unique ID of the current login session. Must be unique for the customer.
	SessionId *string `json:"sessionId,omitempty"`

	// The timestamp of the customers registration in the merchants platform. Format is YYYY-MM-DD.
	StartDate *string `json:"startDate,omitempty"`

	// A JSON object that can carry any additional information about the customer that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`

	// The username of this customer in the merchants system. This field should contain customer-supplied data if available instead of a generated ID. This field can contain the clients email address if it is also used for authentication purposes.
	Username *string `json:"username,omitempty"`
}

// CustomerAddress defines model for CustomerAddress.
type CustomerAddress struct {
	// Embedded struct due to allOf(#/components/schemas/FraudAddress)
	FraudAddress
	// Embedded fields due to inline allOf schema

	// Phone number.
	Phone *Phone `json:"phone,omitempty"`
}

// DCCExchangeRateRequest defines model for DCCExchangeRateRequest.
type DCCExchangeRateRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ExchangeRateRequest)
	ExchangeRateRequest
	// Embedded fields due to inline allOf schema

	// The bank identification number (BIN) of the card to be used for DCC. The BIN is the first 6-9 digits of the card number.
	Bin string `json:"bin"`
}

// Dcc defines model for Dcc.
type Dcc struct {
	// Embedded struct due to allOf(#/components/schemas/CurrencyConversion)
	CurrencyConversion
	// Embedded fields due to inline allOf schema

	// Indicates whether customer agrees with rate to be used.
	DccApplied bool `json:"dccApplied"`
}

// DecrementalPreAuthFlag defines model for DecrementalPreAuthFlag.
type DecrementalPreAuthFlag bool

// DecryptedApplePay defines model for DecryptedApplePay.
type DecryptedApplePay struct {

	// Payment card number.
	AccountNumber string `json:"accountNumber"`

	// Card brand.
	Brand *string `json:"brand,omitempty"`

	// Name of the cardholder.
	CardholderName *string `json:"cardholderName,omitempty"`

	// The wallet cryptogram from the decrypted data.
	Cryptogram string `json:"cryptogram"`

	// The ECI indicator from the decrypted data.
	EciIndicator string `json:"eciIndicator"`

	// Card expiration date in MMYYYY format.
	Expiration string `json:"expiration"`
}

// DecryptedApplePayWalletPaymentMethod defines model for DecryptedApplePayWalletPaymentMethod.
type DecryptedApplePayWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Decrypted Apple Pay payload.
	DecryptedApplePay DecryptedApplePay `json:"decryptedApplePay"`
}

// DecryptedGooglePay defines model for DecryptedGooglePay.
type DecryptedGooglePay struct {

	// Payment card number.
	AccountNumber string `json:"accountNumber"`

	// Card brand.
	Brand *string `json:"brand,omitempty"`

	// Name of the cardholder.
	CardholderName *string `json:"cardholderName,omitempty"`

	// The wallet cryptogram from the decrypted data.
	Cryptogram string `json:"cryptogram"`

	// The ECI indicator from the decrypted data.
	EciIndicator string `json:"eciIndicator"`

	// Card expiration date in MMYYYY format.
	Expiration string `json:"expiration"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// DecryptedGooglePayWalletPaymentMethod defines model for DecryptedGooglePayWalletPaymentMethod.
type DecryptedGooglePayWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Decrypted Google Pay payload.
	DecryptedGooglePay DecryptedGooglePay `json:"decryptedGooglePay"`
}

// DecryptedSamsungPay defines model for DecryptedSamsungPay.
type DecryptedSamsungPay struct {

	// Payment card number.
	AccountNumber string `json:"accountNumber"`

	// Card brand.
	Brand *string `json:"brand,omitempty"`

	// Name of the cardholder.
	CardholderName *string `json:"cardholderName,omitempty"`

	// The wallet cryptogram from the decrypted data.
	Cryptogram string `json:"cryptogram"`

	// The ECI indicator from the decrypted data.
	EciIndicator string `json:"eciIndicator"`

	// Card expiration date in MMYYYY format.
	Expiration string `json:"expiration"`
}

// DecryptedSamsungPayWalletPaymentMethod defines model for DecryptedSamsungPayWalletPaymentMethod.
type DecryptedSamsungPayWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Decrypted Samsung Pay payload.
	DecryptedSamsungPay DecryptedSamsungPay `json:"decryptedSamsungPay"`
}

// DeleteBrandingStyleConfigurationResponse defines model for DeleteBrandingStyleConfigurationResponse.
type DeleteBrandingStyleConfigurationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Status from delete branding style configuration process.
	Status *string `json:"status,omitempty"`

	// Store ID number.
	StoreId *string `json:"storeId,omitempty"`
}

// Device defines model for Device.
type Device struct {

	// The unique ID of the device. Must be unique for the entire system (not just within a specific merchant or industry).
	DeviceId string `json:"deviceId"`

	// Defines the type of this object.
	DeviceType string `json:"deviceType"`

	// The device's International Mobile Equipment Identity (IMEI) as described in IETF RFC7254.
	Imei *string `json:"imei,omitempty"`

	// The GPS decimal latitude, ranging from (-90.0 to 90.0) where positive numbers indicate locations North of the equator.
	Latitude *float32 `json:"latitude,omitempty"`

	// The GPS decimal longitude, ranging from (-180.0 to 180.0) where positive numbers indicate locations East of the IERS Reference Meridian.
	Longitude *float32 `json:"longitude,omitempty"`

	// A flag indicating that malware was detected on the mobile phone. This flag should only be set to false if a test was performed and the result was negative. Leave unset otherwise.
	MalwareDetected *bool `json:"malwareDetected,omitempty"`

	// The device's manufacturer.
	Manufacturer *string `json:"manufacturer,omitempty"`

	// The device's model name.
	Model *string `json:"model,omitempty"`

	// Information about the networks associated with the device.
	Networks *[]Items `json:"networks,omitempty"`

	// A flag indicating that the device has been altered to allow privileged access to users. This flag should only be set to false if a test was performed and the result was negative. Leave unset otherwise.
	Rooted *bool `json:"rooted,omitempty"`

	// The timezone offset from UTC to the devices timezone configuration, specified in the format +hh:mm.
	TimezoneOffset *string `json:"timezoneOffset,omitempty"`

	// A JSON object that can carry any additional information about the device that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// Disbursement defines model for Disbursement.
type Disbursement struct {

	// The type of disbursement.
	DisbursementType string `json:"disbursementType"`

	// Receiver information for a funding transaction.
	ReceiverInfo ReceiverInfo `json:"receiverInfo"`

	// Sender information for a disbursement transaction.
	SenderInfo SenderInfo `json:"senderInfo"`
}

// DisbursementTransactionType defines model for DisbursementTransactionType.
type DisbursementTransactionType struct {
	// Embedded struct due to allOf(#/components/schemas/Disbursement)
	Disbursement
	// Embedded fields due to inline allOf schema
}

// Document defines model for Document.
type Document struct {

	// Document number.
	Number string `json:"number"`

	// Document type.
	Type string `json:"type"`
}

// DynamicPricing defines model for DynamicPricing.
type DynamicPricing struct {
	// Embedded struct due to allOf(#/components/schemas/CurrencyConversion)
	CurrencyConversion
	// Embedded fields due to inline allOf schema

	// Foreign amount.
	ForeignAmount string `json:"foreignAmount"`

	// The currency code to convert for dynamic pricing in ISO 4217 currency code format.
	ForeignCurrency string `json:"foreignCurrency"`
}

// DynamicPricingExchangeRateRequest defines model for DynamicPricingExchangeRateRequest.
type DynamicPricingExchangeRateRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ExchangeRateRequest)
	ExchangeRateRequest
	// Embedded fields due to inline allOf schema

	// The currency code to convert for dynamic pricing in either numeric or alphabetic ISO 4217 currency code format.
	ForeignCurrency string `json:"foreignCurrency"`
}

// EmailNotificationData defines model for EmailNotificationData.
type EmailNotificationData struct {

	// Use this to enable/disable email notifications.
	EnableNotification *bool `json:"enableNotification,omitempty"`

	// The locale for received notifications.
	Locale *string `json:"locale,omitempty"`

	// The merchant name to be displayed in the email to customer.
	MerchantName *string `json:"merchantName,omitempty"`

	// The email address(es) for receiving transaction notifications.
	ReceiverEmail *string `json:"receiverEmail,omitempty"`

	// The email address for sending transaction notifications to customer.
	SenderEmail *string `json:"senderEmail,omitempty"`
}

// EncryptedApplePay defines model for EncryptedApplePay.
type EncryptedApplePay struct {

	// Base64-encoded value of PKPaymentRequest. Required only if applicationDataHash is present.
	ApplicationData *string `json:"applicationData,omitempty"`

	// The encrypted wallet payload.
	Data string `json:"data"`

	// Additional version-dependent information used to decrypt and verify the payment.
	Header struct {

		// Merchant supplied information about the payment request. Contains Base64-encoded SHA256 hash of the applicationData property of the original PKPaymentRequest. Note - applicationData from PaymentData of PKPaymentToken Refer to Apple Pay documentation.
		ApplicationDataHash *string `json:"applicationDataHash,omitempty"`

		// Temporary key for generating shared secret from a device.
		EphemeralPublicKey string `json:"ephemeralPublicKey"`

		// Hash of the X.509 encoded public key bytes of the merchant’s certificate.
		PublicKeyHash string `json:"publicKeyHash"`

		// Transaction identifier, generated on the device.
		TransactionId string `json:"transactionId"`
	} `json:"header"`

	// The merchant ID assigned by the wallet provider.
	MerchantId string `json:"merchantId"`

	// Signature of the payment and header data.
	Signature string `json:"signature"`

	// Version information about the payment token.
	Version *string `json:"version,omitempty"`
}

// EncryptedApplePayWalletPaymentMethod defines model for EncryptedApplePayWalletPaymentMethod.
type EncryptedApplePayWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Encrypted Apple Pay payload.
	EncryptedApplePay EncryptedApplePay `json:"encryptedApplePay"`
}

// EncryptedGooglePay defines model for EncryptedGooglePay.
type EncryptedGooglePay struct {

	// The encrypted wallet payload.
	Data struct {

		// The encrypted message containing the actual payment information as well as additional security fields.
		EncryptedMessage string `json:"encryptedMessage"`

		// The ephemeral public key associated with the private key to encrypt the message in uncompressed point format.
		EphemeralPublicKey string `json:"ephemeralPublicKey"`

		// MAC of the encryptedMessage.
		Tag string `json:"tag"`
	} `json:"data"`

	// Signature for verifying that the message comes from Google. The signature is created using ECDSA.
	Signature string `json:"signature"`

	// Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1.
	Version string `json:"version"`
}

// EncryptedGooglePayWalletPaymentMethod defines model for EncryptedGooglePayWalletPaymentMethod.
type EncryptedGooglePayWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Encrypted Google Pay payload.
	EncryptedGooglePay EncryptedGooglePay `json:"encryptedGooglePay"`
}

// EncryptedSamsungPay defines model for EncryptedSamsungPay.
type EncryptedSamsungPay struct {

	// The encrypted wallet payload.
	Data string `json:"data"`

	// Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1.
	Version *string `json:"version,omitempty"`
}

// EncryptedSamsungPayWalletPaymentMethod defines model for EncryptedSamsungPayWalletPaymentMethod.
type EncryptedSamsungPayWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Encrypted Samsung Pay payload.
	EncryptedSamsungPay EncryptedSamsungPay `json:"encryptedSamsungPay"`
}

// EndpointResponse defines model for EndpointResponse.
type EndpointResponse struct {

	// Defines the batch number of an endpoint clearing process.
	BatchNumber *string `json:"batchNumber,omitempty"`

	// Specifies the identifier of an endpoint.
	EndpointID *string `json:"endpointID,omitempty"`

	// Defines the clearing status of an endpoint.
	Status *string `json:"status,omitempty"`
}

// Error defines model for Error.
type Error struct {

	// Uniquely identifies an error condition. Client applications need to read and handle errors based on this.
	Code *string `json:"code,omitempty"`

	// Detailed information about message format errors.
	Details *[]struct {

		// The property or attribute associated with the error.
		Field *string `json:"field,omitempty"`

		// Information specific to a property or attribute.
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// A generic description of the error condition.
	Message *string `json:"message,omitempty"`
}

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {

	// Error code.
	Code *string `json:"code,omitempty"`

	// Error description.
	Description *string `json:"description,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Error information.
	Error *Error `json:"error,omitempty"`
}

// ExchangeRateDetails defines model for ExchangeRateDetails.
type ExchangeRateDetails struct {

	// Dcc offered.
	DccOffered *bool `json:"dccOffered,omitempty"`

	// Exchange rate.
	ExchangeRate *string `json:"exchangeRate,omitempty"`

	// Exchange rate source name.
	ExchangeRateSourceName *string `json:"exchangeRateSourceName,omitempty"`

	// Exchange rate source timestamp. The used format is "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
	ExchangeRateSourceTimestamp *string `json:"exchangeRateSourceTimestamp,omitempty"`

	// Expiration timestamp. The used format is "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
	ExpirationTimestamp *string `json:"expirationTimestamp,omitempty"`

	// Foreign amount.
	ForeignAmount *string `json:"foreignAmount,omitempty"`

	// Foreign currency in alphabetic ISO 4217 currency code format.
	ForeignCurrency *string `json:"foreignCurrency,omitempty"`

	// Inquiry rate ID.
	InquiryRateId *string `json:"inquiryRateId,omitempty"`

	// Margin rate percentage.
	MarginRatePercentage *string `json:"marginRatePercentage,omitempty"`
}

// ExchangeRateRequest defines model for ExchangeRateRequest.
type ExchangeRateRequest struct {

	// The original amount of the merchant currency for calculation.
	BaseAmount float32 `json:"baseAmount"`

	// Object name of the exchange rate request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`
}

// ExchangeRateResponse defines model for ExchangeRateResponse.
type ExchangeRateResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Fields related to Currency Conversion Inquiry.
	ExchangeRateDetails *ExchangeRateDetails `json:"exchangeRateDetails,omitempty"`

	// The response transaction ID.
	IpgTransactionId *string `json:"ipgTransactionId,omitempty"`

	// Time of the request. The used format is "yyyy-MM-dd'T'HH:mm:ss.SSSXXX".
	RequestTime *string `json:"requestTime,omitempty"`
}

// Expiration defines model for Expiration.
type Expiration struct {

	// Month of the card expiration date in MM format.
	Month string `json:"month"`

	// Year of the card expiration date in YY format.
	Year string `json:"year"`
}

// FontFace defines model for FontFace.
type FontFace string

// List of FontFace
const (
	FontFace_arial           FontFace = "arial"
	FontFace_courier_new     FontFace = "courier new"
	FontFace_times_new_roman FontFace = "times new roman"
	FontFace_trebuchet_ms    FontFace = "trebuchet ms"
	FontFace_verdana         FontFace = "verdana"
)

// FontProperties defines model for FontProperties.
type FontProperties struct {

	// Hexadecimal color value.
	FontColor *Color `json:"fontColor,omitempty"`

	// Font face property.
	FontFace *FontFace `json:"fontFace,omitempty"`

	// Font size property.
	FontSize *FontSize `json:"fontSize,omitempty"`

	// Font weight property.
	FontWeight *FontWeight `json:"fontWeight,omitempty"`
}

// FontSize defines model for FontSize.
type FontSize string

// FontWeight defines model for FontWeight.
type FontWeight string

// List of FontWeight
const (
	FontWeight_bold   FontWeight = "bold"
	FontWeight_normal FontWeight = "normal"
)

// Footer defines model for Footer.
type Footer struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// FraudAddress defines model for FraudAddress.
type FraudAddress struct {

	// City.
	City *string `json:"city,omitempty"`

	// Country.
	Country string `json:"country"`

	// State or province.
	StateProvince *string `json:"stateProvince,omitempty"`

	// First line of street address.
	Street string `json:"street"`

	// Second line of street address.
	Street2 *string `json:"street2,omitempty"`

	// Postal code.
	ZipPostalCode string `json:"zipPostalCode"`
}

// FraudOrder defines model for FraudOrder.
type FraudOrder struct {

	// The URL to the merchant's management system, for reporting and analysis.
	DetailsUrl *string `json:"detailsUrl,omitempty"`

	// The list of items included in the order.
	Items *[]FraudOrderItems `json:"items,omitempty"`

	// The address where the items in this order should be shipped to.
	ShipToAddress *ShipToAddress `json:"shipToAddress,omitempty"`

	// A JSON object that can carry any additional information about the order that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// FraudOrderItems defines model for FraudOrderItems.
type FraudOrderItems struct {

	// The categories that this product belongs to.
	Categories *[][]string `json:"categories,omitempty"`

	// The URL to the merchant's management system, for reporting and analysis.
	DetailsUrl *string `json:"detailsUrl,omitempty"`

	// A unique ID associated with the product. Must be unique within the merchant's system.
	Id *string `json:"id,omitempty"`

	// A name or short description of the product.
	Name *string `json:"name,omitempty"`

	// The unit in which the product is sold (e.g. litre, kilogram, etc). Leave empty if the product is sold as a complete unit.
	Quantity *string `json:"quantity,omitempty"`

	// The number of units sold. Set to 1 if there is only one unit of the item. Leave empty if the quantity is unknown at the time of the request.
	Unit *string `json:"unit,omitempty"`

	// The price per unit.
	UnitPrice *string `json:"unitPrice,omitempty"`

	// A JSON object that can carry any additional information about the order that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// FraudRegistration defines model for FraudRegistration.
type FraudRegistration struct {

	// Customer model for customers registered at merchant's website.
	Customer Customer `json:"customer"`

	// The device where this transaction originated.
	Device *FraudRegistrationDevice `json:"device,omitempty"`

	// The merchant where this transaction occurred.
	Merchant Merchant `json:"merchant"`

	// Merchant reference code. Used by FirstAPI and reflected in settlement records and webhook notifications. Typically, the merchantRef field is the purchase order number or unique sequence value associated to a given transaction.
	MerchantRef *string `json:"merchantRef,omitempty"`

	// Type of transaction merchant wants to process.
	TransactionType string `json:"transactionType"`

	// A JSON object that can carry any additional information that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// FraudRegistrationCard defines model for FraudRegistrationCard.
type FraudRegistrationCard struct {

	// Use this field to send clear PAN or tokens other than TransArmor Token.
	CardNumber *string `json:"cardNumber,omitempty"`

	// A number that distinguishes between two plastic cards with the same card number in the event of the card being re-issued.
	CardReissuedNumber *string `json:"cardReissuedNumber,omitempty"`

	// The cardholder name as it appears on the card.
	CardholderName *string `json:"cardholderName,omitempty"`

	// CVV present indicator.
	CvvPresent *string `json:"cvvPresent,omitempty"`

	// Payment method expiration date. Format is MMYYYY.
	ExpDate *string `json:"expDate,omitempty"`

	// The company (usually a bank) that issued the card.
	Issuer *string `json:"issuer,omitempty"`
}

// FraudRegistrationDevice defines model for FraudRegistrationDevice.
type FraudRegistrationDevice struct {

	// The unique ID of the device. Must be unique for the entire system (not just within a specific merchant or industry).
	DeviceId string `json:"deviceId"`

	// Defines the type of this object.
	DeviceType string `json:"deviceType"`

	// The device's International Mobile Equipment Identity (IMEI) as described in IETF RFC7254.
	Imei *string `json:"imei,omitempty"`

	// The GPS decimal latitude, ranging from (-90.0 to 90.0) where positive numbers indicate locations North of the equator.
	Latitude *float32 `json:"latitude,omitempty"`

	// The GPS decimal longitude, ranging from (-180.0 to 180.0) where positive numbers indicate locations East of the IERS Reference Meridian.
	Longitude *float32 `json:"longitude,omitempty"`

	// A flag indicating that malware was detected on the mobile phone. This flag should only be set to false if a test was performed and the result was negative. Leave unset otherwise.
	MalwareDetected *bool `json:"malwareDetected,omitempty"`

	// The device's manufacturer.
	Manufacturer *string `json:"manufacturer,omitempty"`

	// The device's model name.
	Model *string `json:"model,omitempty"`

	// Information about the networks associated with the device.
	Networks *[]FraudRegistrationDeviceItems `json:"networks,omitempty"`

	// A flag indicating that the device has been altered to allow privileged access to users. This flag should only be set to false if a test was performed and the result was negative. Leave unset otherwise.
	Rooted *bool `json:"rooted,omitempty"`

	// The timezone offset from UTC to the devices timezone configuration, specified in the format +hh:mm.
	TimezoneOffset *string `json:"timezoneOffset,omitempty"`

	// A JSON object that can carry any additional information about the device that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// FraudRegistrationDeviceItems defines model for FraudRegistrationDeviceItems.
type FraudRegistrationDeviceItems struct {

	// The Wi-Fi networks Basic Service Set Identifier (BSSID).
	Bssid *string `json:"bssid,omitempty"`

	// The IPv4 or IPv6 address of the device if the network assigned one.
	Ip *string `json:"ip,omitempty"`

	// The MAC address of the device that is connected to the Wi-Fi network.
	Mac *string `json:"mac,omitempty"`

	// Defines the type of network associated with the device.
	NetworkType string `json:"networkType"`

	// The Wi-Fi networks Service Set Identifier (SSID).
	Ssid *string `json:"ssid,omitempty"`

	// A JSON object that can carry any additional information about the network that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// FraudRegistrationError defines model for FraudRegistrationError.
type FraudRegistrationError struct {
	Messages *[]ErrorMessage `json:"messages,omitempty"`
}

// FraudRegistrationResponse defines model for FraudRegistrationResponse.
type FraudRegistrationResponse struct {

	// Error occurred during the registration.
	Error *FraudRegistrationError `json:"Error,omitempty"`

	// The value used to track the transaction.
	CorrelationId *string `json:"correlationId,omitempty"`

	// Fraud likelihood assessment consisting of a score, associated warning(s), and explanation(s) of score received.
	FraudScore *FraudScore `json:"fraudScore,omitempty"`

	// Status of the transaction. Valid values are 'Not Processed' and 'Scored successfully'
	TransactionStatus *string `json:"transactionStatus,omitempty"`

	// The transactionType provided in request.
	TransactionType *string `json:"transactionType,omitempty"`

	// If status returned is "failure", input validation errors occurred. Please refer to the "Errors Section" for more info. Valid values are 'success' and 'failed'.
	ValidationStatus *string `json:"validationStatus,omitempty"`
}

// FraudScore defines model for FraudScore.
type FraudScore struct {

	// Explanation of the fraud score applied consisting of a description, type of the explanation, and rule (if applicable).
	Explanations *FraudScoreExplanation `json:"explanations,omitempty"`

	// The score attributed to this request by our machine learning system, ranging from 0 (less likely to be fraud) to 1000 (more likely to be fraud).
	RecommendedDecision *string `json:"recommendedDecision,omitempty"`

	// The score attributed to this request by our machine learning system, ranging from 0 (less likely to be fraud) to 1000 (more likely to be fraud).
	Score *string `json:"score,omitempty"`

	// A list of non-critical warnings raised while processing the request. Warnings included in this list will have integration and data-quality related messages.
	Warnings *[]string `json:"warnings,omitempty"`
}

// FraudScoreExplanation defines model for FraudScoreExplanation.
type FraudScoreExplanation []struct {

	// Description of the fraud score explanation.
	Description *string `json:"description,omitempty"`

	// ID of the rule being triggered.
	Rule *string `json:"rule,omitempty"`

	// Type of the explanation (model or rule).
	Type *string `json:"type,omitempty"`
}

// FraudSettings defines model for FraudSettings.
type FraudSettings struct {

	// Object that holds information about items that should be blocked.
	BlockedItems *BlockedItems `json:"blockedItems,omitempty"`

	// Object that holds information about country.
	CountryProfile *CountryProfile `json:"countryProfile,omitempty"`

	// Object that holds information about lockout times.
	LockoutTime           *LockoutTime             `json:"lockoutTime,omitempty"`
	MaximumPurchaseAmount *[]MaximumPurchaseAmount `json:"maximumPurchaseAmount,omitempty"`
}

// FraudSettingsResponse defines model for FraudSettingsResponse.
type FraudSettingsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// List of blocked card numbers.
	BlockedCardNumbers *[]BlockedCardNumber `json:"blockedCardNumbers,omitempty"`

	// List of blocked fraud domain names.
	BlockedDomainNames *[]string `json:"blockedDomainNames,omitempty"`

	// List of blocked fraud IP address/Class C.
	BlockedIpOrClassCAddresses *[]string `json:"blockedIpOrClassCAddresses,omitempty"`

	// List of blocked fraud names.
	BlockedNames *[]string `json:"blockedNames,omitempty"`

	// Country profile.
	CountryProfile *string `json:"countryProfile,omitempty"`

	// Object that holds information about lockout times.
	LockoutTime *LockoutTime `json:"lockoutTime,omitempty"`

	// Maximum purchase amount limit.
	MaximumPurchaseAmount *[]MaximumPurchaseAmount `json:"maximumPurchaseAmount,omitempty"`

	// The outlet ID.
	StoreId *string `json:"storeId,omitempty"`
}

// Frequency defines model for Frequency.
type Frequency struct {

	// Rate of frequency.
	Every int32 `json:"every"`

	// Unit which defines the frequency.
	Unit string `json:"unit"`
}

// FundingTransactionType defines model for FundingTransactionType.
type FundingTransactionType struct {
	// Embedded struct due to allOf(#/components/schemas/Disbursement)
	Disbursement
	// Embedded fields due to inline allOf schema
}

// Header defines model for Header.
type Header struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// Hover defines model for Hover.
type Hover struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// IdInfo defines model for IdInfo.
type IdInfo struct {

	// Identification data.
	IdData *string `json:"idData,omitempty"`

	// Identification type.
	IdType *string `json:"idType,omitempty"`
}

// IndustrySpecificExtensions defines model for IndustrySpecificExtensions.
type IndustrySpecificExtensions struct {

	// Additional data specific to the airline industry.
	Airline *Airline `json:"airline,omitempty"`

	// Additional data specific to the car rental industry.
	CarRental *CarRental `json:"carRental,omitempty"`

	// Additional data specific to the lodging/hotel industry.
	Lodging *Lodging `json:"lodging,omitempty"`

	// The group MCC (Merchant Category Code) 6012
	Mcc6012 *Mcc6012 `json:"mcc6012,omitempty"`
}

// InitiateClearingResponse defines model for InitiateClearingResponse.
type InitiateClearingResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Contains clearing related response information.
	ClearingDetails *ClearingDetails `json:"clearingDetails,omitempty"`

	// The array holds response information of the involved endpoints.
	EndpointResponses *[]EndpointResponse `json:"endpointResponses,omitempty"`

	// Request status. If it is anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.
	RequestStatus *string `json:"requestStatus,omitempty"`
}

// InstallmentOptions defines model for InstallmentOptions.
type InstallmentOptions struct {

	// The number of months the first installment payment will be delayed.
	InstallmentDelayMonths *int32 `json:"installmentDelayMonths,omitempty"`

	// Indicates whether the installment interest amount has been applied.
	InstallmentsInterest *bool `json:"installmentsInterest,omitempty"`

	// Indicates if the merchant supports merchant advice code (MAC) in order to receive table 55 code for a declined recurring transaction.
	MerchantAdviceCodeSupported *bool `json:"merchantAdviceCodeSupported,omitempty"`

	// Number of installments for a sale transaction if the customer pays the total amount in multiple transactions.
	NumberOfInstallments *int32 `json:"numberOfInstallments,omitempty"`

	// The type of recurring payment.
	RecurringType *string `json:"recurringType,omitempty"`
}

// IssuerResponse defines model for IssuerResponse.
type IssuerResponse struct {

	// The verification response code, as sent by the verification system.
	Code string `json:"code"`

	// An identifier of the system/specification from which the code was received, and how the status was derived.
	Scheme string `json:"scheme"`

	// The interpretation of the response code. Valid values are "approved" - The verification was conducted and is approved. "declined" - The verification was conducted and is not approved. "disabled" - The verification was not conducted because it was not requested or disabled in the verification. "unknown" - The verification was attempted but it failed due to some system error (e.g. timeout).
	Status *string `json:"status,omitempty"`
}

// Items defines model for Items.
type Items struct {

	// The Wi-Fi networks Basic Service Set Identifier (BSSID).
	Bssid *string `json:"bssid,omitempty"`

	// The network carrier name.
	CarrierName *string `json:"carrierName,omitempty"`

	// The Cell ID (CID) is identifier for a specific Base Transceiver Station (BTS) within a specific Location Area Code (LAC).
	CellId *string `json:"cellId,omitempty"`

	// The IPv4 or IPv6 address of the device if the network assigned one.
	Ip *string `json:"ip,omitempty"`

	// The Location Area Code (LAC) is a 16-bit identifier for a region that is covered by a set of network antennas.
	LocationAreaCode *string `json:"locationAreaCode,omitempty"`

	// The MAC address of the device that is connected to the Wi-Fi network.
	Mac *string `json:"mac,omitempty"`

	// The Mobile Country Code (MCC) as described in the ITUs E.212 specification.
	MobileCountryCode *string `json:"mobileCountryCode,omitempty"`

	// The Mobile Network Code (MNC) as described in the ITUs E.212 specification.
	MobileNetworkCode *string `json:"mobileNetworkCode,omitempty"`

	// Defines the type of network associated with the device.
	NetworkType string `json:"networkType"`

	// The devices primary phone number. This value should be supplied directly without any transformation (e.g. removal of spaces, hyphens or parentheses). If this data is available in segregated fields, it should be concatenated using a blank space (" ") as a separator.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// The Wi-Fi networks Service Set Identifier (SSID).
	Ssid *string `json:"ssid,omitempty"`

	// An identifier of the network standard used.
	Standard *string `json:"standard,omitempty"`

	// The Mobile Subscription Identification Number code (MSIN) as described in the ITUs E.212 specification.
	SubscriptionIdentificationNumber *string `json:"subscriptionIdentificationNumber,omitempty"`

	// A JSON object that can carry any additional information about the network that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// Location defines model for Location.
type Location struct {

	// Free-text field to describe a hierarchy the merchant would like to provide.
	Hierarchy *string `json:"hierarchy,omitempty"`

	// The unique ID of this location.
	LocationId *string `json:"locationId,omitempty"`

	// Address fields.
	MerchantAddress *FraudAddress `json:"merchantAddress,omitempty"`

	// The timezone offset from UTC to the merchants timezone configuration, specified in the format +hh:mm.
	TimezoneOffset *string `json:"timezoneOffset,omitempty"`

	// A JSON object that can carry any additional information about the location that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// LockoutTime defines model for LockoutTime.
type LockoutTime struct {

	// Auto-lockout time.
	AutoLockoutTime *int `json:"autoLockoutTime,omitempty"`

	// Duplicate lockout time.
	DuplicateLockoutTime *int `json:"duplicateLockoutTime,omitempty"`
}

// Lodging defines model for Lodging.
type Lodging struct {

	// Date of arrival.
	ArrivalDate *openapi_types.Date `json:"arrivalDate,omitempty"`

	// Date of departure.
	DepartureDate *openapi_types.Date `json:"departureDate,omitempty"`

	// Information about charges other than base lodging.
	ExtraCharges *[]struct {
		ChargeItem *string `json:"chargeItem,omitempty"`
	} `json:"extraCharges,omitempty"`

	// Portfolio number.
	FolioNumber *string `json:"folioNumber,omitempty"`

	// Indicates if the transaction is associated with a delayed or no-show penalty.
	NoShowIndicator *bool `json:"noShowIndicator,omitempty"`
}

// Logo defines model for Logo.
type Logo struct {

	// Base64 image data.
	Data []byte `json:"data"`

	// The filename of the uploaded logo.
	Filename string `json:"filename"`

	// Define position of logo.
	Position string `json:"position"`
}

// Loyalty defines model for Loyalty.
type Loyalty struct {

	// The balance of the loyalty program account in a program specific currency (e.g. points).
	Balance *float32 `json:"balance,omitempty"`

	// A unique ID associated with the loyalty program account. Must be unique within the merchants system. Depending on loyalty programs the account might also serve as a credit/bank account. If this is the case the ID must be not be the PAN.
	Id *string `json:"id,omitempty"`

	// A string that identifies the program in which the customer is enrolled if the merchant supports several programs or levels.
	Program *string `json:"program,omitempty"`
}

// MasterpassWalletPaymentMethod defines model for MasterpassWalletPaymentMethod.
type MasterpassWalletPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/WalletPaymentMethod)
	WalletPaymentMethod
	// Embedded fields due to inline allOf schema

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`

	// Masterpass Wallet ID.
	WalletId string `json:"walletId"`
}

// MaximumPurchaseAmount defines model for MaximumPurchaseAmount.
type MaximumPurchaseAmount struct {

	// Currency in alphabetic ISO 4217 currency code format.
	Currency string `json:"currency"`

	// Maximum purchase amount limit.
	MaxAmount string `json:"maxAmount"`
}

// Mcc6012 defines model for Mcc6012.
type Mcc6012 struct {

	// The first six digits of the primary account number.
	AccountFirst6 *string `json:"accountFirst6,omitempty"`

	// The last four digits of the primary account number.
	AccountLast4 *string `json:"accountLast4,omitempty"`

	// The account number where the primary account number is not a card.
	AccountNum *string `json:"accountNum,omitempty"`

	// The date of birth of the cardholder (YYYYMMDD).
	DateOfBirth *string `json:"dateOfBirth,omitempty"`

	// The postal code of the cardholder.
	PostCode *string `json:"postCode,omitempty"`

	// Surname or last name of the card holder.
	Surname *string `json:"surname,omitempty"`
}

// Merchant defines model for Merchant.
type Merchant struct {

	// The specific location (e.g. store or station) where the transaction takes place.
	Location *Location `json:"location,omitempty"`

	// The 4-digit Merchant Category Code. The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.
	Mcc *string `json:"mcc,omitempty"`

	// The unique ID of this merchant. Must be unique for the entire system (not just within a specific industry).
	MerchantUniqueId string `json:"merchantUniqueId"`

	// A JSON object that can carry any additional information about the merchant that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// Method defines model for Method.
type Method struct {

	// Properties for the payment method.
	Card Card `json:"card"`

	// The address that should be used to send billing information for this payment method.
	MethodAlias *string `json:"methodAlias,omitempty"`

	// The unique ID of this payment method if it was previously registered with a registration/method or if it is currently being registered. Must be unique for the entire system (not just within a specific merchant or industry). Mandatory if being used inside a registration/method.
	MethodId *string `json:"methodId,omitempty"`

	// Unique ID for the payment method type.
	MethodType string `json:"methodType"`

	// The wallet provider. This field should be normalized before sending through the API.
	Provider *string `json:"provider,omitempty"`

	// A JSON object that can carry any additional information about the method that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// Mobile defines model for Mobile.
type Mobile struct {
	HeaderArea *struct {

		// Hexadecimal color value.
		Color *Color `json:"color,omitempty"`
	} `json:"headerArea,omitempty"`

	// check if logo should be shown
	ShowLogo *bool `json:"showLogo,omitempty"`
}

// Order defines model for Order.
type Order struct {

	// Merchant supplied tracking numbers.
	AdditionalDetails *AdditionalDetails `json:"additionalDetails,omitempty"`

	// Bancontact QR information.
	BancontactQR *BancontactQR `json:"bancontactQR,omitempty"`

	// Customer billing information.
	Billing *Billing `json:"billing,omitempty"`

	// Industry-specific information.
	IndustrySpecificExtensions *IndustrySpecificExtensions `json:"industrySpecificExtensions,omitempty"`

	// Indicates that the total sum payable is divided for payment at successive fixed times.
	InstallmentOptions *InstallmentOptions `json:"installmentOptions,omitempty"`

	// Client Order ID if supplied by client.
	OrderId *string `json:"orderId,omitempty"`

	// Purchase card details.
	PurchaseCard *PurchaseCards `json:"purchaseCard,omitempty"`

	// Shipping information.
	Shipping *Shipping `json:"shipping,omitempty"`

	// Identifying information about a merchant which appears on buyer's credit/debit card statements.
	SoftDescriptor *SoftDescriptor `json:"softDescriptor,omitempty"`
}

// OrderErrorResponse defines model for OrderErrorResponse.
type OrderErrorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/OrderResponse)
	OrderResponse
	// Embedded fields due to inline allOf schema

	// Error information.
	Error *Error `json:"error,omitempty"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Merchant supplied tracking numbers.
	AdditionalDetails *AdditionalDetails `json:"additionalDetails,omitempty"`

	// Customer billing information.
	Billing *Billing `json:"billing,omitempty"`

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// Shipping information.
	Shipping *Shipping `json:"shipping,omitempty"`

	// Required for some payment methods (for example, Klarna).
	Transactions *[]TransactionResponse `json:"transactions,omitempty"`
}

// PayPal defines model for PayPal.
type PayPal struct {

	// Email address of the recipient.
	RecipientEmail string `json:"recipientEmail"`
}

// PayPalPaymentMethod defines model for PayPalPaymentMethod.
type PayPalPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema

	// The payment object for PayPal transactions.
	PayPal PayPal `json:"payPal"`
}

// Payment defines model for Payment.
type Payment struct {

	// The method in which the card information entered the system.
	EntryMethod string `json:"entryMethod"`

	// The actual approved amount. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization). For transaction/authorization this amount refers to the amount that was locked on the card-holders account.
	IssuerApprovedAmount *string `json:"issuerApprovedAmount,omitempty"`

	// The payment methods account balance if available. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization).
	IssuerCardBalance *string `json:"issuerCardBalance,omitempty"`

	// The issuers response to the payment request. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization).
	IssuerResponse *IssuerResponse `json:"issuerResponse,omitempty"`

	// Info about the payment method.
	Method Method `json:"method"`

	// Defines the type of the payment.
	PaymentType string `json:"paymentType"`

	// Indicates if the cards Personal Identification Number was supplied.
	PinPresent bool `json:"pinPresent"`

	// A JSON object that carries any additional information that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`

	// The result of the 3DS (3D Secure) check.
	Verification3ds *Verification3ds `json:"verification3ds,omitempty"`

	// The result of the AVS (Address Verification System) check.
	VerificationAvs *VerificationAvs `json:"verificationAvs,omitempty"`

	// The result of the CVV (Card Verification Value, or Card Security Code) check.
	VerificationCvv *VerificationCvv `json:"verificationCvv,omitempty"`
}

// PaymentCard defines model for PaymentCard.
type PaymentCard struct {

	// The payment card BIN.
	Bin *string `json:"bin,omitempty"`

	// Required only if using dual branded card.
	Brand *string `json:"brand,omitempty"`

	// Card function. This field is required when performing transactions for Brazil merchants.
	CardFunction *CardFunction `json:"cardFunction,omitempty"`

	// Name of the cardholder.
	CardholderName *string `json:"cardholderName,omitempty"`

	// Required for normal transactions except for payment with 'RECURRING' flags.
	ExpiryDate *Expiration `json:"expiryDate,omitempty"`

	// The last 4 numbers of a payment card.
	Last4 *string `json:"last4,omitempty"`

	// Payment card number.
	Number string `json:"number"`

	// Card verification value/number.
	SecurityCode *string `json:"securityCode,omitempty"`
}

// PaymentCardCreditTransaction defines model for PaymentCardCreditTransaction.
type PaymentCardCreditTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
	CurrencyConversion *CurrencyConversion `json:"currencyConversion,omitempty"`

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`
}

// PaymentCardDisbursementTransaction defines model for PaymentCardDisbursementTransaction.
type PaymentCardDisbursementTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Use this model to create a payment token.
	CreateToken *CreatePaymentToken `json:"createToken,omitempty"`

	// Disbursement information. Abstract class, do not use this class directly, use one of its children: FundingTransactionType, DisbursementTransactionType.
	Disbursement Disbursement `json:"disbursement"`

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentCardForcedTicketTransaction defines model for PaymentCardForcedTicketTransaction.
type PaymentCardForcedTicketTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`

	// Stores the six-digit reference number you have received as the result of a successful external authorization (e.g. by phone). The gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.
	ReferenceNumber string `json:"referenceNumber"`
}

// PaymentCardInfoLookupRequest defines model for PaymentCardInfoLookupRequest.
type PaymentCardInfoLookupRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AccountInfoLookupRequest)
	AccountInfoLookupRequest
	// Embedded fields due to inline allOf schema

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`
}

// PaymentCardPayerAuthTransaction defines model for PaymentCardPayerAuthTransaction.
type PaymentCardPayerAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
	CurrencyConversion *CurrencyConversion `json:"currencyConversion,omitempty"`

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`
}

// PaymentCardPaymentMethod defines model for PaymentCardPaymentMethod.
type PaymentCardPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`

	// Payment facilitator details provided by the merchant.
	PaymentFacilitator *PaymentFacilitator `json:"paymentFacilitator,omitempty"`
}

// PaymentCardPaymentTokenUpdateRequest defines model for PaymentCardPaymentTokenUpdateRequest.
type PaymentCardPaymentTokenUpdateRequest struct {

	// List of payment tokens to be updated in the request.
	PaymentTokens []UpdatePaymentToken `json:"paymentTokens"`

	// Object name of tokenization request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`
}

// PaymentCardPaymentTokenizationRequest defines model for PaymentCardPaymentTokenizationRequest.
type PaymentCardPaymentTokenizationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentTokenizationRequest)
	PaymentTokenizationRequest
	// Embedded fields due to inline allOf schema

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`
}

// PaymentCardPreAuthTransaction defines model for PaymentCardPreAuthTransaction.
type PaymentCardPreAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Request authentication of the payment card to verify the cardholder and be eligible for liability shift. An AuthenticationRequest should not be submitted with in the same request as an AuthenticationResult. Abstract class, do not use this class directly, use one of its children.
	AuthenticationRequest *AuthenticationRequest `json:"authenticationRequest,omitempty"`

	// Submit the result of 3DS authentication managed outside of the gateway. An AuthenticationResult should not be submitted within the same request as an AuthenticationRequest. Abstract class, do not use this class directly, use one of its children.
	AuthenticationResult *AuthenticationResult `json:"authenticationResult,omitempty"`

	// Use this model to create a payment token.
	CreateToken *CreatePaymentToken `json:"createToken,omitempty"`

	// This flag can only be used in a preAuth transaction that updates the amount of a previous preAuth transaction to either increase the preAuth amount (DecrementalPreAuthFlag = false) or decrease the preAuth amount (DecrementalPreAuthFlag = true).
	DecrementalFlag *DecrementalPreAuthFlag `json:"decrementalFlag,omitempty"`

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`

	// Settle with multiple sub-merchants, sale and preAuth only.
	SettlementSplit *SettlementSplit `json:"settlementSplit,omitempty"`

	// Split-shipment related information, in order to reuse the same authorization.
	SplitShipment *SplitShipment `json:"splitShipment,omitempty"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentCardSaleTransaction defines model for PaymentCardSaleTransaction.
type PaymentCardSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Request authentication of the payment card to verify the cardholder and be eligible for liability shift. An AuthenticationRequest should not be submitted with in the same request as an AuthenticationResult. Abstract class, do not use this class directly, use one of its children.
	AuthenticationRequest *AuthenticationRequest `json:"authenticationRequest,omitempty"`

	// Submit the result of 3DS authentication managed outside of the gateway. An AuthenticationResult should not be submitted within the same request as an AuthenticationRequest. Abstract class, do not use this class directly, use one of its children.
	AuthenticationResult *AuthenticationResult `json:"authenticationResult,omitempty"`

	// Use this model to create a payment token.
	CreateToken *CreatePaymentToken `json:"createToken,omitempty"`

	// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
	CurrencyConversion *CurrencyConversion `json:"currencyConversion,omitempty"`

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`

	// Settle with multiple sub-merchants, sale and preAuth only.
	SettlementSplit *SettlementSplit `json:"settlementSplit,omitempty"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentCardVerificationRequest defines model for PaymentCardVerificationRequest.
type PaymentCardVerificationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AccountVerificationRequest)
	AccountVerificationRequest
	// Embedded fields due to inline allOf schema

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`
}

// PaymentDevice defines model for PaymentDevice.
type PaymentDevice struct {

	// The card brand.
	Brand *string `json:"brand,omitempty"`

	// Card function. This field is required when performing transactions for Brazil merchants.
	CardFunction *CardFunction `json:"cardFunction,omitempty"`

	// Name of cardholder.
	CardholderName *string `json:"cardholderName,omitempty"`

	// Data from device containing, at a minimum, a transaction-unique key serial number (KSN) and track 2 card data.
	Data string `json:"data"`

	// The data format.
	DeviceType string `json:"deviceType"`

	// Card verification value/number.
	SecurityCode *string `json:"securityCode,omitempty"`
}

// PaymentDeviceCreditTransaction defines model for PaymentDeviceCreditTransaction.
type PaymentDeviceCreditTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment method containing payment device information.
	PaymentMethod PaymentDevicePaymentMethod `json:"paymentMethod"`
}

// PaymentDeviceDisbursementTransaction defines model for PaymentDeviceDisbursementTransaction.
type PaymentDeviceDisbursementTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Disbursement information. Abstract class, do not use this class directly, use one of its children: FundingTransactionType, DisbursementTransactionType.
	Disbursement Disbursement `json:"disbursement"`

	// Payment method containing payment device information.
	PaymentMethod PaymentDevicePaymentMethod `json:"paymentMethod"`
}

// PaymentDevicePaymentMethod defines model for PaymentDevicePaymentMethod.
type PaymentDevicePaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema

	// Information from the payment device including the blob data and its mode of entry.
	PaymentDevice PaymentDevice `json:"paymentDevice"`

	// Payment facilitator details provided by the merchant.
	PaymentFacilitator *PaymentFacilitator `json:"paymentFacilitator,omitempty"`
}

// PaymentDevicePaymentTokenizationRequest defines model for PaymentDevicePaymentTokenizationRequest.
type PaymentDevicePaymentTokenizationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentTokenizationRequest)
	PaymentTokenizationRequest
	// Embedded fields due to inline allOf schema

	// Information from the payment device including the blob data and its mode of entry.
	PaymentDevice PaymentDevice `json:"paymentDevice"`
}

// PaymentDevicePreAuthTransaction defines model for PaymentDevicePreAuthTransaction.
type PaymentDevicePreAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Use this model to create a payment token.
	CreateToken *CreatePaymentToken `json:"createToken,omitempty"`

	// This flag can only be used in a preAuth transaction that updates the amount of a previous preAuth transaction to either increase the preAuth amount (DecrementalPreAuthFlag = false) or decrease the preAuth amount (DecrementalPreAuthFlag = true).
	DecrementalFlag *DecrementalPreAuthFlag `json:"decrementalFlag,omitempty"`

	// Payment method containing payment device information.
	PaymentMethod PaymentDevicePaymentMethod `json:"paymentMethod"`

	// Settle with multiple sub-merchants, sale and preAuth only.
	SettlementSplit *SettlementSplit `json:"settlementSplit,omitempty"`

	// Split-shipment related information, in order to reuse the same authorization.
	SplitShipment *SplitShipment `json:"splitShipment,omitempty"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentDeviceSaleTransaction defines model for PaymentDeviceSaleTransaction.
type PaymentDeviceSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Use this model to create a payment token.
	CreateToken *CreatePaymentToken `json:"createToken,omitempty"`

	// Payment method containing payment device information.
	PaymentMethod PaymentDevicePaymentMethod `json:"paymentMethod"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentFacilitator defines model for PaymentFacilitator.
type PaymentFacilitator struct {

	// External merchant ID of the payment facilitator.
	ExternalMerchantId string `json:"externalMerchantId"`

	// Payment facilitator name.
	Name string `json:"name"`

	// Payment facilitator ID supplied during boarding.
	PaymentFacilitatorId string `json:"paymentFacilitatorId"`

	// Independent sales organization (ISO) ID provided by Mastercard.
	SaleOrganizationId *string `json:"saleOrganizationId,omitempty"`

	// Once sub-merchant element is given, the transaction is considered to be a sub-merchant transaction.
	SubMerchantData *SubMerchantData `json:"subMerchantData,omitempty"`
}

// PaymentMethod defines model for PaymentMethod.
type PaymentMethod map[string]interface{}

// PaymentMethodDetails defines model for PaymentMethodDetails.
type PaymentMethodDetails struct {

	// Payment card model.
	PaymentCard *PaymentCard `json:"paymentCard,omitempty"`

	// Type of payment method.
	PaymentMethodType *PaymentMethodType `json:"paymentMethodType,omitempty"`
}

// PaymentMethodPaymentSchedulesRequest defines model for PaymentMethodPaymentSchedulesRequest.
type PaymentMethodPaymentSchedulesRequest struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentSchedulesRequest)
	PaymentSchedulesRequest
	// Embedded fields due to inline allOf schema

	// Payment method containing payment card information.
	PaymentMethod PaymentCardPaymentMethod `json:"paymentMethod"`
}

// PaymentMethodType defines model for PaymentMethodType.
type PaymentMethodType string

// List of PaymentMethodType
const (
	PaymentMethodType_ALIPAY              PaymentMethodType = "ALIPAY"
	PaymentMethodType_ALIPAY_DOMESTIC     PaymentMethodType = "ALIPAY_DOMESTIC"
	PaymentMethodType_ALIPAY_PAYSECURE_US PaymentMethodType = "ALIPAY_PAYSECURE_US"
	PaymentMethodType_APM                 PaymentMethodType = "APM"
	PaymentMethodType_CUP_DOMESTIC        PaymentMethodType = "CUP_DOMESTIC"
	PaymentMethodType_DEBITDE             PaymentMethodType = "DEBITDE"
	PaymentMethodType_EMI                 PaymentMethodType = "EMI"
	PaymentMethodType_GIROPAY             PaymentMethodType = "GIROPAY"
	PaymentMethodType_IDEAL               PaymentMethodType = "IDEAL"
	PaymentMethodType_INDIAWALLET         PaymentMethodType = "INDIAWALLET"
	PaymentMethodType_KLARNA              PaymentMethodType = "KLARNA"
	PaymentMethodType_KPS                 PaymentMethodType = "KPS"
	PaymentMethodType_NETBANKING          PaymentMethodType = "NETBANKING"
	PaymentMethodType_PAYMENT_CARD        PaymentMethodType = "PAYMENT_CARD"
	PaymentMethodType_PAYMENT_TOKEN       PaymentMethodType = "PAYMENT_TOKEN"
	PaymentMethodType_PAYPAL              PaymentMethodType = "PAYPAL"
	PaymentMethodType_SEPA                PaymentMethodType = "SEPA"
	PaymentMethodType_SOFORT              PaymentMethodType = "SOFORT"
	PaymentMethodType_TELECHECK           PaymentMethodType = "TELECHECK"
	PaymentMethodType_WALLET              PaymentMethodType = "WALLET"
	PaymentMethodType_WECHAT_DOMESTIC     PaymentMethodType = "WECHAT_DOMESTIC"
)

// PaymentRegistration defines model for PaymentRegistration.
type PaymentRegistration struct {
	// Embedded struct due to allOf(#/components/schemas/FraudRegistration)
	FraudRegistration
	// Embedded fields due to inline allOf schema

	// The issuers response to the payment request. This field should be filled in when the message has already passed through the issuer (e.g. post-authorization).
	IssuerResponse *IssuerResponse `json:"issuerResponse,omitempty"`

	// Defines the type of the original transaction that is being evaluated for the Fraud Score.
	OriginalTransactionType *string `json:"originalTransactionType,omitempty"`

	// A JSON object that holds info about the payment registration method.
	RegistrationMethod *RegistrationMethod `json:"registrationMethod,omitempty"`

	// The result of the 3DS (3D Secure) check.
	Verification3ds *Verification3ds `json:"verification3ds,omitempty"`

	// The result of the AVS (Address Verification System) check.
	VerificationAvs *VerificationAvs `json:"verificationAvs,omitempty"`

	// The result of the CVV (Card Verification Value, or Card Security Code) check.
	VerificationCvv *VerificationCvv `json:"verificationCvv,omitempty"`
}

// PaymentSchedulesErrorResponse defines model for PaymentSchedulesErrorResponse.
type PaymentSchedulesErrorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentSchedulesResponse)
	PaymentSchedulesResponse
	// Embedded fields due to inline allOf schema

	// Error information.
	Error *Error `json:"error,omitempty"`
}

// PaymentSchedulesRequest defines model for PaymentSchedulesRequest.
type PaymentSchedulesRequest struct {

	// Customer billing information.
	Billing *Billing `json:"billing,omitempty"`

	// Country and language of client.
	ClientLocale *ClientLocale `json:"clientLocale,omitempty"`

	// User supplied comments.
	Comments *string `json:"comments,omitempty"`

	// Dynamic merchant name for the cardholder's statement.
	DynamicMerchantName *string `json:"dynamicMerchantName,omitempty"`

	// How often payments are sent.
	Frequency Frequency `json:"frequency"`

	// Invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// Number of failures that can be encountered before re-tries cease.
	MaximumFailures *int32 `json:"maximumFailures,omitempty"`

	// Number of times the recurring payment will process.
	NumberOfPayments *int32 `json:"numberOfPayments,omitempty"`

	// Client order ID if supplied by client.
	OrderId *string `json:"orderId,omitempty"`

	// Purchase order number.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Object name of the payment schedules request.
	RequestType string `json:"requestType"`

	// Shipping information.
	Shipping *Shipping `json:"shipping,omitempty"`

	// Date of mandate signature.
	StartDate openapi_types.Date `json:"startDate"`

	// Store ID number.
	StoreId *string `json:"storeId,omitempty"`

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`

	// The source of the transaction. The possible values are ECOM (if the order was received via email or Internet), MAIL, PHONE and RETAIL (face to face).
	TransactionOrigin *TransactionOrigin `json:"transactionOrigin,omitempty"`
}

// PaymentSchedulesResponse defines model for PaymentSchedulesResponse.
type PaymentSchedulesResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// Result of requested operation. If it's anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.
	RequestStatus *string `json:"requestStatus,omitempty"`

	// Common object for primary and secondary payment request responses.
	TransactionResponse *TransactionResponse `json:"transactionResponse,omitempty"`
}

// PaymentTokenCreditTransaction defines model for PaymentTokenCreditTransaction.
type PaymentTokenCreditTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
	CurrencyConversion *CurrencyConversion `json:"currencyConversion,omitempty"`

	// Payment method containing payment tokenization information.
	PaymentMethod PaymentTokenPaymentMethod `json:"paymentMethod"`
}

// PaymentTokenDetails defines model for PaymentTokenDetails.
type PaymentTokenDetails struct {
	// Embedded struct due to allOf(#/components/schemas/CreatePaymentToken)
	CreatePaymentToken
	// Embedded fields due to inline allOf schema

	// If the account the token was created from has been verified.
	AccountVerification *bool `json:"accountVerification,omitempty"`

	// Card brand, only for tokenization with payment.
	Brand *string `json:"brand,omitempty"`

	// The last 4 numbers of a payment card.
	Last4 *string `json:"last4,omitempty"`

	// Inidcates the type of tokenization source.
	Type *string `json:"type,omitempty"`
}

// PaymentTokenDisbursementTransaction defines model for PaymentTokenDisbursementTransaction.
type PaymentTokenDisbursementTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Disbursement information. Abstract class, do not use this class directly, use one of its children: FundingTransactionType, DisbursementTransactionType.
	Disbursement Disbursement `json:"disbursement"`

	// Payment method containing payment tokenization information.
	PaymentMethod PaymentTokenPaymentMethod `json:"paymentMethod"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentTokenInfoLookupRequest defines model for PaymentTokenInfoLookupRequest.
type PaymentTokenInfoLookupRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AccountInfoLookupRequest)
	AccountInfoLookupRequest
	// Embedded fields due to inline allOf schema

	// Payment token usage details.
	PaymentToken UsePaymentToken `json:"paymentToken"`
}

// PaymentTokenPaymentMethod defines model for PaymentTokenPaymentMethod.
type PaymentTokenPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema

	// Payment facilitator details provided by the merchant.
	PaymentFacilitator *PaymentFacilitator `json:"paymentFacilitator,omitempty"`

	// Payment token usage details.
	PaymentToken UsePaymentToken `json:"paymentToken"`
}

// PaymentTokenPreAuthTransaction defines model for PaymentTokenPreAuthTransaction.
type PaymentTokenPreAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Request authentication of the payment card to verify the cardholder and be eligible for liability shift. An AuthenticationRequest should not be submitted with in the same request as an AuthenticationResult. Abstract class, do not use this class directly, use one of its children.
	AuthenticationRequest *AuthenticationRequest `json:"authenticationRequest,omitempty"`

	// Submit the result of 3DS authentication managed outside of the gateway. An AuthenticationResult should not be submitted within the same request as an AuthenticationRequest. Abstract class, do not use this class directly, use one of its children.
	AuthenticationResult *AuthenticationResult `json:"authenticationResult,omitempty"`

	// This flag can only be used in a preAuth transaction that updates the amount of a previous preAuth transaction to either increase the preAuth amount (DecrementalPreAuthFlag = false) or decrease the preAuth amount (DecrementalPreAuthFlag = true).
	DecrementalFlag *DecrementalPreAuthFlag `json:"decrementalFlag,omitempty"`

	// Payment method containing payment tokenization information.
	PaymentMethod PaymentTokenPaymentMethod `json:"paymentMethod"`

	// Settle with multiple sub-merchants, sale and preAuth only.
	SettlementSplit *SettlementSplit `json:"settlementSplit,omitempty"`

	// Split-shipment related information, in order to reuse the same authorization.
	SplitShipment *SplitShipment `json:"splitShipment,omitempty"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentTokenSaleTransaction defines model for PaymentTokenSaleTransaction.
type PaymentTokenSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Request authentication of the payment card to verify the cardholder and be eligible for liability shift. An AuthenticationRequest should not be submitted with in the same request as an AuthenticationResult. Abstract class, do not use this class directly, use one of its children.
	AuthenticationRequest *AuthenticationRequest `json:"authenticationRequest,omitempty"`

	// Submit the result of 3DS authentication managed outside of the gateway. An AuthenticationResult should not be submitted within the same request as an AuthenticationRequest. Abstract class, do not use this class directly, use one of its children.
	AuthenticationResult *AuthenticationResult `json:"authenticationResult,omitempty"`

	// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
	CurrencyConversion *CurrencyConversion `json:"currencyConversion,omitempty"`

	// Payment method containing payment tokenization information.
	PaymentMethod PaymentTokenPaymentMethod `json:"paymentMethod"`

	// Settle with multiple sub-merchants, sale and preAuth only.
	SettlementSplit *SettlementSplit `json:"settlementSplit,omitempty"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`
}

// PaymentTokenUpdateResponse defines model for PaymentTokenUpdateResponse.
type PaymentTokenUpdateResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema
	Errors *[]Error `json:"errors,omitempty"`

	// The status of the request.
	RequestStatus *string `json:"requestStatus,omitempty"`

	// Time of the request.
	RequestTime *int64 `json:"requestTime,omitempty"`
}

// PaymentTokenVerificationRequest defines model for PaymentTokenVerificationRequest.
type PaymentTokenVerificationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AccountVerificationRequest)
	AccountVerificationRequest
	// Embedded fields due to inline allOf schema

	// Payment token usage details.
	PaymentToken UsePaymentToken `json:"paymentToken"`
}

// PaymentTokenizationErrorResponse defines model for PaymentTokenizationErrorResponse.
type PaymentTokenizationErrorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentTokenizationResponse)
	PaymentTokenizationResponse
	// Embedded fields due to inline allOf schema

	// Error information.
	Error *Error `json:"error,omitempty"`
}

// PaymentTokenizationRequest defines model for PaymentTokenizationRequest.
type PaymentTokenizationRequest struct {

	// If the account should be verified prior to token creation.
	AccountVerification *bool `json:"accountVerification,omitempty"`

	// Merchant supplied tracking numbers.
	AdditionalDetails *AdditionalDetails `json:"additionalDetails,omitempty"`

	// Model for address information.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// Use this model to create a payment token.
	CreateToken CreatePaymentToken `json:"createToken"`

	// The unique merchant transaction ID from the request, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Object name of tokenization request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`
}

// PaymentTokenizationResponse defines model for PaymentTokenizationResponse.
type PaymentTokenizationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Card brand.
	Brand *string `json:"brand,omitempty"`

	// Country of the card issued.
	Country *string `json:"country,omitempty"`

	// The response transaction ID.
	IpgTransactionId *string `json:"ipgTransactionId,omitempty"`

	// The unique merchant transaction ID from the request header, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// Payment card model.
	PaymentCard *PaymentCard `json:"paymentCard,omitempty"`

	// Response details for payment token creation.
	PaymentToken *PaymentTokenDetails `json:"paymentToken,omitempty"`

	// Model for processor data.
	Processor *ProcessorData `json:"processor,omitempty"`

	// The status of the request.
	RequestStatus *string `json:"requestStatus,omitempty"`

	// Time of the request.
	RequestTime *int64 `json:"requestTime,omitempty"`
}

// PaymentUrlDetail defines model for PaymentUrlDetail.
type PaymentUrlDetail struct {

	// The unique merchant transaction ID from the request, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// URL for embedded payment link.
	PaymentUrl *string `json:"paymentUrl,omitempty"`

	// The transaction time in seconds since epoch.
	RequestTime *int64 `json:"requestTime,omitempty"`

	// The status of payment URL.
	Status *PaymentUrlStatus `json:"status,omitempty"`
}

// PaymentUrlDetailResponse defines model for PaymentUrlDetailResponse.
type PaymentUrlDetailResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Array of payment URL details.
	PaymentUrlDetails *[]PaymentUrlDetail `json:"paymentUrlDetails,omitempty"`
}

// PaymentUrlErrorResponse defines model for PaymentUrlErrorResponse.
type PaymentUrlErrorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentUrlResponse)
	PaymentUrlResponse
	// Embedded fields due to inline allOf schema

	// Error information.
	Error *Error `json:"error,omitempty"`
}

// PaymentUrlRequest defines model for PaymentUrlRequest.
type PaymentUrlRequest struct {

	// If 3D secure should be applied.
	AuthenticateTransaction *bool `json:"authenticateTransaction,omitempty"`

	// Customer billing information.
	Billing *Billing `json:"billing,omitempty"`

	// Country and language of client.
	ClientLocale *ClientLocale `json:"clientLocale,omitempty"`

	// Dynamic merchant name for the cardholder's statement.
	DynamicMerchantName *string `json:"dynamicMerchantName,omitempty"`

	// Time until payment URL expires.
	Expiration *int64 `json:"expiration,omitempty"`

	// The text to be displayed to the payer on the hosted payment page.
	HostedPaymentPageText *string `json:"hostedPaymentPageText,omitempty"`

	// Invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IPv4 or IPv6 network address.
	Ip *string `json:"ip,omitempty"`

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// Purchase order number.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Shipping information.
	Shipping *Shipping `json:"shipping,omitempty"`

	// An optional Outlet ID for clients that support multiple stores in the same developer app.
	StoreId *string `json:"storeId,omitempty"`

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`

	// URL for notifying merchant of payment result.
	TransactionNotificationURL *string `json:"transactionNotificationURL,omitempty"`

	// Type of transaction to perform. Primary transaction types in requests include 'SALE', 'PREAUTH', 'CREDIT' and 'FORCED_TICKET'.
	TransactionType TransactionType `json:"transactionType"`
}

// PaymentUrlResponse defines model for PaymentUrlResponse.
type PaymentUrlResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// URL for embedded payment link.
	PaymentUrl *string `json:"paymentUrl,omitempty"`

	// Request status. If it is anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.
	RequestStatus *string `json:"requestStatus,omitempty"`

	// ID code from the transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// PaymentUrlStatus defines model for PaymentUrlStatus.
type PaymentUrlStatus string

// List of PaymentUrlStatus
const (
	PaymentUrlStatus_Cancelled PaymentUrlStatus = "Cancelled"
	PaymentUrlStatus_Created   PaymentUrlStatus = "Created"
	PaymentUrlStatus_Expired   PaymentUrlStatus = "Expired"
	PaymentUrlStatus_Used      PaymentUrlStatus = "Used"
)

// PaypalCreditTransaction defines model for PaypalCreditTransaction.
type PaypalCreditTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment method containing PayPal information.
	PaymentMethod PayPalPaymentMethod `json:"paymentMethod"`
}

// Phone defines model for Phone.
type Phone struct {

	// Free form phone number.
	Number *string `json:"number,omitempty"`

	// Type of phone.
	Type *string `json:"type,omitempty"`
}

// PostAuthTransaction defines model for PostAuthTransaction.
type PostAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema

	// Identifying information about a merchant which appears on buyer's credit/debit card statements.
	SoftDescriptor *SoftDescriptor `json:"softDescriptor,omitempty"`

	// Split-shipment related information, in order to reuse the same authorization.
	SplitShipment *SplitShipment `json:"splitShipment,omitempty"`

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`

	// The source of the transaction. The possible values are ECOM (if the order was received via email or Internet), MAIL, PHONE and RETAIL (face to face).
	TransactionOrigin *TransactionOrigin `json:"transactionOrigin,omitempty"`
}

// Primary defines model for Primary.
type Primary struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// PrimaryTransaction defines model for PrimaryTransaction.
type PrimaryTransaction struct {

	// The unique merchant transaction ID from the request header, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Use this model to provide order related details.
	Order *Order `json:"order,omitempty"`

	// Object name of the primary transaction request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same app.
	StoreId *string `json:"storeId,omitempty"`

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`

	// The source of the transaction. The possible values are ECOM (if the order was received via email or Internet), MAIL, PHONE and RETAIL (face to face).
	TransactionOrigin *TransactionOrigin `json:"transactionOrigin,omitempty"`
}

// ProcessorData defines model for ProcessorData.
type ProcessorData struct {

	// Raw response code from issuer.
	AssociationResponseCode *string `json:"associationResponseCode,omitempty"`

	// Code returned to confirm transaction.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`

	// The processor address validation response for compliance.
	AvsResponse *AVSResponse `json:"avsResponse,omitempty"`

	// Receipt number from debit network provider.
	DebitReceiptNumber *string `json:"debitReceiptNumber,omitempty"`

	// Code to map merchant advice code to ISO specification.
	MerchantAdviceCodeIndicator *string `json:"merchantAdviceCodeIndicator,omitempty"`

	// Network used for transaction.
	Network *string `json:"network,omitempty"`

	// Reference transaction ID.
	ReferenceNumber *string `json:"referenceNumber,omitempty"`

	// Response code from endpoints.
	ResponseCode *string `json:"responseCode,omitempty"`

	// Indicates whether the transaction was routed through the payment card's own network or through a different network.
	ResponseIndicator *string `json:"responseIndicator,omitempty"`

	// Message returned from endpoints.
	ResponseMessage *string `json:"responseMessage,omitempty"`

	// Code returned for CVV.
	SecurityCodeResponse *string `json:"securityCodeResponse,omitempty"`

	// MasterCard provided Transaction Integrity Class for Point of Sale (POS) Purchase and Purchase with Cash Back transactions initiated on the Authorization Platform.
	TransactionIntegrityClass *string `json:"transactionIntegrityClass,omitempty"`
}

// Properties defines model for Properties.
type Properties struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`

	// Hexadecimal color value.
	FontColor *Color `json:"fontColor,omitempty"`

	// Font face property.
	FontFace *FontFace `json:"fontFace,omitempty"`

	// Font size property.
	FontSize *FontSize `json:"fontSize,omitempty"`

	// Font weight property.
	FontWeight *FontWeight `json:"fontWeight,omitempty"`
}

// PurchaseCards defines model for PurchaseCards.
type PurchaseCards struct {

	// Level 2 data for monitoring and controlling corporate expenditures.
	Level2 *struct {

		// Customer code/customer reference ID.
		CustomerReferenceID *string `json:"customerReferenceID,omitempty"`

		// Purchase identifier/merchant-related data.
		SupplierInvoiceNumber *string `json:"supplierInvoiceNumber,omitempty"`

		// Merchant VAT registration/single business reference number/merchant tax ID or corporation VAT number.
		SupplierVATRegistrationNumber *string `json:"supplierVATRegistrationNumber,omitempty"`

		// Rate and corresponding amount being applied to purchase cards, for instance in the form of taxes or discounts.
		TotalDiscountAmountAndRate *AdditionalAmountRate `json:"totalDiscountAmountAndRate,omitempty"`

		// Rate and corresponding amount being applied to purchase cards, for instance in the form of taxes or discounts.
		VatShippingAmountAndRate *AdditionalAmountRate `json:"vatShippingAmountAndRate,omitempty"`
	} `json:"Level2,omitempty"`

	// Level 3 data for monitoring and controlling corporate expenditures.
	Level3 *struct {

		// Line items of monitoring and controlling corporate expenditures data.
		LineItems []struct {

			// The commodity code used to classify the item purchased.
			CommodityCode *string `json:"commodityCode,omitempty"`

			// The description.
			Description *string `json:"description,omitempty"`

			// Rate and corresponding amount being applied to purchase cards, for instance in the form of taxes or discounts.
			DiscountAmountAndRate *AdditionalAmountRate `json:"discountAmountAndRate,omitempty"`

			// Rate amount in 3 decimal 12 bytes total digit.
			LineItemTotal *float32 `json:"lineItemTotal,omitempty"`

			// Merchant product identifier/the Universal Product Code (UPC) of the item purchased.
			ProductCode *string `json:"productCode,omitempty"`

			// The quantity.
			Quantity *int `json:"quantity,omitempty"`

			// The unit of measure.
			UnitMeasure *string `json:"unitMeasure,omitempty"`

			// Rate amount in 3 decimal 12 bytes total digit.
			UnitPrice *float32 `json:"unitPrice,omitempty"`

			// Rate and corresponding amount being applied to purchase cards, for instance in the form of taxes or discounts.
			VatAmountAndRate *AdditionalAmountRate `json:"vatAmountAndRate,omitempty"`
		} `json:"lineItems"`
	} `json:"Level3,omitempty"`
}

// Receipt defines model for Receipt.
type Receipt struct {

	// Array of formatted lines that represents the actual receipt data, that can be printed out.
	Data []ReceiptLine `json:"data"`

	// Defines the consumer of the receipt (e.g. cardholder, merchant).
	Type string `json:"type"`
}

// ReceiptLine defines model for ReceiptLine.
type ReceiptLine struct {

	// Flag to indicate if the text ends at the end of this receipt line.
	EndOfLine *bool `json:"endOfLine,omitempty"`

	// Text that represents a line of the actual receipt data, that can be printed out.
	Text string `json:"text"`
}

// ReceiptRequestInfo defines model for ReceiptRequestInfo.
type ReceiptRequestInfo struct {

	// The line width of the receipt. Default will be 32 characters.
	Linewidth *int `json:"linewidth,omitempty"`

	// The locale of the receipt. The format has to be a well-formed BCP 47 language tag.
	Locale *string `json:"locale,omitempty"`

	// Defines the consumer of the receipt (e.g. cardholder, merchant).
	Type string `json:"type"`
}

// ReceiverInfo defines model for ReceiverInfo.
type ReceiverInfo struct {

	// Receiver account number.
	AccountNumber *string `json:"accountNumber,omitempty"`

	// Receiver city.
	City string `json:"city"`

	// Receiver country code.
	CountryCode string `json:"countryCode"`

	// Receiver name.
	Name string `json:"name"`

	// Receiver phone number.
	PhoneNumber string `json:"phoneNumber"`

	// Receiver postal code.
	PostalCode string `json:"postalCode"`

	// Receiver reference number.
	ReferenceNumber string `json:"referenceNumber"`

	// Receiver state.
	StateCode string `json:"stateCode"`

	// Receiver street address.
	StreetAddress string `json:"streetAddress"`
}

// RecurringPaymentDetails defines model for RecurringPaymentDetails.
type RecurringPaymentDetails struct {

	// User supplied comments.
	Comments *string `json:"comments,omitempty"`

	// Date recurring payment was created.
	CreationDate *string `json:"creationDate,omitempty"`

	// How often payments are sent.
	Frequency *Frequency `json:"frequency,omitempty"`

	// Invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// Date of next transaction process attempt.
	NextAttemptDate *string `json:"nextAttemptDate,omitempty"`

	// Number of times the recurring payment will process.
	NumberOfPayments *int32 `json:"numberOfPayments,omitempty"`

	// Provides details of the payment method used.
	PaymentMethodDetails *PaymentMethodDetails `json:"paymentMethodDetails,omitempty"`

	// Purchase order number.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Times the recurring payment has already run.
	RunCount *int32 `json:"runCount,omitempty"`

	// Date of mandate signature.
	StartDate *string `json:"startDate,omitempty"`

	// State of the recurring payment.
	State *string `json:"state,omitempty"`

	// Store ID number.
	StoreId *string `json:"storeId,omitempty"`

	// Amount of the transaction.
	TransactionAmount *Amount `json:"transactionAmount,omitempty"`
}

// RecurringPaymentDetailsResponse defines model for RecurringPaymentDetailsResponse.
type RecurringPaymentDetailsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/OrderResponse)
	OrderResponse
	// Embedded fields due to inline allOf schema

	// Details about existing gateway schedule.
	RecurringPaymentDetails *RecurringPaymentDetails `json:"recurringPaymentDetails,omitempty"`
}

// ReferencedOrderPaymentSchedulesRequest defines model for ReferencedOrderPaymentSchedulesRequest.
type ReferencedOrderPaymentSchedulesRequest struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentSchedulesRequest)
	PaymentSchedulesRequest
	// Embedded fields due to inline allOf schema

	// Order ID used to create recurring payment from existing transaction.
	ReferencedOrderId string `json:"referencedOrderId"`
}

// ReferencedOrderPaymentTokenizationRequest defines model for ReferencedOrderPaymentTokenizationRequest.
type ReferencedOrderPaymentTokenizationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentTokenizationRequest)
	PaymentTokenizationRequest
	// Embedded fields due to inline allOf schema

	// Retrieves the payment instrument information from an existing order.
	ReferencedOrderId string `json:"referencedOrderId"`
}

// RegistrationMethod defines model for RegistrationMethod.
type RegistrationMethod struct {

	// The address that should be used to send billing information for this payment method.
	BillingPhoneNumber *string `json:"billingPhoneNumber,omitempty"`

	// A JSON object that holds info about the payment registration card.
	Card FraudRegistrationCard `json:"card"`

	// Address fields.
	MethodAddress *FraudAddress `json:"methodAddress,omitempty"`

	// The address that should be used to send billing information for this payment method.
	MethodAlias *string `json:"methodAlias,omitempty"`

	// The unique ID of this payment method if it was previously registered with a registration/method or if it is currently being registered. Must be unique for the entire system (not just within a specific merchant or industry). Mandatory if being used inside a registration/method.
	MethodId *string `json:"methodId,omitempty"`

	// Unique ID for the payment method type.
	MethodType string `json:"methodType"`

	// A JSON object that carries any additional information that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// RemoveFraudBlockedItemsResponse defines model for RemoveFraudBlockedItemsResponse.
type RemoveFraudBlockedItemsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Status from delete fraud blocked items operation.
	Status *string `json:"status,omitempty"`
}

// ResponseAmountComponents defines model for ResponseAmountComponents.
type ResponseAmountComponents struct {
	// Embedded struct due to allOf(#/components/schemas/AmountComponents)
	AmountComponents
	// Embedded fields due to inline allOf schema

	// Amount added for proccessing or handling fees.
	ConvenienceFee *float32 `json:"convenienceFee,omitempty"`
}

// ResponseType defines model for ResponseType.
type ResponseType string

// List of ResponseType
const (
	ResponseType_BadRequest                 ResponseType = "BadRequest"
	ResponseType_EndpointCommunicationError ResponseType = "EndpointCommunicationError"
	ResponseType_EndpointDeclined           ResponseType = "EndpointDeclined"
	ResponseType_GatewayDeclined            ResponseType = "GatewayDeclined"
	ResponseType_NotFound                   ResponseType = "NotFound"
	ResponseType_ServerError                ResponseType = "ServerError"
	ResponseType_Unauthenticated            ResponseType = "Unauthenticated"
	ResponseType_Unauthorized               ResponseType = "Unauthorized"
	ResponseType_UnsupportedMediaType       ResponseType = "UnsupportedMediaType"
)

// ReturnTransaction defines model for ReturnTransaction.
type ReturnTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema

	// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
	CurrencyConversion *CurrencyConversion `json:"currencyConversion,omitempty"`

	// Identifying information about a merchant which appears on buyer's credit/debit card statements.
	SoftDescriptor *SoftDescriptor `json:"softDescriptor,omitempty"`

	// Object for sending stored credentials.
	StoredCredentials *StoredCredential `json:"storedCredentials,omitempty"`

	// Amount of the transaction.
	TransactionAmount Amount `json:"transactionAmount"`
}

// ScoreOnlyRequest defines model for ScoreOnlyRequest.
type ScoreOnlyRequest struct {

	// The amount processed for the original transaction.
	Amount string `json:"amount"`

	// Customer address fields associated with billing.
	BillingAddress *BillingAddress `json:"billingAddress,omitempty"`

	// The currency of the original transaction.
	CurrencyCode string `json:"currencyCode"`

	// Customer model for customers registered at merchant's website.
	Customer *Customer `json:"customer,omitempty"`

	// The device where this transaction originated.
	Device *Device `json:"device,omitempty"`

	// The loyalty program information associated with this payment.
	Loyalty *Loyalty `json:"loyalty,omitempty"`

	// The merchant where this transaction occurred.
	Merchant Merchant `json:"merchant"`

	// Merchant reference code. Used by FirstAPI and reflected in settlement records and Webhook notifications. Typically, the merchantRef field is the purchase order number or unique sequence value associated to a given transaction.
	MerchantRef *string `json:"merchantRef,omitempty"`

	// The list of items included in the order.
	Order *FraudOrder `json:"order,omitempty"`

	// The unique ID of this transaction. Must be unique for the entire system (not just within a specific merchant or industry). Subsequent requests related to the same transaction must have the same transactionId (e.g. transaction/deposit or transaction/authorization-reversal). This field is used for matching transactions with settlement and chargeback information. If there is no such ID available you may wish to compose one from fields available in both systems. Consider including backend, issuer, merchant id, date and time, amount, etc. as necessary.
	OriginalTransactionId string `json:"originalTransactionId"`

	// Defines the type of the original transaction that is being evaluated for the Fraud Score.
	OriginalTransactionType string `json:"originalTransactionType"`

	// Payment information for the transaction.
	Payment Payment `json:"payment"`

	// Type of transaction merchant wants to process.
	TransactionType string `json:"transactionType"`

	// A JSON object that can carry any additional information that might be helpful for fraud detection.
	UserDefined *map[string]interface{} `json:"userDefined,omitempty"`
}

// ScoreOnlyResponse defines model for ScoreOnlyResponse.
type ScoreOnlyResponse struct {

	// Unique trace ID for issue triage.
	CorrelationId *string `json:"correlationId,omitempty"`

	// Fraud likelihood assessment consisting of a score, associated warning(s), and explanation(s) of score received.
	FraudScore *struct {

		// Explanation of the fraud score applied consisting of a description, type of the explanation, and rule (if applicable).
		Explanations *[]struct {

			// Description of the fraud score explanation.
			Description *string `json:"description,omitempty"`

			// ID of the rule being triggered.
			Rule *string `json:"rule,omitempty"`

			// Type of the explanation (model or rule).
			Type *string `json:"type,omitempty"`
		} `json:"explanations,omitempty"`

		// The action that should be taken for the request that was sent.
		RecommendedDecision *string `json:"recommendedDecision,omitempty"`

		// The score attributed to this request by our machine learning system, ranging from 0 (less likely to be fraud) to 1000 (more likely to be fraud).
		Score *string `json:"score,omitempty"`

		// A list of non-critical warnings raised while processing the request. Warnings included in this list will have integration and data-quality related messages.
		Warnings *[]string `json:"warnings,omitempty"`
	} `json:"fraudScore,omitempty"`

	// Please refer to "Errors Section" for more info.
	TransactionStatus *string `json:"transactionStatus,omitempty"`

	// The transactionType provided in request.
	TransactionType *string `json:"transactionType,omitempty"`

	// If status returned is "failure", input validation errors occurred. Please refer to the "Errors Section" for more info. Valid values are 'success' and 'failure'.
	ValidationStatus *string `json:"validationStatus,omitempty"`
}

// SecondaryTransaction defines model for SecondaryTransaction.
type SecondaryTransaction struct {

	// Comment for the secondary transaction.
	Comments *string `json:"comments,omitempty"`

	// The unique merchant transaction ID from the request, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Use this model to provide order related details.
	Order *Order `json:"order,omitempty"`

	// Object name of the secondary transaction request.
	RequestType string `json:"requestType"`

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *string `json:"storeId,omitempty"`
}

// Secure3D10AuthenticationRequest defines model for Secure3D10AuthenticationRequest.
type Secure3D10AuthenticationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationRequest)
	AuthenticationRequest
	// Embedded fields due to inline allOf schema
}

// Secure3D10AuthenticationResult defines model for Secure3D10AuthenticationResult.
type Secure3D10AuthenticationResult struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationResult)
	AuthenticationResult
	// Embedded fields due to inline allOf schema

	// Result of authentication attempt from Payer Authentication Response (PaRes).
	AuthenticationAttemptResult *string `json:"authenticationAttemptResult,omitempty"`

	// The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.
	Cavv *string `json:"cavv,omitempty"`

	// Card enrollment result from the Verification Response (VeRes).
	VerificationResponse *string `json:"verificationResponse,omitempty"`

	// The transaction identifier (XID) is a unique tracking number set by the merchant.
	Xid *string `json:"xid,omitempty"`
}

// Secure3D10AuthenticationUpdateRequest defines model for Secure3D10AuthenticationUpdateRequest.
type Secure3D10AuthenticationUpdateRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationUpdateRequest)
	AuthenticationUpdateRequest
	// Embedded fields due to inline allOf schema

	// Formatted string encoding transaction time, order ID, and return URL data.
	MerchantData string `json:"merchantData"`

	// A formatted message providing results of the issuer’s cardholder authentication.
	PayerAuthenticationResponse string `json:"payerAuthenticationResponse"`

	// Card security code if required by merchant.
	SecurityCode *string `json:"securityCode,omitempty"`
}

// Secure3D21AuthenticationRequest defines model for Secure3D21AuthenticationRequest.
type Secure3D21AuthenticationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationRequest)
	AuthenticationRequest
	// Embedded fields due to inline allOf schema

	// Indicates whether or not a challenge should be performed. 01 = No preference (You have no preference whether a challenge should be performed. This is the default value) 02 = No challenge requested (You prefer that no challenge should be performed) 03 = Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 = Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed)
	ChallengeIndicator *string `json:"challengeIndicator,omitempty"`

	// Defines the size of the challenge window displayed to customers during authentication. 01 = 250 x 400 02 = 390 x 400 03 = 500 x 600 04 = 600 x 400 05 = Full screen
	ChallengeWindowSize *string `json:"challengeWindowSize,omitempty"`

	// The 3DS method iframe and transaction ID will be sent here. Note this must be a valid URL (special characters should be URL-encoded).
	MethodNotificationURL *string `json:"methodNotificationURL,omitempty"`

	// The result of the authentication will be sent to this URL. If not provided, a term URL will be dynamically generated. Note this must be a valid URL (special characters should be URL-encoded).
	TermURL *string `json:"termURL,omitempty"`
}

// Secure3D21AuthenticationResult defines model for Secure3D21AuthenticationResult.
type Secure3D21AuthenticationResult struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationResult)
	AuthenticationResult
	// Embedded fields due to inline allOf schema

	// The result of authentication attempt returned by the 3D Secure authentication process (PaRes).
	AuthenticationResponse *string `json:"authenticationResponse,omitempty"`

	// The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.
	Cavv *string `json:"cavv,omitempty"`

	// The response transaction UUID. Only applicable to MasterCard.
	TransactionId *string `json:"transactionId,omitempty"`

	// The transaction status as returned by the 3D Secure authentication process.
	TransactionStatus *string `json:"transactionStatus,omitempty"`

	// The transaction identifier (XID) is a unique tracking number set by the merchant.
	Xid *string `json:"xid,omitempty"`
}

// Secure3D21AuthenticationUpdateRequest defines model for Secure3D21AuthenticationUpdateRequest.
type Secure3D21AuthenticationUpdateRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationUpdateRequest)
	AuthenticationUpdateRequest
	// Embedded fields due to inline allOf schema

	// Encapsulates response data from the ACS.
	AcsResponse *ACSResponse `json:"acsResponse,omitempty"`

	// Indicates how the merchant received the 3DS method.
	MethodNotificationStatus *string `json:"methodNotificationStatus,omitempty"`
}

// Secure3DAuthenticationResponse defines model for Secure3DAuthenticationResponse.
type Secure3DAuthenticationResponse struct {

	// Additional parameters for authentication redirect.
	Params *struct {

		// The URL for the authentication redirect for the merchant.
		AcsURL *string `json:"acsURL,omitempty"`

		// The CReq message initiates cardholder interaction in a 3DS 2.x challenge flow and carries authentication data from the cardholder.
		CReq *string `json:"cReq,omitempty"`

		// Formatted string encoding transaction time, order ID, and return URL data.
		MerchantData *string `json:"merchantData,omitempty"`

		// Message sent from merchant server to authenticate the cardholder.
		PayerAuthenticationRequest *string `json:"payerAuthenticationRequest,omitempty"`

		// Customer web browser session data.
		SessionData *string `json:"sessionData,omitempty"`

		// Terminal URL for processing request.
		TermURL *string `json:"termURL,omitempty"`
	} `json:"params,omitempty"`

	// Encapsulates the 3DS method form and unique transaction identifier.
	Secure3dMethod *struct {

		// An iframe to be hidden in the browser used to collect browser data for the issuers. This information adds to the overall consumer profile and helps in identifying potentially fraudulent transactions.
		MethodForm *string `json:"methodForm,omitempty"`

		// A unique transaction identifier supplied by the ACS.
		Secure3dTransId *string `json:"secure3dTransId,omitempty"`
	} `json:"secure3dMethod,omitempty"`

	// The type of authentication.
	Type *string `json:"type,omitempty"`

	// The version of 3DS used to authenticate.
	Version *string `json:"version,omitempty"`
}

// Secure3dResponse defines model for Secure3dResponse.
type Secure3dResponse struct {

	// Code received after successful payer-auth verification.
	ResponseCode3dSecure *string `json:"responseCode3dSecure,omitempty"`
}

// SenderInfo defines model for SenderInfo.
type SenderInfo struct {

	// Sender account number.
	AccountNumber string `json:"accountNumber"`

	// Sender date of birth (YYYYMMDD).
	BirthDate *string `json:"birthDate,omitempty"`

	// Sender city.
	City string `json:"city"`

	// Sender country code.
	CountryCode string `json:"countryCode"`

	// Sender name.
	Name string `json:"name"`

	// Sender phone number.
	PhoneNumber string `json:"phoneNumber"`

	// Sender postal code.
	PostalCode string `json:"postalCode"`

	// Sender reference number.
	ReferenceNumber string `json:"referenceNumber"`

	// Sender state.
	StateCode string `json:"stateCode"`

	// Sender street address.
	StreetAddress string `json:"streetAddress"`
}

// Sepa defines model for Sepa.
type Sepa struct {

	// Country of residence of the payer using the ISO 3166 standard.
	Country string `json:"country"`

	// The email address of the payer.
	Email *string `json:"email,omitempty"`

	// Bank account in IBAN format.
	Iban string `json:"iban"`

	// Model for the SEPA Mandate information.
	Mandate SepaMandate `json:"mandate"`

	// The name of the payer.
	Name string `json:"name"`
}

// SepaMandate defines model for SepaMandate.
type SepaMandate struct {

	// Existing mandate reference, managed by merchant. Must match [A-Za-z0-9:?/+(),. -]{1,35} and not start with two slashes ("//"). Also known as the mandate ID.
	Reference string `json:"reference"`

	// Date of mandate signature.
	SignatureDate openapi_types.Date `json:"signatureDate"`

	// Sequence type of the direct debit. This defaults to 'SINGLE' if not provided.
	Type string `json:"type"`

	// Valid URL pointing to the SEPA mandate (PDF / HTML format recommended).
	Url string `json:"url"`
}

// SepaPaymentMethod defines model for SepaPaymentMethod.
type SepaPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/PaymentMethod)
	PaymentMethod
	// Embedded fields due to inline allOf schema

	// The payment object for SEPA Local Payment.
	Sepa Sepa `json:"sepa"`
}

// SepaSaleTransaction defines model for SepaSaleTransaction.
type SepaSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment method containing sepa information.
	PaymentMethod SepaPaymentMethod `json:"paymentMethod"`
}

// SettlementSplit defines model for SettlementSplit.
type SettlementSplit []SubMerchantSplit

// SharedSecretConfigurationRequest defines model for SharedSecretConfigurationRequest.
type SharedSecretConfigurationRequest struct {

	// Shared secret/password for Connect.
	SharedSecret string `json:"sharedSecret"`
}

// SharedSecretConfigurationResponse defines model for SharedSecretConfigurationResponse.
type SharedSecretConfigurationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// The message/status received after updating shared secret service config.
	ResponseMessage *string `json:"responseMessage,omitempty"`

	// Response timestamp.
	ResponseTimestamp *int64 `json:"responseTimestamp,omitempty"`

	// Shared secret/password for Connect.
	SharedSecret *string `json:"sharedSecret,omitempty"`

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *string `json:"storeId,omitempty"`
}

// ShipToAddress defines model for ShipToAddress.
type ShipToAddress struct {

	// First line of street address.
	Address1 *string `json:"address1,omitempty"`

	// Second line of street address.
	Address2 *string `json:"address2,omitempty"`

	// City.
	City *string `json:"city,omitempty"`

	// Country.
	Country *string `json:"country,omitempty"`

	// Free-form phone number associated with the ship-to address.
	Phone *string `json:"phone,omitempty"`

	// State or province.
	State *string `json:"state,omitempty"`

	// Postal Code, free form.
	Zip *string `json:"zip,omitempty"`
}

// Shipping defines model for Shipping.
type Shipping struct {

	// Model for address information.
	Address *Address `json:"address,omitempty"`

	// Customer contact information.
	Contact *Contact `json:"contact,omitempty"`

	// Name of customer for shipping.
	Name *string `json:"name,omitempty"`
}

// SoftDescriptor defines model for SoftDescriptor.
type SoftDescriptor struct {

	// Customer service phone number information that is passed to the issuer (it may appear on the cardholder’s statement) or if merchant wants to pass information that differs from the information stored on our master File.
	CustomerServiceNumber *string `json:"customerServiceNumber,omitempty"`

	// Model for address information.
	DynamicAddress *Address `json:"dynamicAddress,omitempty"`

	// Store "doing-business-as" name.
	DynamicMerchantName string `json:"dynamicMerchantName"`

	// The 4-digit merchant category code (MCC). The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.
	Mcc *string `json:"mcc,omitempty"`
}

// SplitShipment defines model for SplitShipment.
type SplitShipment struct {

	// Indicates whether the transaction is the final shipment.
	FinalShipment *bool `json:"finalShipment,omitempty"`

	// Total count of the shipment, can be set at preauth or the first postauth.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// StoreBrandingStyleConfiguration defines model for StoreBrandingStyleConfiguration.
type StoreBrandingStyleConfiguration struct {

	// Object contains classic mode branding style properties.
	Classic *ClassicMode `json:"classic,omitempty"`

	// Object contains combined mode branding style properties.
	Combined *CombinedMode `json:"combined,omitempty"`

	// An optional outlet id for clients that support multiple stores in the same developer app.
	Id string `json:"id"`
}

// StoreEmailSettings defines model for StoreEmailSettings.
type StoreEmailSettings struct {

	// Object that holds data to configure email notifications.
	EmailNotificationData EmailNotificationData `json:"emailNotificationData"`

	// An outlet identificator.
	Id string `json:"id"`
}

// StoreEmailSettingsResult defines model for StoreEmailSettingsResult.
type StoreEmailSettingsResult struct {

	// An outlet identificator.
	Id *string `json:"id,omitempty"`

	// Status from email settings.
	Status *string `json:"status,omitempty"`
}

// StoreFraudSettings defines model for StoreFraudSettings.
type StoreFraudSettings struct {

	// Object that holds all fraud settings.
	FraudSettings FraudSettings `json:"fraudSettings"`

	// The outlet identificator.
	Id string `json:"id"`
}

// StoreFraudSettingsResult defines model for StoreFraudSettingsResult.
type StoreFraudSettingsResult struct {

	// Token identifier object.
	BlockedCardIdentifier *TokenIdentifier `json:"blockedCardIdentifier,omitempty"`

	// An outlet identificator.
	Id *string `json:"id,omitempty"`

	// Status from fraud settings.
	Status *string `json:"status,omitempty"`
}

// StoreUrlConfiguration defines model for StoreUrlConfiguration.
type StoreUrlConfiguration struct {

	// An optional outlet id for clients that support multiple stores in the same developer app.
	Id string `json:"id"`

	// Overwrite URLs in database by those from request.
	OverwriteUrlAllowed *bool `json:"overwriteUrlAllowed,omitempty"`

	// Recurring transaction notification URL for recurring payments.
	RecurringTransactionNotificationUrl *string `json:"recurringTransactionNotificationUrl,omitempty"`

	// Response failure URL for Connect.
	ResponseFailureUrl *string `json:"responseFailureUrl,omitempty"`

	// Response success URL for Connect.
	ResponseSuccessUrl *string `json:"responseSuccessUrl,omitempty"`

	// Skip connect result page when transaction is not approved.
	SkipResultPageForFailure *bool `json:"skipResultPageForFailure,omitempty"`

	// Skip connect result page when transaction is approved.
	SkipResultPageForSuccess *bool `json:"skipResultPageForSuccess,omitempty"`

	// Transaction notification URL for Connect.
	TransactionNotificationUrl *string `json:"transactionNotificationUrl,omitempty"`
}

// StoreUrlConfigurationRequest defines model for StoreUrlConfigurationRequest.
type StoreUrlConfigurationRequest struct {
	Stores *[]StoreUrlConfiguration `json:"stores,omitempty"`
}

// StoreUrlConfigurationResponse defines model for StoreUrlConfigurationResponse.
type StoreUrlConfigurationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema
	Stores *[]StoreUrlConfigurationResult `json:"stores,omitempty"`
}

// StoreUrlConfigurationResult defines model for StoreUrlConfigurationResult.
type StoreUrlConfigurationResult struct {

	// An optional outlet id for clients that support multiple stores in the same developer app.
	Id *string `json:"id,omitempty"`

	// Status from store url configuration process.
	Status *string `json:"status,omitempty"`
}

// StoredCredential defines model for StoredCredential.
type StoredCredential struct {

	// Indicates whether it is a merchant-initiated or explicitly consented to by card holder. Valid values are 'MERCHANT' and 'CARDHOLDER'.
	Initiator *string `json:"initiator,omitempty"`

	// The transaction ID received from schemes for the initial transaction. May be required if sequence is 'SUBSEQUENT'.
	ReferencedSchemeTransactionId *string `json:"referencedSchemeTransactionId,omitempty"`

	// Indicates if the transaction is scheduled or part of an installment.
	Scheduled bool `json:"scheduled"`

	// Indicates if the transaction is first or subsequent. Valid values are 'FIRST' and 'SUBSEQUENT'.
	Sequence string `json:"sequence"`
}

// SubMerchantData defines model for SubMerchantData.
type SubMerchantData struct {

	// Model for address information.
	Address *Address `json:"address,omitempty"`

	// Document information.
	Document *Document `json:"document,omitempty"`

	// Store legal name.
	LegalName *string `json:"legalName,omitempty"`

	// Merchant category code.
	Mcc string `json:"mcc"`

	// Sub-merchant ID.
	MerchantId *string `json:"merchantId,omitempty"`

	// Timezone.
	Timezone *string `json:"timezone,omitempty"`
}

// SubMerchantSplit defines model for SubMerchantSplit.
type SubMerchantSplit struct {

	// The amount each sub-merchant receives.
	Amount float32 `json:"amount"`

	// ID of merchant for tracking.
	MerchantID string `json:"merchantID"`
}

// TeleCheckAchPaymentMethod defines model for TeleCheckAchPaymentMethod.
type TeleCheckAchPaymentMethod struct {

	// Bank account number.
	AccountNumber string `json:"accountNumber"`

	// Identifies if the account type is checking or savings.
	AccountType string `json:"accountType"`

	// Billing details for telecheck transactions.
	AchBillTo struct {

		// Customer billing address, first line.
		AddressOne string `json:"addressOne"`

		// Customer billing address, second line.
		AddressTwo *string `json:"addressTwo,omitempty"`

		// Customer billing city.
		City string `json:"city"`

		// ISO country code. Required if performing an ICA transaction.
		CountryCode *string `json:"countryCode,omitempty"`

		// Customer billing email. Required if performing an ICA transaction.
		Email *string `json:"email,omitempty"`

		// Customer billing first name.
		FirstName *string `json:"firstName,omitempty"`

		// Customer billing last name.
		LastName string `json:"lastName"`

		// Customer billing phone number.
		Phone string `json:"phone"`

		// Customer billing state.
		State string `json:"state"`

		// Customer billing zip code.
		Zip string `json:"zip"`
	} `json:"achBillTo"`

	// ACH application type values will be one of either TeleCheckICAPaymentMethod or TeleCheckCBPPaymentMethod.
	AchType string `json:"achType"`

	// Used to track the agent transaction activity.
	AgentId *string `json:"agentId,omitempty"`

	// Check number.
	CheckNumber *string `json:"checkNumber,omitempty"`

	// Identifies if the check type is personal or company.
	CheckType string `json:"checkType"`

	// Identification information.
	ManualIdInfo *IdInfo `json:"manualIdInfo,omitempty"`

	// Identifies the product code in the transaction.
	ProductCode *string `json:"productCode,omitempty"`

	// Date the consumer originally registered in format MMDDYYYY.
	RegistrationDate *openapi_types.Date `json:"registrationDate,omitempty"`

	// Unique ID assigned by the merchant for the consumer (never recycled). It is an additional level of authentication. To use this feature, the merchant must work with TeleCheck Risk to discuss. Registration IDs must not be generated for an existing or returning consumer returns. The single registration ID must be unique per consumer.
	RegistrationId *string `json:"registrationId,omitempty"`

	// Release type is used as a risk variable to gauge risk level when the merchant is releasing the purchased merchandise.
	ReleaseType *string `json:"releaseType,omitempty"`

	// Bank routing number.
	RoutingNumber string `json:"routingNumber"`

	// Session identifier.
	SessionId string `json:"sessionId"`

	// Identification information.
	SupplementIdInfo *IdInfo `json:"supplementIdInfo,omitempty"`

	// Identifies the city where the original sale transaction occurred.
	TerminalCity *string `json:"terminalCity,omitempty"`

	// Identifies the register or lane number where the original sale transaction occurred.
	TerminalId *string `json:"terminalId,omitempty"`

	// Identifies the US state or territory where the original sale transaction occurred.
	TerminalState *string `json:"terminalState,omitempty"`

	// Flags a transaction as a VIP order (based on merchant criteria). This field should not be sent for non-VIP orders.
	VipCustomer *string `json:"vipCustomer,omitempty"`
}

// TeleCheckCBPPaymentMethod defines model for TeleCheckCBPPaymentMethod.
type TeleCheckCBPPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/TeleCheckAchPaymentMethod)
	TeleCheckAchPaymentMethod
	// Embedded fields due to inline allOf schema
}

// TeleCheckICAPaymentMethod defines model for TeleCheckICAPaymentMethod.
type TeleCheckICAPaymentMethod struct {
	// Embedded struct due to allOf(#/components/schemas/TeleCheckAchPaymentMethod)
	TeleCheckAchPaymentMethod
	// Embedded fields due to inline allOf schema

	// Customer IP address from the terminal where the order was placed (as captured by merchant).
	CustomerIpAddress string `json:"customerIpAddress"`

	// International mobile equipment identity code.
	ImeiCode *string `json:"imeiCode,omitempty"`

	// Identifies if the transaction is single or recurring for ACH transaction which is a optional field for Application Type ICA.
	RecurringType *AchRecurringType `json:"recurringType,omitempty"`
}

// Text defines model for Text.
type Text struct {
	Primary *Primary `json:"primary,omitempty"`
	Title   *Title   `json:"title,omitempty"`
}

// Title defines model for Title.
type Title struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// TokenIdentifier defines model for TokenIdentifier.
type TokenIdentifier struct {

	// Token identifier.
	TokenIdentifier *string `json:"tokenIdentifier,omitempty"`
}

// TopBar defines model for TopBar.
type TopBar struct {

	// Hexadecimal color value.
	Color *Color `json:"color,omitempty"`
}

// TransactionErrorResponse defines model for TransactionErrorResponse.
type TransactionErrorResponse struct {
	// Embedded struct due to allOf(#/components/schemas/TransactionResponse)
	TransactionResponse
	// Embedded fields due to inline allOf schema

	// Error information.
	Error *Error `json:"error,omitempty"`
}

// TransactionOrigin defines model for TransactionOrigin.
type TransactionOrigin string

// List of TransactionOrigin
const (
	TransactionOrigin_ECOM   TransactionOrigin = "ECOM"
	TransactionOrigin_MAIL   TransactionOrigin = "MAIL"
	TransactionOrigin_PHONE  TransactionOrigin = "PHONE"
	TransactionOrigin_RETAIL TransactionOrigin = "RETAIL"
)

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema

	// Details related to updated account information.
	AccountUpdaterResponse *AccountUpdaterResponse `json:"accountUpdaterResponse,omitempty"`

	// ACH TeleCheck response.
	AchResponse *AchResponse `json:"achResponse,omitempty"`

	// Additional transaction details for transaction response.
	AdditionalDetails *AdditionalTransactionDetails `json:"additionalDetails,omitempty"`

	// Amount of the transaction.
	ApprovedAmount *Amount `json:"approvedAmount,omitempty"`

	// Encapsulates 3DS authentication details in transaction responses.
	AuthenticationResponse *Secure3DAuthenticationResponse `json:"authenticationResponse,omitempty"`

	// Country of the card issuer.
	Country *string `json:"country,omitempty"`

	// Currency Conversion Response.
	CurrencyConversionResponse *CurrencyConversionResponse `json:"currencyConversionResponse,omitempty"`

	// The response transaction ID.
	IpgTransactionId *string `json:"ipgTransactionId,omitempty"`

	// The unique (on Acquirer level) mechant ID. Usually this value has been chosen from the merchant itself and will be used in communication with the endpoint.
	MerchantId *string `json:"merchantId,omitempty"`

	// The unique merchant transaction ID from the request header, if supplied.
	MerchantTransactionId *string `json:"merchantTransactionId,omitempty"`

	// Client order ID if supplied by client, otherwise the order ID.
	OrderId *string `json:"orderId,omitempty"`

	// Provides details of the payment method used.
	PaymentMethodDetails *PaymentMethodDetails `json:"paymentMethodDetails,omitempty"`

	// Response details for payment token creation.
	PaymentToken *PaymentTokenDetails `json:"paymentToken,omitempty"`

	// Model for processor data.
	Processor *ProcessorData `json:"processor,omitempty"`

	// The endpoint redirection URL.
	RedirectURL *string `json:"redirectURL,omitempty"`

	// The transaction ID received from schemes for the initial transaction of card on file flows.
	SchemeTransactionId *string `json:"schemeTransactionId,omitempty"`

	// Contains 3DSecure response code.
	Secure3dResponse *Secure3dResponse `json:"secure3dResponse,omitempty"`

	// The terminal that is processing the transaction.
	TerminalId *string `json:"terminalId,omitempty"`

	// The source of the transaction. The possible values are ECOM (if the order was received via email or Internet), MAIL, PHONE and RETAIL (face to face).
	TransactionOrigin *TransactionOrigin `json:"transactionOrigin,omitempty"`

	// Shows the state of the current transaction.
	TransactionState *string `json:"transactionState,omitempty"`

	// Represents the status of a transaction immediately following the original processing request. This value is not stored for the transaction and is only available in the response when the transaction is processed. TransactionStatus is not returned on either the transaction inquiry or on the order inquiry.
	TransactionStatus *string `json:"transactionStatus,omitempty"`

	// The transaction time in seconds since epoch.
	TransactionTime *int64 `json:"transactionTime,omitempty"`

	// Type of transaction to perform. Primary transaction types in requests include 'SALE', 'PREAUTH', 'CREDIT' and 'FORCED_TICKET'.
	TransactionType *TransactionType `json:"transactionType,omitempty"`
}

// TransactionType defines model for TransactionType.
type TransactionType string

// List of TransactionType
const (
	TransactionType_CREDIT        TransactionType = "CREDIT"
	TransactionType_DISBURSEMENT  TransactionType = "DISBURSEMENT"
	TransactionType_FORCED_TICKET TransactionType = "FORCED_TICKET"
	TransactionType_PAYER_AUTH    TransactionType = "PAYER_AUTH"
	TransactionType_POSTAUTH      TransactionType = "POSTAUTH"
	TransactionType_PREAUTH       TransactionType = "PREAUTH"
	TransactionType_RETURN        TransactionType = "RETURN"
	TransactionType_SALE          TransactionType = "SALE"
	TransactionType_VOID          TransactionType = "VOID"
)

// UnionPayAuthenticationRequest defines model for UnionPayAuthenticationRequest.
type UnionPayAuthenticationRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationRequest)
	AuthenticationRequest
	// Embedded fields due to inline allOf schema

	// Mobile number for SMS verification.
	SmsPhoneNumber string `json:"smsPhoneNumber"`
}

// UnionPayAuthenticationUpdateRequest defines model for UnionPayAuthenticationUpdateRequest.
type UnionPayAuthenticationUpdateRequest struct {
	// Embedded struct due to allOf(#/components/schemas/AuthenticationUpdateRequest)
	AuthenticationUpdateRequest
	// Embedded fields due to inline allOf schema

	// Card security code if required by merchant.
	SecurityCode *string `json:"securityCode,omitempty"`

	// Customer mobile number for SMS verification.
	SmsVerificationCode string `json:"smsVerificationCode"`
}

// UpdateEmailSettingsRequest defines model for UpdateEmailSettingsRequest.
type UpdateEmailSettingsRequest struct {
	Stores []StoreEmailSettings `json:"stores"`
}

// UpdateEmailSettingsResponse defines model for UpdateEmailSettingsResponse.
type UpdateEmailSettingsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema
	Stores *[]StoreEmailSettingsResult `json:"stores,omitempty"`
}

// UpdateFraudSettingsRequest defines model for UpdateFraudSettingsRequest.
type UpdateFraudSettingsRequest struct {
	Stores *[]StoreFraudSettings `json:"stores,omitempty"`
}

// UpdateFraudSettingsResponse defines model for UpdateFraudSettingsResponse.
type UpdateFraudSettingsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/BasicResponse)
	BasicResponse
	// Embedded fields due to inline allOf schema
	Stores *[]StoreFraudSettingsResult `json:"stores,omitempty"`
}

// UpdatePaymentToken defines model for UpdatePaymentToken.
type UpdatePaymentToken struct {

	// Decline duplicate payment info if client token is supplied.
	DeclineDuplicates *bool `json:"declineDuplicates,omitempty"`

	// Payment card model.
	PaymentCard PaymentCard `json:"paymentCard"`

	// If the token is reusable.
	Reusable *bool `json:"reusable,omitempty"`

	// Client-supplied payment token value.
	Value string `json:"value"`
}

// UsePaymentToken defines model for UsePaymentToken.
type UsePaymentToken struct {

	// Required for normal transactions except for payment with 'RECURRING' flags.
	ExpiryDate *Expiration `json:"expiryDate,omitempty"`

	// Card function. This field is required when performing transactions for Brazil merchants.
	Function *CardFunction `json:"function,omitempty"`

	// Card verification value/number.
	SecurityCode *string `json:"securityCode,omitempty"`

	// The ID of a same store (or) sibling store in a hierarchy for which the token was originally created.
	TokenOriginStoreId *string `json:"tokenOriginStoreId,omitempty"`

	// Client-supplied payment token value.
	Value string `json:"value"`
}

// Verification3ds defines model for Verification3ds.
type Verification3ds struct {

	// 3DS response code.
	Code string `json:"code"`

	// Identifier of the scheme.
	Scheme string `json:"scheme"`

	// Interpretation of the response code.
	Status *string `json:"status,omitempty"`
}

// VerificationAvs defines model for VerificationAvs.
type VerificationAvs struct {

	// AVS response code.
	Code string `json:"code"`

	// Identifier of the scheme.
	Scheme string `json:"scheme"`

	// Interpretation of the response code.
	Status *string `json:"status,omitempty"`
}

// VerificationCvv defines model for VerificationCvv.
type VerificationCvv struct {

	// CVV response code.
	Code string `json:"code"`

	// Identifier of the scheme.
	Scheme string `json:"scheme"`

	// Interpretation of the response code.
	Status *string `json:"status,omitempty"`
}

// VoidPreAuthTransactions defines model for VoidPreAuthTransactions.
type VoidPreAuthTransactions struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema
}

// VoidTransaction defines model for VoidTransaction.
type VoidTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/SecondaryTransaction)
	SecondaryTransaction
	// Embedded fields due to inline allOf schema

	// Amount of the transaction.
	TransactionAmount *Amount `json:"transactionAmount,omitempty"`
}

// WalletPaymentMethod defines model for WalletPaymentMethod.
type WalletPaymentMethod struct {

	// Type of wallet.
	WalletType string `json:"walletType"`
}

// WalletPreAuthTransaction defines model for WalletPreAuthTransaction.
type WalletPreAuthTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// This flag can only be used in a preAuth transaction that updates the amount of a previous preAuth transaction to either increase the preAuth amount (DecrementalPreAuthFlag = false) or decrease the preAuth amount (DecrementalPreAuthFlag = true).
	DecrementalFlag *DecrementalPreAuthFlag `json:"decrementalFlag,omitempty"`

	// Payment facilitator details provided by the merchant.
	PaymentFacilitator *PaymentFacilitator `json:"paymentFacilitator,omitempty"`

	// Split-shipment related information, in order to reuse the same authorization.
	SplitShipment *SplitShipment `json:"splitShipment,omitempty"`

	// Various wallet payment methods the gateway supports. Abstract class, do not use this class directly, use one of its children: EncryptedApplePayWalletPaymentMethod, EncryptedGooglePayWalletPaymentMethod, EncryptedSamsungPayWalletPaymentMethod, DecryptedApplePayWalletPaymentMethod, DecryptedGooglePayWalletPaymentMethod, DecryptedSamsungPayWalletPaymentMethod, MasterpassWalletPaymentMethod
	WalletPaymentMethod WalletPaymentMethod `json:"walletPaymentMethod"`
}

// WalletSaleTransaction defines model for WalletSaleTransaction.
type WalletSaleTransaction struct {
	// Embedded struct due to allOf(#/components/schemas/PrimaryTransaction)
	PrimaryTransaction
	// Embedded fields due to inline allOf schema

	// Payment facilitator details provided by the merchant.
	PaymentFacilitator *PaymentFacilitator `json:"paymentFacilitator,omitempty"`

	// Various wallet payment methods the gateway supports. Abstract class, do not use this class directly, use one of its children: EncryptedApplePayWalletPaymentMethod, EncryptedGooglePayWalletPaymentMethod, EncryptedSamsungPayWalletPaymentMethod, DecryptedApplePayWalletPaymentMethod, DecryptedGooglePayWalletPaymentMethod, DecryptedSamsungPayWalletPaymentMethod, MasterpassWalletPaymentMethod
	WalletPaymentMethod WalletPaymentMethod `json:"walletPaymentMethod"`
}

// AccessTokenParam defines model for AccessTokenParam.
type AccessTokenParam string

// ApiKeyParam defines model for ApiKeyParam.
type ApiKeyParam string

// ClientRequestIdParam defines model for ClientRequestIdParam.
type ClientRequestIdParam string

// ConnectModeQueryParam defines model for ConnectModeQueryParam.
type ConnectModeQueryParam string

// List of ConnectModeQueryParam
const (
	ConnectModeQueryParam_Classic  ConnectModeQueryParam = "Classic"
	ConnectModeQueryParam_Combined ConnectModeQueryParam = "Combined"
)

// ContentTypeParam defines model for ContentTypeParam.
type ContentTypeParam string

// List of ContentTypeParam
const (
	ContentTypeParam_application_json ContentTypeParam = "application/json"
)

// DomainQueryParam defines model for DomainQueryParam.
type DomainQueryParam string

// FromDateQueryParam defines model for FromDateQueryParam.
type FromDateQueryParam string

// IpAddressQueryParam defines model for IpAddressQueryParam.
type IpAddressQueryParam string

// MerchantTransactionIdQueryParam defines model for MerchantTransactionIdQueryParam.
type MerchantTransactionIdQueryParam string

// MessageSignatureParam defines model for MessageSignatureParam.
type MessageSignatureParam string

// NameQueryParam defines model for NameQueryParam.
type NameQueryParam string

// OrderIdParam defines model for OrderIdParam.
type OrderIdParam string

// OrderIdQueryParam defines model for OrderIdQueryParam.
type OrderIdQueryParam string

// PaymentUrlIdQueryParam defines model for PaymentUrlIdQueryParam.
type PaymentUrlIdQueryParam string

// RegionParam defines model for RegionParam.
type RegionParam string

// StatusQueryParam defines model for StatusQueryParam.
type StatusQueryParam string

// StoreIdParam defines model for StoreIdParam.
type StoreIdParam string

// StoreIdPathParam defines model for StoreIdPathParam.
type StoreIdPathParam string

// TerminalIdQueryParam defines model for TerminalIdQueryParam.
type TerminalIdQueryParam string

// TimestampParam defines model for TimestampParam.
type TimestampParam int64

// ToDateQueryParam defines model for ToDateQueryParam.
type ToDateQueryParam string

// TokenIdParam defines model for TokenIdParam.
type TokenIdParam string

// TokenIdentifierQueryParam defines model for TokenIdentifierQueryParam.
type TokenIdentifierQueryParam string

// TraceNumberQueryParam defines model for TraceNumberQueryParam.
type TraceNumberQueryParam int32

// TransactionIdParam defines model for TransactionIdParam.
type TransactionIdParam string

// TransactionIdQueryParam defines model for TransactionIdQueryParam.
type TransactionIdQueryParam string

// TransactionTimeQueryParam defines model for TransactionTimeQueryParam.
type TransactionTimeQueryParam string

// BadRequest defines model for BadRequest.
type BadRequest ErrorResponse

// EndpointCommunicationError defines model for EndpointCommunicationError.
type EndpointCommunicationError ErrorResponse

// EndpointDeclined defines model for EndpointDeclined.
type EndpointDeclined ErrorResponse

// GatewayDeclined defines model for GatewayDeclined.
type GatewayDeclined ErrorResponse

// NotFound defines model for NotFound.
type NotFound ErrorResponse

// PaymentTokenizationEndpointDeclined defines model for PaymentTokenizationEndpointDeclined.
type PaymentTokenizationEndpointDeclined PaymentTokenizationErrorResponse

// PaymentTokenizationGatewayDeclined defines model for PaymentTokenizationGatewayDeclined.
type PaymentTokenizationGatewayDeclined PaymentTokenizationErrorResponse

// ServerError defines model for ServerError.
type ServerError ErrorResponse

// TransactionEndpointDeclined defines model for TransactionEndpointDeclined.
type TransactionEndpointDeclined TransactionErrorResponse

// TransactionGatewayDeclined defines model for TransactionGatewayDeclined.
type TransactionGatewayDeclined TransactionErrorResponse

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated ErrorResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized ErrorResponse

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType ErrorResponse

// AuthenticationVerificationRequestRequestBody defines model for AuthenticationVerificationRequestRequestBody.
type AuthenticationVerificationRequestRequestBody AuthenticationUpdateRequest

// PaymentSchedulesRequestRequestBody defines model for PaymentSchedulesRequestRequestBody.
type PaymentSchedulesRequestRequestBody PaymentSchedulesRequest

// SecondaryTransactionRequestBody defines model for SecondaryTransactionRequestBody.
type SecondaryTransactionRequestBody SecondaryTransaction

// LookupAccountJSONBody defines parameters for LookupAccount.
type LookupAccountJSONBody AccountInfoLookupRequest

// LookupAccountParams defines parameters for LookupAccount.
type LookupAccountParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this LookupAccountParams) WithHeaders(hdr *HeaderData) *LookupAccountParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// VerifyAccountJSONBody defines parameters for VerifyAccount.
type VerifyAccountJSONBody AccountVerificationRequest

// VerifyAccountParams defines parameters for VerifyAccount.
type VerifyAccountParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this VerifyAccountParams) WithHeaders(hdr *HeaderData) *VerifyAccountParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// PostAuthenticationAccessTokensJSONBody defines parameters for PostAuthenticationAccessTokens.
type PostAuthenticationAccessTokensJSONBody AccessTokenRequest

// PostAuthenticationAccessTokensParams defines parameters for PostAuthenticationAccessTokens.
type PostAuthenticationAccessTokensParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`
}

func (this PostAuthenticationAccessTokensParams) WithHeaders(hdr *HeaderData) *PostAuthenticationAccessTokensParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature
	return &this
}

// CardInfoLookupJSONBody defines parameters for CardInfoLookup.
type CardInfoLookupJSONBody CardInfoLookupRequest

// CardInfoLookupParams defines parameters for CardInfoLookup.
type CardInfoLookupParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this CardInfoLookupParams) WithHeaders(hdr *HeaderData) *CardInfoLookupParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// VerifyCardJSONBody defines parameters for VerifyCard.
type VerifyCardJSONBody CardVerificationRequest

// VerifyCardParams defines parameters for VerifyCard.
type VerifyCardParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this VerifyCardParams) WithHeaders(hdr *HeaderData) *VerifyCardParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// GetExchangeRateJSONBody defines parameters for GetExchangeRate.
type GetExchangeRateJSONBody ExchangeRateRequest

// GetExchangeRateParams defines parameters for GetExchangeRate.
type GetExchangeRateParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this GetExchangeRateParams) WithHeaders(hdr *HeaderData) *GetExchangeRateParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// PostFraudClientRegistrationJSONBody defines parameters for PostFraudClientRegistration.
type PostFraudClientRegistrationJSONBody ClientRegistration

// PostFraudClientRegistrationParams defines parameters for PostFraudClientRegistration.
type PostFraudClientRegistrationParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this PostFraudClientRegistrationParams) WithHeaders(hdr *HeaderData) *PostFraudClientRegistrationParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// PostFraudPaymentRegistrationJSONBody defines parameters for PostFraudPaymentRegistration.
type PostFraudPaymentRegistrationJSONBody PaymentRegistration

// PostFraudPaymentRegistrationParams defines parameters for PostFraudPaymentRegistration.
type PostFraudPaymentRegistrationParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this PostFraudPaymentRegistrationParams) WithHeaders(hdr *HeaderData) *PostFraudPaymentRegistrationParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// ScoreOnlyJSONBody defines parameters for ScoreOnly.
type ScoreOnlyJSONBody ScoreOnlyRequest

// ScoreOnlyParams defines parameters for ScoreOnly.
type ScoreOnlyParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this ScoreOnlyParams) WithHeaders(hdr *HeaderData) *ScoreOnlyParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// OrderInquiryParams defines parameters for OrderInquiry.
type OrderInquiryParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this OrderInquiryParams) WithHeaders(hdr *HeaderData) *OrderInquiryParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// SubmitSecondaryTransactionFromOrderParams defines parameters for SubmitSecondaryTransactionFromOrder.
type SubmitSecondaryTransactionFromOrderParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this SubmitSecondaryTransactionFromOrderParams) WithHeaders(hdr *HeaderData) *SubmitSecondaryTransactionFromOrderParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// CreatePaymentScheduleParams defines parameters for CreatePaymentSchedule.
type CreatePaymentScheduleParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this CreatePaymentScheduleParams) WithHeaders(hdr *HeaderData) *CreatePaymentScheduleParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// CancelPaymentScheduleParams defines parameters for CancelPaymentSchedule.
type CancelPaymentScheduleParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this CancelPaymentScheduleParams) WithHeaders(hdr *HeaderData) *CancelPaymentScheduleParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// InquiryPaymentScheduleParams defines parameters for InquiryPaymentSchedule.
type InquiryPaymentScheduleParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this InquiryPaymentScheduleParams) WithHeaders(hdr *HeaderData) *InquiryPaymentScheduleParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// UpdatePaymentScheduleParams defines parameters for UpdatePaymentSchedule.
type UpdatePaymentScheduleParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this UpdatePaymentScheduleParams) WithHeaders(hdr *HeaderData) *UpdatePaymentScheduleParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// UpdatePaymentTokenJSONBody defines parameters for UpdatePaymentToken.
type UpdatePaymentTokenJSONBody PaymentCardPaymentTokenUpdateRequest

// UpdatePaymentTokenParams defines parameters for UpdatePaymentToken.
type UpdatePaymentTokenParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// The access token previously generated with the access-tokens call. Use the format 'Bearer {access-token}'.
	Authorization *AccessTokenParam `json:"Authorization,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this UpdatePaymentTokenParams) WithHeaders(hdr *HeaderData) *UpdatePaymentTokenParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// CreatePaymentTokenJSONBody defines parameters for CreatePaymentToken.
type CreatePaymentTokenJSONBody PaymentTokenizationRequest

// CreatePaymentTokenParams defines parameters for CreatePaymentToken.
type CreatePaymentTokenParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// The access token previously generated with the access-tokens call. Use the format 'Bearer {access-token}'.
	Authorization *AccessTokenParam `json:"Authorization,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this CreatePaymentTokenParams) WithHeaders(hdr *HeaderData) *CreatePaymentTokenParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// DeletePaymentTokenParams defines parameters for DeletePaymentToken.
type DeletePaymentTokenParams struct {
	StoreId *string `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// The access token previously generated with the access-tokens call. Use the format 'Bearer {access-token}'.
	Authorization *AccessTokenParam `json:"Authorization,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this DeletePaymentTokenParams) WithHeaders(hdr *HeaderData) *DeletePaymentTokenParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// GetPaymentTokenDetailsParams defines parameters for GetPaymentTokenDetails.
type GetPaymentTokenDetailsParams struct {
	StoreId *string `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// The access token previously generated with the access-tokens call. Use the format 'Bearer {access-token}'.
	Authorization *AccessTokenParam `json:"Authorization,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this GetPaymentTokenDetailsParams) WithHeaders(hdr *HeaderData) *GetPaymentTokenDetailsParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// DeletePaymentUrlParams defines parameters for DeletePaymentUrl.
type DeletePaymentUrlParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId.
	TransactionId *TransactionIdQueryParam `json:"transactionId,omitempty"`

	// Gateway order identifier as returned in the parameter orderId.
	OrderId *OrderIdQueryParam `json:"orderId,omitempty"`

	// The ID code from the payment URL.
	PaymentUrlId *PaymentUrlIdQueryParam `json:"paymentUrlId,omitempty"`

	// The transaction time in seconds since epoch.
	TransactionTime *TransactionTimeQueryParam `json:"transactionTime,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this DeletePaymentUrlParams) WithHeaders(hdr *HeaderData) *DeletePaymentUrlParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// PaymentUrlDetailParams defines parameters for PaymentUrlDetail.
type PaymentUrlDetailParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Gateway order identifier as returned in the parameter orderId.
	OrderId *OrderIdQueryParam `json:"orderId,omitempty"`

	// Gateway merchant identifier as returned in the parameter merchantTransactionId.
	MerchantTransactionId *MerchantTransactionIdQueryParam `json:"merchantTransactionId,omitempty"`

	// The start date for payment URL in seconds since epoch.
	FromDate FromDateQueryParam `json:"fromDate"`

	// The end date for payment URL search query in seconds since epoch.
	ToDate ToDateQueryParam `json:"toDate"`

	// The status of payment URL.
	Status *StatusQueryParam `json:"status,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this PaymentUrlDetailParams) WithHeaders(hdr *HeaderData) *PaymentUrlDetailParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// CreatePaymentUrlJSONBody defines parameters for CreatePaymentUrl.
type CreatePaymentUrlJSONBody PaymentUrlRequest

// CreatePaymentUrlParams defines parameters for CreatePaymentUrl.
type CreatePaymentUrlParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this CreatePaymentUrlParams) WithHeaders(hdr *HeaderData) *CreatePaymentUrlParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// SubmitPrimaryTransactionJSONBody defines parameters for SubmitPrimaryTransaction.
type SubmitPrimaryTransactionJSONBody PrimaryTransaction

// SubmitPrimaryTransactionParams defines parameters for SubmitPrimaryTransaction.
type SubmitPrimaryTransactionParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this SubmitPrimaryTransactionParams) WithHeaders(hdr *HeaderData) *SubmitPrimaryTransactionParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// TransactionInquiryParams defines parameters for TransactionInquiry.
type TransactionInquiryParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this TransactionInquiryParams) WithHeaders(hdr *HeaderData) *TransactionInquiryParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// FinalizeSecureTransactionJSONBody defines parameters for FinalizeSecureTransaction.
type FinalizeSecureTransactionJSONBody AuthenticationUpdateRequest

// FinalizeSecureTransactionParams defines parameters for FinalizeSecureTransaction.
type FinalizeSecureTransactionParams struct {

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this FinalizeSecureTransactionParams) WithHeaders(hdr *HeaderData) *FinalizeSecureTransactionParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// SubmitSecondaryTransactionParams defines parameters for SubmitSecondaryTransaction.
type SubmitSecondaryTransactionParams struct {

	// An optional outlet ID for clients that support multiple stores in the same developer app.
	StoreId *StoreIdParam `json:"storeId,omitempty"`

	// Content type.
	ContentType ContentTypeParam `json:"Content-Type"`

	// A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
	ClientRequestId ClientRequestIdParam `json:"Client-Request-Id"`

	// Key given to merchant after boarding associating their requests with the appropriate app in Apigee.
	ApiKey ApiKeyParam `json:"Api-Key"`

	// Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
	Timestamp TimestampParam `json:"Timestamp"`

	// Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
	MessageSignature *MessageSignatureParam `json:"Message-Signature,omitempty"`

	// Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing.
	Region *RegionParam `json:"Region,omitempty"`
}

func (this SubmitSecondaryTransactionParams) WithHeaders(hdr *HeaderData) *SubmitSecondaryTransactionParams {

	this.ContentType = hdr.ContentType
	this.ClientRequestId = hdr.ClientRequestId
	this.ApiKey = hdr.ApiKey
	this.Timestamp = hdr.Timestamp
	this.MessageSignature = &hdr.MessageSignature

	return &this
}

// LookupAccountRequestBody defines body for LookupAccount for application/json ContentType.
type LookupAccountJSONRequestBody LookupAccountJSONBody

// VerifyAccountRequestBody defines body for VerifyAccount for application/json ContentType.
type VerifyAccountJSONRequestBody VerifyAccountJSONBody

// PostAuthenticationAccessTokensRequestBody defines body for PostAuthenticationAccessTokens for application/json ContentType.
type PostAuthenticationAccessTokensJSONRequestBody PostAuthenticationAccessTokensJSONBody

// CardInfoLookupRequestBody defines body for CardInfoLookup for application/json ContentType.
type CardInfoLookupJSONRequestBody CardInfoLookupJSONBody

// VerifyCardRequestBody defines body for VerifyCard for application/json ContentType.
type VerifyCardJSONRequestBody VerifyCardJSONBody

// GetExchangeRateRequestBody defines body for GetExchangeRate for application/json ContentType.
type GetExchangeRateJSONRequestBody GetExchangeRateJSONBody

// PostFraudClientRegistrationRequestBody defines body for PostFraudClientRegistration for application/json ContentType.
type PostFraudClientRegistrationJSONRequestBody PostFraudClientRegistrationJSONBody

// PostFraudPaymentRegistrationRequestBody defines body for PostFraudPaymentRegistration for application/json ContentType.
type PostFraudPaymentRegistrationJSONRequestBody PostFraudPaymentRegistrationJSONBody

// ScoreOnlyRequestBody defines body for ScoreOnly for application/json ContentType.
type ScoreOnlyJSONRequestBody ScoreOnlyJSONBody

// SubmitSecondaryTransactionFromOrderRequestBody defines body for SubmitSecondaryTransactionFromOrder for application/json ContentType.
type SubmitSecondaryTransactionFromOrderJSONRequestBody SecondaryTransaction

// CreatePaymentScheduleRequestBody defines body for CreatePaymentSchedule for application/json ContentType.
type CreatePaymentScheduleJSONRequestBody PaymentSchedulesRequest

// UpdatePaymentScheduleRequestBody defines body for UpdatePaymentSchedule for application/json ContentType.
type UpdatePaymentScheduleJSONRequestBody PaymentSchedulesRequest

// UpdatePaymentTokenRequestBody defines body for UpdatePaymentToken for application/json ContentType.
type UpdatePaymentTokenJSONRequestBody UpdatePaymentTokenJSONBody

// CreatePaymentTokenRequestBody defines body for CreatePaymentToken for application/json ContentType.
type CreatePaymentTokenJSONRequestBody CreatePaymentTokenJSONBody

// CreatePaymentUrlRequestBody defines body for CreatePaymentUrl for application/json ContentType.
type CreatePaymentUrlJSONRequestBody CreatePaymentUrlJSONBody

// SubmitPrimaryTransactionRequestBody defines body for SubmitPrimaryTransaction for application/json ContentType.
type SubmitPrimaryTransactionJSONRequestBody SubmitPrimaryTransactionJSONBody

// FinalizeSecureTransactionRequestBody defines body for FinalizeSecureTransaction for application/json ContentType.
type FinalizeSecureTransactionJSONRequestBody FinalizeSecureTransactionJSONBody

// SubmitSecondaryTransactionRequestBody defines body for SubmitSecondaryTransaction for application/json ContentType.
type SubmitSecondaryTransactionJSONRequestBody SecondaryTransaction

// Code generated by go-swagger; DO NOT EDIT.

package prepaid

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new prepaid API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for prepaid API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CrossWalletTransferV1FvEmea(params *CrossWalletTransferV1FvEmeaParams) (*CrossWalletTransferV1FvEmeaOK, error)

	WalletRedemptionV1FvEmea(params *WalletRedemptionV1FvEmeaParams) (*WalletRedemptionV1FvEmeaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CrossWalletTransferV1FvEmea crosses wallet transfer

  Customer cross currency transfer service<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CrossWalletTransferV1FvEmea(params *CrossWalletTransferV1FvEmeaParams) (*CrossWalletTransferV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrossWalletTransferV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crossWalletTransfer_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/crossWalletTransfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrossWalletTransferV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrossWalletTransferV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for crossWalletTransfer_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WalletRedemptionV1FvEmea wallets redemption

  This service is used to perform a multi wallet redemption service for the account<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) WalletRedemptionV1FvEmea(params *WalletRedemptionV1FvEmeaParams) (*WalletRedemptionV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWalletRedemptionV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "walletRedemption_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/walletRedemption",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WalletRedemptionV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WalletRedemptionV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for walletRedemption_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package authorisations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// OutstandingAuthorisationInquiryV1FvEmeaReader is a Reader for the OutstandingAuthorisationInquiryV1FvEmea structure.
type OutstandingAuthorisationInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OutstandingAuthorisationInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewOutstandingAuthorisationInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOutstandingAuthorisationInquiryV1FvEmeaOK creates a OutstandingAuthorisationInquiryV1FvEmeaOK with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaOK() *OutstandingAuthorisationInquiryV1FvEmeaOK {
	return &OutstandingAuthorisationInquiryV1FvEmeaOK{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type OutstandingAuthorisationInquiryV1FvEmeaOK struct {
	Payload *models.OutstandingAuthorisationInquiryResponse
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaOK) GetPayload() *models.OutstandingAuthorisationInquiryResponse {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OutstandingAuthorisationInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaBadRequest creates a OutstandingAuthorisationInquiryV1FvEmeaBadRequest with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaBadRequest() *OutstandingAuthorisationInquiryV1FvEmeaBadRequest {
	return &OutstandingAuthorisationInquiryV1FvEmeaBadRequest{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type OutstandingAuthorisationInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaUnauthorized creates a OutstandingAuthorisationInquiryV1FvEmeaUnauthorized with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaUnauthorized() *OutstandingAuthorisationInquiryV1FvEmeaUnauthorized {
	return &OutstandingAuthorisationInquiryV1FvEmeaUnauthorized{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type OutstandingAuthorisationInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaForbidden creates a OutstandingAuthorisationInquiryV1FvEmeaForbidden with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaForbidden() *OutstandingAuthorisationInquiryV1FvEmeaForbidden {
	return &OutstandingAuthorisationInquiryV1FvEmeaForbidden{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type OutstandingAuthorisationInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaNotFound creates a OutstandingAuthorisationInquiryV1FvEmeaNotFound with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaNotFound() *OutstandingAuthorisationInquiryV1FvEmeaNotFound {
	return &OutstandingAuthorisationInquiryV1FvEmeaNotFound{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type OutstandingAuthorisationInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaTooManyRequests creates a OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaTooManyRequests() *OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests {
	return &OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaStatus452 creates a OutstandingAuthorisationInquiryV1FvEmeaStatus452 with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaStatus452() *OutstandingAuthorisationInquiryV1FvEmeaStatus452 {
	return &OutstandingAuthorisationInquiryV1FvEmeaStatus452{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type OutstandingAuthorisationInquiryV1FvEmeaStatus452 struct {
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaStatus452 ", 452)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaStatus453 creates a OutstandingAuthorisationInquiryV1FvEmeaStatus453 with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaStatus453() *OutstandingAuthorisationInquiryV1FvEmeaStatus453 {
	return &OutstandingAuthorisationInquiryV1FvEmeaStatus453{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type OutstandingAuthorisationInquiryV1FvEmeaStatus453 struct {
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaStatus453 ", 453)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaStatus455 creates a OutstandingAuthorisationInquiryV1FvEmeaStatus455 with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaStatus455() *OutstandingAuthorisationInquiryV1FvEmeaStatus455 {
	return &OutstandingAuthorisationInquiryV1FvEmeaStatus455{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type OutstandingAuthorisationInquiryV1FvEmeaStatus455 struct {
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaStatus455 ", 455)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOutstandingAuthorisationInquiryV1FvEmeaStatus465 creates a OutstandingAuthorisationInquiryV1FvEmeaStatus465 with default headers values
func NewOutstandingAuthorisationInquiryV1FvEmeaStatus465() *OutstandingAuthorisationInquiryV1FvEmeaStatus465 {
	return &OutstandingAuthorisationInquiryV1FvEmeaStatus465{}
}

/*OutstandingAuthorisationInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE5SOA01S : SERVICE INPUT TO ACCT AUTH RETRIVE SERVICE IS AN INCORRECT LENGTH<BR/>VPE5SOA04S : APPLICATION IN NO-PROCESSING STATUS RETRY IN A FEW MINUTES<BR/>VPE5SOA05S : REQUESTED ORGANIZATION NUMBER IS NOT FOUND<BR/>VPE5SOA06S : ORGANIZATION FILE NOT AVAILABLE<BR/>VPE5SOA07S : RECEIVED ACCOUNT NUMBER IS NOT VALID<BR/>VPE5SOA08S : CONTINUTY KEY FLAG IS NOT VALID<BR/>VPE5SOA09S : CONTINUTY KEY ORG IS NOT VALID<BR/>VPE5SOA10S : CONTINUTY KEY ACCT IS NOT VALID<BR/>VPE5SOA11S : CONTINUTY KEY CARD SEQ IS NOT VALID<BR/>VPE5SOA12S : CONTINUTY KEY EFF DATE IS NOT VALID<BR/>VPE5SOA13S : CONTINUTY KEY TIME IS NOT VALID<BR/>VPE5SOA14S : CONTINUTY KEY CARD NUMBER IS NOT VALID<BR/>VPE5SOA15S : CONTINUTY KEY TXN REC TYPE IS NOT VALID<BR/>VPE5SOA16S : CONTINUTY KEY ACCOUNT LOG ID IS NOT VALID<BR/>VPE5SOA17S : CONTINUTY KEY ACCOUNT LOG EXT IS NOT VALID<BR/>VPE5SOA18S : CONTINUTY KEY ACCOUNT RBA IS NOT VALID<BR/>VPE5SOA19S : ORGANIZATION NUMBER NOT FOUND<BR/>VPE5SOA21S : ACCOUNT FILE NOT AVAILABLE<BR/>VPE5SOA22S : ACCOUNT NUMBER NOT FOUND<BR/>VPE5SOA23S : FAS FILE TABLE RECORD NOT FOUND<BR/>VPE5SOA24S : REQUESTED REASON DESCRIPTION COULD NOT BE DETERMINED<BR/>VPE5SOA25S : FAS REASON DESCRIPTION FILE ACCESS ERROR<BR/>VPE5SOAZ3S : FILE-TABLE USED BY THIS SERVICE IS MISSING<BR/>VPE5SOAZ3S : FILE-TABLE USED BY THIS SERVICE IS MISSING<BR/>VPE5SOAZ5S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPE5SOAZ6S : REQUESTED ORGANIZATION COULD NOT BE DETERMINE
*/
type OutstandingAuthorisationInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/outstandingAuthorisationInquiry][%d] outstandingAuthorisationInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *OutstandingAuthorisationInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package authorisations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// AuthorisationReversalandRequestV1FvEmeaReader is a Reader for the AuthorisationReversalandRequestV1FvEmea structure.
type AuthorisationReversalandRequestV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthorisationReversalandRequestV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthorisationReversalandRequestV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthorisationReversalandRequestV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthorisationReversalandRequestV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuthorisationReversalandRequestV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthorisationReversalandRequestV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAuthorisationReversalandRequestV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewAuthorisationReversalandRequestV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewAuthorisationReversalandRequestV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewAuthorisationReversalandRequestV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewAuthorisationReversalandRequestV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuthorisationReversalandRequestV1FvEmeaOK creates a AuthorisationReversalandRequestV1FvEmeaOK with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaOK() *AuthorisationReversalandRequestV1FvEmeaOK {
	return &AuthorisationReversalandRequestV1FvEmeaOK{}
}

/*AuthorisationReversalandRequestV1FvEmeaOK handles this case with default header values.

successful operation
*/
type AuthorisationReversalandRequestV1FvEmeaOK struct {
	Payload *models.AuthorisationReversalandRequestResponse
}

func (o *AuthorisationReversalandRequestV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaOK) GetPayload() *models.AuthorisationReversalandRequestResponse {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorisationReversalandRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaBadRequest creates a AuthorisationReversalandRequestV1FvEmeaBadRequest with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaBadRequest() *AuthorisationReversalandRequestV1FvEmeaBadRequest {
	return &AuthorisationReversalandRequestV1FvEmeaBadRequest{}
}

/*AuthorisationReversalandRequestV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type AuthorisationReversalandRequestV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *AuthorisationReversalandRequestV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaUnauthorized creates a AuthorisationReversalandRequestV1FvEmeaUnauthorized with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaUnauthorized() *AuthorisationReversalandRequestV1FvEmeaUnauthorized {
	return &AuthorisationReversalandRequestV1FvEmeaUnauthorized{}
}

/*AuthorisationReversalandRequestV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type AuthorisationReversalandRequestV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *AuthorisationReversalandRequestV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaForbidden creates a AuthorisationReversalandRequestV1FvEmeaForbidden with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaForbidden() *AuthorisationReversalandRequestV1FvEmeaForbidden {
	return &AuthorisationReversalandRequestV1FvEmeaForbidden{}
}

/*AuthorisationReversalandRequestV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type AuthorisationReversalandRequestV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *AuthorisationReversalandRequestV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaNotFound creates a AuthorisationReversalandRequestV1FvEmeaNotFound with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaNotFound() *AuthorisationReversalandRequestV1FvEmeaNotFound {
	return &AuthorisationReversalandRequestV1FvEmeaNotFound{}
}

/*AuthorisationReversalandRequestV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type AuthorisationReversalandRequestV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *AuthorisationReversalandRequestV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaTooManyRequests creates a AuthorisationReversalandRequestV1FvEmeaTooManyRequests with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaTooManyRequests() *AuthorisationReversalandRequestV1FvEmeaTooManyRequests {
	return &AuthorisationReversalandRequestV1FvEmeaTooManyRequests{}
}

/*AuthorisationReversalandRequestV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type AuthorisationReversalandRequestV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *AuthorisationReversalandRequestV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaStatus452 creates a AuthorisationReversalandRequestV1FvEmeaStatus452 with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaStatus452() *AuthorisationReversalandRequestV1FvEmeaStatus452 {
	return &AuthorisationReversalandRequestV1FvEmeaStatus452{}
}

/*AuthorisationReversalandRequestV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type AuthorisationReversalandRequestV1FvEmeaStatus452 struct {
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaStatus452 ", 452)
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaStatus453 creates a AuthorisationReversalandRequestV1FvEmeaStatus453 with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaStatus453() *AuthorisationReversalandRequestV1FvEmeaStatus453 {
	return &AuthorisationReversalandRequestV1FvEmeaStatus453{}
}

/*AuthorisationReversalandRequestV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type AuthorisationReversalandRequestV1FvEmeaStatus453 struct {
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaStatus453 ", 453)
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaStatus455 creates a AuthorisationReversalandRequestV1FvEmeaStatus455 with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaStatus455() *AuthorisationReversalandRequestV1FvEmeaStatus455 {
	return &AuthorisationReversalandRequestV1FvEmeaStatus455{}
}

/*AuthorisationReversalandRequestV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type AuthorisationReversalandRequestV1FvEmeaStatus455 struct {
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaStatus455 ", 455)
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorisationReversalandRequestV1FvEmeaStatus465 creates a AuthorisationReversalandRequestV1FvEmeaStatus465 with default headers values
func NewAuthorisationReversalandRequestV1FvEmeaStatus465() *AuthorisationReversalandRequestV1FvEmeaStatus465 {
	return &AuthorisationReversalandRequestV1FvEmeaStatus465{}
}

/*AuthorisationReversalandRequestV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL7SAR01S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SAR02S : SERVICE INPUT TO AB SERVICE IS AN INCORRECT LENGTH<BR/>VPL7SAR04S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL7SAR05S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MIN<BR/>VPL7SAR06S : CARD NUMBER MUST BE NUMERIC<BR/>VPL7SAR07S : CARD TYPE MUST BE EITHER VISA OR MASTERCARD OR DINERS CARD<BR/>VPL7SAR08S : SECURITY VIOLATION USER CANNOT ACCESS THIS ORG<BR/>VPL7SAR09S : STORE ORG MUST BE NUMERIC<BR/>VPL7SAR10S : SECURITY VIOLATION USER CANNOT ACCESS THIS MERCHANT ORG<BR/>VPL7SAR11S : STORE NUMBER MUST BE NUMERIC<BR/>VPL7SAR12S : ACCT NUMBER MUST BE NUMERIC<BR/>VPL7SAR13E : AMOUNT MUST BE NUMERIC<BR/>VPL7SAR14S : PLAN NUMBER MUST BE NUMERIC<BR/>VPL7SAR15E : INVALID EXPIRE DATE<BR/>VPL7SAR16E : INVALID EXPIRE DATE<BR/>VPL7SAR17E : INVALID SECURITY CODE INDICATOR MUST BE 012 OR 9<BR/>VPL7SAR18E : SECURITY CODE IS NOT NUMERIC<BR/>VPL7SAR19E : INVALID BILL PAYMENT INDICATOR<BR/>VPL7SAR20E : INVALID RECURRING PAYMENT INDICATOR<BR/>VPL7SAR21S : INVALID ACCOUNT ORGorLOGO COULD NOT BE FOUND<BR/>VPL7SAR22S : CMS FILE-TABLE USED BY THIS SERVICE NOT FOUND<BR/>VPL7SAR23S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MIN<BR/>VPL7SAR24S : ORGANIZATION NOT FOUND ON FILE<BR/>VPL7SAR25S : FAS FILE-TABLE USED BY THIS SERVICE NOT FOUND<BR/>VPL7SAR26S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MIN<BR/>VPL7SAR27S : ORGANIZATION NOT FOUND ON FILE<BR/>VPL7SAR28S : FAS SYSTEM CONTROL RECORD NOT INITIALIZED<BR/>VPL7SAR29S : FAS END-OF-DAY CUTOFF BEING PROCESSED TRY AGAIN SOON<BR/>VPL7SAR30S : AFTER HRS. UPDATE IN PROGRESS. ACCT ACTIVITY UNAVAILABLE<BR/>VPL7SAR31S : FAS IN EOD AND CMS IS NOT. ACCT ACTIVITY UNAVAILABLE<BR/>VPL7SAR32S : MERCHANT ORG NOT ON FILE<BR/>VPL7SAR33I : MERCHANT ORG SUPPLIED IS ON DUAL CURRENCY<BR/>VPL7SAR34S : MERCHANT DUAL ORG IS NOT FOUND ON FILE<BR/>VPL7SAR35S : ACCOUNT ORG NOT ON FILE<BR/>VPL7SAR36I : ACCOUNT ORG IS ON DUAL CURRENCY<BR/>VPL7SAR37S : ACCOUNT DUAL ORG IS NOT FOUND ON FILE<BR/>VPL7SAR38S : STORE DETAILS NOT ON FILE<BR/>VPL7SAR39S : MERCHANT NOT ALLOWED FOR AUTHORIZING THIS CARD<BR/>VPL7SAR40S : PLAN DETAILS NOT ON FILE<BR/>VPL7SAR41S : PLAN DETAILS ARE INCOMPLETE IN FILE<BR/>VPL7SAR42S : ACCOUNT NOT ON FILE<BR/>VPL7SAR43S : FAS REASON CODE RECORD NOT FOUND ON FILE<BR/>VPL7SAR44S : ISO COUNTRY CODE IS NOT NUMERIC<BR/>VPL7SAR45E : SECURITY CODE IS NOT NUMERIC<BR/>VPL7SAR51E : INVALID EXPIRE DATE<BR/>VPL7SAR52E : INVALID EXPIRE DATE<BR/>VPL7SRA01S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRA02S : SERVICE INPUT TO AB SERVICE IS AN INCORRECT LENGTH<BR/>VPL7SRA04S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL7SRA05S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MIN<BR/>VPL7SRA06E : ORG MUST BE NUMERIC<BR/>VPL7SRA07E : ACCOUNT MUST BE NUMERIC<BR/>VPL7SRA08E : INVALID EFFECTIVE DATE<BR/>VPL7SRA09E : EFFECTIVE DATE MUST BE NUMERIC<BR/>VPL7SRA10E : INVALID EFFECTIVE TIME<BR/>VPL7SRA11E : EFFECTIVE TIME MUST BE NUMERIC<BR/>VPL7SRA12E : FOREIGN USAGE FLAG MUST BE 0 OR 1<BR/>VPL7SRA13S : INVALID ACCOUNT ORGorLOGO COULD NOT BE FOUND<BR/>VPL7SRA14S : CMS FILE-TABLE USED BY THIS SERVICE NOT FOUND<BR/>VPL7SRA15S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MIN<BR/>VPL7SRA16S : ORGANIZATION NOT FOUND ON FILE<BR/>VPL7SRA17S : FAS FILE-TABLE USED BY THIS SERVICE NOT FOUND<BR/>VPL7SRA18S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MIN<BR/>VPL7SRA19S : ORGANIZATION NOT FOUND ON FILE<BR/>VPL7SRA20S : FAS SYSTEM CONTROL RECORD NOT INITIALIZED<BR/>VPL7SRA21S : FAS END-OF-DAY CUTOFF BEING PROCESSED TRY AGAIN SOON<BR/>VPL7SRA22S : AFTER HRS. UPDATE IN PROGRESS. ACCT ACTIVITY UNAVAILABLE<BR/>VPL7SRA23S : FAS IN EOD AND CMS IS NOT. ACCT ACTIVITY UNAVAILABLE<BR/>VPL7SRA24S : ORGANIZATION RECORD NOT FOUND ON FILE<BR/>VPL7SRA25I : FOREIGN FLAG SUPPLIED FOR NON-DUAL CURRENCY<BR/>VPL7SRA26S : DUAL ORG IS NOT FOUND ON FILE<BR/>VPL7SRA27S : ACCOUNT RECORD NOT FOUND ON FILE<BR/>VPL7SRA28S : FAS REASON CODE RECORD NOT FOUND ON FILE<BR/>VPL7SRA29S : MATCHING AUTH IS NOT FOUND ON OUTSTANDING AUTH FILE AMOA<BR/>VPL7SRA30E : AUTHORIZATION MUST BE EITHER APPROVED OR DECLINED.<BR/>VPL7SRA31S : MATCHING AUTH IS NOT FOUND ON ACTIVE FAS LOG FILE FMLG<BR/>VPL7SRA32E : AUTHORIZATION MUST BE EITHER APPROVED OR DECLINED.<BR/>VPL7SRA33E : REVERSAL NOT ALLOWED AT GIVEN LOGO<BR/>VPL7SRA34E : REVERSAL NOT ALLOWED AS ACCT IS INVALID<BR/>VPL7SRA35E : AVS TRANSACTIONS CAN NOT BE REVERSED<BR/>VPL7SRA36E : AVS TRANSACTIONS CAN NOT BE REVERSED<BR/>VPL7SRA37E : TRANSACTION CAN NOT BE REVERSED AS CVV2 WAS INVALID<BR/>VPL7SRA38E : REVERSAL NOT ALLOWED FOR FOREIGN MASTERCARD<BR/>VPL7SRA39S : CARD TYPE MUST BE EITHER VISA OR MASTERCARD OR DINERS CARD<BR/>VPL7SRA40S : REVERSAL DECLINED<BR/>VPL7SRA41S : REVERSAL DECLINED<BR/>VPL7SRA42S : ERROR ATTEMPTING TO UPDATE LOG RECORD<BR/>VPL7SRA43S : ERROR ATTEMPTING TO UPDATE AFTER HRS. LOG RECORD<BR/>VPL7SRA44S : INVALID AUTH REVERSAL REQUEST<BR/>VPL7SRA46S : AUTHORIZATION DECLINED<BR/>VPL7SRA47S : AUTHORIZATION DECLINED<BR/>VPL7SRA48E : SEC-CODE INDICATOR ANDorOR SEC-CODE MUST BE ENTERED<BR/>VPL7SRA49E : IF SEC-CODE IS ENTERED THE SEC PRESENCE IND MUST BE 1<BR/>VPL7SRA50E : AMOUNT MUST BE GREATER THAN ZEROES<BR/>VPL7SRS01S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS02S : SERVICE INPUT TO AB SERVICE IS AN INCORRECT<BR/>VPL7SRS04S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL7SRS05S : APPLICATION IN NO-PROCESSING STATUS RE-TRY<BR/>VPL7SRS06S : CARD NUMBER MUST BE NUMERIC<BR/>VPL7SRS07S : INVALID AUTH REQUEST MUST BE 'A' OR 'R'<BR/>VPL7SRS09S : STORE ORG MUST BE NUMERIC<BR/>VPL7SRS10E : INVALID EFFECTIVE TIME<BR/>VPL7SRS11E : EFFECTIVE TIME MUST BE NUMERIC<BR/>VPL7SRS11S : STORE NUMBER MUST BE NUMERIC<BR/>VPL7SRS12E : FOREIGN USAGE FLAG MUST BE 0 OR 1<BR/>VPL7SRS12S : ACCT NUMBER MUST BE NUMERIC<BR/>VPL7SRS13E : AMOUNT MUST BE NUMERIC<BR/>VPL7SRS14S : PLAN NUMBER MUST BE NUMERIC<BR/>VPL7SRS15E : INVALID EXPIRE DATE<BR/>VPL7SRS16E : INVALID EXPIRE DATE<BR/>VPL7SRS17E : INVALID SECURITY CODE INDICATOR MUST BE 01<BR/>VPL7SRS18E : SECURITY CODE IS NOT NUMERIC<BR/>VPL7SRS19E : INVALID BILL PAYMENT INDICATOR<BR/>VPL7SRS20E : INVALID RECURRING PAYMENT INDICATOR<BR/>VPL7SRS21E : SECURITY CODE IS NOT NUMERIC<BR/>VPL7SRS22E : SECURITY PRES IND IS INVALID<BR/>VPL7SRS23E : SECURITY PRES IND IS INVALID<BR/>VPL7SRS24S : ACTION CODE MUST BE GREATER THAN SPACES<BR/>VPL7SRS25S : ACTION CODE RECORD NOT FOUND OR TO BE PURGED<BR/>VPL7SRS26S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS27S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS28S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS29S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS30S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS31S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SRS32S : ORGANIZATION NUMBER NOT DETERMINED<BR/>VPL7SRS50S : ACTION CODE MUST BE GREATER THAN SPACES<BR/>VPL7SRS51E : INVALID EXPIRE DATE<BR/>VPL7SRS52E : INVALID EFFECTIVE DATE<BR/>VPL7SRS53E : INVALID EXPIRE DATE<BR/>VPL7SRS54E : INVALID EFFECTIVE DATE<BR/>VPL7SRS54S : ACCT NUMBER MUST BE NUMERI
*/
type AuthorisationReversalandRequestV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/authorisationReversalandRequest][%d] authorisationReversalandRequestV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *AuthorisationReversalandRequestV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

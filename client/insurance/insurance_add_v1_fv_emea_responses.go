// Code generated by go-swagger; DO NOT EDIT.

package insurance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// InsuranceAddV1FvEmeaReader is a Reader for the InsuranceAddV1FvEmea structure.
type InsuranceAddV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsuranceAddV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsuranceAddV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsuranceAddV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsuranceAddV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInsuranceAddV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsuranceAddV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewInsuranceAddV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewInsuranceAddV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewInsuranceAddV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewInsuranceAddV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewInsuranceAddV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInsuranceAddV1FvEmeaOK creates a InsuranceAddV1FvEmeaOK with default headers values
func NewInsuranceAddV1FvEmeaOK() *InsuranceAddV1FvEmeaOK {
	return &InsuranceAddV1FvEmeaOK{}
}

/*InsuranceAddV1FvEmeaOK handles this case with default header values.

successful operation
*/
type InsuranceAddV1FvEmeaOK struct {
	Payload *models.InsuranceAddResponse
}

func (o *InsuranceAddV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *InsuranceAddV1FvEmeaOK) GetPayload() *models.InsuranceAddResponse {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InsuranceAddResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsuranceAddV1FvEmeaBadRequest creates a InsuranceAddV1FvEmeaBadRequest with default headers values
func NewInsuranceAddV1FvEmeaBadRequest() *InsuranceAddV1FvEmeaBadRequest {
	return &InsuranceAddV1FvEmeaBadRequest{}
}

/*InsuranceAddV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type InsuranceAddV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *InsuranceAddV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *InsuranceAddV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsuranceAddV1FvEmeaUnauthorized creates a InsuranceAddV1FvEmeaUnauthorized with default headers values
func NewInsuranceAddV1FvEmeaUnauthorized() *InsuranceAddV1FvEmeaUnauthorized {
	return &InsuranceAddV1FvEmeaUnauthorized{}
}

/*InsuranceAddV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type InsuranceAddV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *InsuranceAddV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *InsuranceAddV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsuranceAddV1FvEmeaForbidden creates a InsuranceAddV1FvEmeaForbidden with default headers values
func NewInsuranceAddV1FvEmeaForbidden() *InsuranceAddV1FvEmeaForbidden {
	return &InsuranceAddV1FvEmeaForbidden{}
}

/*InsuranceAddV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type InsuranceAddV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *InsuranceAddV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *InsuranceAddV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsuranceAddV1FvEmeaNotFound creates a InsuranceAddV1FvEmeaNotFound with default headers values
func NewInsuranceAddV1FvEmeaNotFound() *InsuranceAddV1FvEmeaNotFound {
	return &InsuranceAddV1FvEmeaNotFound{}
}

/*InsuranceAddV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type InsuranceAddV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *InsuranceAddV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *InsuranceAddV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsuranceAddV1FvEmeaTooManyRequests creates a InsuranceAddV1FvEmeaTooManyRequests with default headers values
func NewInsuranceAddV1FvEmeaTooManyRequests() *InsuranceAddV1FvEmeaTooManyRequests {
	return &InsuranceAddV1FvEmeaTooManyRequests{}
}

/*InsuranceAddV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type InsuranceAddV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *InsuranceAddV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *InsuranceAddV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsuranceAddV1FvEmeaStatus452 creates a InsuranceAddV1FvEmeaStatus452 with default headers values
func NewInsuranceAddV1FvEmeaStatus452() *InsuranceAddV1FvEmeaStatus452 {
	return &InsuranceAddV1FvEmeaStatus452{}
}

/*InsuranceAddV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type InsuranceAddV1FvEmeaStatus452 struct {
}

func (o *InsuranceAddV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaStatus452 ", 452)
}

func (o *InsuranceAddV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsuranceAddV1FvEmeaStatus453 creates a InsuranceAddV1FvEmeaStatus453 with default headers values
func NewInsuranceAddV1FvEmeaStatus453() *InsuranceAddV1FvEmeaStatus453 {
	return &InsuranceAddV1FvEmeaStatus453{}
}

/*InsuranceAddV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type InsuranceAddV1FvEmeaStatus453 struct {
}

func (o *InsuranceAddV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaStatus453 ", 453)
}

func (o *InsuranceAddV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsuranceAddV1FvEmeaStatus455 creates a InsuranceAddV1FvEmeaStatus455 with default headers values
func NewInsuranceAddV1FvEmeaStatus455() *InsuranceAddV1FvEmeaStatus455 {
	return &InsuranceAddV1FvEmeaStatus455{}
}

/*InsuranceAddV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type InsuranceAddV1FvEmeaStatus455 struct {
}

func (o *InsuranceAddV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaStatus455 ", 455)
}

func (o *InsuranceAddV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsuranceAddV1FvEmeaStatus465 creates a InsuranceAddV1FvEmeaStatus465 with default headers values
func NewInsuranceAddV1FvEmeaStatus465() *InsuranceAddV1FvEmeaStatus465 {
	return &InsuranceAddV1FvEmeaStatus465{}
}

/*InsuranceAddV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE1SIA01S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPE1SIA02S : SERVICE INPUT TO INSURANCE ADD SERVICE IS AN INCORRECT LENGTH<BR/>VPE1SIA04S : FILE-TABLE USED BY THIS SERVICE IS MISSING<BR/>VPE1SIA05S : APPLICATION IN NO-PROCESSING STATUS RETRY IN A FEW MINUTES<BR/>VPE5SIA06S : INVALID ORG FORMAT VALID VALUES ARE SPACES 001 TO 998<BR/>VPE5SIA07S : ACCOUNTorCARD NUMBER SHOULD BE PROVIDED AND BE NUMERIC<BR/>VPE5SIA08E : INVALID LOCALorFOREIGN IND SPECIFIED-VALID VALUES ARE SPACE L OR F<BR/>VPE5SIA09E : INSURANCE PRODUCE CODE CANNOT BE BLANK. PLZ RE-ENTER<BR/>VPE5SIA10E : INVALID ACTION CODE VALID VALUES ARE F AND I. PLZ RE-ENTER<BR/>VPE5SIA11E : EFFECTIVE DATE ENTERED IS NOT A VALID DATE<BR/>VPE5SIA12E : INVALID INSURED PARTY VALID VALUES ARE 012 OR 3. PLZ RE-ENTER<BR/>VPE5SIA13E : WHEN INSURED PARTY = 2 INSURED CUSTOMER MUST BE ENTERED<BR/>VPE5SIA14E : INSURED CUSTOMER NUMBER IS NOT NUMERIC<BR/>VPE5SIA15E : WHEN INSURED PARTY = 0or1or3 - CUST NBR MUST BE SPACES OR ZEROS<BR/>VPE5SIA16E : DATE OF BIRTH ENTERED IS NOT A VALID DATE<BR/>VPE5SIA17S : ORG COULD NOT BE FOUND FOR THE CARDorACCT<BR/>VPE1SIA18S : USER IS NOT ALLOWED TO ACCESS THE ORG<BR/>VPE1SIA19S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE5SIA20S : APPLICATION IN NO-PROCESSING STATUS RETRY IN A FEW MINUTES<BR/>VPE5SIA21S : ORG RECORD NOT ON FILE<BR/>VPE5SIA22S : ACCOUNT FILE NOT OPEN<BR/>VPE5SIA23S : ACCOUNTorCARD NOT FOUND IN CMS FILE<BR/>VPE5SIA24S : LOGO RECORD NOT FOUND<BR/>VPE5SIA25S : INSURANCE PRODUCT FILE NOT OPEN<BR/>VPE5SIA26S : NAME AND ADDRESS FILE NOT OPEN<BR/>VPE5SIA27S : SIX PRODUCTS ALREADY DEFINED FOR THE ACCOUNT<BR/>VPE5SIA28S : ERROR IN ACCESSING INSURANCE PRODUCT FILE<BR/>VPE5SIA29S : ENROLLMENT INSURANCE RECORD NOT FOUND USING DEFAULT<BR/>VPE5SIA30S : INSURANCE TABLE NOT FOUND FOR THIS PRODUCT<BR/>VPE5SIA31S : PREMIUM RATE SHOULD BE ZERO FOR RATE METHOD NOT = 7<BR/>VPE5SIA32S : FICHE NUMBER REQUIRED FOR THIS PRODUCT<BR/>VPE5SIA33S : ERROR WHILE ADDING RECORD IN INSURANCE PRODUCT FILE<BR/>VPE5SIA34S : ERROR WHILE ADDING RECORD IN LOG FILE<BR/>VPE5SIA39S : ERROR WHILE ADDING PRODUCT IN INSURANCE PRODUCT FILE<BR/>VPE5SIA40S : ERROR WHILE ADDING RECORD IN LOG FILE<BR/>VPE5SIA41S : ERROR ACCESSING AMRT WHILE READING FOR PCT-ID<BR/>VPE5SIA42S : ERROR ACCESSING AMRT WHILE READING FOR DEFAULT PCT-ID<BR/>VPE5SIA43S : ERROR ACCESSING AMRT WHILE READING FOR INSURANCE TABLE<BR/>VPE5SIA44S : INS PRODUCT ALREADY EXISTS ON INSURANCE HISTORY<BR/>VPE5SIA45S : ERROR ACCESS INSURANCE HISTORY FILE<BR/>VPE5SIA46S : ERROR ACCESS CUSTOMER TO ACCOUNT CROSS REF FILE<BR/>VPE5SIA47S : ERROR ACCESSING ACCOUNT FILE<BR/>VPE5SIA48S : CUSTOMER NUMBER NOT FOUND<BR/>VPE5SIA49S : ERROR ACCESSING NAME AND ADDRESS FILE<BR/>VPE5SIA50S : INSURANCE PRODUCT ALREADY ADDED FOR THIS ACCOUNT<BR/>VPE5SIA51E : INSURANCE POLICY REF NBR IS NOT VALID FOR NON CREDIT INS PRODUCT<BR/>VPE5SIA51S : NUMBER GENERATION FAILED FOR AMIP-INS-CERT-NBR GENERATION<BR/>VPE5SIA53S : SALES DATE CANNOT BE ZERO<BR/>VPE5SIA17E : SALES DATE ENTERED IS NOT A VALID DATE<BR/>VPE5SIA52S : DATE CANNOT BE IN FUTUR
*/
type InsuranceAddV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *InsuranceAddV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/insuranceAdd][%d] insuranceAddV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *InsuranceAddV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InsuranceAddV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

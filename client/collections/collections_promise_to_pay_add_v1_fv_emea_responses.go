// Code generated by go-swagger; DO NOT EDIT.

package collections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CollectionsPromiseToPayAddV1FvEmeaReader is a Reader for the CollectionsPromiseToPayAddV1FvEmea structure.
type CollectionsPromiseToPayAddV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CollectionsPromiseToPayAddV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCollectionsPromiseToPayAddV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCollectionsPromiseToPayAddV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCollectionsPromiseToPayAddV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCollectionsPromiseToPayAddV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCollectionsPromiseToPayAddV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCollectionsPromiseToPayAddV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCollectionsPromiseToPayAddV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCollectionsPromiseToPayAddV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCollectionsPromiseToPayAddV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCollectionsPromiseToPayAddV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCollectionsPromiseToPayAddV1FvEmeaOK creates a CollectionsPromiseToPayAddV1FvEmeaOK with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaOK() *CollectionsPromiseToPayAddV1FvEmeaOK {
	return &CollectionsPromiseToPayAddV1FvEmeaOK{}
}

/*CollectionsPromiseToPayAddV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CollectionsPromiseToPayAddV1FvEmeaOK struct {
	Payload *models.CollectionsPromiseToPayAddResponse
}

func (o *CollectionsPromiseToPayAddV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaOK) GetPayload() *models.CollectionsPromiseToPayAddResponse {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CollectionsPromiseToPayAddResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaBadRequest creates a CollectionsPromiseToPayAddV1FvEmeaBadRequest with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaBadRequest() *CollectionsPromiseToPayAddV1FvEmeaBadRequest {
	return &CollectionsPromiseToPayAddV1FvEmeaBadRequest{}
}

/*CollectionsPromiseToPayAddV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CollectionsPromiseToPayAddV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CollectionsPromiseToPayAddV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaUnauthorized creates a CollectionsPromiseToPayAddV1FvEmeaUnauthorized with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaUnauthorized() *CollectionsPromiseToPayAddV1FvEmeaUnauthorized {
	return &CollectionsPromiseToPayAddV1FvEmeaUnauthorized{}
}

/*CollectionsPromiseToPayAddV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CollectionsPromiseToPayAddV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CollectionsPromiseToPayAddV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaForbidden creates a CollectionsPromiseToPayAddV1FvEmeaForbidden with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaForbidden() *CollectionsPromiseToPayAddV1FvEmeaForbidden {
	return &CollectionsPromiseToPayAddV1FvEmeaForbidden{}
}

/*CollectionsPromiseToPayAddV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CollectionsPromiseToPayAddV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CollectionsPromiseToPayAddV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaNotFound creates a CollectionsPromiseToPayAddV1FvEmeaNotFound with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaNotFound() *CollectionsPromiseToPayAddV1FvEmeaNotFound {
	return &CollectionsPromiseToPayAddV1FvEmeaNotFound{}
}

/*CollectionsPromiseToPayAddV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CollectionsPromiseToPayAddV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CollectionsPromiseToPayAddV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaTooManyRequests creates a CollectionsPromiseToPayAddV1FvEmeaTooManyRequests with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaTooManyRequests() *CollectionsPromiseToPayAddV1FvEmeaTooManyRequests {
	return &CollectionsPromiseToPayAddV1FvEmeaTooManyRequests{}
}

/*CollectionsPromiseToPayAddV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CollectionsPromiseToPayAddV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CollectionsPromiseToPayAddV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaStatus452 creates a CollectionsPromiseToPayAddV1FvEmeaStatus452 with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaStatus452() *CollectionsPromiseToPayAddV1FvEmeaStatus452 {
	return &CollectionsPromiseToPayAddV1FvEmeaStatus452{}
}

/*CollectionsPromiseToPayAddV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CollectionsPromiseToPayAddV1FvEmeaStatus452 struct {
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaStatus452 ", 452)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaStatus453 creates a CollectionsPromiseToPayAddV1FvEmeaStatus453 with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaStatus453() *CollectionsPromiseToPayAddV1FvEmeaStatus453 {
	return &CollectionsPromiseToPayAddV1FvEmeaStatus453{}
}

/*CollectionsPromiseToPayAddV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CollectionsPromiseToPayAddV1FvEmeaStatus453 struct {
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaStatus453 ", 453)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaStatus455 creates a CollectionsPromiseToPayAddV1FvEmeaStatus455 with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaStatus455() *CollectionsPromiseToPayAddV1FvEmeaStatus455 {
	return &CollectionsPromiseToPayAddV1FvEmeaStatus455{}
}

/*CollectionsPromiseToPayAddV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CollectionsPromiseToPayAddV1FvEmeaStatus455 struct {
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaStatus455 ", 455)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCollectionsPromiseToPayAddV1FvEmeaStatus465 creates a CollectionsPromiseToPayAddV1FvEmeaStatus465 with default headers values
func NewCollectionsPromiseToPayAddV1FvEmeaStatus465() *CollectionsPromiseToPayAddV1FvEmeaStatus465 {
	return &CollectionsPromiseToPayAddV1FvEmeaStatus465{}
}

/*CollectionsPromiseToPayAddV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL6SPP01S : SERVICE COULD NOT OBTAIN STORAGE OUTPUT AREA<BR/>VPL6SPP02S : SERVICE INPUT FOR SERVICE IS AN INCORRECT LENGTH<BR/>VPL6SPP04S : CMS FILE-TABLE RECORD NOT FOUND<BR/>VPL6SPP05S : ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 001-998<BR/>VPL6SPP06S : ACCOUNT NUMBER IS NOT NUMERIC OR EQUALS SPACES<BR/>VPL6SPP01E : INVALID APPLICATION NUMBER - VALID VALUES ARE SPACE ZERO OR 50<BR/>VPL6SPP02E : ACTION CODE IS EQUAL SPACES<BR/>VPL6SPP07S : REQUESTED ORG NUMBER IS NOT FOUND<BR/>VPL6SPP08S : FILE TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL6SPP09S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPL6SPP10S : ORGANIZATION FILE UNAVAILABLE<BR/>VPL6SPP11S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL6SPP12S : COLLECTION MASTER FILE NOT AVAILABLE<BR/>VPL6SPP13S : COLLECTION ACCOUNT NOT FOUND<BR/>VPL6SPP14S : CLASSIFICATION FILE UNAVAILABLE<BR/>VPL6SPP15S : CLASSIFICATION RECORD NOT FOUND<BR/>VPL6SPP16S : INVALID ACTION FOR CLASSIFICATION<BR/>VPL6SPP17S : ACTION CODE NOT FOUND<BR/>VPL6SPP21S : COLLECTOR MASTER FILE UNAVAILABLE<BR/>VPL6SPP22S : COLLECTOR RECORD NOT FOUND<BR/>VPL6SPP18S : ACTION NOT ALLOW WHEN DorA FLAG IS EQUAL 'V'<BR/>VPL6SPP03E : ACTION DATE REQUIRED<BR/>VPL6SPP04E : INVALID ACTION DATE<BR/>VPL6SPP05E : ACTION DATE MUST BE GREATER THAN CURRENT SYSTEM DATE<BR/>VPL6SPP06E : PTP ELAPSE DAYS IS GREATER THAN ACTION DATE MAX DAYS<BR/>VPL6SPP07E : PTP AMOUNT REQUIRED<BR/>VPL6SPP08E : INVALID PTP AMOUNT<BR/>VPL6SPP09E : PTP AMOUNT MUST BE WITHIN COLLECTOR PERCENTAGE AMOUNT<BR/>VPL6SPP10E : PTP AMOUNT MUST BE WITHIN COLLECTOR LIMIT AMOUNT<BR/>VPL6SPP11E : REVIEW DATE REQUIRED<BR/>VPL6SPP19S : INVALID RE-QUEUE FACTOR FOR THIS ACTION<BR/>VPL6SPP12E : INVALID REVIEW DATE - VALID VALUE IS CCYY-MM-DD<BR/>VPL6SPP13E : REVIEW DATE MUST BE GREATER THAN CURRENT SYSTEM DATE<BR/>VPL6SPP14E : REVIEW ELAPSE DAYS IS GREATER THAN ACTION DATE MAX DAYS<BR/>VPL6SPP15E : REVIEW TIME REQUIRED<BR/>VPL6SPP16E : REVIEW TIME MUST BE GREATER THAN CURRENT SYSTEM TIME<BR/>VPL6SPP20S : INVALID RE-QUEUE FACTOR FOR THIS ACTION<BR/>VPL6SPP17E : INVALID REVIEW TIME - VALID VALUE IS HHMM<BR/>VPL6SPP18E : REVIEW TIME MUST BE GREATER THAN CURRENT SYSTEM TIME IF REVIEW DATE IS EQUAL CURRENT SYSTEM DATE<BR/>VPL6SPP23S : MANAGER MASTER FILE UNAVAILABLE<BR/>VPL6SPP24S : MANAGER RECORD NOT FOUND<BR/>VPL6SPP25S : ALTERNATIVE MANAGER RECORD NOT FOUND<BR/>VPL6SPP26S : MANAGER RECORD NOT ACTIVE<BR/>VPL6SPP27S : ACCOUNT IS PURGE OR MANUALLY SATISFIED<BR/>VPL6SPP28S : EXCEPTION OR TICKLER ACCOUNT - ACTION NOT ALLOWE
*/
type CollectionsPromiseToPayAddV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/collectionsPromiseToPayAdd][%d] collectionsPromiseToPayAddV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CollectionsPromiseToPayAddV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

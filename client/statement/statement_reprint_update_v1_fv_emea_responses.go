// Code generated by go-swagger; DO NOT EDIT.

package statement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// StatementReprintUpdateV1FvEmeaReader is a Reader for the StatementReprintUpdateV1FvEmea structure.
type StatementReprintUpdateV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatementReprintUpdateV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStatementReprintUpdateV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStatementReprintUpdateV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStatementReprintUpdateV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStatementReprintUpdateV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStatementReprintUpdateV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewStatementReprintUpdateV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewStatementReprintUpdateV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewStatementReprintUpdateV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewStatementReprintUpdateV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewStatementReprintUpdateV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStatementReprintUpdateV1FvEmeaOK creates a StatementReprintUpdateV1FvEmeaOK with default headers values
func NewStatementReprintUpdateV1FvEmeaOK() *StatementReprintUpdateV1FvEmeaOK {
	return &StatementReprintUpdateV1FvEmeaOK{}
}

/*StatementReprintUpdateV1FvEmeaOK handles this case with default header values.

successful operation
*/
type StatementReprintUpdateV1FvEmeaOK struct {
	Payload *models.StatementReprintUpdateResponse
}

func (o *StatementReprintUpdateV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaOK) GetPayload() *models.StatementReprintUpdateResponse {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatementReprintUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatementReprintUpdateV1FvEmeaBadRequest creates a StatementReprintUpdateV1FvEmeaBadRequest with default headers values
func NewStatementReprintUpdateV1FvEmeaBadRequest() *StatementReprintUpdateV1FvEmeaBadRequest {
	return &StatementReprintUpdateV1FvEmeaBadRequest{}
}

/*StatementReprintUpdateV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type StatementReprintUpdateV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *StatementReprintUpdateV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatementReprintUpdateV1FvEmeaUnauthorized creates a StatementReprintUpdateV1FvEmeaUnauthorized with default headers values
func NewStatementReprintUpdateV1FvEmeaUnauthorized() *StatementReprintUpdateV1FvEmeaUnauthorized {
	return &StatementReprintUpdateV1FvEmeaUnauthorized{}
}

/*StatementReprintUpdateV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type StatementReprintUpdateV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *StatementReprintUpdateV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatementReprintUpdateV1FvEmeaForbidden creates a StatementReprintUpdateV1FvEmeaForbidden with default headers values
func NewStatementReprintUpdateV1FvEmeaForbidden() *StatementReprintUpdateV1FvEmeaForbidden {
	return &StatementReprintUpdateV1FvEmeaForbidden{}
}

/*StatementReprintUpdateV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type StatementReprintUpdateV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *StatementReprintUpdateV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatementReprintUpdateV1FvEmeaNotFound creates a StatementReprintUpdateV1FvEmeaNotFound with default headers values
func NewStatementReprintUpdateV1FvEmeaNotFound() *StatementReprintUpdateV1FvEmeaNotFound {
	return &StatementReprintUpdateV1FvEmeaNotFound{}
}

/*StatementReprintUpdateV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type StatementReprintUpdateV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *StatementReprintUpdateV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatementReprintUpdateV1FvEmeaTooManyRequests creates a StatementReprintUpdateV1FvEmeaTooManyRequests with default headers values
func NewStatementReprintUpdateV1FvEmeaTooManyRequests() *StatementReprintUpdateV1FvEmeaTooManyRequests {
	return &StatementReprintUpdateV1FvEmeaTooManyRequests{}
}

/*StatementReprintUpdateV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type StatementReprintUpdateV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *StatementReprintUpdateV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatementReprintUpdateV1FvEmeaStatus452 creates a StatementReprintUpdateV1FvEmeaStatus452 with default headers values
func NewStatementReprintUpdateV1FvEmeaStatus452() *StatementReprintUpdateV1FvEmeaStatus452 {
	return &StatementReprintUpdateV1FvEmeaStatus452{}
}

/*StatementReprintUpdateV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type StatementReprintUpdateV1FvEmeaStatus452 struct {
}

func (o *StatementReprintUpdateV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaStatus452 ", 452)
}

func (o *StatementReprintUpdateV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatementReprintUpdateV1FvEmeaStatus453 creates a StatementReprintUpdateV1FvEmeaStatus453 with default headers values
func NewStatementReprintUpdateV1FvEmeaStatus453() *StatementReprintUpdateV1FvEmeaStatus453 {
	return &StatementReprintUpdateV1FvEmeaStatus453{}
}

/*StatementReprintUpdateV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type StatementReprintUpdateV1FvEmeaStatus453 struct {
}

func (o *StatementReprintUpdateV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaStatus453 ", 453)
}

func (o *StatementReprintUpdateV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatementReprintUpdateV1FvEmeaStatus455 creates a StatementReprintUpdateV1FvEmeaStatus455 with default headers values
func NewStatementReprintUpdateV1FvEmeaStatus455() *StatementReprintUpdateV1FvEmeaStatus455 {
	return &StatementReprintUpdateV1FvEmeaStatus455{}
}

/*StatementReprintUpdateV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type StatementReprintUpdateV1FvEmeaStatus455 struct {
}

func (o *StatementReprintUpdateV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaStatus455 ", 455)
}

func (o *StatementReprintUpdateV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatementReprintUpdateV1FvEmeaStatus465 creates a StatementReprintUpdateV1FvEmeaStatus465 with default headers values
func NewStatementReprintUpdateV1FvEmeaStatus465() *StatementReprintUpdateV1FvEmeaStatus465 {
	return &StatementReprintUpdateV1FvEmeaStatus465{}
}

/*StatementReprintUpdateV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL8SSR01S : ORGANIZATION NUMBER MUST BE NUMERIC<BR/>VPL8SSR02S : ACCOUNT OR CARD NUMBER REQUIRED<BR/>VPL8SSR03S : STATEMENT TABLE ARRAY SHOULD NOT BE GREATER THAN 24<BR/>VPL8SSR04S : REQUESTED CARDorACCOUNT NUMBER IS NOT FOUND<BR/>VPL8SSR06S : REPID SPACES OR LOW-VALUES<BR/>VPL8SSR08S : ORG NOT DETERMINED<BR/>VPL8SSR10E : INVALID FOREIGN USE INDICATOR<BR/>VPL8SSR12E : STMT DATE MUST BE NUMERIC OR VALID DATE FORMAT<BR/>VPL8SSR13E : STMT DATE 1 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR14E : STMT DATE 2 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR15E : STMT DATE 3 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR16E : STMT DATE 4 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR17E : STMT DATE 5 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR18E : STMT DATE 6 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR19E : STMT DATE 7 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR20E : STMT DATE 8 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR21E : STMT DATE 9 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR22E : STMT DATE 10 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR23E : STMT DATE 11 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR24E : STMT DATE 12 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR25E : STMT DATE 13 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR26E : STMT DATE 14 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR27E : STMT DATE 15 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR28E : STMT DATE 16 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR29E : STMT DATE 17 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR30E : STMT DATE 18 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR31E : STMT DATE 19 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR32E : STMT DATE 20 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR33E : STMT DATE 21 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR34E : STMT DATE 22 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR35E : STMT DATE 23 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR36E : STMT DATE 24 MUST BE OF VALID DATE FORMAT<BR/>VPL8SSR37E : REPRINT FLAG 1  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR38E : REPRINT FLAG 2  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR39E : REPRINT FLAG 3  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR40E : REPRINT FLAG 4  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR41E : REPRINT FLAG 5  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR42E : REPRINT FLAG 6  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR43E : REPRINT FLAG 7  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR44E : REPRINT FLAG 8  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR45E : REPRINT FLAG 9  INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR46E : REPRINT FLAG 10 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR47E : REPRINT FLAG 11 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR48E : REPRINT FLAG 12 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR49E : REPRINT FLAG 13 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR50E : REPRINT FLAG 14 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR51E : REPRINT FLAG 15 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR52E : REPRINT FLAG 16 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR53E : REPRINT FLAG 17 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR54E : REPRINT FLAG 18 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR55E : REPRINT FLAG 19 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR56E : REPRINT FLAG 20 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR57E : REPRINT FLAG 21 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR58E : REPRINT FLAG 22 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR59E : REPRINT FLAG 23 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSR60E : REPRINT FLAG 24 INVALID - VALID VALUES ARE CPD OR Q<BR/>VPL8SSRZ1S : SERVICE INPUT TO SorR SERVICE IS AN INCORRECT LENGTH<BR/>VPL8SSRZ3S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL8SSRZ5S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL8SSRZ6S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL8SSRZ7S : ORGANIZATION FILE UNAVAILABLE<BR/>VPL8SSRZ8S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL8SSRZ9S : FOREIGN ORGANIZATION NUMBER NOT FOUND<BR/>VPL8SSRZAS : APPLICATION IN NO-PROCESSING STATUS<BR/>VPL8SSRZBS : ACCOUNT FILE UNAVAILABLE<BR/>VPL8SSRZFS : ACTION HISTORY FILE UNAVAILABLE<BR/>VPL8SSRZGS : ASM LOG FILE UNAVAILABLE<BR/>VPL8SSRZHS : STATEMENT FILE UNAVAILABLE<BR/>VPL8SSRZIS : REPRESENTATIVE ACTION FILE UNAVAILABL
*/
type StatementReprintUpdateV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *StatementReprintUpdateV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/statementReprintUpdate][%d] statementReprintUpdateV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *StatementReprintUpdateV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *StatementReprintUpdateV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

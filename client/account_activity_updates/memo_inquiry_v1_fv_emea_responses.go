// Code generated by go-swagger; DO NOT EDIT.

package account_activity_updates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// MemoInquiryV1FvEmeaReader is a Reader for the MemoInquiryV1FvEmea structure.
type MemoInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MemoInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMemoInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMemoInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMemoInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMemoInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMemoInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewMemoInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewMemoInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewMemoInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewMemoInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewMemoInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMemoInquiryV1FvEmeaOK creates a MemoInquiryV1FvEmeaOK with default headers values
func NewMemoInquiryV1FvEmeaOK() *MemoInquiryV1FvEmeaOK {
	return &MemoInquiryV1FvEmeaOK{}
}

/*MemoInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type MemoInquiryV1FvEmeaOK struct {
	Payload *models.MemoInquiryResponse
}

func (o *MemoInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *MemoInquiryV1FvEmeaOK) GetPayload() *models.MemoInquiryResponse {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MemoInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoInquiryV1FvEmeaBadRequest creates a MemoInquiryV1FvEmeaBadRequest with default headers values
func NewMemoInquiryV1FvEmeaBadRequest() *MemoInquiryV1FvEmeaBadRequest {
	return &MemoInquiryV1FvEmeaBadRequest{}
}

/*MemoInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type MemoInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *MemoInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *MemoInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoInquiryV1FvEmeaUnauthorized creates a MemoInquiryV1FvEmeaUnauthorized with default headers values
func NewMemoInquiryV1FvEmeaUnauthorized() *MemoInquiryV1FvEmeaUnauthorized {
	return &MemoInquiryV1FvEmeaUnauthorized{}
}

/*MemoInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type MemoInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *MemoInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *MemoInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoInquiryV1FvEmeaForbidden creates a MemoInquiryV1FvEmeaForbidden with default headers values
func NewMemoInquiryV1FvEmeaForbidden() *MemoInquiryV1FvEmeaForbidden {
	return &MemoInquiryV1FvEmeaForbidden{}
}

/*MemoInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type MemoInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *MemoInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *MemoInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoInquiryV1FvEmeaNotFound creates a MemoInquiryV1FvEmeaNotFound with default headers values
func NewMemoInquiryV1FvEmeaNotFound() *MemoInquiryV1FvEmeaNotFound {
	return &MemoInquiryV1FvEmeaNotFound{}
}

/*MemoInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type MemoInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *MemoInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *MemoInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoInquiryV1FvEmeaTooManyRequests creates a MemoInquiryV1FvEmeaTooManyRequests with default headers values
func NewMemoInquiryV1FvEmeaTooManyRequests() *MemoInquiryV1FvEmeaTooManyRequests {
	return &MemoInquiryV1FvEmeaTooManyRequests{}
}

/*MemoInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type MemoInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *MemoInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *MemoInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoInquiryV1FvEmeaStatus452 creates a MemoInquiryV1FvEmeaStatus452 with default headers values
func NewMemoInquiryV1FvEmeaStatus452() *MemoInquiryV1FvEmeaStatus452 {
	return &MemoInquiryV1FvEmeaStatus452{}
}

/*MemoInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type MemoInquiryV1FvEmeaStatus452 struct {
}

func (o *MemoInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaStatus452 ", 452)
}

func (o *MemoInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMemoInquiryV1FvEmeaStatus453 creates a MemoInquiryV1FvEmeaStatus453 with default headers values
func NewMemoInquiryV1FvEmeaStatus453() *MemoInquiryV1FvEmeaStatus453 {
	return &MemoInquiryV1FvEmeaStatus453{}
}

/*MemoInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type MemoInquiryV1FvEmeaStatus453 struct {
}

func (o *MemoInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaStatus453 ", 453)
}

func (o *MemoInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMemoInquiryV1FvEmeaStatus455 creates a MemoInquiryV1FvEmeaStatus455 with default headers values
func NewMemoInquiryV1FvEmeaStatus455() *MemoInquiryV1FvEmeaStatus455 {
	return &MemoInquiryV1FvEmeaStatus455{}
}

/*MemoInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type MemoInquiryV1FvEmeaStatus455 struct {
}

func (o *MemoInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaStatus455 ", 455)
}

func (o *MemoInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMemoInquiryV1FvEmeaStatus465 creates a MemoInquiryV1FvEmeaStatus465 with default headers values
func NewMemoInquiryV1FvEmeaStatus465() *MemoInquiryV1FvEmeaStatus465 {
	return &MemoInquiryV1FvEmeaStatus465{}
}

/*MemoInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE1SGM01S : SERVICE INPUT TO GET MEMO SERVICE IS OF INCORRECT LENGTH<BR/>VPE1SGM03S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE1SGM04S : APPLICATION IN NO-PROCESSING STATUS RETRY IN A FEW MINUTES<BR/>VPE5SGM01S : INVALID SERVICE FUNCTION CODE<BR/>VPE5SGM02S : NO OF RECS MUST BE NUMERIC AND BETWEEN 1 AND 50<BR/>VPE5SGM03S : PLEASE ENTER ACCOUNT NUMBER<BR/>VPE5SGM04S : DATE SHOULD BE 0 FOR INITIAL SERVICE FUNCTION<BR/>VPE5SGM05S : TIME SHOULD BE 0 FOR INITIAL SERVICE FUNCTION<BR/>VPE5SGM06S : REC-TYPE SHOULD BE A SPACE FOR INITIAL SERVICE FUNCTION<BR/>VPE5SGM07S : DATE SHOULD CONTAIN A VALID VALUE<BR/>VPE5SGM08S : TIME SHOULD CONTAIN A VALID VALUE<BR/>VPE5SGM09S : REC-TYPE SHOULD CONTAIN A VALID VALUE<BR/>VPE5SGM10S : ORGANIZATION NOT DETERMINED<BR/>VPE5SGM11S : USER IS NOT ALLOWED TO ACCESS THE ORG<BR/>VPE5SGM12S : INVALID DATA SEQUENCE<BR/>VPE5SGM13S : ORG RECORD NOT FOUND<BR/>VPE5SGM14S : ACCOUNT NUMBERorORG NOT PRESENT IN BASE FILE<BR/>VPE5SGM15S : NO RECORDS IN AMHS FOR THE GIVEN ACCOUNT NUMBER<BR/>VPE5SGM16S : PROBLEM IN READING AMHS FILE<BR/>VPE5SGM17S : THE DATA PASSED IN THE CONTINUATION IS NOT PRESENT IN AMH
*/
type MemoInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *MemoInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoInquiry][%d] memoInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *MemoInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package account_activity_updates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// MemoAddV1FvEmeaReader is a Reader for the MemoAddV1FvEmea structure.
type MemoAddV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MemoAddV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMemoAddV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMemoAddV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMemoAddV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMemoAddV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMemoAddV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewMemoAddV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewMemoAddV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewMemoAddV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewMemoAddV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewMemoAddV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMemoAddV1FvEmeaOK creates a MemoAddV1FvEmeaOK with default headers values
func NewMemoAddV1FvEmeaOK() *MemoAddV1FvEmeaOK {
	return &MemoAddV1FvEmeaOK{}
}

/*MemoAddV1FvEmeaOK handles this case with default header values.

successful operation
*/
type MemoAddV1FvEmeaOK struct {
	Payload *models.MemoAddResponse
}

func (o *MemoAddV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *MemoAddV1FvEmeaOK) GetPayload() *models.MemoAddResponse {
	return o.Payload
}

func (o *MemoAddV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MemoAddResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoAddV1FvEmeaBadRequest creates a MemoAddV1FvEmeaBadRequest with default headers values
func NewMemoAddV1FvEmeaBadRequest() *MemoAddV1FvEmeaBadRequest {
	return &MemoAddV1FvEmeaBadRequest{}
}

/*MemoAddV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type MemoAddV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *MemoAddV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *MemoAddV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoAddV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoAddV1FvEmeaUnauthorized creates a MemoAddV1FvEmeaUnauthorized with default headers values
func NewMemoAddV1FvEmeaUnauthorized() *MemoAddV1FvEmeaUnauthorized {
	return &MemoAddV1FvEmeaUnauthorized{}
}

/*MemoAddV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type MemoAddV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *MemoAddV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *MemoAddV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoAddV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoAddV1FvEmeaForbidden creates a MemoAddV1FvEmeaForbidden with default headers values
func NewMemoAddV1FvEmeaForbidden() *MemoAddV1FvEmeaForbidden {
	return &MemoAddV1FvEmeaForbidden{}
}

/*MemoAddV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type MemoAddV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *MemoAddV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *MemoAddV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoAddV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoAddV1FvEmeaNotFound creates a MemoAddV1FvEmeaNotFound with default headers values
func NewMemoAddV1FvEmeaNotFound() *MemoAddV1FvEmeaNotFound {
	return &MemoAddV1FvEmeaNotFound{}
}

/*MemoAddV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type MemoAddV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *MemoAddV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *MemoAddV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoAddV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoAddV1FvEmeaTooManyRequests creates a MemoAddV1FvEmeaTooManyRequests with default headers values
func NewMemoAddV1FvEmeaTooManyRequests() *MemoAddV1FvEmeaTooManyRequests {
	return &MemoAddV1FvEmeaTooManyRequests{}
}

/*MemoAddV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type MemoAddV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *MemoAddV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *MemoAddV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoAddV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMemoAddV1FvEmeaStatus452 creates a MemoAddV1FvEmeaStatus452 with default headers values
func NewMemoAddV1FvEmeaStatus452() *MemoAddV1FvEmeaStatus452 {
	return &MemoAddV1FvEmeaStatus452{}
}

/*MemoAddV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type MemoAddV1FvEmeaStatus452 struct {
}

func (o *MemoAddV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaStatus452 ", 452)
}

func (o *MemoAddV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMemoAddV1FvEmeaStatus453 creates a MemoAddV1FvEmeaStatus453 with default headers values
func NewMemoAddV1FvEmeaStatus453() *MemoAddV1FvEmeaStatus453 {
	return &MemoAddV1FvEmeaStatus453{}
}

/*MemoAddV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type MemoAddV1FvEmeaStatus453 struct {
}

func (o *MemoAddV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaStatus453 ", 453)
}

func (o *MemoAddV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMemoAddV1FvEmeaStatus455 creates a MemoAddV1FvEmeaStatus455 with default headers values
func NewMemoAddV1FvEmeaStatus455() *MemoAddV1FvEmeaStatus455 {
	return &MemoAddV1FvEmeaStatus455{}
}

/*MemoAddV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type MemoAddV1FvEmeaStatus455 struct {
}

func (o *MemoAddV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaStatus455 ", 455)
}

func (o *MemoAddV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMemoAddV1FvEmeaStatus465 creates a MemoAddV1FvEmeaStatus465 with default headers values
func NewMemoAddV1FvEmeaStatus465() *MemoAddV1FvEmeaStatus465 {
	return &MemoAddV1FvEmeaStatus465{}
}

/*MemoAddV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE8SMWZ1S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPE8SMWZ2S : SERVICE INPUT TO MEMO WRITE SERVICE IS OF INCORRECT LENGTH<BR/>VPE8SMWZ4S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE8SMWZ5S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE8SMW02S : ACCOUNTorCARD NUMBER IS NOT NUMERIC OR EQUALS SPACES<BR/>VPE8SMW03E : RECORD-TYPE SHOULD BE GREATER THAN SPACES<BR/>VPE8SMW04S : ACTION-CODE SHOULD BE GREATER THAN SPACES<BR/>VPE8SMW05S : MEMO-LINE 1 SHOULD BE GREATER THAN SPACES<BR/>VPE8SMWZ6S : ORGANIZATION NUMBER NOT DETERMINED<BR/>VPE8SMWZ7S : REQUESTED ORGANIZATION NUMBER IS NOT FOUND<BR/>VPE8SMWZ8S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE8SMWZ9S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE8SMW06S : SYSTEM RECORD NOT FOUND<BR/>VPE8SMW07S : ASM SERVICE IS INACTIVE FOR THE SYSTEM RECORD<BR/>VPE8SMW08S : LTS SERVICE IS INACTIVE FOR THE SYSTEM RECORD<BR/>VPE8SMW09S : ORGANIZATION NUMBER NOT FOUND<BR/>VPE8SMW10S : REQUESTED ORG IS NOT A DUAL CURRENCY ORG<BR/>VPE8SMW11S : FOREIGN ORGANIZATION NUMBER NOT FOUND<BR/>VPE8SMW12S : ACCOUNT FILE NOT OPEN<BR/>VPE8SMW13S : ACCOUNT NUMBER NOT FOUND<BR/>VPE8SMW14S : ERROR ACCESSING ACCOUNT FILE<BR/>VPE8SMW15S : ACCOUNT NUMBER NOT FOUND FOR DUAL ORG ACCOUNT<BR/>VPE8SMW16S : ERROR ACCESSING ACCOUNT FILE FOR DUAL ORG ACCOUNT<BR/>VPE8SMW17S : THE ACCOUNT IS NOT A DUAL ACCOUNT<BR/>VPE8SMW18S : LOGO NUMBER NOT FOUND<BR/>VPE8SMW19S : USER ASM ID NOT FOUND<BR/>VPE8SMW20S : RECORD NOT FOUND IN ASM ACTION FILE<BR/>VPE8SMW21S : ERROR ACCESSING ASM ACTION FILE<BR/>VPE8SMW22E : CARD NUMBER IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW23E : CARD SEQ NUMBER IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW24E : EFFECTIVE DATE IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW25S : TRANSACTION AMT IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW26S : STORE-NBR IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW27S : DEPT-NBR IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW28S : TICKET-NBR IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW29S : REFERENCE-NBR IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW30S : PURCHASE-ORDER-NBR IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW31S : R-REFERENCE-NBR IS REQUIRED FOR TRANSCRIPT RECORD TYPE<BR/>VPE8SMW32S : CURRENCY CODE IS NOT ON SMCU FILE<BR/>VPE8SMW33S : INPUT CURRENCY CODE IS NOT MATCHING WITH SYSTEM CURRNCY CODE<BR/>VPE8SMW34S : EFFECTIVE DATE IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW35S : TRANSACTION AMT IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW36S : PLAN NUMBER IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW37S : FOR PREPAID CARDS INPUT PLAN NUMBER SHOULD BE VALID<BR/>VPE8SMW38S : PLAN NUMBER NOT FOUND IN CREDIT PLAN FILE<BR/>VPE8SMW39S : PLAN SEQ NUMBER IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW40S : DEPT-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW41S : AUTH-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW42S : STORE-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW43S : STORE-NBR IS NOT FOUND IN AMSD FILE<BR/>VPE8SMW44S : SKU-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW45S : SALES-CLERK IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW46S : CARD-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW47S : CARD-SEQ IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW48S : TICKET-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW49S : PURCHASE-ORDER-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW50S : R-REFERENCE-NBR IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW51S : INS-PROD-IND IS REQUIRED FOR MONETARY RECORD TYPE<BR/>VPE8SMW52S : FOR PREPAID CARDS INS-PROD-IND IS REQUIRED<BR/>VPE8SMW53S : ACTION CANT BE PERFORMED FOR TRANSFERRED PREPAID ACCT<BR/>VPE8SMW54E : REVIEW DATE SHOULD BE GREATER THAN TODAYS DATE<BR/>VPE8SMW55E : REVIEW DATE IS INVALID<BR/>VPE8SMW56E : RETURN MAIL - LETTER CANNOT BE PROCESSED - ENTER SPACES<BR/>VPE8SMW57S : LETTER ORG IS NOT FOUND<BR/>VPE8SMW58S : CARD-NBR IS REQUIRED FOR NON-MONETARY RECORD TYPE<BR/>VPE8SMW59S : CARD-SEQ IS REQUIRED FOR NON-MONETARY RECORD TYPE<BR/>VPE8SMW60S : RECORD NOT FOUND WHILE DOING A START BROWSE ON AMAC FILE<BR/>VPE8SMW61S : ERROR IN DOING A START BROWSE ON AMAC FILE<BR/>VPE8SMW62S : ACTION CODE GIVEN AS INPUT IS NOT A VALID ONE<BR/>VPE8SMW63S : ERROR IN DOING AN END BROWSE ON AMAC FILE<BR/>VPE8SMW64S : ERROR IN WRITING INTO AMHS FILE<BR/>VPE8SMW65S : ERROR IN WRITING INTO AMH1 FILE<BR/>VPE8SMW66S : ERROR IN WRITING INTO AMH2 FILE<BR/>VPE8SMW67S : ERROR IN WRITING INTO ASLM FIL
*/
type MemoAddV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *MemoAddV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/memoAdd][%d] memoAddV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *MemoAddV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *MemoAddV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

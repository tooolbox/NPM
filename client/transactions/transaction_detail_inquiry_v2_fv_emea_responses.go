// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// TransactionDetailInquiryV2FvEmeaReader is a Reader for the TransactionDetailInquiryV2FvEmea structure.
type TransactionDetailInquiryV2FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransactionDetailInquiryV2FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransactionDetailInquiryV2FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTransactionDetailInquiryV2FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTransactionDetailInquiryV2FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTransactionDetailInquiryV2FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTransactionDetailInquiryV2FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTransactionDetailInquiryV2FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewTransactionDetailInquiryV2FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewTransactionDetailInquiryV2FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewTransactionDetailInquiryV2FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewTransactionDetailInquiryV2FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTransactionDetailInquiryV2FvEmeaOK creates a TransactionDetailInquiryV2FvEmeaOK with default headers values
func NewTransactionDetailInquiryV2FvEmeaOK() *TransactionDetailInquiryV2FvEmeaOK {
	return &TransactionDetailInquiryV2FvEmeaOK{}
}

/*TransactionDetailInquiryV2FvEmeaOK handles this case with default header values.

successful operation
*/
type TransactionDetailInquiryV2FvEmeaOK struct {
	Payload *models.TransactionDetailInquiryResponse2
}

func (o *TransactionDetailInquiryV2FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaOK  %+v", 200, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaOK) GetPayload() *models.TransactionDetailInquiryResponse2 {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransactionDetailInquiryResponse2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaBadRequest creates a TransactionDetailInquiryV2FvEmeaBadRequest with default headers values
func NewTransactionDetailInquiryV2FvEmeaBadRequest() *TransactionDetailInquiryV2FvEmeaBadRequest {
	return &TransactionDetailInquiryV2FvEmeaBadRequest{}
}

/*TransactionDetailInquiryV2FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type TransactionDetailInquiryV2FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionDetailInquiryV2FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaUnauthorized creates a TransactionDetailInquiryV2FvEmeaUnauthorized with default headers values
func NewTransactionDetailInquiryV2FvEmeaUnauthorized() *TransactionDetailInquiryV2FvEmeaUnauthorized {
	return &TransactionDetailInquiryV2FvEmeaUnauthorized{}
}

/*TransactionDetailInquiryV2FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type TransactionDetailInquiryV2FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionDetailInquiryV2FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaForbidden creates a TransactionDetailInquiryV2FvEmeaForbidden with default headers values
func NewTransactionDetailInquiryV2FvEmeaForbidden() *TransactionDetailInquiryV2FvEmeaForbidden {
	return &TransactionDetailInquiryV2FvEmeaForbidden{}
}

/*TransactionDetailInquiryV2FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type TransactionDetailInquiryV2FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionDetailInquiryV2FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaNotFound creates a TransactionDetailInquiryV2FvEmeaNotFound with default headers values
func NewTransactionDetailInquiryV2FvEmeaNotFound() *TransactionDetailInquiryV2FvEmeaNotFound {
	return &TransactionDetailInquiryV2FvEmeaNotFound{}
}

/*TransactionDetailInquiryV2FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type TransactionDetailInquiryV2FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionDetailInquiryV2FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaTooManyRequests creates a TransactionDetailInquiryV2FvEmeaTooManyRequests with default headers values
func NewTransactionDetailInquiryV2FvEmeaTooManyRequests() *TransactionDetailInquiryV2FvEmeaTooManyRequests {
	return &TransactionDetailInquiryV2FvEmeaTooManyRequests{}
}

/*TransactionDetailInquiryV2FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type TransactionDetailInquiryV2FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionDetailInquiryV2FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaStatus452 creates a TransactionDetailInquiryV2FvEmeaStatus452 with default headers values
func NewTransactionDetailInquiryV2FvEmeaStatus452() *TransactionDetailInquiryV2FvEmeaStatus452 {
	return &TransactionDetailInquiryV2FvEmeaStatus452{}
}

/*TransactionDetailInquiryV2FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type TransactionDetailInquiryV2FvEmeaStatus452 struct {
}

func (o *TransactionDetailInquiryV2FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaStatus452 ", 452)
}

func (o *TransactionDetailInquiryV2FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaStatus453 creates a TransactionDetailInquiryV2FvEmeaStatus453 with default headers values
func NewTransactionDetailInquiryV2FvEmeaStatus453() *TransactionDetailInquiryV2FvEmeaStatus453 {
	return &TransactionDetailInquiryV2FvEmeaStatus453{}
}

/*TransactionDetailInquiryV2FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type TransactionDetailInquiryV2FvEmeaStatus453 struct {
}

func (o *TransactionDetailInquiryV2FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaStatus453 ", 453)
}

func (o *TransactionDetailInquiryV2FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaStatus455 creates a TransactionDetailInquiryV2FvEmeaStatus455 with default headers values
func NewTransactionDetailInquiryV2FvEmeaStatus455() *TransactionDetailInquiryV2FvEmeaStatus455 {
	return &TransactionDetailInquiryV2FvEmeaStatus455{}
}

/*TransactionDetailInquiryV2FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type TransactionDetailInquiryV2FvEmeaStatus455 struct {
}

func (o *TransactionDetailInquiryV2FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaStatus455 ", 455)
}

func (o *TransactionDetailInquiryV2FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionDetailInquiryV2FvEmeaStatus465 creates a TransactionDetailInquiryV2FvEmeaStatus465 with default headers values
func NewTransactionDetailInquiryV2FvEmeaStatus465() *TransactionDetailInquiryV2FvEmeaStatus465 {
	return &TransactionDetailInquiryV2FvEmeaStatus465{}
}

/*TransactionDetailInquiryV2FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL1S0100S : SERVICE REQUEST LENGTH ERROR                                     SERVICE INPUT FOR SERVICE IS AN INCORRECT LENGTH<BR/>VPL5S0003S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES     CMS IS NO-PROCESSING STATE<BR/>VPL5S0005E : INPUT CARDorACCT NUMBER IS NOT NUMERIC                            INPUT ACCOUNT NUMBER IS NOT NUMERIC<BR/>VPL5S0006S : REQUESTED ORG NUMBER IS NOT FOUND                                USER IS NOT ALLOWED TO ACCESS THE ORG<BR/>VPL5S0008E : ORGANIZATION NOT DETERMINED<BR/>VPL5S0012S : ACCOUNT NOT FOUND ON FILE<BR/>VPL5S0015E : REQUESTED FUNCTION TYPE IS NOT VALID<BR/>VPL5S0041E : NO STATEMENTS FOUND                                              NO STATEMENTS FOUND<BR/>VPL5S0042E : INVALID TRANSACTION DETAIL REQUEST                               INVALID TRANSACTION DETAIL REQUEST - OPTION NEXT<BR/>VPL5S0043E : NUMBER TRANSACTIONS REQUESTED IS INVALID<BR/>VPL5S0056E : INVALID LOCALorFOREIGN INDICATOR SPECIFIED<BR/>VPL5S0059E : START JULIAN IS GREATER THAN END JULIAN<BR/>VPL5S0060S : TRANSACTION DETAIL BEGIN DATE FORMAT MUST BE CCYYMMDD<BR/>VPL5S0061S : TRANSACTION DETAIL END DATE FORMAT MUST BE CCYYMMDD<BR/>VPL5S0063S : TRANSACTION DETAIL BEGIN DATE IS NOT NUMERIC<BR/>VPL5S0064S : TRANSACTION DATE THRU SHOULD BE EQUAL TO 99999999<BR/>VPL5S0067E : TRANSACTION NBR MONTHS SHOULD BE VALID WHEN TRANSACTION DETAIL'M'STATEMENT OCCURENCE NUMBER MUST BE A NUMERIC VALUE WHEN THE SERVICE REQUEST IS FOR STATEMENT HISTORY BY MONTH.<BR/>VPL5S0068E : WHILE DOING START BROWSE LARGE FILE RECORD NOT FOUND             STATEMENT NUMBER REQUESTED IS GREATER THAN THE NUMBER OF STATEMENTS ON FILE FOR ACCOUNT.<BR/>VPL5S0069E : STATEMENT OCCURENCE NUMBER NOT ON FILE                           THE REQUESTED ACCOUNT DOES NOT HAVE ANY STATEMENT HISTORY ON FILE.<BR/>VPL5S0072E : STATEMENT OCCURENCE NUMBER IS INVALID WHEN REQUEST NOT FOR MONTH STATEMENT OCCURENCE NUMBER IS NOT VALID WHEN THE REQUEST IS HAS NOT BEEN SUBMITTED FOR MONTHSTATEMENT PERIOD.<BR/>VPL5S0073E : TRANSACTION DATE FROM SHOULD BE ZEROS WHEN TRANSACTION DETAIL 'M'TRANSACTION END DATE MUST NOT BE PRESENT WHEN THE REQUEST IS FOR MONTH STATEMENT PERIOD.<BR/>VPL5S0074E : TRANSACTION DATE THRU SHOULD BE ZEROS WHEN TRANSACTION DETAIL 'M'TRANSACTION START DATE WAS PROVIDED WITH A REQUEST TYPE FOR TRANSACTIO DETAIL BY MONTH.   START DATE IS INVALID FOR THIS REQUEST.<BR/>VPL5S9001S : ERROR ACCESSING TRANSACTION FILE<BR/>VPL5S9002S : ERROR ACCESSING ACCOUNT FILE<BR/>VPL5S9003S : ERROR ACCESSING XRF TRANSACTION FILE<BR/>VPL5S9004S : ERROR ACCESSING STATEMENT FILE<BR/>VPL5S9005S : FILE-TABLE RECORD NOT FOUND<BR/>VPL5S9006S : ORG RECORD NOT ON FILE<BR/>VPL5S9007S : CMS LOGO RECORD NOT ON FIL
*/
type TransactionDetailInquiryV2FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionDetailInquiryV2FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionDetailInquiry][%d] transactionDetailInquiryV2FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *TransactionDetailInquiryV2FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionDetailInquiryV2FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

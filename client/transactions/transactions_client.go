// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AvailableBalanceAdjustmentV1FvEmea(params *AvailableBalanceAdjustmentV1FvEmeaParams) (*AvailableBalanceAdjustmentV1FvEmeaOK, error)

	InstalmentPlanConversionUpdateV1FvEmea(params *InstalmentPlanConversionUpdateV1FvEmeaParams) (*InstalmentPlanConversionUpdateV1FvEmeaOK, error)

	InstalmentSimulateV1FvEmea(params *InstalmentSimulateV1FvEmeaParams) (*InstalmentSimulateV1FvEmeaOK, error)

	InstalmentTransactionConversionUpdateV1FvEmea(params *InstalmentTransactionConversionUpdateV1FvEmeaParams) (*InstalmentTransactionConversionUpdateV1FvEmeaOK, error)

	MonetaryActionV1FvEmea(params *MonetaryActionV1FvEmeaParams) (*MonetaryActionV1FvEmeaOK, error)

	TransactionDetailInquiryV1FvEmea(params *TransactionDetailInquiryV1FvEmeaParams) (*TransactionDetailInquiryV1FvEmeaOK, error)

	TransactionDetailInquiryV2FvEmea(params *TransactionDetailInquiryV2FvEmeaParams) (*TransactionDetailInquiryV2FvEmeaOK, error)

	TransactionInquiryV1FvEmea(params *TransactionInquiryV1FvEmeaParams) (*TransactionInquiryV1FvEmeaOK, error)

	TransactionInquiryV2FvEmea(params *TransactionInquiryV2FvEmeaParams) (*TransactionInquiryV2FvEmeaOK, error)

	TransactionInquiryV3FvEmea(params *TransactionInquiryV3FvEmeaParams) (*TransactionInquiryV3FvEmeaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AvailableBalanceAdjustmentV1FvEmea availables balance adjustment

  The Real Time Update of Available Funds service updates the accounts Open To Buy in real time. It also generates outstanding authorizations by calling the CMS Memo Posting routine and updates the cardholder authorization statistics displayed in FirstVision<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) AvailableBalanceAdjustmentV1FvEmea(params *AvailableBalanceAdjustmentV1FvEmeaParams) (*AvailableBalanceAdjustmentV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAvailableBalanceAdjustmentV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "availableBalanceAdjustment_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/availableBalanceAdjustment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AvailableBalanceAdjustmentV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AvailableBalanceAdjustmentV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for availableBalanceAdjustment_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstalmentPlanConversionUpdateV1FvEmea instalments plan conversion update

  This service is used handling the installment conversion at plan level. Client can send the current purchase or cash plan recNbr along with installment plan number; terms and principal amount of the new installment record, which should be created. In response, the system will update the given retail/cash plan record with installment details passed in the request, which can be used for conversion.
*/
func (a *Client) InstalmentPlanConversionUpdateV1FvEmea(params *InstalmentPlanConversionUpdateV1FvEmeaParams) (*InstalmentPlanConversionUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstalmentPlanConversionUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instalmentPlanConversionUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instalmentPlanConversionUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstalmentPlanConversionUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstalmentPlanConversionUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instalmentPlanConversionUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstalmentSimulateV1FvEmea instalments simulate

  This service is used for the simulation of the installment transaction and inform the cardholders of the installment amounts. The service supports two modes of execution i.e. either to compute the installment options or to compute the installment schedule.<p><p>In the request, the details such as account/card number, principal amount, installment tenures/plan number along with appropriate indicator for what is expected in the response message (Details of various installment options or payment schedule of the installments).
*/
func (a *Client) InstalmentSimulateV1FvEmea(params *InstalmentSimulateV1FvEmeaParams) (*InstalmentSimulateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstalmentSimulateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instalmentSimulate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instalmentSimulate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstalmentSimulateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstalmentSimulateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instalmentSimulate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstalmentTransactionConversionUpdateV1FvEmea instalments transaction conversion update

  This service is used for handling the installment conversion at the transaction level. Client can send the details of individual purchase or cash transaction along with details of target installment plan such as plan number and number of terms in the request.<p><p>In response, the system updates the given retail/cash transaction record with installment conversion flag which be used for the installment conversion.
*/
func (a *Client) InstalmentTransactionConversionUpdateV1FvEmea(params *InstalmentTransactionConversionUpdateV1FvEmeaParams) (*InstalmentTransactionConversionUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstalmentTransactionConversionUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instalmentTransactionConversionUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instalmentTransactionConversionUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstalmentTransactionConversionUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstalmentTransactionConversionUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instalmentTransactionConversionUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonetaryActionV1FvEmea monetaries action

  This service is used to add or reverse financial input to an account.  This service provides the information necessary for use by FirstVision customer service module (ASM) to build a memo-post transaction, this updates the Open-to-Buy, memo debit and credit fields on account data file at real time, and generate an outstanding authorization record. The memo debits and credits are processed and posted as financials to the cardholder accounts during the daily end of day batch run.
*/
func (a *Client) MonetaryActionV1FvEmea(params *MonetaryActionV1FvEmeaParams) (*MonetaryActionV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonetaryActionV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "monetaryAction_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/monetaryAction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonetaryActionV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonetaryActionV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monetaryAction_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransactionDetailInquiryV1FvEmea transactions detail inquiry

  This service is deprecated and will be supported until January 2021. The new version contains changes in date formats of certain fields to Gregorian (YYYYMMDD). Please switch to Version 2 of this API before that time. <BR/><BR/>The Transaction Inquiry service provides transaction detail information for current cycle transactions or Statemented transactions.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) TransactionDetailInquiryV1FvEmea(params *TransactionDetailInquiryV1FvEmeaParams) (*TransactionDetailInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransactionDetailInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transactionDetailInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/transactionDetailInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransactionDetailInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransactionDetailInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transactionDetailInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransactionDetailInquiryV2FvEmea transactions detail inquiry

  This service is deprecated and will be supported until May 2021. The new version contains changes in date formats to Gregorian (YYYYMMDD) for the input/output field and few field name differences in input and output fields. Refer release notes to get detailed field name mapping and newly introduced fields for v3 version of transaction inquiry service. Please switch to version 3 of transaction inquiry before that time. Refer the field mapping from here - https://docs-qa.firstdata.com/org/emeaapi/node/1539 <BR/><BR/>The Transaction Inquiry service provides transaction detail information for current cycle transactions or Statemented transactions.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) TransactionDetailInquiryV2FvEmea(params *TransactionDetailInquiryV2FvEmeaParams) (*TransactionDetailInquiryV2FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransactionDetailInquiryV2FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transactionDetailInquiry_v2_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v2/transactionDetailInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransactionDetailInquiryV2FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransactionDetailInquiryV2FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transactionDetailInquiry_v2_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransactionInquiryV1FvEmea transactions inquiry

  This service is deprecated and will be supported until May 2021. The new version contains changes in date formats to Gregorian (YYYYMMDD) for the input/output field and few field name differences in input and output fields. Refer release notes to get detailed field name mapping and newly introduced fields for v2 version of transaction inquiry service. Please switch to version 3 of this API before that time. Refer the field mapping from here - https://docs-qa.firstdata.com/org/emeaapi/node/1450 <BR/><BR/><BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) TransactionInquiryV1FvEmea(params *TransactionInquiryV1FvEmeaParams) (*TransactionInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransactionInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transactionInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/transactionInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransactionInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransactionInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transactionInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransactionInquiryV2FvEmea transactions inquiry

  This service is deprecated and will be supported until May 2021. The new version contains changes in date formats of certain fields to Gregorian (YYYYMMDD). Please switch to Version 3 of this API before that time. <BR/><BR/>This service is used to fetch detail information for current cycle(unbilled) or billed transactions. In order to fetch details of the transactions, the transaction detail flag in the input request should be passed as 'C' for cycle to date transactions, as  'R' for cycled transactions, as a 'M' for the transactions cycled in a specific month and as a 'B' for cycle to date and cycled transactions. If the date range fields are populated, the service processes the date range set along with the TRANSACTION DETAIL flag. When a start date is provided without the end date, the service begins processing at the provided start date and processes up to 50 transactions.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) TransactionInquiryV2FvEmea(params *TransactionInquiryV2FvEmeaParams) (*TransactionInquiryV2FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransactionInquiryV2FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transactionInquiry_v2_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v2/transactionInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransactionInquiryV2FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransactionInquiryV2FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transactionInquiry_v2_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransactionInquiryV3FvEmea transactions inquiry

  The Transaction Inquiry service supports both Effective date and posting date filtration based on the input txnDateSel (E - Effective Date or P - Posting Date) whereas the v1 version is supporting only filtration based on posting date. The service provides transaction detail information for current cycle transactions or statement transactions within a date range. You can specify a date range or the number of transactions. Up to 50 transactions are returned for each service request. The limit to the number of months depends on how many statements the client has stored.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) TransactionInquiryV3FvEmea(params *TransactionInquiryV3FvEmeaParams) (*TransactionInquiryV3FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransactionInquiryV3FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "transactionInquiry_v3_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v3/transactionInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransactionInquiryV3FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransactionInquiryV3FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transactionInquiry_v3_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

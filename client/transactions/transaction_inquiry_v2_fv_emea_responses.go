// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// TransactionInquiryV2FvEmeaReader is a Reader for the TransactionInquiryV2FvEmea structure.
type TransactionInquiryV2FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransactionInquiryV2FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransactionInquiryV2FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTransactionInquiryV2FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTransactionInquiryV2FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTransactionInquiryV2FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTransactionInquiryV2FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTransactionInquiryV2FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewTransactionInquiryV2FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewTransactionInquiryV2FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewTransactionInquiryV2FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTransactionInquiryV2FvEmeaOK creates a TransactionInquiryV2FvEmeaOK with default headers values
func NewTransactionInquiryV2FvEmeaOK() *TransactionInquiryV2FvEmeaOK {
	return &TransactionInquiryV2FvEmeaOK{}
}

/*TransactionInquiryV2FvEmeaOK handles this case with default header values.

successful operation
*/
type TransactionInquiryV2FvEmeaOK struct {
	Payload *models.TransactionInquiryResponse2
}

func (o *TransactionInquiryV2FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaOK  %+v", 200, o.Payload)
}

func (o *TransactionInquiryV2FvEmeaOK) GetPayload() *models.TransactionInquiryResponse2 {
	return o.Payload
}

func (o *TransactionInquiryV2FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransactionInquiryResponse2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV2FvEmeaBadRequest creates a TransactionInquiryV2FvEmeaBadRequest with default headers values
func NewTransactionInquiryV2FvEmeaBadRequest() *TransactionInquiryV2FvEmeaBadRequest {
	return &TransactionInquiryV2FvEmeaBadRequest{}
}

/*TransactionInquiryV2FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type TransactionInquiryV2FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV2FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *TransactionInquiryV2FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV2FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV2FvEmeaUnauthorized creates a TransactionInquiryV2FvEmeaUnauthorized with default headers values
func NewTransactionInquiryV2FvEmeaUnauthorized() *TransactionInquiryV2FvEmeaUnauthorized {
	return &TransactionInquiryV2FvEmeaUnauthorized{}
}

/*TransactionInquiryV2FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type TransactionInquiryV2FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV2FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *TransactionInquiryV2FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV2FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV2FvEmeaForbidden creates a TransactionInquiryV2FvEmeaForbidden with default headers values
func NewTransactionInquiryV2FvEmeaForbidden() *TransactionInquiryV2FvEmeaForbidden {
	return &TransactionInquiryV2FvEmeaForbidden{}
}

/*TransactionInquiryV2FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type TransactionInquiryV2FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV2FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *TransactionInquiryV2FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV2FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV2FvEmeaNotFound creates a TransactionInquiryV2FvEmeaNotFound with default headers values
func NewTransactionInquiryV2FvEmeaNotFound() *TransactionInquiryV2FvEmeaNotFound {
	return &TransactionInquiryV2FvEmeaNotFound{}
}

/*TransactionInquiryV2FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type TransactionInquiryV2FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV2FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *TransactionInquiryV2FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV2FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV2FvEmeaTooManyRequests creates a TransactionInquiryV2FvEmeaTooManyRequests with default headers values
func NewTransactionInquiryV2FvEmeaTooManyRequests() *TransactionInquiryV2FvEmeaTooManyRequests {
	return &TransactionInquiryV2FvEmeaTooManyRequests{}
}

/*TransactionInquiryV2FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type TransactionInquiryV2FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV2FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *TransactionInquiryV2FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV2FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV2FvEmeaStatus452 creates a TransactionInquiryV2FvEmeaStatus452 with default headers values
func NewTransactionInquiryV2FvEmeaStatus452() *TransactionInquiryV2FvEmeaStatus452 {
	return &TransactionInquiryV2FvEmeaStatus452{}
}

/*TransactionInquiryV2FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type TransactionInquiryV2FvEmeaStatus452 struct {
}

func (o *TransactionInquiryV2FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaStatus452 ", 452)
}

func (o *TransactionInquiryV2FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionInquiryV2FvEmeaStatus453 creates a TransactionInquiryV2FvEmeaStatus453 with default headers values
func NewTransactionInquiryV2FvEmeaStatus453() *TransactionInquiryV2FvEmeaStatus453 {
	return &TransactionInquiryV2FvEmeaStatus453{}
}

/*TransactionInquiryV2FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type TransactionInquiryV2FvEmeaStatus453 struct {
}

func (o *TransactionInquiryV2FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaStatus453 ", 453)
}

func (o *TransactionInquiryV2FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionInquiryV2FvEmeaStatus455 creates a TransactionInquiryV2FvEmeaStatus455 with default headers values
func NewTransactionInquiryV2FvEmeaStatus455() *TransactionInquiryV2FvEmeaStatus455 {
	return &TransactionInquiryV2FvEmeaStatus455{}
}

/*TransactionInquiryV2FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type TransactionInquiryV2FvEmeaStatus455 struct {
}

func (o *TransactionInquiryV2FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v2/transactionInquiry][%d] transactionInquiryV2FvEmeaStatus455 ", 455)
}

func (o *TransactionInquiryV2FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

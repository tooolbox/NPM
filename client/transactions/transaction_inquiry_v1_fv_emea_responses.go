// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// TransactionInquiryV1FvEmeaReader is a Reader for the TransactionInquiryV1FvEmea structure.
type TransactionInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransactionInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransactionInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTransactionInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTransactionInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTransactionInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTransactionInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTransactionInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewTransactionInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewTransactionInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewTransactionInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewTransactionInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTransactionInquiryV1FvEmeaOK creates a TransactionInquiryV1FvEmeaOK with default headers values
func NewTransactionInquiryV1FvEmeaOK() *TransactionInquiryV1FvEmeaOK {
	return &TransactionInquiryV1FvEmeaOK{}
}

/*TransactionInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type TransactionInquiryV1FvEmeaOK struct {
	Payload *models.TransactionInquiryResponse
}

func (o *TransactionInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaOK) GetPayload() *models.TransactionInquiryResponse {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransactionInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV1FvEmeaBadRequest creates a TransactionInquiryV1FvEmeaBadRequest with default headers values
func NewTransactionInquiryV1FvEmeaBadRequest() *TransactionInquiryV1FvEmeaBadRequest {
	return &TransactionInquiryV1FvEmeaBadRequest{}
}

/*TransactionInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type TransactionInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV1FvEmeaUnauthorized creates a TransactionInquiryV1FvEmeaUnauthorized with default headers values
func NewTransactionInquiryV1FvEmeaUnauthorized() *TransactionInquiryV1FvEmeaUnauthorized {
	return &TransactionInquiryV1FvEmeaUnauthorized{}
}

/*TransactionInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type TransactionInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV1FvEmeaForbidden creates a TransactionInquiryV1FvEmeaForbidden with default headers values
func NewTransactionInquiryV1FvEmeaForbidden() *TransactionInquiryV1FvEmeaForbidden {
	return &TransactionInquiryV1FvEmeaForbidden{}
}

/*TransactionInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type TransactionInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV1FvEmeaNotFound creates a TransactionInquiryV1FvEmeaNotFound with default headers values
func NewTransactionInquiryV1FvEmeaNotFound() *TransactionInquiryV1FvEmeaNotFound {
	return &TransactionInquiryV1FvEmeaNotFound{}
}

/*TransactionInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type TransactionInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV1FvEmeaTooManyRequests creates a TransactionInquiryV1FvEmeaTooManyRequests with default headers values
func NewTransactionInquiryV1FvEmeaTooManyRequests() *TransactionInquiryV1FvEmeaTooManyRequests {
	return &TransactionInquiryV1FvEmeaTooManyRequests{}
}

/*TransactionInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type TransactionInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionInquiryV1FvEmeaStatus452 creates a TransactionInquiryV1FvEmeaStatus452 with default headers values
func NewTransactionInquiryV1FvEmeaStatus452() *TransactionInquiryV1FvEmeaStatus452 {
	return &TransactionInquiryV1FvEmeaStatus452{}
}

/*TransactionInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type TransactionInquiryV1FvEmeaStatus452 struct {
}

func (o *TransactionInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaStatus452 ", 452)
}

func (o *TransactionInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionInquiryV1FvEmeaStatus453 creates a TransactionInquiryV1FvEmeaStatus453 with default headers values
func NewTransactionInquiryV1FvEmeaStatus453() *TransactionInquiryV1FvEmeaStatus453 {
	return &TransactionInquiryV1FvEmeaStatus453{}
}

/*TransactionInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type TransactionInquiryV1FvEmeaStatus453 struct {
}

func (o *TransactionInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaStatus453 ", 453)
}

func (o *TransactionInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionInquiryV1FvEmeaStatus455 creates a TransactionInquiryV1FvEmeaStatus455 with default headers values
func NewTransactionInquiryV1FvEmeaStatus455() *TransactionInquiryV1FvEmeaStatus455 {
	return &TransactionInquiryV1FvEmeaStatus455{}
}

/*TransactionInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type TransactionInquiryV1FvEmeaStatus455 struct {
}

func (o *TransactionInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaStatus455 ", 455)
}

func (o *TransactionInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTransactionInquiryV1FvEmeaStatus465 creates a TransactionInquiryV1FvEmeaStatus465 with default headers values
func NewTransactionInquiryV1FvEmeaStatus465() *TransactionInquiryV1FvEmeaStatus465 {
	return &TransactionInquiryV1FvEmeaStatus465{}
}

/*TransactionInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL1S0100S : SERVICE REQUEST LENGTH ERROR                                     SERVICE INPUT FOR SERVICE IS AN INCORRECT LENGTH<BR/>VPL5S0005E : INPUT CARDorACCT NUMBER IS NOT NUMERIC                            INPUT ACCOUNT NUMBER IS NOT NUMERIC<BR/>VPL5STD44E : VALID VALUE FOR TXN DATE SEL IS E OR P<BR/>VPL5S0006S : REQUESTED ORG NUMBER IS NOT FOUND                                USER IS NOT ALLOWED TO ACCESS THE ORG<BR/>VPL5S0008E : ORGANIZATION NOT DETERMINED<BR/>VPL5S0012S : ACCOUNT NOT FOUND ON FILE<BR/>VPL5S0015E : REQUESTED FUNCTION TYPE IS NOT VALID<BR/>VPL5S0041E : NO STATEMENTS FOUND                                              NO STATEMENTS FOUND<BR/>VPL5S0042E : INVALID TRANSACTION DETAIL REQUEST                               INVALID TRANSACTION DETAIL REQUEST - OPTION NEXT<BR/>VPL5S0043E : NUMBER TRANSACTIONS REQUESTED IS INVALID<BR/>VPL5S0056E : INVALID LOCALorFOREIGN INDICATOR SPECIFIED<BR/>VPL5S0059E : START JULIAN IS GREATER THAN END JULIAN<BR/>VPL5S0060S : TRANSACTION DETAIL BEGIN DATE FORMAT MUST BE CCYYMMDD<BR/>VPL5S0061S : TRANSACTION DETAIL END DATE FORMAT MUST BE CCYYMMDD<BR/>VPL5S0063S : TRANSACTION DETAIL BEGIN DATE IS NOT NUMERIC<BR/>VPL5S0064S : TRANSACTION DATE THRU SHOULD BE EQUAL TO 99999999<BR/>VPL5S0067E : TRANSACTION NBR MONTHS SHOULD BE VALID WHEN TRANSACTION DETAIL'M'STATEMENT OCCURENCE NUMBER MUST BE A NUMERIC VALUE WHEN THE SERVICE REQUEST IS FOR STATEMENT HISTORY BY MONTH.<BR/>VPL5S0068E : WHILE DOING START BROWSE LARGE FILE RECORD NOT FOUND             STATEMENT NUMBER REQUESTED IS GREATER THAN THE NUMBER OF STATEMENTS ON FILE FOR ACCOUNT.<BR/>VPL5S0069E : STATEMENT OCCURENCE NUMBER NOT ON FILE                           THE REQUESTED ACCOUNT DOES NOT HAVE ANY STATEMENT HISTORY ON FILE.<BR/>VPL5S0072E : STATEMENT OCCURENCE NUMBER IS INVALID WHEN REQUEST NOT FOR MONTH STATEMENT OCCURENCE NUMBER IS NOT VALID WHEN THE REQUEST IS HAS NOT BEEN SUBMITTED FOR MONTHSTATEMENT PERIOD.<BR/>VPL5S0073E : TRANSACTION DATE FROM SHOULD BE ZEROS WHEN TRANSACTION DETAIL 'M'TRANSACTION END DATE MUST NOT BE PRESENT WHEN THE REQUEST IS FOR MONTH STATEMENT PERIOD.<BR/>VPL5S0074E : TRANSACTION DATE THRU SHOULD BE ZEROS WHEN TRANSACTION DETAIL 'M'TRANSACTION START DATE WAS PROVIDED WITH A REQUEST TYPE FOR TRANSACTIO DETAIL BY MONTH.   START DATE IS INVALID FOR THIS REQUEST.<BR/>VPL5S9001S : ERROR ACCESSING TRANSACTION FILE<BR/>VPL5S9002S : ERROR ACCESSING ACCOUNT FILE<BR/>VPL5S9003S : ERROR ACCESSING XRF TRANSACTION FILE<BR/>VPL5S9004S : ERROR ACCESSING STATEMENT FILE<BR/>VPL5S9005S : FILE-TABLE RECORD NOT FOUND<BR/>VPL5S9006S : ORG RECORD NOT ON FILE<BR/>VPL5S9007S : CMS LOGO RECORD NOT ON FIL
*/
type TransactionInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *TransactionInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/transactionInquiry][%d] transactionInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *TransactionInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *TransactionInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package card_maintenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// InstantIssuanceV1FvEmeaReader is a Reader for the InstantIssuanceV1FvEmea structure.
type InstantIssuanceV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstantIssuanceV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInstantIssuanceV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInstantIssuanceV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInstantIssuanceV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInstantIssuanceV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInstantIssuanceV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewInstantIssuanceV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewInstantIssuanceV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewInstantIssuanceV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewInstantIssuanceV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewInstantIssuanceV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInstantIssuanceV1FvEmeaOK creates a InstantIssuanceV1FvEmeaOK with default headers values
func NewInstantIssuanceV1FvEmeaOK() *InstantIssuanceV1FvEmeaOK {
	return &InstantIssuanceV1FvEmeaOK{}
}

/*InstantIssuanceV1FvEmeaOK handles this case with default header values.

successful operation
*/
type InstantIssuanceV1FvEmeaOK struct {
	Payload *models.InstantIssuanceResponse
}

func (o *InstantIssuanceV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaOK) GetPayload() *models.InstantIssuanceResponse {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InstantIssuanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstantIssuanceV1FvEmeaBadRequest creates a InstantIssuanceV1FvEmeaBadRequest with default headers values
func NewInstantIssuanceV1FvEmeaBadRequest() *InstantIssuanceV1FvEmeaBadRequest {
	return &InstantIssuanceV1FvEmeaBadRequest{}
}

/*InstantIssuanceV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type InstantIssuanceV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *InstantIssuanceV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstantIssuanceV1FvEmeaUnauthorized creates a InstantIssuanceV1FvEmeaUnauthorized with default headers values
func NewInstantIssuanceV1FvEmeaUnauthorized() *InstantIssuanceV1FvEmeaUnauthorized {
	return &InstantIssuanceV1FvEmeaUnauthorized{}
}

/*InstantIssuanceV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type InstantIssuanceV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *InstantIssuanceV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstantIssuanceV1FvEmeaForbidden creates a InstantIssuanceV1FvEmeaForbidden with default headers values
func NewInstantIssuanceV1FvEmeaForbidden() *InstantIssuanceV1FvEmeaForbidden {
	return &InstantIssuanceV1FvEmeaForbidden{}
}

/*InstantIssuanceV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type InstantIssuanceV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *InstantIssuanceV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstantIssuanceV1FvEmeaNotFound creates a InstantIssuanceV1FvEmeaNotFound with default headers values
func NewInstantIssuanceV1FvEmeaNotFound() *InstantIssuanceV1FvEmeaNotFound {
	return &InstantIssuanceV1FvEmeaNotFound{}
}

/*InstantIssuanceV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type InstantIssuanceV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *InstantIssuanceV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstantIssuanceV1FvEmeaTooManyRequests creates a InstantIssuanceV1FvEmeaTooManyRequests with default headers values
func NewInstantIssuanceV1FvEmeaTooManyRequests() *InstantIssuanceV1FvEmeaTooManyRequests {
	return &InstantIssuanceV1FvEmeaTooManyRequests{}
}

/*InstantIssuanceV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type InstantIssuanceV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *InstantIssuanceV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstantIssuanceV1FvEmeaStatus452 creates a InstantIssuanceV1FvEmeaStatus452 with default headers values
func NewInstantIssuanceV1FvEmeaStatus452() *InstantIssuanceV1FvEmeaStatus452 {
	return &InstantIssuanceV1FvEmeaStatus452{}
}

/*InstantIssuanceV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type InstantIssuanceV1FvEmeaStatus452 struct {
}

func (o *InstantIssuanceV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaStatus452 ", 452)
}

func (o *InstantIssuanceV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstantIssuanceV1FvEmeaStatus453 creates a InstantIssuanceV1FvEmeaStatus453 with default headers values
func NewInstantIssuanceV1FvEmeaStatus453() *InstantIssuanceV1FvEmeaStatus453 {
	return &InstantIssuanceV1FvEmeaStatus453{}
}

/*InstantIssuanceV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type InstantIssuanceV1FvEmeaStatus453 struct {
}

func (o *InstantIssuanceV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaStatus453 ", 453)
}

func (o *InstantIssuanceV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstantIssuanceV1FvEmeaStatus455 creates a InstantIssuanceV1FvEmeaStatus455 with default headers values
func NewInstantIssuanceV1FvEmeaStatus455() *InstantIssuanceV1FvEmeaStatus455 {
	return &InstantIssuanceV1FvEmeaStatus455{}
}

/*InstantIssuanceV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type InstantIssuanceV1FvEmeaStatus455 struct {
}

func (o *InstantIssuanceV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaStatus455 ", 455)
}

func (o *InstantIssuanceV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstantIssuanceV1FvEmeaStatus465 creates a InstantIssuanceV1FvEmeaStatus465 with default headers values
func NewInstantIssuanceV1FvEmeaStatus465() *InstantIssuanceV1FvEmeaStatus465 {
	return &InstantIssuanceV1FvEmeaStatus465{}
}

/*InstantIssuanceV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SIEX1I : INSTANT ISSUANCE REQUEST IS SUCCESSFUL<BR/>VPL5SIEX2I : INSTANT ISSUANCE REQUEST IS NOT SUCCESSFUL<BR/>VPL5SIE02S : INSTANT ISSUANCE ALLOWED IN NORMAL PROCESSING ONLY<BR/>VPL5SIE03I : INVALID ORG ENTERED VALID VALUES ARE 001 - 998<BR/>VPL5SIE04S : ORG NOT DETERMINED<BR/>VPL5SIE05S : CARD NBR REQUIRED<BR/>VPL5SIE06S : CARD SEQ INVALID VALID VALUES ARE 0001-9998<BR/>VPL5SIE07S : BRANCH NUMBER IS REQUIRED FOR INSTANT ISSUANCE<BR/>VPL5SIE08S : INVALID LOGO ENTERED VALID VALUES ARE 001 - 998<BR/>VPL5SIE09S : LOGO NOT DETERMINED<BR/>VPL5SIE10S : ACCOUNT NUMBER REQUIRED<BR/>VPL5SIE11S : CARD ACTION REQUIRED<BR/>VPL5SIE12S : INVALID EMBOSSED NAME 1<BR/>VPL5SIE13S : SDP REQUEST VALUE REQUIRED<BR/>VPL5SIE14S : CARD STATUS REQUIRED<BR/>VPL5SIE15S : CARD BLOCK CODE REQUIRED<BR/>VPL5SIE16S : NUMBER OF CARDS REQUESTED SHOULD BE 1<BR/>VPL5SIE17S : BRANCH NUMBER IS REQUIRED FOR INSTANT ISSUANCE<BR/>VPL5SIE18S : CHIP STATUS REQUIRED<BR/>VPL5SIE19S : ACCOUNT STATUS REQUIRED<BR/>VPL5SIE20S : ACCT BLOCK CODE 1 VALUE REQUIRED<BR/>VPL5SIE21S : ACCT BLOCK CODE 2 VALUE REQUIRED<BR/>VPL5SIE22S : CUST BLOCK CODE VALUE REQUIRED<BR/>VPL5SIE23S : LOGO BLOCK CODE MATRIX REQUIRED<BR/>VPL5SIE29S : CARD TECHNOLOGY VALUE REQUIRED<BR/>VPL5SIE30S : DELIVERY RECORD GETMAIN ERROR<BR/>VPL5SIE31S : INVALID ACCOUNT STATUS<BR/>VPL5SIE32S : INVALID CARD ACTION<BR/>VPL5SIE33S : INVALID EMBOSSER STATUS<BR/>VPL5SIE34S : INVALID SMART CARD EMBOSSER STATUS<BR/>VPL5SIE35S : CUSTOMER BLOCK CODE RESTRICTS INSTANT ISSUANCE<BR/>VPL5SIE36S : ACCOUNT BLOCKED TO RESTRICT CARD ISSUANCE<BR/>VPL5SIE37S : ACCOUNT BLOCKED TO RESTRICT CARD ISSUANCE<BR/>VPL5SIE38S : EMBOSSER BLOCK CODE RESTRICTS INSTANT ISSUANCE<BR/>VPL5SIE39S : SDP REQUEST IS IN PROCESS<BR/>VPL5SIE40S : INVALID EMBOSSED NAME 1<BR/>VPL5SIE41S : NUMBER OF CARDS REQUESTED SHOULD BE 1<BR/>VPL5SIE42S : INSTANT ISSUANCE NOT ALLOWED FOR MOBILE CARDS<BR/>VPL5SIE43S : VCM SERVICE CALL FAILED<BR/>VPL5SIE44S : CALL TO FDRXLATE FAILED<BR/>VPL5SIEA1S : CVX RANGE or KEY ERROR<BR/>VPL5SIEA2S : WHEN KMS IS INSTLD LOGO LVL PIN KEY TYP and ZONE SHLD NOT BE SPACES<BR/>VPL5SIEA3S : HSM RESP- ERROR WITH MASTER KEY<BR/>VPL5SIEA4S : HSM CALL FAILED<BR/>VPL5SIEA5S : HSM RESP- PIN GENERATE ERROR<BR/>VPL5SIEA6S : SRMorHSM FATAL ERROR<BR/>VPL5SIEA7S : MS PIN SYNCH - PRIMARY CARD NOT FOUND<BR/>VPL5SIEA8S : AMCD RECORD NOT FOUND<BR/>VPL5SIEA9S : CALCULATED EXPIRY DATE EXCEEDS THE CUT OFF LIMIT DATE<BR/>VPL5SIEI1S : INVALID CALCULATED EXPIRY DATE<BR/>VPL5SIEI2S : INVALID ACCT NUMUSR CALC<BR/>VPL5SIEI3S : INVALID EXP DATEUSR CALC<BR/>VPL5SIEI4S : INVALID CARD TYPEUSR CALC<BR/>VPL5SIEI5E : FEE TABLE VALUE IS ZEROES ON PCT TABLE<BR/>VPL5SIEI6E : ISO NAME or ISO NAME EXTN IS SPACES<BR/>VPL5SIER1S : ERROR ACCESSING BASE SEGMENT DATA<BR/>VPL5SIER2S : ERROR ACCESSING EMBOSSER DATA<BR/>VPL5SIER3S : ERROR ACCESSING AMEC DATA<BR/>VPL5SIER4S : ERROR ACCESSING PCT DATA<BR/>VPL5SIER5S : ERROR ACCESSING FEE DATA<BR/>VPL5SIER6S : ERROR ACCESSING AMCD DATA<BR/>VPL5SIER7S : ERROR ACCESSING AMCC DATA<BR/>VPL5SIER8S : ERROR ACCESSING CUSTOMER DATA<BR/>VPL5SIER9S : ERROR ACCESSING RELATIONSHIP DATA<BR/>VPL5SIES1S : SYSTEM RECORD NOT FOUND<BR/>VPL5SIES2S : ORG RECORD NOT FOUND<BR/>VPL5SIES3S : LOGO RECORD NOT FOUND<BR/>VPL5SIEZ1S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SIEZ2S : SERVICE INPUT TO INSTANT ISSUANCE SERVICE  IS AN INCORRECT LEN<BR/>VPL5SIEZ3S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SIEZ4S : REQUESTED ORGANIZATION COULD NOT BE DETERMINED<BR/>VPL5SIEZ5S : REQUESTED ORGANIZATION NOT FOUND<BR/>VPL5SIEZ6S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUN
*/
type InstantIssuanceV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *InstantIssuanceV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/instantIssuance][%d] instantIssuanceV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *InstantIssuanceV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *InstantIssuanceV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package card_maintenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CardAddV1FvEmeaReader is a Reader for the CardAddV1FvEmea structure.
type CardAddV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CardAddV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCardAddV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCardAddV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCardAddV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCardAddV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCardAddV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCardAddV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCardAddV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCardAddV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCardAddV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCardAddV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCardAddV1FvEmeaOK creates a CardAddV1FvEmeaOK with default headers values
func NewCardAddV1FvEmeaOK() *CardAddV1FvEmeaOK {
	return &CardAddV1FvEmeaOK{}
}

/*CardAddV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CardAddV1FvEmeaOK struct {
	Payload *models.CardAddResponse
}

func (o *CardAddV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CardAddV1FvEmeaOK) GetPayload() *models.CardAddResponse {
	return o.Payload
}

func (o *CardAddV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CardAddResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardAddV1FvEmeaBadRequest creates a CardAddV1FvEmeaBadRequest with default headers values
func NewCardAddV1FvEmeaBadRequest() *CardAddV1FvEmeaBadRequest {
	return &CardAddV1FvEmeaBadRequest{}
}

/*CardAddV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CardAddV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CardAddV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CardAddV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardAddV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardAddV1FvEmeaUnauthorized creates a CardAddV1FvEmeaUnauthorized with default headers values
func NewCardAddV1FvEmeaUnauthorized() *CardAddV1FvEmeaUnauthorized {
	return &CardAddV1FvEmeaUnauthorized{}
}

/*CardAddV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CardAddV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CardAddV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CardAddV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardAddV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardAddV1FvEmeaForbidden creates a CardAddV1FvEmeaForbidden with default headers values
func NewCardAddV1FvEmeaForbidden() *CardAddV1FvEmeaForbidden {
	return &CardAddV1FvEmeaForbidden{}
}

/*CardAddV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CardAddV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CardAddV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CardAddV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardAddV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardAddV1FvEmeaNotFound creates a CardAddV1FvEmeaNotFound with default headers values
func NewCardAddV1FvEmeaNotFound() *CardAddV1FvEmeaNotFound {
	return &CardAddV1FvEmeaNotFound{}
}

/*CardAddV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CardAddV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CardAddV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CardAddV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardAddV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardAddV1FvEmeaTooManyRequests creates a CardAddV1FvEmeaTooManyRequests with default headers values
func NewCardAddV1FvEmeaTooManyRequests() *CardAddV1FvEmeaTooManyRequests {
	return &CardAddV1FvEmeaTooManyRequests{}
}

/*CardAddV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CardAddV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CardAddV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CardAddV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardAddV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardAddV1FvEmeaStatus452 creates a CardAddV1FvEmeaStatus452 with default headers values
func NewCardAddV1FvEmeaStatus452() *CardAddV1FvEmeaStatus452 {
	return &CardAddV1FvEmeaStatus452{}
}

/*CardAddV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CardAddV1FvEmeaStatus452 struct {
}

func (o *CardAddV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaStatus452 ", 452)
}

func (o *CardAddV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardAddV1FvEmeaStatus453 creates a CardAddV1FvEmeaStatus453 with default headers values
func NewCardAddV1FvEmeaStatus453() *CardAddV1FvEmeaStatus453 {
	return &CardAddV1FvEmeaStatus453{}
}

/*CardAddV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CardAddV1FvEmeaStatus453 struct {
}

func (o *CardAddV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaStatus453 ", 453)
}

func (o *CardAddV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardAddV1FvEmeaStatus455 creates a CardAddV1FvEmeaStatus455 with default headers values
func NewCardAddV1FvEmeaStatus455() *CardAddV1FvEmeaStatus455 {
	return &CardAddV1FvEmeaStatus455{}
}

/*CardAddV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CardAddV1FvEmeaStatus455 struct {
}

func (o *CardAddV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaStatus455 ", 455)
}

func (o *CardAddV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardAddV1FvEmeaStatus465 creates a CardAddV1FvEmeaStatus465 with default headers values
func NewCardAddV1FvEmeaStatus465() *CardAddV1FvEmeaStatus465 {
	return &CardAddV1FvEmeaStatus465{}
}

/*CardAddV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SAP06S : ACCOUNT NUMBER REQUIRED IF CARD NUMBER NOT PROVIDED<BR/>VPL5SAP07S : NO VALID ORG FOUND FOR POST-TO-ACCOUNT<BR/>VPL5SAP08S : ORGANIZATION NOT DETERMINED<BR/>VPL5SAP11S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SAP12S : ACCOUNT NUMBER NOT FOUND<BR/>VPL5SAP13S : LOGO RECORD NOT FOUND<BR/>VPL5SAP14S : CARD NUMBER ALREADY EXISTS<BR/>VPL5SAP15S : CARD NBR AND ACCOUNT NBR MUST BE EQUAL FOR CARD SCHEME<BR/>VPL5SAP16S : CARD NUMBER CHECK DIGIT IS INVALID<BR/>VPL5SAP18S : CARD SEQUENCE ALREADY AT MAXIMUM FOR CARD NUMBER<BR/>VPL5SAP19S : CARD SEQUENCE ALREADY AT MAXIMUM FOR CHIP CARD NUMBER<BR/>VPL5SAP22S : CARD NUMBER ALREADY EXISTS ON DUAL ORG<BR/>VPL5SAP23S : CHIP CARD RECORD ALREADY EXISTS<BR/>VPL5SAP24S : CHIP CARD RECORD ALREADY EXISTS ON DUAL ORG<BR/>VPL5SAP25E : RECORD NUMBER IS INVALID<BR/>VPL5SAP26E : CARD ACTION VALUE MUST BE ZERO OR 1<BR/>VPL5SAP28E : NUMBER CARDS REQUESTED MUST EQUAL ZERO OR 1<BR/>VPL5SAP29E : EMBOSSING CARD FIELD MUST BE NUMERIC<BR/>VPL5SAP30E : EMBOSSING REQ FIELD MUST BE NUMERIC<BR/>VPL5SAP31E : NAME TYPE IS INVALID<BR/>VPL5SAP32E : EMBOSSED NAME TYPE MUST NOT EQUAL 3<BR/>VPL5SAP33E : EMBOSSED NAME 1 MUST BE GREATER THAN SPACE<BR/>VPL5SAP35E : PLUS FIELD MUST BE NUMERIC<BR/>VPL5SAP36E : PLUS FIELD VALUE IS INVALID<BR/>VPL5SAP39E : EXPIRATION DATE MUST BE NUMERIC<BR/>VPL5SAP40E : EXPIRATION DATE FIELD FORMAT IS INVALID<BR/>VPL5SAP42E : POS SERVICE CODE FIELD IS INVALID<BR/>VPL5SAP43E : CARDHOLDER FLAG FIELD VALUE IS INVALID<BR/>VPL5SAP44E : MINI FIELD MUST BE NUMERIC AND VALID VALUES ARE 0 THRU 2<BR/>VPL5SAP45E : MINI FIELD MUST EQUAL ZERO FOR NON-VISA ACCOUNT<BR/>VPL5SAP46E : PIN SUPPRESSION FIELD MUST BE 0 OR 1<BR/>VPL5SAP50E : MAXIMUM FREQ INPUT NOT ALLOWED WHEN NO AUTH LIMIT OVRRD<BR/>VPL5SAP53E : ATM CASH AMT FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP54E : ATM CASH AMT FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP55E : ATM CASH NBR FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP56E : ATM CASH NBR FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP57E : TXN LIMIT ATM FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP58E : TXN LIMIT ATM FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP59E : OTC CASH AMT FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP60E : OTC CASH AMT FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP62E : OTC CASH NBR FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP63E : TXN LIMIT OTC FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP64E : TXN LIMIT OTC FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP65E : RETAIL AMT FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP66E : RETAIL AMT FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP67E : RETAIL NBR FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP68E : RETAIL NBR FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP69E : TXN LIMIT RETAIL FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP70E : TXN LIMIT RETAIL FIELD UPDATE IS NOT ALLOWED<BR/>VPL5SAP71E : DATE USER 1 FIELD MUST BE NUMERIC AND IN JULIAN FORMAT<BR/>VPL5SAP72E : DATE USER 2 FIELD MUST BE NUMERIC AND IN JULIAN FORMAT<BR/>VPL5SAP73E : ADMIN BRCH FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP74E : ADMIN BRCH DELIVERY OPTION FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP75E : NEXT CARD EXPIRE DATE MUST BE NUMERIC AND FUTURE DATE<BR/>VPL5SAP76E : _1ST ISS BR FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP77E : _1ST ISS BR DELIVERY OPTION FIELD VALUE MUST BE NUMERIC<BR/>VPL5SAP78E : AUTH CRITERIA TABLE NUMBER IS INVALID<BR/>VPL5SAP79E : SDP PROCESSING NOT SUPPORTED BY LOGO<BR/>VPL5SAP80E : SDP CYCLE NOT SUPPORTED BY SYSTEM<BR/>VPL5SAP82E : PROGRAM ID MUST NOT BE GREATER THAN ZERO FOR MAG STRIP<BR/>VPL5SAP83E : MAXIMUM FIELD MUST BE NUMERIC<BR/>VPL5SAP84E : NBR FIELD MUST BE NUMERIC<BR/>VPL5SAP85E : FREQ FIELD MUST BE NUMERIC<BR/>VPL5SAP86E : ORG NOT VALID FOR POST-TO-ACCOUNT<BR/>VPL5SAP87E : CUSTOMER NUMBER IS INVALID<BR/>VPL5SAP89E : RECORD NUMBER MUST BE NUMERIC AND LESS THAN 9999<BR/>VPL5SAP90E : NAME TYPE 1 MUST BE NUMERIC<BR/>VPL5SAP91E : NAME TYPE 2 MUST BE NUMERIC<BR/>VPL5SAP92S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPL5SAP93S : ORG INVALID<BR/>VPL5SAP94E : VALUE MUST BE EITHER 1 THRU 4 OR A THRU G<BR/>VPL5SAP95E : CARDHOLDER FLAG MUST EQUAL 0 OR 1 FOR CARD SCHEME 2 OR 3<BR/>VPL5SAP01S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SAP02S : SERVICE INPUT TO AorP SERVICE IS AN INCORRECT LENGTH<BR/>VPL5SAP04S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SAP09S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPL5SAP10S : SYSTEM RECORD NOT FOUND<BR/>VPL5SAP20S : SERVICE COULD NOT OBTAIN STORAGE AREA FOR NUMBER GEN INPUT<BR/>VPL5SAP21S - : SERVICE COULD NOT OBTAIN STORAGE AREA FOR NUMBER GEN OUTPU
*/
type CardAddV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CardAddV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardAdd][%d] cardAddV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CardAddV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardAddV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

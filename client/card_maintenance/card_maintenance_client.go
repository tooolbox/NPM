// Code generated by go-swagger; DO NOT EDIT.

package card_maintenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new card maintenance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for card maintenance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CardActionUpdateV1FvEmea(params *CardActionUpdateV1FvEmeaParams) (*CardActionUpdateV1FvEmeaOK, error)

	CardActivationV1FvEmea(params *CardActivationV1FvEmeaParams) (*CardActivationV1FvEmeaOK, error)

	CardAddV1FvEmea(params *CardAddV1FvEmeaParams) (*CardAddV1FvEmeaOK, error)

	CardAntiReferralUpdateV1FvEmea(params *CardAntiReferralUpdateV1FvEmeaParams) (*CardAntiReferralUpdateV1FvEmeaOK, error)

	CardBlockCodeUpdateV1FvEmea(params *CardBlockCodeUpdateV1FvEmeaParams) (*CardBlockCodeUpdateV1FvEmeaOK, error)

	CardReplacementV1FvEmea(params *CardReplacementV1FvEmeaParams) (*CardReplacementV1FvEmeaOK, error)

	CardTransferUpdateV1FvEmea(params *CardTransferUpdateV1FvEmeaParams) (*CardTransferUpdateV1FvEmeaOK, error)

	CardUpdateV1FvEmea(params *CardUpdateV1FvEmeaParams) (*CardUpdateV1FvEmeaOK, error)

	EmbosserUpdateV1FvEmea(params *EmbosserUpdateV1FvEmeaParams) (*EmbosserUpdateV1FvEmeaOK, error)

	FraudMonitorFlagUpdateV1FvEmea(params *FraudMonitorFlagUpdateV1FvEmeaParams) (*FraudMonitorFlagUpdateV1FvEmeaOK, error)

	InstantCreditFlagUpdateV1FvEmea(params *InstantCreditFlagUpdateV1FvEmeaParams) (*InstantCreditFlagUpdateV1FvEmeaOK, error)

	InstantIssuanceRestartV1FvEmea(params *InstantIssuanceRestartV1FvEmeaParams) (*InstantIssuanceRestartV1FvEmeaOK, error)

	InstantIssuanceStatusUpdateV1FvEmea(params *InstantIssuanceStatusUpdateV1FvEmeaParams) (*InstantIssuanceStatusUpdateV1FvEmeaOK, error)

	InstantIssuanceV1FvEmea(params *InstantIssuanceV1FvEmeaParams) (*InstantIssuanceV1FvEmeaOK, error)

	LostStolenUpdateV2FvEmea(params *LostStolenUpdateV2FvEmeaParams) (*LostStolenUpdateV2FvEmeaOK, error)

	PinBlockChangeV1FvEmea(params *PinBlockChangeV1FvEmeaParams) (*PinBlockChangeV1FvEmeaOK, error)

	PinBlockUpdateV1FvEmea(params *PinBlockUpdateV1FvEmeaParams) (*PinBlockUpdateV1FvEmeaOK, error)

	UpdateDisabilityIndicatorV1FvEmea(params *UpdateDisabilityIndicatorV1FvEmeaParams) (*UpdateDisabilityIndicatorV1FvEmeaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CardActionUpdateV1FvEmea cards action update

  The Card Action Update service enables a user to update the card action field on the embosser record with all possible user available actions.The Input message requires data for each of the fields included in the message. This service is not affected by dual currency. When dual currency is active, cards will be issued from the Local Organization only. The service will not update a card that is flagged as fraudulent. The service will edit all input data and once the edits are passed update the Card Action field in the embossing master file AMED. When the service functionality is successfully completed, a response will be returned to the calling program with a Pass return code. When, the service is not able to successfully complete, the service response will include a Fail return code and any associated error codes indicating that the service was not able update the embosser card action code in AMED file.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardActionUpdateV1FvEmea(params *CardActionUpdateV1FvEmeaParams) (*CardActionUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardActionUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardActionUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardActionUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardActionUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardActionUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardActionUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardActivationV1FvEmea cards activation

  The Card Activation Service is used to activate a card or group of cards in CMS. This service can be called with an account number or a card number. <BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardActivationV1FvEmea(params *CardActivationV1FvEmeaParams) (*CardActivationV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardActivationV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardActivation_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardActivation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardActivationV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardActivationV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardActivation_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardAddV1FvEmea cards add

  The service will allow a calling program to add an Embosser record from a calling program. The input request will contain selected fields found on the Embosser record.  The service will edit all input data, and populate the Embosser Master File (AMED) in the same manner as the existing online ARME screens. If the card number field is not provided, the number generation service will generate the card number and pass the number back to the Add Embosser Record Service. The service will support the creation of embossers for all four card schemes.
*/
func (a *Client) CardAddV1FvEmea(params *CardAddV1FvEmeaParams) (*CardAddV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardAddV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardAdd_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardAdd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardAddV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardAddV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardAdd_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardAntiReferralUpdateV1FvEmea cards anti referral update

  The new Embosser Anti Referral Update Request service will perform the Updation of Referral/Anti referral field and its expiry date update through real time application systems (Ex. Web, Mobile, IVR, branch online system, etc.). This will help user to request and update anti referral field and its expiry date. The input for this message will be built using user input in the real time application systems and client input. If request is valid and card supports given value thru XML, the output of this message will contain the card number and return code that shows whether the Embosser record is updated or not.
*/
func (a *Client) CardAntiReferralUpdateV1FvEmea(params *CardAntiReferralUpdateV1FvEmeaParams) (*CardAntiReferralUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardAntiReferralUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardAntiReferralUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardAntiReferralUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardAntiReferralUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardAntiReferralUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardAntiReferralUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardBlockCodeUpdateV1FvEmea cards block code update

  The Block Code Update service enables the user to update the block codes and the reason codes for the block codes for cards and accounts. <BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardBlockCodeUpdateV1FvEmea(params *CardBlockCodeUpdateV1FvEmeaParams) (*CardBlockCodeUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardBlockCodeUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardBlockCodeUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardBlockCodeUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardBlockCodeUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardBlockCodeUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardBlockCodeUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardReplacementV1FvEmea cards replacement

  This service is used if an existing card of the customer needs to be replaced with a new card because of some issue with the existing card (mainly damaged case).<p> The key details such as card number with appropriate action code needs to be passed in the request message. For all valid requests, system updates the relevant fields at the embossing records for the replacement action and as part of EOD process, it generates the embossing records which can be used for printing a new plastic.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardReplacementV1FvEmea(params *CardReplacementV1FvEmeaParams) (*CardReplacementV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardReplacementV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardReplacement_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardReplacement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardReplacementV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardReplacementV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardReplacement_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardTransferUpdateV1FvEmea cards transfer update

  This service is to block a card incase of the lost or stolen or fraudulent or replace within card scheme 3 account and transfer to separate card scheme 3 fraud account. This service provides an option whether or not to replace the blocked card. The fraud account to which the card will be transferred can be either a newly generated fraud account or an existing fraud account established specifically for the purpose of posting and tracking fraudulent card transactions.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardTransferUpdateV1FvEmea(params *CardTransferUpdateV1FvEmeaParams) (*CardTransferUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardTransferUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardTransferUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardTransferUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardTransferUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardTransferUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardTransferUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardUpdateV1FvEmea cards update

  The Card Update Service is used to update data at the Card level for a FirstVision account.
*/
func (a *Client) CardUpdateV1FvEmea(params *CardUpdateV1FvEmeaParams) (*CardUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmbosserUpdateV1FvEmea embossers update

  This service is deprecated and will be supported until January 2021. Please use Card Update service version v1. <BR/><BR/>
*/
func (a *Client) EmbosserUpdateV1FvEmea(params *EmbosserUpdateV1FvEmeaParams) (*EmbosserUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmbosserUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "embosserUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/embosserUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmbosserUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmbosserUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for embosserUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FraudMonitorFlagUpdateV1FvEmea frauds monitor flag update

  This service is used to update to the Fraud Monitor Flag and the Fraud Monitor Expiry Date fields on the card.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) FraudMonitorFlagUpdateV1FvEmea(params *FraudMonitorFlagUpdateV1FvEmeaParams) (*FraudMonitorFlagUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFraudMonitorFlagUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fraudMonitorFlagUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/fraudMonitorFlagUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FraudMonitorFlagUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FraudMonitorFlagUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fraudMonitorFlagUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantCreditFlagUpdateV1FvEmea instants credit flag update

  This Service update Instant Credit Flag for the account in the system.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) InstantCreditFlagUpdateV1FvEmea(params *InstantCreditFlagUpdateV1FvEmeaParams) (*InstantCreditFlagUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantCreditFlagUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instantCreditFlagUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instantCreditFlagUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstantCreditFlagUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantCreditFlagUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instantCreditFlagUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantIssuanceRestartV1FvEmea instants issuance restart

  This service is used to restart the Instant Issuance on a card which had failed the Instant Issuance process earlier.  Instant issuance process is called during card boarding, card action update, lost stolen update.  If the Instant issuance service fails, the card is updated or boarded successfully, but the issuance process is not complete. In such cases, using the Instant Issuance Restart service, by providing the card number and the branch number as input, this service can be called. The service will process only one card at a time and update the account details accordingly. If details on other cards are to be changed because of this card, that will be taken care in the normal batch process. The service will edit all input and also validate the parameter setup for Instant Issuance.  Once the edits are passed it will pass data to the Instant Issuance service. When the service functionality is successfully completed, a response will be returned to the calling program with a Pass return code.  When, the service is not able to successfully complete, the service response will include a Fail return code and any associated error codes indicating that the service was not able to instantly issue the card.<p><p>Any errors returned by the Instant Issuance service will also result in the Restart service failure and the error message from Instant Issuance service will be populated in the response.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) InstantIssuanceRestartV1FvEmea(params *InstantIssuanceRestartV1FvEmeaParams) (*InstantIssuanceRestartV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantIssuanceRestartV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instantIssuanceRestart_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instantIssuanceRestart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstantIssuanceRestartV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantIssuanceRestartV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instantIssuanceRestart_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantIssuanceStatusUpdateV1FvEmea instants issuance status update

  The Instant Issuance Status Update Service  manages the updates into FirstVision as a result of input messages and responses related to the status of card production, covering both successful and unsuccessful requests for card issuing.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) InstantIssuanceStatusUpdateV1FvEmea(params *InstantIssuanceStatusUpdateV1FvEmeaParams) (*InstantIssuanceStatusUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantIssuanceStatusUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instantIssuanceStatusUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instantIssuanceStatusUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstantIssuanceStatusUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantIssuanceStatusUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instantIssuanceStatusUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantIssuanceV1FvEmea instants issuance

  The Instant Issuance service provides the ability to instantly issue a plastic (non-mobile cards) as soon as the card issue request is received.  The input message requires data for each of the fields included in the message. The service will edit all input and once the edits are passed update the card and account details in embosser master file AMED, chip data file AMEC  and base segment file AMBS.  A log record will also be written for each field being updated. When the service functionality is successfully completed, a response will be returned to the calling program with a Pass return code and an information message that the service has passed.  When, the service is not able to successfully complete, the service response will include a Fail return code and any associated error codes indicating that the service was not able instantly issue the card.  Along with the failure return code, the service will also pass an information message that the service has failed.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) InstantIssuanceV1FvEmea(params *InstantIssuanceV1FvEmeaParams) (*InstantIssuanceV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantIssuanceV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instantIssuance_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/instantIssuance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstantIssuanceV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantIssuanceV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instantIssuance_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LostStolenUpdateV2FvEmea losts stolen update

  To update a Lost or Stolen card block code and request for a card replacement and pin.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) LostStolenUpdateV2FvEmea(params *LostStolenUpdateV2FvEmeaParams) (*LostStolenUpdateV2FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLostStolenUpdateV2FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lostStolenUpdate_v2_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v2/lostStolenUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LostStolenUpdateV2FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LostStolenUpdateV2FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lostStolenUpdate_v2_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinBlockChangeV1FvEmea pins block change

  The PIN Block Change Service is used to update the PIN Block with the prerequisite that the existing PIN block must be supplied and validated before the new PIN block is replaced. The PIN Block Change service will track and record the PIN Block Change in the Pin History File. This service could be triggered from the ATM or other digital channels such as online (WEB) or mobile banking.
*/
func (a *Client) PinBlockChangeV1FvEmea(params *PinBlockChangeV1FvEmeaParams) (*PinBlockChangeV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinBlockChangeV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinBlockChange_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/pinBlockChange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinBlockChangeV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinBlockChangeV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinBlockChange_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinBlockUpdateV1FvEmea pins block update

  The PIN Block Update Service is used to replace the PIN Block without any validations. This service will also reset Invalid PIN Counter at card level. This service could be triggered from the ATM or other digital channels such as online (WEB) or mobile banking.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) PinBlockUpdateV1FvEmea(params *PinBlockUpdateV1FvEmeaParams) (*PinBlockUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinBlockUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinBlockUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/pinBlockUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinBlockUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinBlockUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinBlockUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDisabilityIndicatorV1FvEmea updates disability indicator

  The Disability indicator update service updates disability indicator in embosser record file. <BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) UpdateDisabilityIndicatorV1FvEmea(params *UpdateDisabilityIndicatorV1FvEmeaParams) (*UpdateDisabilityIndicatorV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDisabilityIndicatorV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDisabilityIndicator_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/updateDisabilityIndicator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDisabilityIndicatorV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDisabilityIndicatorV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDisabilityIndicator_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

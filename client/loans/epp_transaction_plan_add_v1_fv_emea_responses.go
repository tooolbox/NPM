// Code generated by go-swagger; DO NOT EDIT.

package loans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// EppTransactionPlanAddV1FvEmeaReader is a Reader for the EppTransactionPlanAddV1FvEmea structure.
type EppTransactionPlanAddV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EppTransactionPlanAddV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEppTransactionPlanAddV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEppTransactionPlanAddV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEppTransactionPlanAddV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEppTransactionPlanAddV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEppTransactionPlanAddV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEppTransactionPlanAddV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewEppTransactionPlanAddV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewEppTransactionPlanAddV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewEppTransactionPlanAddV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewEppTransactionPlanAddV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEppTransactionPlanAddV1FvEmeaOK creates a EppTransactionPlanAddV1FvEmeaOK with default headers values
func NewEppTransactionPlanAddV1FvEmeaOK() *EppTransactionPlanAddV1FvEmeaOK {
	return &EppTransactionPlanAddV1FvEmeaOK{}
}

/*EppTransactionPlanAddV1FvEmeaOK handles this case with default header values.

successful operation
*/
type EppTransactionPlanAddV1FvEmeaOK struct {
	Payload *models.EppTransactionPlanAddResponse
}

func (o *EppTransactionPlanAddV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaOK) GetPayload() *models.EppTransactionPlanAddResponse {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EppTransactionPlanAddResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaBadRequest creates a EppTransactionPlanAddV1FvEmeaBadRequest with default headers values
func NewEppTransactionPlanAddV1FvEmeaBadRequest() *EppTransactionPlanAddV1FvEmeaBadRequest {
	return &EppTransactionPlanAddV1FvEmeaBadRequest{}
}

/*EppTransactionPlanAddV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type EppTransactionPlanAddV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *EppTransactionPlanAddV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaUnauthorized creates a EppTransactionPlanAddV1FvEmeaUnauthorized with default headers values
func NewEppTransactionPlanAddV1FvEmeaUnauthorized() *EppTransactionPlanAddV1FvEmeaUnauthorized {
	return &EppTransactionPlanAddV1FvEmeaUnauthorized{}
}

/*EppTransactionPlanAddV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type EppTransactionPlanAddV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *EppTransactionPlanAddV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaForbidden creates a EppTransactionPlanAddV1FvEmeaForbidden with default headers values
func NewEppTransactionPlanAddV1FvEmeaForbidden() *EppTransactionPlanAddV1FvEmeaForbidden {
	return &EppTransactionPlanAddV1FvEmeaForbidden{}
}

/*EppTransactionPlanAddV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type EppTransactionPlanAddV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *EppTransactionPlanAddV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaNotFound creates a EppTransactionPlanAddV1FvEmeaNotFound with default headers values
func NewEppTransactionPlanAddV1FvEmeaNotFound() *EppTransactionPlanAddV1FvEmeaNotFound {
	return &EppTransactionPlanAddV1FvEmeaNotFound{}
}

/*EppTransactionPlanAddV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type EppTransactionPlanAddV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *EppTransactionPlanAddV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaTooManyRequests creates a EppTransactionPlanAddV1FvEmeaTooManyRequests with default headers values
func NewEppTransactionPlanAddV1FvEmeaTooManyRequests() *EppTransactionPlanAddV1FvEmeaTooManyRequests {
	return &EppTransactionPlanAddV1FvEmeaTooManyRequests{}
}

/*EppTransactionPlanAddV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type EppTransactionPlanAddV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *EppTransactionPlanAddV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaStatus452 creates a EppTransactionPlanAddV1FvEmeaStatus452 with default headers values
func NewEppTransactionPlanAddV1FvEmeaStatus452() *EppTransactionPlanAddV1FvEmeaStatus452 {
	return &EppTransactionPlanAddV1FvEmeaStatus452{}
}

/*EppTransactionPlanAddV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type EppTransactionPlanAddV1FvEmeaStatus452 struct {
}

func (o *EppTransactionPlanAddV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaStatus452 ", 452)
}

func (o *EppTransactionPlanAddV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaStatus453 creates a EppTransactionPlanAddV1FvEmeaStatus453 with default headers values
func NewEppTransactionPlanAddV1FvEmeaStatus453() *EppTransactionPlanAddV1FvEmeaStatus453 {
	return &EppTransactionPlanAddV1FvEmeaStatus453{}
}

/*EppTransactionPlanAddV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type EppTransactionPlanAddV1FvEmeaStatus453 struct {
}

func (o *EppTransactionPlanAddV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaStatus453 ", 453)
}

func (o *EppTransactionPlanAddV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaStatus455 creates a EppTransactionPlanAddV1FvEmeaStatus455 with default headers values
func NewEppTransactionPlanAddV1FvEmeaStatus455() *EppTransactionPlanAddV1FvEmeaStatus455 {
	return &EppTransactionPlanAddV1FvEmeaStatus455{}
}

/*EppTransactionPlanAddV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type EppTransactionPlanAddV1FvEmeaStatus455 struct {
}

func (o *EppTransactionPlanAddV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaStatus455 ", 455)
}

func (o *EppTransactionPlanAddV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEppTransactionPlanAddV1FvEmeaStatus465 creates a EppTransactionPlanAddV1FvEmeaStatus465 with default headers values
func NewEppTransactionPlanAddV1FvEmeaStatus465() *EppTransactionPlanAddV1FvEmeaStatus465 {
	return &EppTransactionPlanAddV1FvEmeaStatus465{}
}

/*EppTransactionPlanAddV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SE301S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SE302S : SERVICE INPUT TO SERVICE IS OF INCORRECT LENGTH<BR/>VPL5SE304S : FILE-TABLE USED BY THIS SERVICE IS MISSING<BR/>VPL5SE305S : CMS IS NO-PROCESSING STATE RE-TRY REQUEST IN FEW MINUT<BR/>VPL5SE306S : ORG RECORD NOT FOUND<BR/>VPL5SE307S : ORG NOT FOUND ON FILE<BR/>VPL5SE308S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SE309S : CMS IS NO-PROCESSING STATE RETRY IN A FEW MINUTES<BR/>VPL5SE310S : ORG NOT FOUND ON FILE<BR/>VPL5SE311S : FOREIGN ORG NOT FOUND ON FILE<BR/>VPL5SE312S : BASE SEGMENT ACCOUNT RECORD NOT ON AMBS FILE<BR/>VPL5SE313S : LOGO NOT FOUND ON FILE<BR/>VPL5SE314S : PLAN SEGMENT RECORD NOT ON AMPS FILE<BR/>VPL5SE315S : CREDIT PLAN MASTER RECORD NOT ON AMCP FILE<BR/>VPL5SE316E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMOS<BR/>VPL5SE317E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMSL<BR/>VPL5SE318E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMSS<BR/>VPL5SE319E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMXT<BR/>VPL5SE320E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMPS PLAN REC<BR/>VPL5SE321E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMPS LOAN REC<BR/>VPL5SE322E : EPP CONVERSION IS NOT DONE ERR ON UPD TO FILE AMLS LOAN REC<BR/>VPL5SE323E : LOAN REFERENCE NUMBER GENERATION TABLE IS NOT VALI
*/
type EppTransactionPlanAddV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *EppTransactionPlanAddV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppTransactionPlanAdd][%d] eppTransactionPlanAddV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *EppTransactionPlanAddV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppTransactionPlanAddV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

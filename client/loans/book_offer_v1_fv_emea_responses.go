// Code generated by go-swagger; DO NOT EDIT.

package loans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// BookOfferV1FvEmeaReader is a Reader for the BookOfferV1FvEmea structure.
type BookOfferV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BookOfferV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBookOfferV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBookOfferV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBookOfferV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBookOfferV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBookOfferV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBookOfferV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewBookOfferV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewBookOfferV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewBookOfferV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewBookOfferV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBookOfferV1FvEmeaOK creates a BookOfferV1FvEmeaOK with default headers values
func NewBookOfferV1FvEmeaOK() *BookOfferV1FvEmeaOK {
	return &BookOfferV1FvEmeaOK{}
}

/*BookOfferV1FvEmeaOK handles this case with default header values.

successful operation
*/
type BookOfferV1FvEmeaOK struct {
	Payload *models.BookOfferResponse
}

func (o *BookOfferV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *BookOfferV1FvEmeaOK) GetPayload() *models.BookOfferResponse {
	return o.Payload
}

func (o *BookOfferV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BookOfferResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookOfferV1FvEmeaBadRequest creates a BookOfferV1FvEmeaBadRequest with default headers values
func NewBookOfferV1FvEmeaBadRequest() *BookOfferV1FvEmeaBadRequest {
	return &BookOfferV1FvEmeaBadRequest{}
}

/*BookOfferV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type BookOfferV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *BookOfferV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *BookOfferV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *BookOfferV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookOfferV1FvEmeaUnauthorized creates a BookOfferV1FvEmeaUnauthorized with default headers values
func NewBookOfferV1FvEmeaUnauthorized() *BookOfferV1FvEmeaUnauthorized {
	return &BookOfferV1FvEmeaUnauthorized{}
}

/*BookOfferV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type BookOfferV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *BookOfferV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *BookOfferV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *BookOfferV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookOfferV1FvEmeaForbidden creates a BookOfferV1FvEmeaForbidden with default headers values
func NewBookOfferV1FvEmeaForbidden() *BookOfferV1FvEmeaForbidden {
	return &BookOfferV1FvEmeaForbidden{}
}

/*BookOfferV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type BookOfferV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *BookOfferV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *BookOfferV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *BookOfferV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookOfferV1FvEmeaNotFound creates a BookOfferV1FvEmeaNotFound with default headers values
func NewBookOfferV1FvEmeaNotFound() *BookOfferV1FvEmeaNotFound {
	return &BookOfferV1FvEmeaNotFound{}
}

/*BookOfferV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type BookOfferV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *BookOfferV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *BookOfferV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *BookOfferV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookOfferV1FvEmeaTooManyRequests creates a BookOfferV1FvEmeaTooManyRequests with default headers values
func NewBookOfferV1FvEmeaTooManyRequests() *BookOfferV1FvEmeaTooManyRequests {
	return &BookOfferV1FvEmeaTooManyRequests{}
}

/*BookOfferV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type BookOfferV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *BookOfferV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *BookOfferV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *BookOfferV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookOfferV1FvEmeaStatus452 creates a BookOfferV1FvEmeaStatus452 with default headers values
func NewBookOfferV1FvEmeaStatus452() *BookOfferV1FvEmeaStatus452 {
	return &BookOfferV1FvEmeaStatus452{}
}

/*BookOfferV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type BookOfferV1FvEmeaStatus452 struct {
}

func (o *BookOfferV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaStatus452 ", 452)
}

func (o *BookOfferV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBookOfferV1FvEmeaStatus453 creates a BookOfferV1FvEmeaStatus453 with default headers values
func NewBookOfferV1FvEmeaStatus453() *BookOfferV1FvEmeaStatus453 {
	return &BookOfferV1FvEmeaStatus453{}
}

/*BookOfferV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type BookOfferV1FvEmeaStatus453 struct {
}

func (o *BookOfferV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaStatus453 ", 453)
}

func (o *BookOfferV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBookOfferV1FvEmeaStatus455 creates a BookOfferV1FvEmeaStatus455 with default headers values
func NewBookOfferV1FvEmeaStatus455() *BookOfferV1FvEmeaStatus455 {
	return &BookOfferV1FvEmeaStatus455{}
}

/*BookOfferV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type BookOfferV1FvEmeaStatus455 struct {
}

func (o *BookOfferV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaStatus455 ", 455)
}

func (o *BookOfferV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBookOfferV1FvEmeaStatus465 creates a BookOfferV1FvEmeaStatus465 with default headers values
func NewBookOfferV1FvEmeaStatus465() *BookOfferV1FvEmeaStatus465 {
	return &BookOfferV1FvEmeaStatus465{}
}

/*BookOfferV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL7SEP01S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL7SEP02S : SERVICE INPUT TO EPP BOOKING SERVICE IS AN INCORRECT LENGTH<BR/>VPL7SEP04S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL7SEP06E : INVALID TRANSACTION TIME<BR/>VPL7SEP07E : INVALID AUTH CODE<BR/>VPL7SEP10E : INVALID REGION ID<BR/>VPL7SEP11E : INVALID TRANSACTION REF NUMBER<BR/>VPL7SEP13E : INVALID TRANSACTION AMOUNT<BR/>VPL7SEP14E : INVALID TRANSACTION DATE<BR/>VPL7SEP15E : INVALID CARD NUMBER<BR/>VPL7SEP18S : AMCR SYSTEM RECORD NOT FOUND<BR/>VPL7SEP19S : AMCR CLOSED<BR/>VPL7SEP20S : AMCR ORG RECORD NOT FOUND<BR/>VPL7SEP21S : AMED FILE CLOSED<BR/>VPL7SEP22S : INACTIVE CARD OR NOT FOUND IN AMED<BR/>VPL7SEP23E : INVALID PLAN NUMBER<BR/>VPL7SEP24S : AMCP FILE CLOSED<BR/>VPL7SEP25S : PLAN NOT FOUND<BR/>VPL7SEP26E : INACTIVE ACCOUNT OR NOT FOUND IN AMBS<BR/>VPL7SEP27S : AMBS FILE CLOSEDorDISABLED<BR/>VPL7SEP28E : AMOA FILE CLOSED<BR/>VPL7SEP29E : AMOA READ ERROR<BR/>VPL7SEP30E : FMLG CLOSED OR READ ERROR<BR/>VPL7SEP31E : FMAA CLOSED OR READ ERROR<BR/>VPL7SEP32E : AUTHORIZATION IS ALREADY REVERSED<BR/>VPL7SEP33E : MAX AUTH EPP THRESHOLD REACHED<BR/>VPL7SEP34S : AMCR LOGO RECORD NOT FOUND<BR/>VPL7SEP34S : AMCR LOGO RECORD NOT FOUND
*/
type BookOfferV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *BookOfferV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/bookOffer][%d] bookOfferV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *BookOfferV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *BookOfferV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

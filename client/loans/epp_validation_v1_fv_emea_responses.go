// Code generated by go-swagger; DO NOT EDIT.

package loans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// EppValidationV1FvEmeaReader is a Reader for the EppValidationV1FvEmea structure.
type EppValidationV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EppValidationV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEppValidationV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEppValidationV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEppValidationV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEppValidationV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEppValidationV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEppValidationV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewEppValidationV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewEppValidationV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewEppValidationV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewEppValidationV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEppValidationV1FvEmeaOK creates a EppValidationV1FvEmeaOK with default headers values
func NewEppValidationV1FvEmeaOK() *EppValidationV1FvEmeaOK {
	return &EppValidationV1FvEmeaOK{}
}

/*EppValidationV1FvEmeaOK handles this case with default header values.

successful operation
*/
type EppValidationV1FvEmeaOK struct {
	Payload *models.EppValidationResponse
}

func (o *EppValidationV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *EppValidationV1FvEmeaOK) GetPayload() *models.EppValidationResponse {
	return o.Payload
}

func (o *EppValidationV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EppValidationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppValidationV1FvEmeaBadRequest creates a EppValidationV1FvEmeaBadRequest with default headers values
func NewEppValidationV1FvEmeaBadRequest() *EppValidationV1FvEmeaBadRequest {
	return &EppValidationV1FvEmeaBadRequest{}
}

/*EppValidationV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type EppValidationV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *EppValidationV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *EppValidationV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppValidationV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppValidationV1FvEmeaUnauthorized creates a EppValidationV1FvEmeaUnauthorized with default headers values
func NewEppValidationV1FvEmeaUnauthorized() *EppValidationV1FvEmeaUnauthorized {
	return &EppValidationV1FvEmeaUnauthorized{}
}

/*EppValidationV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type EppValidationV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *EppValidationV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *EppValidationV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppValidationV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppValidationV1FvEmeaForbidden creates a EppValidationV1FvEmeaForbidden with default headers values
func NewEppValidationV1FvEmeaForbidden() *EppValidationV1FvEmeaForbidden {
	return &EppValidationV1FvEmeaForbidden{}
}

/*EppValidationV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type EppValidationV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *EppValidationV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *EppValidationV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppValidationV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppValidationV1FvEmeaNotFound creates a EppValidationV1FvEmeaNotFound with default headers values
func NewEppValidationV1FvEmeaNotFound() *EppValidationV1FvEmeaNotFound {
	return &EppValidationV1FvEmeaNotFound{}
}

/*EppValidationV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type EppValidationV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *EppValidationV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *EppValidationV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppValidationV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppValidationV1FvEmeaTooManyRequests creates a EppValidationV1FvEmeaTooManyRequests with default headers values
func NewEppValidationV1FvEmeaTooManyRequests() *EppValidationV1FvEmeaTooManyRequests {
	return &EppValidationV1FvEmeaTooManyRequests{}
}

/*EppValidationV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type EppValidationV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *EppValidationV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *EppValidationV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppValidationV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEppValidationV1FvEmeaStatus452 creates a EppValidationV1FvEmeaStatus452 with default headers values
func NewEppValidationV1FvEmeaStatus452() *EppValidationV1FvEmeaStatus452 {
	return &EppValidationV1FvEmeaStatus452{}
}

/*EppValidationV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type EppValidationV1FvEmeaStatus452 struct {
}

func (o *EppValidationV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaStatus452 ", 452)
}

func (o *EppValidationV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEppValidationV1FvEmeaStatus453 creates a EppValidationV1FvEmeaStatus453 with default headers values
func NewEppValidationV1FvEmeaStatus453() *EppValidationV1FvEmeaStatus453 {
	return &EppValidationV1FvEmeaStatus453{}
}

/*EppValidationV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type EppValidationV1FvEmeaStatus453 struct {
}

func (o *EppValidationV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaStatus453 ", 453)
}

func (o *EppValidationV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEppValidationV1FvEmeaStatus455 creates a EppValidationV1FvEmeaStatus455 with default headers values
func NewEppValidationV1FvEmeaStatus455() *EppValidationV1FvEmeaStatus455 {
	return &EppValidationV1FvEmeaStatus455{}
}

/*EppValidationV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type EppValidationV1FvEmeaStatus455 struct {
}

func (o *EppValidationV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaStatus455 ", 455)
}

func (o *EppValidationV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEppValidationV1FvEmeaStatus465 creates a EppValidationV1FvEmeaStatus465 with default headers values
func NewEppValidationV1FvEmeaStatus465() *EppValidationV1FvEmeaStatus465 {
	return &EppValidationV1FvEmeaStatus465{}
}

/*EppValidationV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SE201S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SE202S : SERVICE INPUT TO SERVICE IS OF INCORRECT LENGTH<BR/>VPL5SE204S : FILE-TABLE USED BY THIS SERVICE IS MISSING<BR/>VPL5SE205S : CMS IS NO-PROCESSING STATE RE-TRY REQUEST IN FEW MINUT<BR/>VPL5SE206E : ORG MUST BE NUMERIC VALID VALUES ARE 000 THRU 998<BR/>VPL5SE207E : ACCT NUMBER MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE208E : CARD NUMBER MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE209E : CARD SEQUENCE NUMBER MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE210E : TRANSACTION AMOUNT MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE211E : PLAN NUMBER MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE212E : TERM MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE213E : INTEREST RATE MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE214S : ORG RECORD NOT FOUND<BR/>VPL5SE215S : ORG NOT FOUND ON FILE<BR/>VPL5SE216S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SE217S : CMS IS NO-PROCESSING STATE RETRY IN A FEW MINUTES<BR/>VPL5SE218S : ORG NOT FOUND ON FILE<BR/>VPL5SE219S : FOREIGN ORG NOT FOUND ON FILE<BR/>VPL5SE220S : BASE SEGMENT ACCOUNT RECORD NOT ON AMBS FILE<BR/>VPL5SE221S : LOGO NOT FOUND ON FILE<BR/>VPL5SE222S : NO CUSTOMER SERVICE REP ASSIGNED TO OPERATOR<BR/>VPL5SE223S : NO CUSTOMER SERVICE REP ASSIGNED TO OPERATOR<BR/>VPL5SE224S : PLAN SEGMENT RECORD NOT ON AMPS FILE<BR/>VPL5SE225S : EMBOSSER CARD RECORD NOT ON AMED FILE<BR/>VPL5SE226S : EPP CONVERSION NOT ALLOWED INVALID CREDIT PLAN<BR/>VPL5SE227E : EPP CONVERSION NOT ALLOWED CREDIT PLAN NOT SUPPORTED<BR/>VPL5SE228E : NUMBER OF PLANS ON ACCOUNT ARE MORE THAN 95<BR/>VPL5SE229E : EPP CONVERSION NOT ALLOWED ACCOUNT DELINQUENT<BR/>VPL5SE230E : EPP CONVERSION NOT ALLOWED ACCOUNT STATUS<BR/>VPL5SE231E : EPP CONVERSION NOT ALLOWED ACCOUNT BLOCKED<BR/>VPL5SE232E : TRANSACTION NOT ELIGIBLE FOR EPP CARD EXPIRED<BR/>VPL5SE233E : EPP CONVERSION NOT ALLOWED MINIMUM TRANSACTION AMOUNT<BR/>VPL5SE234E : EPP CONVERSION NOT ALLOWED MAXIMUM TRANSACTION AMOUNT<BR/>VPL5SE235E : EPP CONVERSION NOT ALLOWED AMOUNT OUTSIDE TENOR TIER<BR/>VPL5SE236E : EPP PLAN CONVERSION NOT ALLOWED TO THIS LOGO<BR/>VPL5SE237E : EPP PLAN CONVERSION NOT ALLOWED TO THIS LOGO<BR/>VPL5SE238E : EPP PLAN NUMBER MUST BE NUMERIC GREATER THAN ZEROES<BR/>VPL5SE239E : EPP CONVERSION NOT ALLOWED CARD TYPEorGRACE BAL QUALIFY MISMTCH<BR/>VPL5SE240E : EPP CONVERSION NOT ALLOWED CARD TYPEorGRACE BAL QUALIFY MISMTCH<BR/>VPL5SE241E : EPP CONVERSION NOT ALLOWED EPP PROMOTION IS NOT IN EFFECT<BR/>VPL5SE242E : EPP CONV NOT ALLOWED ONLY RETAIL TXN SUPPORTED<BR/>VPL5SE243E : EPP CONV NOT ALLOWED ONLY CASH TXN SUPPORTED<BR/>VPL5SE244E : EPP CONV NOT ALLOWED ONLY CASH or RETAIL TXN SUPPORTED<BR/>VPL5SE245E : EPP CONV NOT ALLOWED ONLY CASH or RETAIL or BAL XFR TXN SUPPORTED<BR/>VPL5SE246E : EPP CONV NOT ALLOWED ONLY BALANCE TRANSFER TXN SUPPORTED<BR/>VPL5SE247E : EPP PLAN CONVERSION NOT ALLOWED TO THIS ORG<BR/>VPL5SE248E : EPP PLAN CONVERSION NOT ALLOWED LOAN NOT ALLOWED TO THIS LOGO<BR/>VPL5SE249E : EPP TERM OVERRIDE NOT ALLOWED<BR/>VPL5SE250E : EPP OVERRIDE TERM LESS THAN ALLOWED MINIMUM TERM<BR/>VPL5SE251E : EPP OVERRIDE TERM MORE THAN ALLOWED MAXIMUM TERM<BR/>VPL5SE252E : EPP INTEREST RATE OVERRIDE NOT ALLOWED<BR/>VPL5SE253E : EPP PLAN CONVERSION NOT ALLOWED TO THIS LOGO<BR/>VPL5SE254E : TRANSACTION LOGIC MODULE NOT ENTERED<BR/>VPL5SE255E : TRANSACTION LEPP CONVERSION INDICATOR NOT ENTERED<BR/>VPL5SE256E : EPP CONVERSION NOT ALLOWED CREDIT PLAN NOT SUPPORTED<BR/>VPL5SE257E : EPP CONVERSION NOT ALLOWED TXN IS NOT A SALES TXN<BR/>VPL5SE258E : EPP CONVERSION NOT ALLOWED TXN ALREADY BEEN CONVERTED TO EPP<BR/>VPL5SE259E : EPP CONVERSION NOT ALLOWED ACCT ALREADY CYLD SINCE TXN POSTNG DT<BR/>VPL5SE260S : TRANSACTION PREVIOUSLY CONVERTED TO EPP<BR/>VPL5SE261S : TRANSACTION NOT ELIGIBLE FOR EPP PASSED PAYMENT DUE DATE<BR/>VPL5SE262S : EPP CONVERSION NOT ALLOWED DURING AFTER-HOURS<BR/>VPL5SE263S : TRANSACTION NOT ELIGIBLE FOR EPP PASSED GRACE DAY EXPIRY<BR/>VPL5SE264S : INVALID TAX TABL
*/
type EppValidationV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *EppValidationV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/eppValidation][%d] eppValidationV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *EppValidationV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EppValidationV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package security_admin_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// InvalidateTokenV1Reader is a Reader for the InvalidateTokenV1 structure.
type InvalidateTokenV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InvalidateTokenV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInvalidateTokenV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInvalidateTokenV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInvalidateTokenV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInvalidateTokenV1OK creates a InvalidateTokenV1OK with default headers values
func NewInvalidateTokenV1OK() *InvalidateTokenV1OK {
	return &InvalidateTokenV1OK{}
}

/*InvalidateTokenV1OK handles this case with default header values.

Success
*/
type InvalidateTokenV1OK struct {
	Payload *models.InvalidateSuccessResponse
}

func (o *InvalidateTokenV1OK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/security/v1/token/invalidate][%d] invalidateTokenV1OK  %+v", 200, o.Payload)
}

func (o *InvalidateTokenV1OK) GetPayload() *models.InvalidateSuccessResponse {
	return o.Payload
}

func (o *InvalidateTokenV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InvalidateSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateTokenV1BadRequest creates a InvalidateTokenV1BadRequest with default headers values
func NewInvalidateTokenV1BadRequest() *InvalidateTokenV1BadRequest {
	return &InvalidateTokenV1BadRequest{}
}

/*InvalidateTokenV1BadRequest handles this case with default header values.

Bad Request
*/
type InvalidateTokenV1BadRequest struct {
	Payload *models.Error
}

func (o *InvalidateTokenV1BadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/security/v1/token/invalidate][%d] invalidateTokenV1BadRequest  %+v", 400, o.Payload)
}

func (o *InvalidateTokenV1BadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *InvalidateTokenV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvalidateTokenV1Unauthorized creates a InvalidateTokenV1Unauthorized with default headers values
func NewInvalidateTokenV1Unauthorized() *InvalidateTokenV1Unauthorized {
	return &InvalidateTokenV1Unauthorized{}
}

/*InvalidateTokenV1Unauthorized handles this case with default header values.

Unauthorized
*/
type InvalidateTokenV1Unauthorized struct {
	Payload *models.Error
}

func (o *InvalidateTokenV1Unauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/security/v1/token/invalidate][%d] invalidateTokenV1Unauthorized  %+v", 401, o.Payload)
}

func (o *InvalidateTokenV1Unauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *InvalidateTokenV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

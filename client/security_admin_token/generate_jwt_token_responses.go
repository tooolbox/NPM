// Code generated by go-swagger; DO NOT EDIT.

package security_admin_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// GenerateJwtTokenReader is a Reader for the GenerateJwtToken structure.
type GenerateJwtTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GenerateJwtTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGenerateJwtTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGenerateJwtTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGenerateJwtTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGenerateJwtTokenOK creates a GenerateJwtTokenOK with default headers values
func NewGenerateJwtTokenOK() *GenerateJwtTokenOK {
	return &GenerateJwtTokenOK{}
}

/*GenerateJwtTokenOK handles this case with default header values.

Success
*/
type GenerateJwtTokenOK struct {
	Payload *models.AccessTokenResponse
}

func (o *GenerateJwtTokenOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/security/v1/token/jwt/generate][%d] generateJwtTokenOK  %+v", 200, o.Payload)
}

func (o *GenerateJwtTokenOK) GetPayload() *models.AccessTokenResponse {
	return o.Payload
}

func (o *GenerateJwtTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessTokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateJwtTokenBadRequest creates a GenerateJwtTokenBadRequest with default headers values
func NewGenerateJwtTokenBadRequest() *GenerateJwtTokenBadRequest {
	return &GenerateJwtTokenBadRequest{}
}

/*GenerateJwtTokenBadRequest handles this case with default header values.

Bad Request
*/
type GenerateJwtTokenBadRequest struct {
	Payload *models.Error
}

func (o *GenerateJwtTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/security/v1/token/jwt/generate][%d] generateJwtTokenBadRequest  %+v", 400, o.Payload)
}

func (o *GenerateJwtTokenBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GenerateJwtTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateJwtTokenUnauthorized creates a GenerateJwtTokenUnauthorized with default headers values
func NewGenerateJwtTokenUnauthorized() *GenerateJwtTokenUnauthorized {
	return &GenerateJwtTokenUnauthorized{}
}

/*GenerateJwtTokenUnauthorized handles this case with default header values.

Unauthorized
*/
type GenerateJwtTokenUnauthorized struct {
	Payload *models.Error
}

func (o *GenerateJwtTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/security/v1/token/jwt/generate][%d] generateJwtTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *GenerateJwtTokenUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GenerateJwtTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

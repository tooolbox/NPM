// Code generated by go-swagger; DO NOT EDIT.

package security_admin_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGenerateJwtTokenParams creates a new GenerateJwtTokenParams object
// with the default values initialized.
func NewGenerateJwtTokenParams() *GenerateJwtTokenParams {
	var (
		contentTypeDefault         = string("application/x-www-form-urlencoded")
		clientAssertionTypeDefault = string("urn:ietf:params:oauth:client-assertion-type:jwt-bearer")
		grantTypeDefault           = string("client_credentials")
		scopeDefault               = string("emea_firstvision")
	)
	return &GenerateJwtTokenParams{
		ContentType:         contentTypeDefault,
		ClientAssertionType: clientAssertionTypeDefault,
		GrantType:           grantTypeDefault,
		Scope:               scopeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateJwtTokenParamsWithTimeout creates a new GenerateJwtTokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGenerateJwtTokenParamsWithTimeout(timeout time.Duration) *GenerateJwtTokenParams {
	var (
		contentTypeDefault         = string("application/x-www-form-urlencoded")
		clientAssertionTypeDefault = string("urn:ietf:params:oauth:client-assertion-type:jwt-bearer")
		grantTypeDefault           = string("client_credentials")
		scopeDefault               = string("emea_firstvision")
	)
	return &GenerateJwtTokenParams{
		ContentType:         contentTypeDefault,
		ClientAssertionType: clientAssertionTypeDefault,
		GrantType:           grantTypeDefault,
		Scope:               scopeDefault,

		timeout: timeout,
	}
}

// NewGenerateJwtTokenParamsWithContext creates a new GenerateJwtTokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewGenerateJwtTokenParamsWithContext(ctx context.Context) *GenerateJwtTokenParams {
	var (
		contentTypeDefault         = string("application/x-www-form-urlencoded")
		clientAssertionTypeDefault = string("urn:ietf:params:oauth:client-assertion-type:jwt-bearer")
		grantTypeDefault           = string("client_credentials")
		scopeDefault               = string("emea_firstvision")
	)
	return &GenerateJwtTokenParams{
		ContentType:         contentTypeDefault,
		ClientAssertionType: clientAssertionTypeDefault,
		GrantType:           grantTypeDefault,
		Scope:               scopeDefault,

		Context: ctx,
	}
}

// NewGenerateJwtTokenParamsWithHTTPClient creates a new GenerateJwtTokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGenerateJwtTokenParamsWithHTTPClient(client *http.Client) *GenerateJwtTokenParams {
	var (
		contentTypeDefault         = string("application/x-www-form-urlencoded")
		clientAssertionTypeDefault = string("urn:ietf:params:oauth:client-assertion-type:jwt-bearer")
		grantTypeDefault           = string("client_credentials")
		scopeDefault               = string("emea_firstvision")
	)
	return &GenerateJwtTokenParams{
		ContentType:         contentTypeDefault,
		ClientAssertionType: clientAssertionTypeDefault,
		GrantType:           grantTypeDefault,
		Scope:               scopeDefault,
		HTTPClient:          client,
	}
}

/*GenerateJwtTokenParams contains all the parameters to send to the API endpoint
for the generate jwt token operation typically these are written to a http.Request
*/
type GenerateJwtTokenParams struct {

	/*ContentType
	  Should be application/x-www-form-urlencoded

	*/
	ContentType string
	/*ClientAssertion
	  JWT Token generated by client that asserts identity

	*/
	ClientAssertion string
	/*ClientAssertionType
	  Should be 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'

	*/
	ClientAssertionType string
	/*ClientID
	  Client_id (Consumer Key) of the client

	*/
	ClientID string
	/*GrantType
	  Send 'client_credentials'

	*/
	GrantType string
	/*Scope
	  Only 'emea_firstvision' is supported for now

	*/
	Scope string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the generate jwt token params
func (o *GenerateJwtTokenParams) WithTimeout(timeout time.Duration) *GenerateJwtTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate jwt token params
func (o *GenerateJwtTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate jwt token params
func (o *GenerateJwtTokenParams) WithContext(ctx context.Context) *GenerateJwtTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate jwt token params
func (o *GenerateJwtTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate jwt token params
func (o *GenerateJwtTokenParams) WithHTTPClient(client *http.Client) *GenerateJwtTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate jwt token params
func (o *GenerateJwtTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the generate jwt token params
func (o *GenerateJwtTokenParams) WithContentType(contentType string) *GenerateJwtTokenParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the generate jwt token params
func (o *GenerateJwtTokenParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithClientAssertion adds the clientAssertion to the generate jwt token params
func (o *GenerateJwtTokenParams) WithClientAssertion(clientAssertion string) *GenerateJwtTokenParams {
	o.SetClientAssertion(clientAssertion)
	return o
}

// SetClientAssertion adds the clientAssertion to the generate jwt token params
func (o *GenerateJwtTokenParams) SetClientAssertion(clientAssertion string) {
	o.ClientAssertion = clientAssertion
}

// WithClientAssertionType adds the clientAssertionType to the generate jwt token params
func (o *GenerateJwtTokenParams) WithClientAssertionType(clientAssertionType string) *GenerateJwtTokenParams {
	o.SetClientAssertionType(clientAssertionType)
	return o
}

// SetClientAssertionType adds the clientAssertionType to the generate jwt token params
func (o *GenerateJwtTokenParams) SetClientAssertionType(clientAssertionType string) {
	o.ClientAssertionType = clientAssertionType
}

// WithClientID adds the clientID to the generate jwt token params
func (o *GenerateJwtTokenParams) WithClientID(clientID string) *GenerateJwtTokenParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the generate jwt token params
func (o *GenerateJwtTokenParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithGrantType adds the grantType to the generate jwt token params
func (o *GenerateJwtTokenParams) WithGrantType(grantType string) *GenerateJwtTokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the generate jwt token params
func (o *GenerateJwtTokenParams) SetGrantType(grantType string) {
	o.GrantType = grantType
}

// WithScope adds the scope to the generate jwt token params
func (o *GenerateJwtTokenParams) WithScope(scope string) *GenerateJwtTokenParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the generate jwt token params
func (o *GenerateJwtTokenParams) SetScope(scope string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateJwtTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	// form param client_assertion
	frClientAssertion := o.ClientAssertion
	fClientAssertion := frClientAssertion
	if fClientAssertion != "" {
		if err := r.SetFormParam("client_assertion", fClientAssertion); err != nil {
			return err
		}
	}

	// form param client_assertion_type
	frClientAssertionType := o.ClientAssertionType
	fClientAssertionType := frClientAssertionType
	if fClientAssertionType != "" {
		if err := r.SetFormParam("client_assertion_type", fClientAssertionType); err != nil {
			return err
		}
	}

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	// form param grant_type
	frGrantType := o.GrantType
	fGrantType := frGrantType
	if fGrantType != "" {
		if err := r.SetFormParam("grant_type", fGrantType); err != nil {
			return err
		}
	}

	// form param scope
	frScope := o.Scope
	fScope := frScope
	if fScope != "" {
		if err := r.SetFormParam("scope", fScope); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package security_admin_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewInvalidateTokenV1Params creates a new InvalidateTokenV1Params object
// with the default values initialized.
func NewInvalidateTokenV1Params() *InvalidateTokenV1Params {
	var (
		authorizationDefault = string("Bearer <token>")
		contentTypeDefault   = string("application/x-www-form-urlencoded")
	)
	return &InvalidateTokenV1Params{
		Authorization: authorizationDefault,
		ContentType:   contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewInvalidateTokenV1ParamsWithTimeout creates a new InvalidateTokenV1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewInvalidateTokenV1ParamsWithTimeout(timeout time.Duration) *InvalidateTokenV1Params {
	var (
		authorizationDefault = string("Bearer <token>")
		contentTypeDefault   = string("application/x-www-form-urlencoded")
	)
	return &InvalidateTokenV1Params{
		Authorization: authorizationDefault,
		ContentType:   contentTypeDefault,

		timeout: timeout,
	}
}

// NewInvalidateTokenV1ParamsWithContext creates a new InvalidateTokenV1Params object
// with the default values initialized, and the ability to set a context for a request
func NewInvalidateTokenV1ParamsWithContext(ctx context.Context) *InvalidateTokenV1Params {
	var (
		authorizationDefault = string("Bearer <token>")
		contentTypeDefault   = string("application/x-www-form-urlencoded")
	)
	return &InvalidateTokenV1Params{
		Authorization: authorizationDefault,
		ContentType:   contentTypeDefault,

		Context: ctx,
	}
}

// NewInvalidateTokenV1ParamsWithHTTPClient creates a new InvalidateTokenV1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInvalidateTokenV1ParamsWithHTTPClient(client *http.Client) *InvalidateTokenV1Params {
	var (
		authorizationDefault = string("Bearer <token>")
		contentTypeDefault   = string("application/x-www-form-urlencoded")
	)
	return &InvalidateTokenV1Params{
		Authorization: authorizationDefault,
		ContentType:   contentTypeDefault,
		HTTPClient:    client,
	}
}

/*InvalidateTokenV1Params contains all the parameters to send to the API endpoint
for the invalidate token v1 operation typically these are written to a http.Request
*/
type InvalidateTokenV1Params struct {

	/*Authorization
	  OAuth2.0 access token (Bearer token) that you get from security API

	*/
	Authorization string
	/*ContentType
	  Should be 'application/x-www-form-urlencoded'

	*/
	ContentType string
	/*Token
	  Access token to be revoked

	*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invalidate token v1 params
func (o *InvalidateTokenV1Params) WithTimeout(timeout time.Duration) *InvalidateTokenV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invalidate token v1 params
func (o *InvalidateTokenV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invalidate token v1 params
func (o *InvalidateTokenV1Params) WithContext(ctx context.Context) *InvalidateTokenV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invalidate token v1 params
func (o *InvalidateTokenV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invalidate token v1 params
func (o *InvalidateTokenV1Params) WithHTTPClient(client *http.Client) *InvalidateTokenV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invalidate token v1 params
func (o *InvalidateTokenV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the invalidate token v1 params
func (o *InvalidateTokenV1Params) WithAuthorization(authorization string) *InvalidateTokenV1Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the invalidate token v1 params
func (o *InvalidateTokenV1Params) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithContentType adds the contentType to the invalidate token v1 params
func (o *InvalidateTokenV1Params) WithContentType(contentType string) *InvalidateTokenV1Params {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the invalidate token v1 params
func (o *InvalidateTokenV1Params) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithToken adds the token to the invalidate token v1 params
func (o *InvalidateTokenV1Params) WithToken(token string) *InvalidateTokenV1Params {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the invalidate token v1 params
func (o *InvalidateTokenV1Params) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *InvalidateTokenV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// header param content-type
	if err := r.SetHeaderParam("content-type", o.ContentType); err != nil {
		return err
	}

	// form param token
	frToken := o.Token
	fToken := frToken
	if fToken != "" {
		if err := r.SetFormParam("token", fToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

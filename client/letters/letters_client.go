// Code generated by go-swagger; DO NOT EDIT.

package letters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new letters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for letters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EnterpriseletterRequestV1FvEmea(params *EnterpriseletterRequestV1FvEmeaParams) (*EnterpriseletterRequestV1FvEmeaOK, error)

	LetterRequestV1FvEmea(params *LetterRequestV1FvEmeaParams) (*LetterRequestV1FvEmeaOK, error)

	LettersHistoryV1FvEmea(params *LettersHistoryV1FvEmeaParams) (*LettersHistoryV1FvEmeaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EnterpriseletterRequestV1FvEmea enterpriseletters request

  This service allows the request of a letter configured in the system,  it can be configured  to be generated either immediately or to be produced in the next batch run.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) EnterpriseletterRequestV1FvEmea(params *EnterpriseletterRequestV1FvEmeaParams) (*EnterpriseletterRequestV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseletterRequestV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enterpriseletterRequest_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/enterpriseletterRequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseletterRequestV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseletterRequestV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enterpriseletterRequest_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LetterRequestV1FvEmea letters request

  The Letter Request Maintenance Service enables you to request a letter and/or print the letter in the next batch run similar to the functionality provided in FirstVision. This service also provides the ability to return the letter text to the requesting source in the service response.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) LetterRequestV1FvEmea(params *LetterRequestV1FvEmeaParams) (*LetterRequestV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLetterRequestV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "letterRequest_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/letterRequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LetterRequestV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LetterRequestV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for letterRequest_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LettersHistoryV1FvEmea letters history

  Letter history service<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) LettersHistoryV1FvEmea(params *LettersHistoryV1FvEmeaParams) (*LettersHistoryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLettersHistoryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lettersHistory_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/lettersHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LettersHistoryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LettersHistoryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lettersHistory_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package letters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// EnterpriseletterRequestV1FvEmeaReader is a Reader for the EnterpriseletterRequestV1FvEmea structure.
type EnterpriseletterRequestV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnterpriseletterRequestV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnterpriseletterRequestV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnterpriseletterRequestV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnterpriseletterRequestV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnterpriseletterRequestV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnterpriseletterRequestV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEnterpriseletterRequestV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewEnterpriseletterRequestV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewEnterpriseletterRequestV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewEnterpriseletterRequestV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewEnterpriseletterRequestV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnterpriseletterRequestV1FvEmeaOK creates a EnterpriseletterRequestV1FvEmeaOK with default headers values
func NewEnterpriseletterRequestV1FvEmeaOK() *EnterpriseletterRequestV1FvEmeaOK {
	return &EnterpriseletterRequestV1FvEmeaOK{}
}

/*EnterpriseletterRequestV1FvEmeaOK handles this case with default header values.

successful operation
*/
type EnterpriseletterRequestV1FvEmeaOK struct {
	Payload *models.EnterpriseletterRequestResponse
}

func (o *EnterpriseletterRequestV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaOK) GetPayload() *models.EnterpriseletterRequestResponse {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnterpriseletterRequestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaBadRequest creates a EnterpriseletterRequestV1FvEmeaBadRequest with default headers values
func NewEnterpriseletterRequestV1FvEmeaBadRequest() *EnterpriseletterRequestV1FvEmeaBadRequest {
	return &EnterpriseletterRequestV1FvEmeaBadRequest{}
}

/*EnterpriseletterRequestV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type EnterpriseletterRequestV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *EnterpriseletterRequestV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaUnauthorized creates a EnterpriseletterRequestV1FvEmeaUnauthorized with default headers values
func NewEnterpriseletterRequestV1FvEmeaUnauthorized() *EnterpriseletterRequestV1FvEmeaUnauthorized {
	return &EnterpriseletterRequestV1FvEmeaUnauthorized{}
}

/*EnterpriseletterRequestV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type EnterpriseletterRequestV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *EnterpriseletterRequestV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaForbidden creates a EnterpriseletterRequestV1FvEmeaForbidden with default headers values
func NewEnterpriseletterRequestV1FvEmeaForbidden() *EnterpriseletterRequestV1FvEmeaForbidden {
	return &EnterpriseletterRequestV1FvEmeaForbidden{}
}

/*EnterpriseletterRequestV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type EnterpriseletterRequestV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *EnterpriseletterRequestV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaNotFound creates a EnterpriseletterRequestV1FvEmeaNotFound with default headers values
func NewEnterpriseletterRequestV1FvEmeaNotFound() *EnterpriseletterRequestV1FvEmeaNotFound {
	return &EnterpriseletterRequestV1FvEmeaNotFound{}
}

/*EnterpriseletterRequestV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type EnterpriseletterRequestV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *EnterpriseletterRequestV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaTooManyRequests creates a EnterpriseletterRequestV1FvEmeaTooManyRequests with default headers values
func NewEnterpriseletterRequestV1FvEmeaTooManyRequests() *EnterpriseletterRequestV1FvEmeaTooManyRequests {
	return &EnterpriseletterRequestV1FvEmeaTooManyRequests{}
}

/*EnterpriseletterRequestV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type EnterpriseletterRequestV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *EnterpriseletterRequestV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaStatus452 creates a EnterpriseletterRequestV1FvEmeaStatus452 with default headers values
func NewEnterpriseletterRequestV1FvEmeaStatus452() *EnterpriseletterRequestV1FvEmeaStatus452 {
	return &EnterpriseletterRequestV1FvEmeaStatus452{}
}

/*EnterpriseletterRequestV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type EnterpriseletterRequestV1FvEmeaStatus452 struct {
}

func (o *EnterpriseletterRequestV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaStatus452 ", 452)
}

func (o *EnterpriseletterRequestV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaStatus453 creates a EnterpriseletterRequestV1FvEmeaStatus453 with default headers values
func NewEnterpriseletterRequestV1FvEmeaStatus453() *EnterpriseletterRequestV1FvEmeaStatus453 {
	return &EnterpriseletterRequestV1FvEmeaStatus453{}
}

/*EnterpriseletterRequestV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type EnterpriseletterRequestV1FvEmeaStatus453 struct {
}

func (o *EnterpriseletterRequestV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaStatus453 ", 453)
}

func (o *EnterpriseletterRequestV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaStatus455 creates a EnterpriseletterRequestV1FvEmeaStatus455 with default headers values
func NewEnterpriseletterRequestV1FvEmeaStatus455() *EnterpriseletterRequestV1FvEmeaStatus455 {
	return &EnterpriseletterRequestV1FvEmeaStatus455{}
}

/*EnterpriseletterRequestV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type EnterpriseletterRequestV1FvEmeaStatus455 struct {
}

func (o *EnterpriseletterRequestV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaStatus455 ", 455)
}

func (o *EnterpriseletterRequestV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnterpriseletterRequestV1FvEmeaStatus465 creates a EnterpriseletterRequestV1FvEmeaStatus465 with default headers values
func NewEnterpriseletterRequestV1FvEmeaStatus465() *EnterpriseletterRequestV1FvEmeaStatus465 {
	return &EnterpriseletterRequestV1FvEmeaStatus465{}
}

/*EnterpriseletterRequestV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPLHSLR02S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPLHSLR03E : LETTER ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 001-998<BR/>VPLHSLR04E : LETTER CODE IS NOT PROVIDED<BR/>VPLHSLR05E : INVALID REQUEST TYPE VALID VALUES ARE 0 OR 1 OR 2<BR/>VPLHSLR06E : INVALID LETTER DESTINATION VALID VALUES ARE SPACE 1 2 3 4<BR/>VPLHSLR07E : PRINTER ID IS NOT ALLOWED WHEN REQ TYPE = 0 OR 1<BR/>VPLHSLR08E : PRINTER ID IS NOT PROVIDED<BR/>VPLHSLR09E : INVALID HOLD - VALID VALUES ARE SPACE H D C T S X 0 TO 9<BR/>VPLHSLR10E : INVALID CHG LTR FEE - VALID VALUES ARE SPACE OR 0<BR/>VPLHSLR11E : PLAN NO MUST BE NUMERIC AND VALID VALUES ARE 00000-99998<BR/>VPLHSLR12E : REC NO IS NOT PROVIDE WHEN PLAN NO > ZEROES<BR/>VPLHSLR13E : REC NO IS NOT NUMERIC<BR/>VPLHSLR14E : ONE AND ONLY ONE OF FOUR SELECT FIELDS MUST BE FILL WITH 'X'<BR/>VPLHSLR15E : INVALID SELECT FIELDS - VALID VALUES ARE 'X' OR SPACE<BR/>VPLHSLR16E : INVALID FOREIGN USE IND - VALID VALUES ARE 0 OR 1<BR/>VPLHSLR17E : ACCT ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPLHSLR18E : ACCT ORG IS NOT PROVIDED<BR/>VPLHSLR19E : APPL ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPLHSLR20E : APPLICATION TYPE IS NOT PROVIDED<BR/>VPLHSLR21E : APPL TYPE NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPLHSLR22E : APPLICATION IS NOT PROVIDED<BR/>VPLHSLR23E : APPLICATION MUST BE NUMERIC<BR/>VPLHSLR24E : ASSOCIATION IS NOT PROVIDED<BR/>VPLHSLR25E : INVALID ASSOCIATION - VALID VALUES ARE A OR C OR G<BR/>VPLHSLR26E : MERCHANT ORG IS NOT PROVIDED<BR/>VPLHSLR27E : MERCH ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPLHSLR28E : STOREorMERCHANT IS NOT PROVIDED<BR/>VPLHSLR29E : INVALID STOREorMERCHANT - VALID VALUES ARE SPACE OR S OR M<BR/>VPLHSLR30E : ACCOUNTorCARD IS NOT PROVIDED<BR/>VPLHSLR31E : CASE NUMBER MUST BE NUMERIC<BR/>VPLHSLR32E : SECUREDorCOLLATERAL MUST BE NUMERIC AND VALID VALUES ARE 0-20<BR/>VPLHSLR33E : CORPORATE ORG IS NOT PROVIDED<BR/>VPLHSLR34E : CORP ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPLHSLR35E : CORPORATE ACCOUNT IS NOT PROVIDED<BR/>VPLHSLR36E : LEVEL IS NOT PROVIDED<BR/>VPLHSLR37E : LEVEL MUST BE NUMERIC<BR/>VPLHSLR38E : NODE IS NOT PROVIDED<BR/>VPLHSLR39E : NODE MUST BE NUMERIC<BR/>VPLHSLR40E : CARD SEQUENCE MUST BE NUMERIC<BR/>VPLHSLR41E : MERCHANTorSTORE IS NOT PROVIDED<BR/>VPLHSLR42E : MERCHANTorSTORE MUST BE NUMERIC<BR/>VPLHSLR43S : LETTER SYSTEM RECORD IS NOT FOUND<BR/>VPLHSLR44S : LETTER ORG RECORD IS NOT FOUND<BR/>VPLHSLR45S : LETTER MASTER REOCRD IS NOT FOUND<BR/>VPLHSLR46S : LETTER IS NOT ACTIVE<BR/>VPLHSLR47E : PRINTER ID IS NOT DEFINED IN LETTER ORG LEVEL<BR/>VPLHSLR48E : SORT CODE IS NOT DEFINED IN LETTER ORG OR SYSTEM LEVEL<BR/>VPLHSLR49E : HOLD MUST BE SPACE WHEN LETTER MASTER HOLD FILED IS NOT SPACE<BR/>VPLHSLR50E : PLAN NO IS NOT PROVIDES WHEN PLAN @CP* VARIABLES PRESENT<BR/>VPLHSLR51S : LETTER REQUESTOR RECORD IS NOT FOUND<BR/>VPLHSLR52S : LETTER REQUESTOR IS NOT HAVE AUTH TO PROCESSING THE LETTER<BR/>VPLHSLR53E : USER LETTER VARIABLE @LV001 IS NOT PROVIDED<BR/>VPLHSLR54E : USER LETTER VARIABLE @LV002 IS NOT PROVIDED<BR/>VPLHSLR55E : USER LETTER VARIABLE @LV003 IS NOT PROVIDED<BR/>VPLHSLR56E : USER LETTER VARIABLE @LV004 IS NOT PROVIDED<BR/>VPLHSLR57E : USER LETTER VARIABLE @LV005 IS NOT PROVIDED<BR/>VPLHSLR58E : USER LETTER VARIABLE @LV006 IS NOT PROVIDED<BR/>VPLHSLR59E : USER LETTER VARIABLE @LV007 IS NOT PROVIDED<BR/>VPLHSLR60E : USER LETTER VARIABLE @LV008 IS NOT PROVIDED<BR/>VPLHSLR61E : USER LETTER VARIABLE @LV009 IS NOT PROVIDED<BR/>VPLHSLR62E : USER LETTER VARIABLE @LV010 IS NOT PROVIDED<BR/>VPLHSLR63S : ACCOUNTS RECEIVABLE SYSTEM IS NOT ACTIVE FOR LETTER SYSTEM<BR/>VPLHSLR64S : ACCOUNTS SERVICES SYSTEM IS NOT ACTIVE FOR LETTER SYSTEM<BR/>VPLHSLR65S : COLLECTIONS IS NOT ACTIVE FOR LETTER SYSTEM<BR/>VPLHSLR66S : ACCOUNT ORGANIZATION COULD NOT BE DETERMINED<BR/>VPLHSLR67S : ACCOUNT ORGANIZATION COULD NOT BE DETERMINED<BR/>VPLHSLR68S : ACCOUNT ORGANIZATION COULD NOT BE DETERMINED<BR/>VPLHSLR69S : CREDIT MANAGEMENT SYSTEM IS NOT ACTIVE FOR LETTER SYSTEM<BR/>VPLHSLR70S : APPLICATION ORGANIZATION COULD NOT BE DETERMINED<BR/>VPLHSLR71S : MERCHANT SYSTEM IS NOT ACTIVE FOR LETTER SYSTEM<BR/>VPLHSLR72S : MERCHANT ORGANIZATION COULD NOT BE DETERMINED<BR/>VPLHSLR73E : HEIRARCHY COMPANY SYSTEM IS NOT ACTIVE FOR LETTER SYSTEM<BR/>VPLHSLR74S : CORPORATE ORGANIZATION COULD NOT BE DETERMINED<BR/>VPLHSLR75S : REFERENCE NUMBER REQUIRED<BR/>VPLHSLR76S : INVALID REFERENCE NUMBER<BR/>VPLHSLR77S : INVALID PLAN NUMBER<BR/>VPLHSLR78S : REFERENCE NUMBER NOT ALLOWED<BR/>VPLHSLR79S : MERCHANT VARIABLES INVALID-SELECTION CRITERIA<BR/>VPLHSLR80S : MERCHANT VARIABLES INVALID-SELECTION CRITERIA<BR/>VPLHSLRZ5S : COULD NOT OBTAIN STORAGE AREA FOR LETTER REQUEST RECORD<BR/>VPLHSLRZ6S : COULD NOT OBTAIN STORAGE AREA FOR FILE MAINTENANCE RECORD<BR/>VPLHSLRZ7S : ERROR LOADING APPLICATION FILE TABLE<BR/>VPLHSLRZ8S : APPLICATION MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLRZ9S : APPLICATION MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLR86S : APPLICATION RECORD NOT ON FILE<BR/>VPLHSLRZAS : APPLICATION SYSTEM FILE IS NOT AVAILABLE<BR/>VPLHSLRZBS : APPLICATION SYSTEM FILE IS NOT AVAILABLE<BR/>VPLHSLR89S : APPLICATION SYSTEM RECORD NOT ON FILE<BR/>VPLHSLRZCS : APPLICATION ORGANIZATION FILE IS NOT AVAILABLE<BR/>VPLHSLRZDS : APPLICATION ORGANIZATION FILE IS NOT AVAILABLE<BR/>VPLHSLR92S : APPLICATION ORGANIZATION RECORD NOT ON FILE<BR/>VPLHSLRZES : APPLICATION TYPE FILE IS NOT AVAILABLE<BR/>VPLHSLRZFS : APPLICATION TYPE FILE IS NOT AVAILABLE<BR/>VPLHSLR95S : APPLICATION TYPE RECORD NOT ON FILE<BR/>VPLHSLRZGS : ERROR LOADING APPLICATION FILE TABLE<BR/>VPLHSLRZHS : ACCOUNT MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLRZIS : ACCOUNT MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLR99S : ACCOUNT RECORD NOT ON FILE<BR/>VPLHSLRA0S : ACCOUNT HAS HAD MAIL RETURNED<BR/>VPLHSLRA1S : SUPPRESSED - ACCOUNT RECORD<BR/>VPLHSLRA2S : SUPPRESSED - BLOCK CODE<BR/>VPLHSLRA3S : SUPPRESSED - CUSTOMER LETTER<BR/>VPLHSLRA4S : INVALID STAT CODE - LTR MST<BR/>VPLHSLRA5S : NAMEorADDRESS FILE IS NOT AVAILABLE<BR/>VPLHSLRA6S : NAMEorADDRESS FILE IS NOT AVAILABLE<BR/>VPLHSLRA7S : NAMEorADDRESS RECORD NOT ON FILE<BR/>VPLHSLRA8S : ORGANIZATION FILE IS NOT AVAILABLE<BR/>VPLHSLRA9S : ORGANIZATION FILE IS NOT AVAILABLE<BR/>VPLHSLRB0S : ORGANIZATION RECORD NOT ON FILE<BR/>VPLHSLRB1S : LOGO RECORD NOT ON FILE<BR/>VPLHSLRB2S : ERROR LOADING COLLECTIONS FILE TABLE<BR/>VPLHSLRB3S : COLLECTIONS MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLRB4S : COLLECTIONS MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLRB5S : COLLECTIONS ACCOUNT RECORD NOT ON FILE<BR/>VPLHSLRB6S : ERROR LOADING ACCOUNT SERVICES FILE TABLE<BR/>VPLHSLRB7S : ACCOUNT SERVICES MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLRB8S : ACCOUNT SERVICES MASTER FILE IS NOT AVAILABLE<BR/>VPLHSLRB9S : ACCOUNT SERVICES ACCOUNT RECORD NOT ON FILE<BR/>VPLHSLRC0S : ERROR LOADING CORPORATE FILE TABLE<BR/>VPLHSLRC1S : CORPORATE MASTER FILES IS NOT AVAILABLE<BR/>VPLHSLRC2S : CORPORATE MASTER FILES IS NOT AVAILABLE<BR/>VPLHSLRC3S : CORPORATE ORGorCOMPorNODE OR PROD NOT ON FILE<BR/>VPLHSLRC4S : CORPORATE LETTER SUPPRESSION ACTIVE<BR/>VPLHSLRC5S : ERROR LOADING MERCHANT FILE TABLE<BR/>VPLHSLRC6S : MERCHANT ORGANIZATION FILE IS NOT AVAILABLE<BR/>VPLHSLRC7S : MERCHANT ORGANIZATION FILE IS NOT AVAILABLE<BR/>VPLHSLRC8S : MERCHANT ORGANIZATION RECORD NOT ON FILE<BR/>VPLHSLRC9S : MERCHANT FILE IS NOT AVAILABLE<BR/>VPLHSLRD0S : MERCHANT FILE IS NOT AVAILABLE<BR/>VPLHSLRD1S : MERCHANT RECORD NOT ON FILE<BR/>VPLHSLRD2S : STORE FILE IS NOT AVAILABLE<BR/>VPLHSLRD3S : STORE FILE IS NOT AVAILABLE<BR/>VPLHSLRD4S : STORE RECORD NOT ON FILE<BR/>VPLHSLRD5S : LETTER LINE OVERFLOW - CREDIT MANAGEMENT<BR/>VPLHSLRD6S : ERROR IN LETTER EXPANSION - CREDIT MANAGEMENT<BR/>VPLHSLRD7S : LETTER LINE OVERFLOW - ACCOUNT<BR/>VPLHSLRD8S : ERROR IN LETTER EXPANSION - ACCOUNT<BR/>VPLHSLRD9S : LETTER LINE OVERFLOW - COLLECTIONS<BR/>VPLHSLRE0S : ERROR IN LETTER EXPANSION - COLLECTIONS<BR/>VPLHSLRE1S : LETTER LINE OVERFLOW - ACCOUNT SERVICE<BR/>VPLHSLRE2S : ERROR IN LETTER EXPANSION - ACCOUNT SERVICE<BR/>VPLHSLRE3S : LETTER LINE OVERFLOW - CORPORATE<BR/>VPLHSLRE4S : ERROR IN LETTER EXPANSION - CORPORATE<BR/>VPLHSLRE5S : LETTER LINE OVERFLOW - MERCHANT<BR/>VPLHSLRE6S : ERROR IN LETTER EXPANSION - MERCHANT<BR/>VPLHSLRE7S : LETTER LINE OVERFLOW - LETTERS - 1<BR/>VPLHSLRE8S : ERROR IN LETTER EXPANSION - LETTERS - 1<BR/>VPLHSLRE9S : LETTER LINE OVERFLOW - LETTERS - 2<BR/>VPLHSLRF0S : ERROR IN LETTER EXPANSION - LETTERS - 2<BR/>VPLHSLRF1S : OTHER DATEorAMOUNT CONVERSION ERROR - LETTERS - 2<BR/>VPLHSLRF2S : ERROR DURING CASE TRANSLATION<BR/>VPLHSLRF3E : ZERO VALUE IN ACCOUNT CREDIT LIMIT<BR/>VPLHSLRF4E : ZERO VALUE IN ACCOUNT TOTAL AMOUNT DUE<BR/>VPLHSLRF5E : ZERO VALUE IN ACCOUNT CURRENT AMOUNT DUE<BR/>VPLHSLRF6E : ZERO VALUE IN ACCOUNT CURRENT BALANCE<BR/>VPLHSLRF7E : ZERO VALUE IN ACCOUNT AVAILABLE CREDIT<BR/>VPLHSLRF8E : ZERO VALUE IN ACCOUNT TOTAL PAST DUE<BR/>VPLHSLRF9E : ZERO VALUE IN PLAN TOTAL AMOUNT DUE<BR/>VPLHSLRG0E : ZERO VALUE IN PLAN CURRENT BALANCE<BR/>VPLHSLRZ1S : SERVICE COULD NOT OBTAIN STORAGE AREA FOR OUTPUT<BR/>VPLHSLRZ2S : SERVICE INPUT TO LETTER REQUEST SERVICE IS AN INCORRECT LENGTH<BR/>VPLHSLRZ3S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUN
*/
type EnterpriseletterRequestV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *EnterpriseletterRequestV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/enterpriseletterRequest][%d] enterpriseletterRequestV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *EnterpriseletterRequestV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EnterpriseletterRequestV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// ProcessPaymentV1FvEmeaReader is a Reader for the ProcessPaymentV1FvEmea structure.
type ProcessPaymentV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProcessPaymentV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProcessPaymentV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewProcessPaymentV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProcessPaymentV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewProcessPaymentV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewProcessPaymentV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewProcessPaymentV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 467:
		result := NewProcessPaymentV1FvEmeaStatus467()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProcessPaymentV1FvEmeaOK creates a ProcessPaymentV1FvEmeaOK with default headers values
func NewProcessPaymentV1FvEmeaOK() *ProcessPaymentV1FvEmeaOK {
	return &ProcessPaymentV1FvEmeaOK{}
}

/*ProcessPaymentV1FvEmeaOK handles this case with default header values.

sucessful operation
*/
type ProcessPaymentV1FvEmeaOK struct {
	Payload *models.ProcessPaymentResponse
}

func (o *ProcessPaymentV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *ProcessPaymentV1FvEmeaOK) GetPayload() *models.ProcessPaymentResponse {
	return o.Payload
}

func (o *ProcessPaymentV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProcessPaymentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessPaymentV1FvEmeaUnauthorized creates a ProcessPaymentV1FvEmeaUnauthorized with default headers values
func NewProcessPaymentV1FvEmeaUnauthorized() *ProcessPaymentV1FvEmeaUnauthorized {
	return &ProcessPaymentV1FvEmeaUnauthorized{}
}

/*ProcessPaymentV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized
*/
type ProcessPaymentV1FvEmeaUnauthorized struct {
	Payload *models.Error
}

func (o *ProcessPaymentV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *ProcessPaymentV1FvEmeaUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ProcessPaymentV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessPaymentV1FvEmeaForbidden creates a ProcessPaymentV1FvEmeaForbidden with default headers values
func NewProcessPaymentV1FvEmeaForbidden() *ProcessPaymentV1FvEmeaForbidden {
	return &ProcessPaymentV1FvEmeaForbidden{}
}

/*ProcessPaymentV1FvEmeaForbidden handles this case with default header values.

Forbidden
*/
type ProcessPaymentV1FvEmeaForbidden struct {
	Payload *models.Error
}

func (o *ProcessPaymentV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *ProcessPaymentV1FvEmeaForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ProcessPaymentV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessPaymentV1FvEmeaStatus452 creates a ProcessPaymentV1FvEmeaStatus452 with default headers values
func NewProcessPaymentV1FvEmeaStatus452() *ProcessPaymentV1FvEmeaStatus452 {
	return &ProcessPaymentV1FvEmeaStatus452{}
}

/*ProcessPaymentV1FvEmeaStatus452 handles this case with default header values.

System Exception
*/
type ProcessPaymentV1FvEmeaStatus452 struct {
	Payload *models.Error
}

func (o *ProcessPaymentV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaStatus452  %+v", 452, o.Payload)
}

func (o *ProcessPaymentV1FvEmeaStatus452) GetPayload() *models.Error {
	return o.Payload
}

func (o *ProcessPaymentV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessPaymentV1FvEmeaStatus453 creates a ProcessPaymentV1FvEmeaStatus453 with default headers values
func NewProcessPaymentV1FvEmeaStatus453() *ProcessPaymentV1FvEmeaStatus453 {
	return &ProcessPaymentV1FvEmeaStatus453{}
}

/*ProcessPaymentV1FvEmeaStatus453 handles this case with default header values.

Validation Exception.
*/
type ProcessPaymentV1FvEmeaStatus453 struct {
	Payload *models.Error
}

func (o *ProcessPaymentV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaStatus453  %+v", 453, o.Payload)
}

func (o *ProcessPaymentV1FvEmeaStatus453) GetPayload() *models.Error {
	return o.Payload
}

func (o *ProcessPaymentV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessPaymentV1FvEmeaStatus455 creates a ProcessPaymentV1FvEmeaStatus455 with default headers values
func NewProcessPaymentV1FvEmeaStatus455() *ProcessPaymentV1FvEmeaStatus455 {
	return &ProcessPaymentV1FvEmeaStatus455{}
}

/*ProcessPaymentV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type ProcessPaymentV1FvEmeaStatus455 struct {
}

func (o *ProcessPaymentV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaStatus455 ", 455)
}

func (o *ProcessPaymentV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessPaymentV1FvEmeaStatus467 creates a ProcessPaymentV1FvEmeaStatus467 with default headers values
func NewProcessPaymentV1FvEmeaStatus467() *ProcessPaymentV1FvEmeaStatus467 {
	return &ProcessPaymentV1FvEmeaStatus467{}
}

/*ProcessPaymentV1FvEmeaStatus467 handles this case with default header values.

List of possible error codes that could appear within the field result code: <BR/><BR/>  D003-Issuer not on the Issuer table<BR/> D004-Invalid Product<BR/> D005-Invalid Department<BR/> D006-Invalid Beneficiary number<BR/> D007-Invalid Amount<BR/> D008-Maximum Amount Exceeded<BR/> D009-Below Minimum Amount<BR/> D010-Invalid Paying Card Number<BR/> D011-Not Credit/Debit card - Issuer<BR/> D012-Blocked Prefix<BR/> D013-Invalid Currency Code<BR/> D014-Invalid Country<BR/> D015-AVS Failed<BR/> D016-Maximum Daily Limit Reached<BR/> D017-Maximum AVS Attempts Reached<BR/> D018-Rejected Authorisation<BR/> D019-Card Expired<BR/> D020-Total Maximum Limit Reached<BR/> D021-Invalid Bank Sort Code<BR/> D022-Invalid Security Code<BR/> D024-Invalid Refund<BR/> D025-Already Refunded<BR/> D026-Maximum Failed Transactions Reached<BR/> D027-Maximum Monthly Transactions Reached<BR/> D028-Maximum Monthly Paying Cards Reached<BR/> D029-No Issue Number Required<BR/> D031-Invalid Department Currency<BR/> D032-Invalid Issuer Currency<BR/> D033-Not Credit/Debit Card â€“ Department<BR/> D034-Cards are the Same<BR/> D037-Invalid Source Of Payment<BR/> D038-[3DS only] Blank PARes or Transaction ID Contact FirstData<BR/> D039-[3DS only] 3ds Phase 2 Error<BR/> D040-[3ds only] 3DS authentication failure<BR/> D041-Transaction Id not numeric<BR/> D042-Sub Product Name not Specified or not Recognised<BR/> D043-Tokenisation not allowed<BR/> D044-Invalid Token<BR/> D045-Invalid card/token<BR/> D046-No token type requested<BR/> D047-Token card number invalid<BR/> D048-Token issuer not required<BR/> D049-Only 1 token type allowed<BR/> D050-Invalid issuer for token<BR/> D051-Invalid Payment Card Type<BR/> D052-Invalid beneficiary account id<BR/> D053-Invalid beneficiary date of birth<BR/>  D054-Invalid beneficiary post code<BR/> D055-Invalid beneficiary surname<BR/> D056-3DS Duplicate transaction<BR/> D057-3DS initial authentication failure<BR/> D058-Paying Card Country blocked<BR/> D059-Recent Address Change<BR/> D060-Details on vision do not meet the requirements for CPA set up<BR/> D061-Account balance lower than CPA Amount<BR/> D062-Invalid CPA Start Date (Start date more than 1 month after current day)<BR/> D063-Invalid CPA Frequency<BR/> D064-Invalid CPA Start Date (Start date is in the past)<BR/> D065-Maximum CPA Limit reached<BR/> D066-Invalid Maximum number of months for CPA<BR/> D067-Invalid CPA with this frequency<BR/> D068-Invalid Number of Payments<BR/> D069-Future Payment Not enabled for the issuer.<BR/> D070-Future Payment date must be in the future.<BR/> D071-Cannot set future payment date beyond configured parameter.<BR/> D072-Invalid Start date, it should be last day of the month.<BR/> S001-Unspecified System Error<BR/> S002-CyberSource System time out<BR/> S003-CyberSource System unavailable<BR/> S004-DCP Database error<BR/> S005-3DS system error
*/
type ProcessPaymentV1FvEmeaStatus467 struct {
	Payload *models.Error
}

func (o *ProcessPaymentV1FvEmeaStatus467) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/processPayment][%d] processPaymentV1FvEmeaStatus467  %+v", 467, o.Payload)
}

func (o *ProcessPaymentV1FvEmeaStatus467) GetPayload() *models.Error {
	return o.Payload
}

func (o *ProcessPaymentV1FvEmeaStatus467) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

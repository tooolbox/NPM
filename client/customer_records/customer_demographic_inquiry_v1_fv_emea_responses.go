// Code generated by go-swagger; DO NOT EDIT.

package customer_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CustomerDemographicInquiryV1FvEmeaReader is a Reader for the CustomerDemographicInquiryV1FvEmea structure.
type CustomerDemographicInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerDemographicInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerDemographicInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCustomerDemographicInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCustomerDemographicInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCustomerDemographicInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCustomerDemographicInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCustomerDemographicInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCustomerDemographicInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCustomerDemographicInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCustomerDemographicInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCustomerDemographicInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCustomerDemographicInquiryV1FvEmeaOK creates a CustomerDemographicInquiryV1FvEmeaOK with default headers values
func NewCustomerDemographicInquiryV1FvEmeaOK() *CustomerDemographicInquiryV1FvEmeaOK {
	return &CustomerDemographicInquiryV1FvEmeaOK{}
}

/*CustomerDemographicInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CustomerDemographicInquiryV1FvEmeaOK struct {
	Payload *models.CustomerDemographicInquiryResponse
}

func (o *CustomerDemographicInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaOK) GetPayload() *models.CustomerDemographicInquiryResponse {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerDemographicInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaBadRequest creates a CustomerDemographicInquiryV1FvEmeaBadRequest with default headers values
func NewCustomerDemographicInquiryV1FvEmeaBadRequest() *CustomerDemographicInquiryV1FvEmeaBadRequest {
	return &CustomerDemographicInquiryV1FvEmeaBadRequest{}
}

/*CustomerDemographicInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CustomerDemographicInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDemographicInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaUnauthorized creates a CustomerDemographicInquiryV1FvEmeaUnauthorized with default headers values
func NewCustomerDemographicInquiryV1FvEmeaUnauthorized() *CustomerDemographicInquiryV1FvEmeaUnauthorized {
	return &CustomerDemographicInquiryV1FvEmeaUnauthorized{}
}

/*CustomerDemographicInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CustomerDemographicInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDemographicInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaForbidden creates a CustomerDemographicInquiryV1FvEmeaForbidden with default headers values
func NewCustomerDemographicInquiryV1FvEmeaForbidden() *CustomerDemographicInquiryV1FvEmeaForbidden {
	return &CustomerDemographicInquiryV1FvEmeaForbidden{}
}

/*CustomerDemographicInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CustomerDemographicInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDemographicInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaNotFound creates a CustomerDemographicInquiryV1FvEmeaNotFound with default headers values
func NewCustomerDemographicInquiryV1FvEmeaNotFound() *CustomerDemographicInquiryV1FvEmeaNotFound {
	return &CustomerDemographicInquiryV1FvEmeaNotFound{}
}

/*CustomerDemographicInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CustomerDemographicInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDemographicInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaTooManyRequests creates a CustomerDemographicInquiryV1FvEmeaTooManyRequests with default headers values
func NewCustomerDemographicInquiryV1FvEmeaTooManyRequests() *CustomerDemographicInquiryV1FvEmeaTooManyRequests {
	return &CustomerDemographicInquiryV1FvEmeaTooManyRequests{}
}

/*CustomerDemographicInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CustomerDemographicInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDemographicInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaStatus452 creates a CustomerDemographicInquiryV1FvEmeaStatus452 with default headers values
func NewCustomerDemographicInquiryV1FvEmeaStatus452() *CustomerDemographicInquiryV1FvEmeaStatus452 {
	return &CustomerDemographicInquiryV1FvEmeaStatus452{}
}

/*CustomerDemographicInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CustomerDemographicInquiryV1FvEmeaStatus452 struct {
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaStatus452 ", 452)
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaStatus453 creates a CustomerDemographicInquiryV1FvEmeaStatus453 with default headers values
func NewCustomerDemographicInquiryV1FvEmeaStatus453() *CustomerDemographicInquiryV1FvEmeaStatus453 {
	return &CustomerDemographicInquiryV1FvEmeaStatus453{}
}

/*CustomerDemographicInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CustomerDemographicInquiryV1FvEmeaStatus453 struct {
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaStatus453 ", 453)
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaStatus455 creates a CustomerDemographicInquiryV1FvEmeaStatus455 with default headers values
func NewCustomerDemographicInquiryV1FvEmeaStatus455() *CustomerDemographicInquiryV1FvEmeaStatus455 {
	return &CustomerDemographicInquiryV1FvEmeaStatus455{}
}

/*CustomerDemographicInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CustomerDemographicInquiryV1FvEmeaStatus455 struct {
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaStatus455 ", 455)
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerDemographicInquiryV1FvEmeaStatus465 creates a CustomerDemographicInquiryV1FvEmeaStatus465 with default headers values
func NewCustomerDemographicInquiryV1FvEmeaStatus465() *CustomerDemographicInquiryV1FvEmeaStatus465 {
	return &CustomerDemographicInquiryV1FvEmeaStatus465{}
}

/*CustomerDemographicInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SNDZ1S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SNDZ2S : SERVICE INPUT TO FS SERVICE IS AN INCORRECT LENGTH<BR/>VPL5SNDZ3S : FILE-TABLE USED BY THIS SERVICE IS MISSING<BR/>VPL5SND04S : CMS IS NO-PROCESSING STATE - RE-TRY REQUEST IN A FEW MINUTES<BR/>VPL5SND01E : INVALID ORG FORMATVALID VALUES ARE SPACES001 TO 998<BR/>VPL5SND02E : ACCOUNTorCARDorCUSTOMER NUMBER SHOULD BE PROVIDED AND BE NUMERIC<BR/>VPL5SND03E : INVALID DUAL FLAG VALID VALUES ARE SPACES0 OR 1<BR/>VPL5SND04E : NUMBER TYPE IS INVALID-VALID VALUES ARE SPACEor0or1<BR/>VPL5SNDZ4S : ORGANIZATION NOT DETERMINED<BR/>VPL5SND02S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SND03S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SND04S : CMS IS NO-PROCESSING STATE - RE-TRY REQUEST IN A FEW MINUTES<BR/>VPL5SND05S : ORG RECORD NOT FOUND<BR/>VPL5SND06S : DUAL ORG RECORD NOT FOUND<BR/>VPL5SNDZ5S : ACCOUNT FILE IS NOT AVAILABLE<BR/>VPL5SND07S : ACCOUNTorCARD CAN NOT BE FOUND IN AMBS FILE<BR/>VPL5SND08S : LOGO RECORD NOT FOUND<BR/>VPL5SND09S : CUSTOMER CAN NOT BE FOUND<BR/>VPL5SND10S : ACCOUNTorCARD CAN NOT BE FOUND IN AMNA FILE<BR/>VPL5SND15S : RECORD NOT FOUND ON THE MARKETING CHANNEL and PRODUCT FILE ZMMW<BR/>VPL5SND16S : RECORD NOT FOUND ON MARKETING FILE ZMMW FOR NUMBER TYPE
*/
type CustomerDemographicInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDemographicInquiry][%d] customerDemographicInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDemographicInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package customer_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CustomerAddV1FvEmeaReader is a Reader for the CustomerAddV1FvEmea structure.
type CustomerAddV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerAddV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerAddV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCustomerAddV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCustomerAddV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCustomerAddV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCustomerAddV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCustomerAddV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCustomerAddV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCustomerAddV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCustomerAddV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCustomerAddV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCustomerAddV1FvEmeaOK creates a CustomerAddV1FvEmeaOK with default headers values
func NewCustomerAddV1FvEmeaOK() *CustomerAddV1FvEmeaOK {
	return &CustomerAddV1FvEmeaOK{}
}

/*CustomerAddV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CustomerAddV1FvEmeaOK struct {
	Payload *models.CustomerAddResponse
}

func (o *CustomerAddV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CustomerAddV1FvEmeaOK) GetPayload() *models.CustomerAddResponse {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerAddResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerAddV1FvEmeaBadRequest creates a CustomerAddV1FvEmeaBadRequest with default headers values
func NewCustomerAddV1FvEmeaBadRequest() *CustomerAddV1FvEmeaBadRequest {
	return &CustomerAddV1FvEmeaBadRequest{}
}

/*CustomerAddV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CustomerAddV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerAddV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CustomerAddV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerAddV1FvEmeaUnauthorized creates a CustomerAddV1FvEmeaUnauthorized with default headers values
func NewCustomerAddV1FvEmeaUnauthorized() *CustomerAddV1FvEmeaUnauthorized {
	return &CustomerAddV1FvEmeaUnauthorized{}
}

/*CustomerAddV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CustomerAddV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerAddV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CustomerAddV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerAddV1FvEmeaForbidden creates a CustomerAddV1FvEmeaForbidden with default headers values
func NewCustomerAddV1FvEmeaForbidden() *CustomerAddV1FvEmeaForbidden {
	return &CustomerAddV1FvEmeaForbidden{}
}

/*CustomerAddV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CustomerAddV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerAddV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CustomerAddV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerAddV1FvEmeaNotFound creates a CustomerAddV1FvEmeaNotFound with default headers values
func NewCustomerAddV1FvEmeaNotFound() *CustomerAddV1FvEmeaNotFound {
	return &CustomerAddV1FvEmeaNotFound{}
}

/*CustomerAddV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CustomerAddV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerAddV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CustomerAddV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerAddV1FvEmeaTooManyRequests creates a CustomerAddV1FvEmeaTooManyRequests with default headers values
func NewCustomerAddV1FvEmeaTooManyRequests() *CustomerAddV1FvEmeaTooManyRequests {
	return &CustomerAddV1FvEmeaTooManyRequests{}
}

/*CustomerAddV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CustomerAddV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerAddV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CustomerAddV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerAddV1FvEmeaStatus452 creates a CustomerAddV1FvEmeaStatus452 with default headers values
func NewCustomerAddV1FvEmeaStatus452() *CustomerAddV1FvEmeaStatus452 {
	return &CustomerAddV1FvEmeaStatus452{}
}

/*CustomerAddV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CustomerAddV1FvEmeaStatus452 struct {
}

func (o *CustomerAddV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaStatus452 ", 452)
}

func (o *CustomerAddV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerAddV1FvEmeaStatus453 creates a CustomerAddV1FvEmeaStatus453 with default headers values
func NewCustomerAddV1FvEmeaStatus453() *CustomerAddV1FvEmeaStatus453 {
	return &CustomerAddV1FvEmeaStatus453{}
}

/*CustomerAddV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CustomerAddV1FvEmeaStatus453 struct {
}

func (o *CustomerAddV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaStatus453 ", 453)
}

func (o *CustomerAddV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerAddV1FvEmeaStatus455 creates a CustomerAddV1FvEmeaStatus455 with default headers values
func NewCustomerAddV1FvEmeaStatus455() *CustomerAddV1FvEmeaStatus455 {
	return &CustomerAddV1FvEmeaStatus455{}
}

/*CustomerAddV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CustomerAddV1FvEmeaStatus455 struct {
}

func (o *CustomerAddV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaStatus455 ", 455)
}

func (o *CustomerAddV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerAddV1FvEmeaStatus465 creates a CustomerAddV1FvEmeaStatus465 with default headers values
func NewCustomerAddV1FvEmeaStatus465() *CustomerAddV1FvEmeaStatus465 {
	return &CustomerAddV1FvEmeaStatus465{}
}

/*CustomerAddV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SNA02S : GETMAIN FAILURE ON NorA SERVICE INPUT AREA<BR/>VPL5SNA03S : NorA SERVICE INPUT AREA IS NOT OF CORRECT SIZE<BR/>VPL5SNA05S : THE FILE TABLE USED BY THIS SERVICE IS MISSING<BR/>VPL5SNA06S : INVALID FOREIGN USE INDICATOR - MUST BE 0 OR 1 ONLY<BR/>VPL5SNA01E : CUSTOMER FORMAT SHOULD BE NUMERIC VALID VALUES ARE 0 OR 1<BR/>VPL5SNA07S : CONFLICTING ORG AND ACCOUNT DATA WAS PASSED TO THE SERVICE<BR/>VPL5SNA08S : CONFLICTING ORG ACCOUNT AND CUSTOMER DATA PASSED TO THE SERVICE<BR/>VPL5SNA09S : NO ORG ACCOUNT OR CUSTOMER DATA WAS PASSED TO THE SERVICE<BR/>VPL5SNA10S : DUAL NOT ALLOWED FOR THIS ORG<BR/>VPL5SNA11S : THE NUMBER GENERATION SERVICE FAILED<BR/>VPL5SNA12S : LOCAL CUSTOMER NUMBER ALREADY EXISTS<BR/>VPL5SNA13S : FOREIGN CUSTOMER NUMBER EXISTS<BR/>VPL5SNA14S : ACCOUNTorEMBOSSER ORG NOT FOUND<BR/>VPL5SNA15S : FOREIGN ORG NUMBER NOT FOUND<BR/>VPL5SNA16S : CUSTOMER ORG NOT FOUND<BR/>VPL5SNA17S : CUSTOMER ORG NOT FOUND<BR/>VPL5SNA18S : CUSTOMER NUMBER PROVIDED NOT VALID FOR CUSTOMER ORG<BR/>VPL5SNA19S : ORG NUMBER MUST BE NUMERIC AND VALID VALUES ARE 001-998<BR/>VPL5SNA20S : CUSTOMER ORG NOT FOUND<BR/>VPL5SNA21S : FOREIGN ORG NUMBER NOT FOUND<BR/>VPL5SNA22S : CUSTOMER ORG NOT FOUND<BR/>VPL5SNA23S : CUSTOMER NUMBER PROVIDED NOT VALID FOR CUSTOMER ORG<BR/>VPL5SNA24S : LOCAL CUSTOMER NUMBER ALREADY EXISTS<BR/>VPL5SNA25S : FOREIGN CUSTOMER NUMBER EXISTS<BR/>VPL5SNA26S : CUSTOMER NUMBER ALREADY EXISTS ON RELATIONSHIP FILE<BR/>VPL5SNA27S : CUSTOMER NUMBER ALREADY EXISTS ON DUAL RELATIONSHIP FILE<BR/>VPL5SNA04S : OWNERorCO-OWNER INDICATOR MUST BE 1 OR 2<BR/>VPL5SNA28S : VIP STATUS INVALID - VALUES 0 OR 1 ONLY<BR/>VPL5SNA29S : SIC CODE MUST BE NUMERIC<BR/>VPL5SNA30S : TAX IDENTIFICATION FLAG INVALID - 0 1 OR 2 ONLY<BR/>VPL5SNA31S : TAX-ID NBR POSITIONS 1-9 MUST BE NUMERIC WHEN TAX-ID FLAG IS 0<BR/>VPL5SNAAUS : HOME PHONE NUMBER - NON NUMERIC IS NOT VALID<BR/>VPL5SNABHS : WORK PHONE NUMBER REQUIRED IF WORK PHONE FLAG IS 1 OR 2<BR/>VPL5SNABGS : PHONE FLAG INVALID - 0 1 OR 2 ONLY<BR/>VPL5SNAAXS : WORK PHONE NUMBER MUST BE NUMERIC<BR/>VPL5SNAAVS : FAX PHONE NUMBER MUST BE NUMERIC<BR/>VPL5SNAAWS : MOBILE PHONE NUMBER MUST BE NUMERIC<BR/>VPL5SNA33S : COUNTRY CODE INVALID<BR/>VPL5SNA34S : POSTAL CODE FORMAT INVALID<BR/>VPL5SNA35S : MARITAL STATUS INVALID - MUST BE 0 THROUGH 4 ONLY<BR/>VPL5SNA36S : RESIDENCE FLAG INVALID - 0 1 2 OR 3 ONLY<BR/>VPL5SNA57S : LANG CODE INVALID.VALID VALUES ARE ALPHA-3 CODES FROM SS40WS<BR/>VPL5SNA37S : CARRIER ROUTE INVALID FORMAT - LAST 2 CHARACTERS MUST BE NUMERIC<BR/>VPL5SNA38S : DATE-OF-BIRTH CANNOT BE A FUTURE DATE<BR/>VPL5SNA39S : DATE-OF-BIRTH IS INVALID<BR/>VPL5SNA41S : _1099C DATE FILED IS INVALID<BR/>VPL5SNA42S : NUMBER OF DEPENDENTS NOT NUMERIC<BR/>VPL5SNA43S : STATEMENT MESSAGE INDICATOR NOT NUMERIC<BR/>VPL5SNA44S : USER-10 DATE IS INVALID<BR/>VPL5SNA45S : USER-11 DATE IS INVALID<BR/>VPL5SNA46S : NAME TYPE INDICATOR 1 INVALID - 0 1 OR 3 ONLY<BR/>VPL5SNA47S : NAME TYPE INDICATOR 2 INVALID - 0 1 OR 3 ONLY<BR/>VPL5SNA48S : NAME TYPE INDICATOR 3 INVALID - 0 1 OR 3 ONLY<BR/>VPL5SNA49S : CONTACT INDICATOR MUST BE NUMERIC<BR/>VPL5SNA50S : DUAL ORG NUMBER NOT FOUND<BR/>VPL5SNA51S : DUAL INDICATOR - CHECK-DIGIT CUST NUMBER REQUIRED FOR FOREIGN ORG<BR/>VPL5SNA56S : CUSTOMER NUMBER CHECK-DIGIT IS INVALID<BR/>VPL5SNA52S : ORG COULD NOT BE DERIVED FROM EITHER CUST OR ACCT NBR PROVIDED<BR/>VPL5SNA53S : ORG NUMBER NOT FOUND<BR/>VPL5SNA54S : THE FILE TABLE USED BY THIS SERVICE IS MISSING<BR/>VPL5SNA55S : UNABLE TO PROCESS YOUR REQUEST - TRY AGAIN IN A FEW MINUTES<BR/>VPL5SNA64S : EMPLOYEE STATUS IS NOT NUMERIC<BR/>VPL5SNA65S : SPCL ADDRESS INDICATOR IS NOT NUMERI
*/
type CustomerAddV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerAddV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerAdd][%d] customerAddV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CustomerAddV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerAddV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

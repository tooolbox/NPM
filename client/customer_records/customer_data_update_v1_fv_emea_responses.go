// Code generated by go-swagger; DO NOT EDIT.

package customer_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CustomerDataUpdateV1FvEmeaReader is a Reader for the CustomerDataUpdateV1FvEmea structure.
type CustomerDataUpdateV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerDataUpdateV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerDataUpdateV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCustomerDataUpdateV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCustomerDataUpdateV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCustomerDataUpdateV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCustomerDataUpdateV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCustomerDataUpdateV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCustomerDataUpdateV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCustomerDataUpdateV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCustomerDataUpdateV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCustomerDataUpdateV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCustomerDataUpdateV1FvEmeaOK creates a CustomerDataUpdateV1FvEmeaOK with default headers values
func NewCustomerDataUpdateV1FvEmeaOK() *CustomerDataUpdateV1FvEmeaOK {
	return &CustomerDataUpdateV1FvEmeaOK{}
}

/*CustomerDataUpdateV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CustomerDataUpdateV1FvEmeaOK struct {
	Payload *models.CustomerDataUpdateResponse
}

func (o *CustomerDataUpdateV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaOK) GetPayload() *models.CustomerDataUpdateResponse {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerDataUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDataUpdateV1FvEmeaBadRequest creates a CustomerDataUpdateV1FvEmeaBadRequest with default headers values
func NewCustomerDataUpdateV1FvEmeaBadRequest() *CustomerDataUpdateV1FvEmeaBadRequest {
	return &CustomerDataUpdateV1FvEmeaBadRequest{}
}

/*CustomerDataUpdateV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CustomerDataUpdateV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDataUpdateV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDataUpdateV1FvEmeaUnauthorized creates a CustomerDataUpdateV1FvEmeaUnauthorized with default headers values
func NewCustomerDataUpdateV1FvEmeaUnauthorized() *CustomerDataUpdateV1FvEmeaUnauthorized {
	return &CustomerDataUpdateV1FvEmeaUnauthorized{}
}

/*CustomerDataUpdateV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CustomerDataUpdateV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDataUpdateV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDataUpdateV1FvEmeaForbidden creates a CustomerDataUpdateV1FvEmeaForbidden with default headers values
func NewCustomerDataUpdateV1FvEmeaForbidden() *CustomerDataUpdateV1FvEmeaForbidden {
	return &CustomerDataUpdateV1FvEmeaForbidden{}
}

/*CustomerDataUpdateV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CustomerDataUpdateV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDataUpdateV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDataUpdateV1FvEmeaNotFound creates a CustomerDataUpdateV1FvEmeaNotFound with default headers values
func NewCustomerDataUpdateV1FvEmeaNotFound() *CustomerDataUpdateV1FvEmeaNotFound {
	return &CustomerDataUpdateV1FvEmeaNotFound{}
}

/*CustomerDataUpdateV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CustomerDataUpdateV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDataUpdateV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDataUpdateV1FvEmeaTooManyRequests creates a CustomerDataUpdateV1FvEmeaTooManyRequests with default headers values
func NewCustomerDataUpdateV1FvEmeaTooManyRequests() *CustomerDataUpdateV1FvEmeaTooManyRequests {
	return &CustomerDataUpdateV1FvEmeaTooManyRequests{}
}

/*CustomerDataUpdateV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CustomerDataUpdateV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDataUpdateV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerDataUpdateV1FvEmeaStatus452 creates a CustomerDataUpdateV1FvEmeaStatus452 with default headers values
func NewCustomerDataUpdateV1FvEmeaStatus452() *CustomerDataUpdateV1FvEmeaStatus452 {
	return &CustomerDataUpdateV1FvEmeaStatus452{}
}

/*CustomerDataUpdateV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CustomerDataUpdateV1FvEmeaStatus452 struct {
}

func (o *CustomerDataUpdateV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaStatus452 ", 452)
}

func (o *CustomerDataUpdateV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerDataUpdateV1FvEmeaStatus453 creates a CustomerDataUpdateV1FvEmeaStatus453 with default headers values
func NewCustomerDataUpdateV1FvEmeaStatus453() *CustomerDataUpdateV1FvEmeaStatus453 {
	return &CustomerDataUpdateV1FvEmeaStatus453{}
}

/*CustomerDataUpdateV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CustomerDataUpdateV1FvEmeaStatus453 struct {
}

func (o *CustomerDataUpdateV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaStatus453 ", 453)
}

func (o *CustomerDataUpdateV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerDataUpdateV1FvEmeaStatus455 creates a CustomerDataUpdateV1FvEmeaStatus455 with default headers values
func NewCustomerDataUpdateV1FvEmeaStatus455() *CustomerDataUpdateV1FvEmeaStatus455 {
	return &CustomerDataUpdateV1FvEmeaStatus455{}
}

/*CustomerDataUpdateV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CustomerDataUpdateV1FvEmeaStatus455 struct {
}

func (o *CustomerDataUpdateV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaStatus455 ", 455)
}

func (o *CustomerDataUpdateV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCustomerDataUpdateV1FvEmeaStatus465 creates a CustomerDataUpdateV1FvEmeaStatus465 with default headers values
func NewCustomerDataUpdateV1FvEmeaStatus465() *CustomerDataUpdateV1FvEmeaStatus465 {
	return &CustomerDataUpdateV1FvEmeaStatus465{}
}

/*CustomerDataUpdateV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SGC01E : ORGANIZATION NUMBER MUST BE NUMERIC AND VALID VALUES ARE 001-998<BR/>VPL5SGC01S : REQUESTED CARDorACCOUNT NUMBER IS NOT FOUND<BR/>VPL5SGC02E : CUSTOMER ACCOUNT OR CARD NUMBER REQUIRED<BR/>VPL5SGC02S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SGC03E : INVALID FOREIGN USE INDICATOR - VALID VALUES ARE SPACE 0 OR 1<BR/>VPL5SGC03S : ACCOUNT NUMBER NOT FOUND<BR/>VPL5SGC04E : INVALID NUMBER TYPE INDICATOR - VALID VALUES ARE SPACE 0 OR 1<BR/>VPL5SGC04S : CUSTOMER NUMBER NOT FOUND<BR/>VPL5SGC05E : ORGANIZATION NUMBER REQUIRED WHEN NUMBER TYPE 1<BR/>VPL5SGC06E : INVALID DEMOGRAPHIC DATA INDICATOR - VALID VALUES ARE SPACE012<BR/>VPL5SGC07E : INVALID USER DATA INDICATOR - VALID VALUES ARE SPACE 0 1 OR 2<BR/>VPL5SGC08E : DEMOGRAPHIC DATA AND USER DATA INDICATORS MUST BE CORRESPONDED   DEMOGRAPHIC DATA INDICATOR AND USER DATA INDICATOR MUST HAVE     CORRESPONDED VALUES - CANNOT HAVE VALUE 1 AND 2 AT THE SAME TIME<BR/>VPL5SGC09E : STATUS MUST BE NUMERIC AND VALID VALUES ARE 0 1 OR 2 ONLY<BR/>VPL5SGC10E : VIP STATUS MUST BE NUMERIC AND VALID VALUES ARE 0 OR 1 ONLY<BR/>VPL5SGC11E : SIC CODE MUST BE NUMERIC<BR/>VPL5SGC12E : MARITAL STATUS MUST BE NUMERIC AND VALUES ARE 0 THRU 4<BR/>VPL5SGC13E : NAME TYPE 1 IND MUST BE NUMERIC AND VALID VALUES ARE 0 1 OR 2<BR/>VPL5SGC14E : NAME TYPE 2 IND MUST BE NUMERIC AND VALID VALUES ARE 0 1 OR 2<BR/>VPL5SGC15E : NAME TYPE 3 IND MUST BE NUMERIC AND VALID VALUES ARE 0 1 OR 2<BR/>VPL5SGC16E : POSTAL CODE MUST BE ALPHA SPACE DASH OR NUMBER<BR/>VPL5SGC17E : RESIDENCE CODE MUST BE NUMERIC AND VALID VALUES ARE 0 THRU 3<BR/>VPL5SGC18E : CONTACT IND MUST BE NUMERIC<BR/>VPL5SGC19E : CARRIER ROUTE LAST 2 CHARACTERS MUST BE NUMERIC<BR/>VPL5SGC20E : SENT DATE MUST BE NUMERIC AND HAS VALUE ZERO OR VALID DATE FORMAT<BR/>VPL5SGC21E : SENT DATE MUST BE <= THAN NEXT PROCESSING DATE OR ZERO<BR/>VPL5SGC22E : STATEMENT MESSAGE INDICATOR MUST BE NUMERIC<BR/>VPL5SGC23E : DATE OF BIRTH MUST BE ZERO OR HAVE VALID DATE FORMAT<BR/>VPL5SGC24E : TAX IDENTIFICATION MUST BE NUMERIC AND VALID VALUES ARE 0 TO 8<BR/>VPL5SGC25E : WHEN TAX ID = 0 FIRST 9 CHARACTERS TAX ID NUMBER MUST BE NUMERIC<BR/>VPL5SGC26E : FILED DATE MUST BE ZERO OR HAVE VALID DATE FORMAT<BR/>VPL5SGC27E : FILED DATE MUST BE <= THAN NEXT PROCESSING DATE OR ZERO<BR/>VPL5SGC28E : FLAG MUST BE NUMERIC AND VALID VALUES ARE 0 OR 1<BR/>VPL5SGC29E : NUMBER OF DEPENDANTS MUST BE NUMERIC<BR/>VPL5SGC30E : USER 10 DATE MUST BE ZERO OR VALID DATE FORMAT<BR/>VPL5SGC31E : USER 11 DATE MUST BE ZERO OR VALID DATE FORMAT<BR/>VPL5SGC34E : CAN NOT CHANGE STATUS TO PURGE WITH ACTIVE ACCOUNT<BR/>VPL5SGC35E : COUNTRY CODE MUST EXIST IN THE SECURITY SUBSYSTEM<BR/>VPL5SGC36E : HOME PHONE FLAG MUST BE NUMERIC AND VALID VALUES ARE 0 OR 1<BR/>VPL5SGC37E : FAX PHONE FLAG MUST BE NUMERIC AND VALID VALUES ARE 0 OR 1<BR/>VPL5SGC38E : MOBILE PHONE FLAG MUST BE NUMERIC AND VALID VALUES ARE 0 OR 1<BR/>VPL5SGC39E : EMAIL FLAG MUST BE NUMERIC AND VALID VALUES ARE 0 OR 1<BR/>VPL5SGC43E : INVALID ISO LANGUAGE CODE<BR/>VPL5SGC48E : INVALID DATE<BR/>VPL5SGC49E : MUST BE TODAY'S PROCESSING DATE<BR/>VPL5SGC55E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-1<BR/>VPL5SGC56E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-2<BR/>VPL5SGC57E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-3<BR/>VPL5SGC58E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-4<BR/>VPL5SGC59E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-5<BR/>VPL5SGC60E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-6<BR/>VPL5SGC61E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-7<BR/>VPL5SGC62E : ONLY NUMERIC VALUES ARE ALLOWED FOR AFFORD FIELD-8<BR/>VPL5SGC63E : AFFORD FIELD-9 SHOULD BE NUMERIC AND VALID VALUES ARE 1 OR 2<BR/>VPL5SGC64E : CUSTOMER FORMAT SHOULD BE NUMERIC VALID VALUES ARE 0 OR 1<BR/>VPL5SGC65E : EMPLOYEE STATUS IS NOT NUMERIC<BR/>VPL5SGC66E : SPCL ADDRESS INDICATOR IS NOT NUMERIC<BR/>VPL5SGCZ1S : SERVICE INPUT TO GENERAL CUSTOMER SERVICE IS AN INCORRECT LENGTH<BR/>VPL5SGCZ3S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SGCZ4S : REQUESTED ORG NUMBER IS NOT FOUND<BR/>VPL5SGCZ5S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SGCZ6S : ORGANIZATION FILE UNAVAILABLE<BR/>VPL5SGCZ7S : ACCOUNT NUMBER UNAVAILABLE<BR/>VPL5SGCZ8S : FOREIGN ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SGCZ9S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPL5SGCZAS : ACCOUNT FILE UNAVAILABLE<BR/>VPL5SGCZBS : CUSTOMER FILE UNAVAILABLE<BR/>VPL5SGCZCS : CUSTOMER RELATIONSHIP CROSS-REFERENCE UNAVAILABLE<BR/>VPL5SGCZDS : CUSTOMER BASE SEGMENT CROSS-REFERENCE UNAVAILABLE<BR/>VPL5SGCAAE : MORE THAN 1 SPACE IS NOT ALLOWED BETWEEN THE WORDS<BR/>VPL5SGCABE : MEMORABLE WORD CANNOT HAVE SPECIAL CHARACTER<BR/>VPL5SGCACE : MEMORABLE WORD MUST HAVE AT LEAST ** CHARACTERS<BR/>VPL5SGCADE : MEMORABLE WORD CANNOT HAVE MORE THAN ** CHARACTERS<BR/>VPL5SGCAEE : NUMERIC CHARACTERS NOT ALLOWED IN MEMORABLE WORD<BR/>VPL5SGCAFE : ALPHA CHARACTERS NOT ALLOWED IN MEMORABLE WORD<BR/>VPL5SGCAGE : MEMORABLE WORD IS NOT PRESENT<BR/>VPL5SGCAHE : MORE THAN 1 SPACE IS NOT ALLOWED BETWEEN THE WORDS<BR/>VPL5SGCAIE : MEMORABLE WORD REMINDER CANNOT HAVE SPECIAL CHARACTERS<BR/>VPL5SGCAJE : MEMORABLE WORD REMINDER MUST HAVE AT LEAST ** CHARACTERS<BR/>VPL5SGCAKE : MEMORABLE WORD REMINDER CANNOT HAVE MORE THAN ** CHARACTERS<BR/>VPL5SGCALE : NUMERIC CHARACTERS NOT ALLOWED IN MEMORABLE WORD REMINDER<BR/>VPL5SGCAME : ALPHA CHARACTERS NOT ALLOWED IN MEMORABLE WORD REMINDER<BR/>VPL5SGCANE : UNIQUE ID NOT ALLOWED<BR/>VPL5SGCAOE : UNIQUE ID NOT ALLOWED<BR/>VPL5SGCAPE : UNIQUE ID DIGITS 1 TO 3 INVALID - 0 ONLY<BR/>VPL5SGCAYE : WORK PHONE EXTENSION MUST BE NUMERIC<BR/>VPL5SGCAXE : WORK PHONE NUMBER MUST BE NUMERIC<BR/>VPL5SGCAUE : HOME PHONE NUMBER MUST BE NUMERIC<BR/>VPL5SGCAVE : FAX PHONE NUMBER MUST BE NUMBERIC<BR/>VPL5SGCAWE : MOBILE PHONE NUMBER MUST BE NUMERIC<BR/>VPL5SGCBAE : HOME PHONE NUMBER REQUIRED IF HOME PHONE FLAG IS 1 OR 2<BR/>VPL5SGCBEE : MOBILE PHONE NUMBER REQUIRED IF MOBILE PHONE FLAG IS 1 OR 2<BR/>VPL5SGCBHE : WORK PHONE NUMBER REQUIRED IF WORK PHONE FLAG IS 1 OR 2<BR/>VPL5SGCBKE : ONLY ONE PREFERRED CONTACT IS ALLOWED<BR/>VPL5SGCBNE : DESCRIPTION NOT FOUND IN TITLE TABLE<BR/>VPL5SGCBJE : EMAIL REQUIRED IF EMAIL FLAG IS 1 OR 2<BR/>VPL5SGCBFE : SMS FLAG INVALID - 0 1 ONLY<BR/>VPL5SGCBLE : GENDER CODE INVALID - 0 1 OR 2 ONLY<BR/>VPL5SGCBME : ID FRAUD INVALID - Y N ONLY<BR/>VPL5SGCBOE : FIRSTorMIDDLEorLAST NAMEorSUFFIX NOT ALLOWED<BR/>VPL5SGCBSE : FIRST NAME INVALID - SPACE BETWEEN IS NOT ALLOWED<BR/>VPL5SGCBTE : FIRST NAME INVALID - A THROUGH Z - OR ' ONLY<BR/>VPL5SGCBUE : MIDDLE NAME INVALID - SPACE BETWEEN IS NOT ALLOWED<BR/>VPL5SGCBVE : MIDDLE NAME INVALID - A THROUGH Z - OR ' ONLY<BR/>VPL5SGCBWE : LAST NAME INVALID - SPACE BETWEEN IS NOT ALLOWED<BR/>VPL5SGCBXE : LAST NAME INVALID - A THROUGH Z - OR ' ONLY<BR/>VPL5SGCBYS : DESCRIPTION NOT FOUND IN TITLEorSUFFIX TABLE<BR/>VPL5SGCBZE : STMT NOTIFY INVALID - 0 1 OR 2 ONLY<BR/>VPL5SGCCBE : DEATH DATE MUST BE NUMERIC AND HAS VALID DATE FORMAT<BR/>VPL5SGCCCE : DEATH DATE CANNOT BE GREATER THAN CURRENT DATE<BR/>VPL5SGCCDE : DEATH DATE CANNOT BE ENTERED IF ACCOUNT IS NOT PRESENT<BR/>VPL5SGCCEE : DEATH DATE MUST BE GREATER THAN ACCOUNT OPENED DATE<BR/>VPL5SGCCFE : DEATH NOTIFY DATE MUST BE NUMERIC AND HAS VALID DATE FORMAT<BR/>VPL5SGCCGE : DEATH DATE OR DEATH DATE NOTIFIED CANNOT BE ZERO<BR/>VPL5SGCCHE : DEATH NOTIFY DATE MUST BE GREATER THAN OR EQUAL TO DEATH DATE<BR/>VPL5SGCEAE : VACATION START DATE MUST BE NUMERIC AND IN CORRECT FORMAT<BR/>VPL5SGCEBE : VACATION END DATE MUST BE NUMERIC AND IN CORRECT FORMAT<BR/>VPL5SGCECE : INVALID VACATION START AND END DATE<BR/>VPL5SGCEDE : VACATION END DATE MUST BE GREATER THAN START DATE<BR/>VPL5SGCEEE : INVALID VACATION COUNTRY CODE<BR/>VPL5SGCEFE : INVALID VACATION PHONE NUMBER<BR/>VPL5SGCEGE : VAC START and END DTE MUST BE GREATER THAN ACCT OPEN DT
*/
type CustomerDataUpdateV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CustomerDataUpdateV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/customerDataUpdate][%d] customerDataUpdateV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CustomerDataUpdateV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CustomerDataUpdateV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package customer_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer records API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer records API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddressHistoryInquiryV1FvEmea(params *AddressHistoryInquiryV1FvEmeaParams) (*AddressHistoryInquiryV1FvEmeaOK, error)

	AddressListInquiryV1FvEmea(params *AddressListInquiryV1FvEmeaParams) (*AddressListInquiryV1FvEmeaOK, error)

	AssociatedPartiesInquiryV1FvEmea(params *AssociatedPartiesInquiryV1FvEmeaParams) (*AssociatedPartiesInquiryV1FvEmeaOK, error)

	CustomerAccountsListV1FvEmea(params *CustomerAccountsListV1FvEmeaParams) (*CustomerAccountsListV1FvEmeaOK, error)

	CustomerAddV1FvEmea(params *CustomerAddV1FvEmeaParams) (*CustomerAddV1FvEmeaOK, error)

	CustomerAttemptsInquiryV1FvEmea(params *CustomerAttemptsInquiryV1FvEmeaParams) (*CustomerAttemptsInquiryV1FvEmeaOK, error)

	CustomerDataUpdateV1FvEmea(params *CustomerDataUpdateV1FvEmeaParams) (*CustomerDataUpdateV1FvEmeaOK, error)

	CustomerDataUpdateV2FvEmea(params *CustomerDataUpdateV2FvEmeaParams) (*CustomerDataUpdateV2FvEmeaOK, error)

	CustomerDemographicInquiryV1FvEmea(params *CustomerDemographicInquiryV1FvEmeaParams) (*CustomerDemographicInquiryV1FvEmeaOK, error)

	CustomerNumberUpdateV2FvEmea(params *CustomerNumberUpdateV2FvEmeaParams) (*CustomerNumberUpdateV2FvEmeaOK, error)

	CustomerPhoneUpdateV1FvEmea(params *CustomerPhoneUpdateV1FvEmeaParams) (*CustomerPhoneUpdateV1FvEmeaOK, error)

	ExtendedLookupInquiryV1FvEmea(params *ExtendedLookupInquiryV1FvEmeaParams) (*ExtendedLookupInquiryV1FvEmeaOK, error)

	ListCustomerAccountsV2FvEmea(params *ListCustomerAccountsV2FvEmeaParams) (*ListCustomerAccountsV2FvEmeaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddressHistoryInquiryV1FvEmea addresses history inquiry

  This services is used retrieve the address history information about the Customer
*/
func (a *Client) AddressHistoryInquiryV1FvEmea(params *AddressHistoryInquiryV1FvEmeaParams) (*AddressHistoryInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressHistoryInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressHistoryInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/addressHistoryInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressHistoryInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressHistoryInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressHistoryInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddressListInquiryV1FvEmea addresses list inquiry

  This service is used to retrieve the Customer's addresses<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) AddressListInquiryV1FvEmea(params *AddressListInquiryV1FvEmeaParams) (*AddressListInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressListInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressListInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/addressListInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressListInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressListInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressListInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AssociatedPartiesInquiryV1FvEmea associateds parties inquiry

  The Account Inquiry Associated Parties service  provides an external or internal user the ability to request the associated party information for an account. In order to retrieve the requested information, the input message requires either the card or account number. For dual currency accounts, the foreign use field in the input message provides the option to request the data from either the local or foreign account. If the foreign indicator is not defined, the service assumes the information to be retrieved is for the local account.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) AssociatedPartiesInquiryV1FvEmea(params *AssociatedPartiesInquiryV1FvEmeaParams) (*AssociatedPartiesInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociatedPartiesInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "associatedPartiesInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/associatedPartiesInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssociatedPartiesInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociatedPartiesInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for associatedPartiesInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerAccountsListV1FvEmea customers accounts list

  This service is used to retrieve details of all accounts linked with a customer number. Client should send the customer number in the request and in response system sends all related account number with their respective status and block code values.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CustomerAccountsListV1FvEmea(params *CustomerAccountsListV1FvEmeaParams) (*CustomerAccountsListV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAccountsListV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAccountsList_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/customerAccountsList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAccountsListV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAccountsListV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerAccountsList_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerAddV1FvEmea customers add

  This service enables a user to add the customer details, in the Customer Name and Address AMNA Master File.
*/
func (a *Client) CustomerAddV1FvEmea(params *CustomerAddV1FvEmeaParams) (*CustomerAddV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAddV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAdd_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/customerAdd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAddV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAddV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerAdd_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerAttemptsInquiryV1FvEmea customers attempts inquiry

  This service can be used to retrieve the information on failed communication to the customer via SMS or email. At the org level, a threshold is defined for the number of SMS or EMAIL attempts to the customer. Using this service the client can retrieve if number of SMS or EMAIL attempts to the customer has exceeded the pre-defined threshold number.<p><p> Service returns the pre-defined threshold number along with separate indicators for SMS and Email attempts made.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CustomerAttemptsInquiryV1FvEmea(params *CustomerAttemptsInquiryV1FvEmeaParams) (*CustomerAttemptsInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerAttemptsInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerAttemptsInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/customerAttemptsInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerAttemptsInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerAttemptsInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerAttemptsInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerDataUpdateV1FvEmea customers data update

  This service is deprecated and will be supported until January 2021. The new version contains changes in date formats of certain fields to Gregorian (YYYYMMDD). Please switch to Version 2 of this API before that time. <BR/><BR/>This service can be used to update the demographics details stored in the system for a customer.  E.g.  names, addresses, preferences flags, personal details, user defined fields, etc.
*/
func (a *Client) CustomerDataUpdateV1FvEmea(params *CustomerDataUpdateV1FvEmeaParams) (*CustomerDataUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerDataUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerDataUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/customerDataUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerDataUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerDataUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerDataUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerDataUpdateV2FvEmea customers data update

  This service can be used to update the demographics details stored in the system for a customer.  E.g.  names, addresses, preferences flags, personal details, user defined fields, etc.
*/
func (a *Client) CustomerDataUpdateV2FvEmea(params *CustomerDataUpdateV2FvEmeaParams) (*CustomerDataUpdateV2FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerDataUpdateV2FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerDataUpdate_v2_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v2/customerDataUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerDataUpdateV2FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerDataUpdateV2FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerDataUpdate_v2_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerDemographicInquiryV1FvEmea customers demographic inquiry

  This service will allow a calling program to request Demographic Data for a customer.  The data is stored on the Name and Address Record AMNA.  A Customer, Account or Card number can be used in the input area to retrieve the data. All of the fields included in this service can be seen in the Request and Response sections of this document. <BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CustomerDemographicInquiryV1FvEmea(params *CustomerDemographicInquiryV1FvEmeaParams) (*CustomerDemographicInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerDemographicInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerDemographicInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/customerDemographicInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerDemographicInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerDemographicInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerDemographicInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerNumberUpdateV2FvEmea customers number update

  This service can be used to update the customer number at the account record. FirstVision provides option to define multiple demographic records for an account, which allows a cardholder to define different addresses for their billing account. The different address for a billing account can be customer's permanent address, correspondence address or an alternate address for some specific period.<p><p>This service can be used to update any of these addresses for a billing account at FirstVision.
*/
func (a *Client) CustomerNumberUpdateV2FvEmea(params *CustomerNumberUpdateV2FvEmeaParams) (*CustomerNumberUpdateV2FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerNumberUpdateV2FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerNumberUpdate_v2_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v2/customerNumberUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerNumberUpdateV2FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerNumberUpdateV2FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerNumberUpdate_v2_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerPhoneUpdateV1FvEmea customers phone update

  The CMS Mobile Number Update service can be used to update customer phone numbers. This service can be invoked with the provision of a customer number which will be used to indicate the record to update, account number which will indicate to update the customer record that it is associated with (CUSTOMER NUMBER on ARMB02) or card number which will indicate the customer record of its post to account is to be updated. There will also be fields on the message to indicate whether the owner or co-owner information is to be updated as well as which phone number on the record is to be updated. The output response will return a pass or fail indicator and the org, input customer or account or card number, number type, owner and co-owner flag, updated phone number and phone number type<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CustomerPhoneUpdateV1FvEmea(params *CustomerPhoneUpdateV1FvEmeaParams) (*CustomerPhoneUpdateV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPhoneUpdateV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "customerPhoneUpdate_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/customerPhoneUpdate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerPhoneUpdateV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPhoneUpdateV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerPhoneUpdate_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExtendedLookupInquiryV1FvEmea extendeds lookup inquiry

  This service is used for the Extended Lookup Search Inquiry that retrieves customer information based on primary and optional search values. A primary search value must be supplied, and can be based on one of four fields - last/business/generic/store name, identification number, phone number, or postal code.  Primary search fields can be used to make an exact search or a 'begins with' search.<p><p>In an 'exact' search - you provide the exact data (e.g. Smith) to be matched and the service will return information on all customers with the LBSG name of 'Smith'.<p><p>In a 'begins with' search- you provide as many characters as are known, followed by an asterisk (e.g. xyz*), or by setting the corresponding field's Fuzzy Switch to 1. The service will return information on all customers with the field value that begins with the search string.<p><p>In an 'ends with' search - you provide as many characters as are known, preceded with an asterisk (e.g. *xyz), or by setting the corresponding field's Fuzzy Switch to 3.  The service will return information on all customers with the field value that ends with the search string.  Ends with searches are limited to optional fields.<p><p>In a 'fuzzy' search- you provide as many characters as are known, preceded with, and followed by an asterisk (e.g. *xyz*), or by setting the corresponding field's Fuzzy Switch to 2. The service will return information on all customers with a value containing the search string. Fuzzy searches are limited to optional fields.
*/
func (a *Client) ExtendedLookupInquiryV1FvEmea(params *ExtendedLookupInquiryV1FvEmeaParams) (*ExtendedLookupInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExtendedLookupInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "extendedLookupInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/extendedLookupInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExtendedLookupInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExtendedLookupInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extendedLookupInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCustomerAccountsV2FvEmea lists customer accounts

  This service is used to retrieve the Customer record details in Customer Name and Address, Account and Card Details<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) ListCustomerAccountsV2FvEmea(params *ListCustomerAccountsV2FvEmeaParams) (*ListCustomerAccountsV2FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomerAccountsV2FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCustomerAccounts_v2_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v2/listCustomerAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomerAccountsV2FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomerAccountsV2FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCustomerAccounts_v2_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package card_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new card management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for card management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AcsCardInquiryV1FvEmea(params *AcsCardInquiryV1FvEmeaParams) (*AcsCardInquiryV1FvEmeaOK, error)

	CardIDToPanDecryptV1FvEmea(params *CardIDToPanDecryptV1FvEmeaParams) (*CardIDToPanDecryptV1FvEmeaOK, error)

	CardInquiryV1FvEmea(params *CardInquiryV1FvEmeaParams) (*CardInquiryV1FvEmeaOK, error)

	CardLostAndStolenServiceV1FvEmea(params *CardLostAndStolenServiceV1FvEmeaParams) (*CardLostAndStolenServiceV1FvEmeaOK, error)

	CardTransferInquiryV1FvEmea(params *CardTransferInquiryV1FvEmeaParams) (*CardTransferInquiryV1FvEmeaOK, error)

	CardsListbyCardV1FvEmea(params *CardsListbyCardV1FvEmeaParams) (*CardsListbyCardV1FvEmeaOK, error)

	Cvv2InquiryV1FvEmea(params *Cvv2InquiryV1FvEmeaParams) (*Cvv2InquiryV1FvEmeaOK, error)

	DateRangeInquiryV1FvEmea(params *DateRangeInquiryV1FvEmeaParams) (*DateRangeInquiryV1FvEmeaOK, error)

	EmbosserInquiryV1FvEmea(params *EmbosserInquiryV1FvEmeaParams) (*EmbosserInquiryV1FvEmeaOK, error)

	PinBlockInquiryV1FvEmea(params *PinBlockInquiryV1FvEmeaParams) (*PinBlockInquiryV1FvEmeaOK, error)

	PinReminderV1FvEmea(params *PinReminderV1FvEmeaParams) (*PinReminderV1FvEmeaOK, error)

	PinValidationV1FvEmea(params *PinValidationV1FvEmeaParams) (*PinValidationV1FvEmeaOK, error)

	ValidateCvv2V1FvEmea(params *ValidateCvv2V1FvEmeaParams) (*ValidateCvv2V1FvEmeaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcsCardInquiryV1FvEmea acs card inquiry

  This service is used to retrieve important KYC information about the Customer<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) AcsCardInquiryV1FvEmea(params *AcsCardInquiryV1FvEmeaParams) (*AcsCardInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcsCardInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "acsCardInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/acsCardInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcsCardInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcsCardInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acsCardInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardIDToPanDecryptV1FvEmea cards Id to pan decrypt

  This service is used to decrypt a FirstVision tokenised Card ID as input and returns a Card number (PAN).<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardIDToPanDecryptV1FvEmea(params *CardIDToPanDecryptV1FvEmeaParams) (*CardIDToPanDecryptV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardIDToPanDecryptV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardIdToPanDecrypt_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardIdToPanDecrypt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardIDToPanDecryptV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardIDToPanDecryptV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardIdToPanDecrypt_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardInquiryV1FvEmea cards inquiry

  This service is used to retrieve data held at the Card level for a FirstVision account. This service has to be called with a valid card number to get the required response.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardInquiryV1FvEmea(params *CardInquiryV1FvEmeaParams) (*CardInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardLostAndStolenServiceV1FvEmea cards lost and stolen service

  The Fraud Card Transfer driver service will coordinate between all other services to perform updates and record creations required to complete the fraud card transfers. Based on the input field values the corresponding actions will be taken like creating a new account or card number and updating the existing cards with block codes, action memo updates etc. <BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardLostAndStolenServiceV1FvEmea(params *CardLostAndStolenServiceV1FvEmeaParams) (*CardLostAndStolenServiceV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardLostAndStolenServiceV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardLostAndStolenService_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardLostAndStolenService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardLostAndStolenServiceV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardLostAndStolenServiceV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardLostAndStolenService_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardTransferInquiryV1FvEmea cards transfer inquiry

  The Card Transfer Inquiry Service will allow a user to identify a card that you want to transfer or to identify a card that was transferred today and you want to reverse the card transfer.   This service will emulate the functionality used on the Fraud Card Detail screen ARXE00. The card transfer inquiry service will help in finding out the status of the card i.e. whether the card is transferred or reversed and with the extra details such as card action and block code etc. Card transfer update service needs to be called depending on the response of the inquiry service.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardTransferInquiryV1FvEmea(params *CardTransferInquiryV1FvEmeaParams) (*CardTransferInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardTransferInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardTransferInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardTransferInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardTransferInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardTransferInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardTransferInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CardsListbyCardV1FvEmea cards listby card

  The CMS Card to Card Inquiry service is used to retrieve all the associated cards, depending on various options, for the card or account sent in the request. The request can be a primary card or a secondary card. Account number can also be used as a input, but will limit the options given in the request.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) CardsListbyCardV1FvEmea(params *CardsListbyCardV1FvEmeaParams) (*CardsListbyCardV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCardsListbyCardV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cardsListbyCard_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cardsListbyCard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CardsListbyCardV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CardsListbyCardV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cardsListbyCard_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Cvv2InquiryV1FvEmea cvv2s inquiry

  This service is used to retrieve the CVV2 block for the supplied Card number and optional elements which will be validated if present as input. On successful validation of the input an encrypted CVV2 Block is returned. All the following values if not left 'blank' on the input will be validated against the Card data at the relevant level.<p><p>CARD level: Expiry Date, Embosser Name 1<p>ACCOUNT level: Bank Sort Code (routing number), Bank Account Number<p>CUSTOMER level: Date of Birth, Postal Code, Memorable Word, Social Security Number, Mobile Phone Number, Home Phone Number, Unique ID<p><p>The service will return a 'pass' or 'fail' for the overall request and a specific response (RC) depending on the CVV2 check: RC value 0 - CVV VALID. All other values means an error has occurred<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) Cvv2InquiryV1FvEmea(params *Cvv2InquiryV1FvEmeaParams) (*Cvv2InquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCvv2InquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cvv2Inquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/cvv2Inquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Cvv2InquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Cvv2InquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cvv2Inquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DateRangeInquiryV1FvEmea dates range inquiry

  To prevent Card or PIN production if Customer has changed their address.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) DateRangeInquiryV1FvEmea(params *DateRangeInquiryV1FvEmeaParams) (*DateRangeInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDateRangeInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dateRangeInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/dateRangeInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DateRangeInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DateRangeInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dateRangeInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmbosserInquiryV1FvEmea embossers inquiry

  This service is deprecated and will be supported until January 2021. Please use Card Inquiry service version v1. <BR/><BR/>The Embosser Inquiry Service is used to retrieve data held at the Card level for a FirstVision account. This service has to be called with a valid card number to get the required response.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) EmbosserInquiryV1FvEmea(params *EmbosserInquiryV1FvEmeaParams) (*EmbosserInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmbosserInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "embosserInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/embosserInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmbosserInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmbosserInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for embosserInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinBlockInquiryV1FvEmea pins block inquiry

  This PIN Delivery via XML Request service performs the PIN Block retrieval of cardholder’s PINs through Issuer real time application systems such as Ex Web, Mobile, IVR, branch online system, etc. This service helps the user to request and retrieve their PIN through online securely. The output of this message contains the encrypted PIN block, which will be decrypted and displayed securely on the Issuer real time application systems screen. <BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) PinBlockInquiryV1FvEmea(params *PinBlockInquiryV1FvEmeaParams) (*PinBlockInquiryV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinBlockInquiryV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinBlockInquiry_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/pinBlockInquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinBlockInquiryV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinBlockInquiryV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinBlockInquiry_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinReminderV1FvEmea pins reminder

  PIN mailer service will allow the user to request for a PIN mailer for a maximum of 20 cards. This service performs as a driver which calls the card action service with card action as  5  NEW PIN REQUEST  for the existing card) along with the card number as input. The card action update service does the actual Updation of the embosser record  by changing the card action which will then be processed in batch.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) PinReminderV1FvEmea(params *PinReminderV1FvEmeaParams) (*PinReminderV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinReminderV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinReminder_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/pinReminder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinReminderV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinReminderV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinReminder_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinValidationV1FvEmea pins validation

  This service is used to take a Card number, a PIN Block and the Key for the Card's Association (e.g. Visa, MasterCard) as input. The service validates the PIN Block and modifies the Invalid PIN Tries value for the Card depending on FirstVision system parameters (described in the FirstVision User Manual). The result of the validation sets a value to 0 or adds 1 to the value depending on the 'pass' or 'fail' result AND the FirstVision PIN Reset parameters.<p><p>If the Invalid PIN Tries value exceeds the allowable number for the Card, the Card's PIN becomes 'locked' for future authorisation PIN attempts.<p><p>The service finally returns a 'pass' or 'fail' for the overall request and a specific response depending on the PIN validation and final state of the Card: PIN LOCKED, PIN INVALID or PIN VALID.<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) PinValidationV1FvEmea(params *PinValidationV1FvEmeaParams) (*PinValidationV1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinValidationV1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinValidation_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/pinValidation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinValidationV1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinValidationV1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinValidation_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateCvv2V1FvEmea validates cvv2

  This service is used to take a Card number, it's Expiry Date (optional) and it's CVV2 number as input.<p>The service validates the CVV2 value and returns a 'pass' or 'fail' for the overall request and a specific response (RC) depending on the CVV2 check.<p>RC value 0 - CVV VALID<p>RC value 1 - CVV NOT VALID<p>RC value 2 - CVV VALID<p>RC value 3 - UNAVAILABLE TO RESPOND<p>RC value 4 - HSM FAILURE<BR/><BR/><p>Fields that are not provided in the Request object will be initialised to their default values. All numeric fields are initialised to zero and alphanumeric fields initialised to spaces</p>
*/
func (a *Client) ValidateCvv2V1FvEmea(params *ValidateCvv2V1FvEmeaParams) (*ValidateCvv2V1FvEmeaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCvv2V1FvEmeaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCvv2_v1_fv_emea",
		Method:             "POST",
		PathPattern:        "/fv_emea/v1/validateCvv2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCvv2V1FvEmeaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCvv2V1FvEmeaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCvv2_v1_fv_emea: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

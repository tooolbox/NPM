// Code generated by go-swagger; DO NOT EDIT.

package card_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CardsListbyCardV1FvEmeaReader is a Reader for the CardsListbyCardV1FvEmea structure.
type CardsListbyCardV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CardsListbyCardV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCardsListbyCardV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCardsListbyCardV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCardsListbyCardV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCardsListbyCardV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCardsListbyCardV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCardsListbyCardV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCardsListbyCardV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCardsListbyCardV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCardsListbyCardV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCardsListbyCardV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCardsListbyCardV1FvEmeaOK creates a CardsListbyCardV1FvEmeaOK with default headers values
func NewCardsListbyCardV1FvEmeaOK() *CardsListbyCardV1FvEmeaOK {
	return &CardsListbyCardV1FvEmeaOK{}
}

/*CardsListbyCardV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CardsListbyCardV1FvEmeaOK struct {
	Payload *models.CardsListbyCardResponse
}

func (o *CardsListbyCardV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaOK) GetPayload() *models.CardsListbyCardResponse {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CardsListbyCardResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardsListbyCardV1FvEmeaBadRequest creates a CardsListbyCardV1FvEmeaBadRequest with default headers values
func NewCardsListbyCardV1FvEmeaBadRequest() *CardsListbyCardV1FvEmeaBadRequest {
	return &CardsListbyCardV1FvEmeaBadRequest{}
}

/*CardsListbyCardV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CardsListbyCardV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CardsListbyCardV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardsListbyCardV1FvEmeaUnauthorized creates a CardsListbyCardV1FvEmeaUnauthorized with default headers values
func NewCardsListbyCardV1FvEmeaUnauthorized() *CardsListbyCardV1FvEmeaUnauthorized {
	return &CardsListbyCardV1FvEmeaUnauthorized{}
}

/*CardsListbyCardV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CardsListbyCardV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CardsListbyCardV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardsListbyCardV1FvEmeaForbidden creates a CardsListbyCardV1FvEmeaForbidden with default headers values
func NewCardsListbyCardV1FvEmeaForbidden() *CardsListbyCardV1FvEmeaForbidden {
	return &CardsListbyCardV1FvEmeaForbidden{}
}

/*CardsListbyCardV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CardsListbyCardV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CardsListbyCardV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardsListbyCardV1FvEmeaNotFound creates a CardsListbyCardV1FvEmeaNotFound with default headers values
func NewCardsListbyCardV1FvEmeaNotFound() *CardsListbyCardV1FvEmeaNotFound {
	return &CardsListbyCardV1FvEmeaNotFound{}
}

/*CardsListbyCardV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CardsListbyCardV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CardsListbyCardV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardsListbyCardV1FvEmeaTooManyRequests creates a CardsListbyCardV1FvEmeaTooManyRequests with default headers values
func NewCardsListbyCardV1FvEmeaTooManyRequests() *CardsListbyCardV1FvEmeaTooManyRequests {
	return &CardsListbyCardV1FvEmeaTooManyRequests{}
}

/*CardsListbyCardV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CardsListbyCardV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CardsListbyCardV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardsListbyCardV1FvEmeaStatus452 creates a CardsListbyCardV1FvEmeaStatus452 with default headers values
func NewCardsListbyCardV1FvEmeaStatus452() *CardsListbyCardV1FvEmeaStatus452 {
	return &CardsListbyCardV1FvEmeaStatus452{}
}

/*CardsListbyCardV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CardsListbyCardV1FvEmeaStatus452 struct {
}

func (o *CardsListbyCardV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaStatus452 ", 452)
}

func (o *CardsListbyCardV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardsListbyCardV1FvEmeaStatus453 creates a CardsListbyCardV1FvEmeaStatus453 with default headers values
func NewCardsListbyCardV1FvEmeaStatus453() *CardsListbyCardV1FvEmeaStatus453 {
	return &CardsListbyCardV1FvEmeaStatus453{}
}

/*CardsListbyCardV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CardsListbyCardV1FvEmeaStatus453 struct {
}

func (o *CardsListbyCardV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaStatus453 ", 453)
}

func (o *CardsListbyCardV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardsListbyCardV1FvEmeaStatus455 creates a CardsListbyCardV1FvEmeaStatus455 with default headers values
func NewCardsListbyCardV1FvEmeaStatus455() *CardsListbyCardV1FvEmeaStatus455 {
	return &CardsListbyCardV1FvEmeaStatus455{}
}

/*CardsListbyCardV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CardsListbyCardV1FvEmeaStatus455 struct {
}

func (o *CardsListbyCardV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaStatus455 ", 455)
}

func (o *CardsListbyCardV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardsListbyCardV1FvEmeaStatus465 creates a CardsListbyCardV1FvEmeaStatus465 with default headers values
func NewCardsListbyCardV1FvEmeaStatus465() *CardsListbyCardV1FvEmeaStatus465 {
	return &CardsListbyCardV1FvEmeaStatus465{}
}

/*CardsListbyCardV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE1SCN01E : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPE1SCN02S : SERVICE INPUT TO CorN SERVICE IS AN INCORRECT LENGTH<BR/>VPE1SCN04S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE1SCN05S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE1SCN15S : ORGANIZATION NUMBER NOT DETERMINED<BR/>VPE1SCN16S : REQUESTED ORGANIZATION NUMBER IS NOT FOUND<BR/>VPE1SCN17S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE1SCN18S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE5SCN06E : ORGANIZATION NUMBER MUST BE NUMERIC AND VALID VALUES ARE 001-998<BR/>VPE5SCN07E : ACCOUNTorCARD NUMBER IS NOT NUMERIC OR EQUALS SPACES<BR/>VPE5SCN08E : INVALID FUNCTION CODE FOR PREVorNEXT SEARCH<BR/>VPE5SCN09E : INVALID FUNCTION CODE FOR REP<BR/>VPE5SCN10E : INVALID FUNCTION CODE FOR MULTI SCHEME<BR/>VPE5SCN11E : INVALID FUNCTION CODE FOR CARD ACTIVATION<BR/>VPE5SCN12E : INVALID SEARCH CONTINUATION ORG<BR/>VPE5SCN13E : INVALID SEARCH CONTINUATION CARD NUMBER<BR/>VPE5SCN14E : INVALID SEARCH CONTINUATION CARD SEQUENCE<BR/>VPE5SCN19S : ORGANIZATION FILE NOT OPEN<BR/>VPE5SCN20S : ORGANIZATION NUMBER NOT FOUND<BR/>VPE5SCN21S : ERROR ACCESSING ORGANIZATION FILE<BR/>VPE5SCN22S : EMBOSSER FILE NOT OPEN<BR/>VPE5SCN23S : ACCOUNT FILE NOT OPEN<BR/>VPE5SCN24S : ACCOUNT NUMBER NOT FOUND<BR/>VPE5SCN25S : ERROR ACCESSING ACCOUNT FILE<BR/>VPE5SCN26S : CARD NUMBER NOT FOUND<BR/>VPE5SCN27S : ERROR ACCESSING EMBOSSER FILE<BR/>VPE5SCN28S : CANNOT RETURN THE MULTI SCHEME CARDS AS THE INPUT IS AN ACCOUNT<BR/>VPE5SCN29S : CANNOT RETURN THE INPUT CARD DETAIL AS THE INPUT IS AN ACCOUNT<BR/>VPE5SCN30S : ACCOUN NUMBER NOT FOUND IN BASE AND EMBOSSER CROSS REF FILE<BR/>VPE5SCN31S : RECORD NOT FOUND IN CHIP EMBOSSER FIL
*/
type CardsListbyCardV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CardsListbyCardV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardsListbyCard][%d] cardsListbyCardV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CardsListbyCardV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardsListbyCardV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

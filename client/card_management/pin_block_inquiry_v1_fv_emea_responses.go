// Code generated by go-swagger; DO NOT EDIT.

package card_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// PinBlockInquiryV1FvEmeaReader is a Reader for the PinBlockInquiryV1FvEmea structure.
type PinBlockInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PinBlockInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPinBlockInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPinBlockInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPinBlockInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPinBlockInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPinBlockInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPinBlockInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewPinBlockInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewPinBlockInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewPinBlockInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewPinBlockInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPinBlockInquiryV1FvEmeaOK creates a PinBlockInquiryV1FvEmeaOK with default headers values
func NewPinBlockInquiryV1FvEmeaOK() *PinBlockInquiryV1FvEmeaOK {
	return &PinBlockInquiryV1FvEmeaOK{}
}

/*PinBlockInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type PinBlockInquiryV1FvEmeaOK struct {
	Payload *models.PinBlockInquiryResponse
}

func (o *PinBlockInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaOK) GetPayload() *models.PinBlockInquiryResponse {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PinBlockInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinBlockInquiryV1FvEmeaBadRequest creates a PinBlockInquiryV1FvEmeaBadRequest with default headers values
func NewPinBlockInquiryV1FvEmeaBadRequest() *PinBlockInquiryV1FvEmeaBadRequest {
	return &PinBlockInquiryV1FvEmeaBadRequest{}
}

/*PinBlockInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type PinBlockInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *PinBlockInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinBlockInquiryV1FvEmeaUnauthorized creates a PinBlockInquiryV1FvEmeaUnauthorized with default headers values
func NewPinBlockInquiryV1FvEmeaUnauthorized() *PinBlockInquiryV1FvEmeaUnauthorized {
	return &PinBlockInquiryV1FvEmeaUnauthorized{}
}

/*PinBlockInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type PinBlockInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *PinBlockInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinBlockInquiryV1FvEmeaForbidden creates a PinBlockInquiryV1FvEmeaForbidden with default headers values
func NewPinBlockInquiryV1FvEmeaForbidden() *PinBlockInquiryV1FvEmeaForbidden {
	return &PinBlockInquiryV1FvEmeaForbidden{}
}

/*PinBlockInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type PinBlockInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *PinBlockInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinBlockInquiryV1FvEmeaNotFound creates a PinBlockInquiryV1FvEmeaNotFound with default headers values
func NewPinBlockInquiryV1FvEmeaNotFound() *PinBlockInquiryV1FvEmeaNotFound {
	return &PinBlockInquiryV1FvEmeaNotFound{}
}

/*PinBlockInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type PinBlockInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *PinBlockInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinBlockInquiryV1FvEmeaTooManyRequests creates a PinBlockInquiryV1FvEmeaTooManyRequests with default headers values
func NewPinBlockInquiryV1FvEmeaTooManyRequests() *PinBlockInquiryV1FvEmeaTooManyRequests {
	return &PinBlockInquiryV1FvEmeaTooManyRequests{}
}

/*PinBlockInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type PinBlockInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *PinBlockInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPinBlockInquiryV1FvEmeaStatus452 creates a PinBlockInquiryV1FvEmeaStatus452 with default headers values
func NewPinBlockInquiryV1FvEmeaStatus452() *PinBlockInquiryV1FvEmeaStatus452 {
	return &PinBlockInquiryV1FvEmeaStatus452{}
}

/*PinBlockInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type PinBlockInquiryV1FvEmeaStatus452 struct {
}

func (o *PinBlockInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaStatus452 ", 452)
}

func (o *PinBlockInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPinBlockInquiryV1FvEmeaStatus453 creates a PinBlockInquiryV1FvEmeaStatus453 with default headers values
func NewPinBlockInquiryV1FvEmeaStatus453() *PinBlockInquiryV1FvEmeaStatus453 {
	return &PinBlockInquiryV1FvEmeaStatus453{}
}

/*PinBlockInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type PinBlockInquiryV1FvEmeaStatus453 struct {
}

func (o *PinBlockInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaStatus453 ", 453)
}

func (o *PinBlockInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPinBlockInquiryV1FvEmeaStatus455 creates a PinBlockInquiryV1FvEmeaStatus455 with default headers values
func NewPinBlockInquiryV1FvEmeaStatus455() *PinBlockInquiryV1FvEmeaStatus455 {
	return &PinBlockInquiryV1FvEmeaStatus455{}
}

/*PinBlockInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type PinBlockInquiryV1FvEmeaStatus455 struct {
}

func (o *PinBlockInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaStatus455 ", 455)
}

func (o *PinBlockInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPinBlockInquiryV1FvEmeaStatus465 creates a PinBlockInquiryV1FvEmeaStatus465 with default headers values
func NewPinBlockInquiryV1FvEmeaStatus465() *PinBlockInquiryV1FvEmeaStatus465 {
	return &PinBlockInquiryV1FvEmeaStatus465{}
}

/*PinBlockInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SPXZ1S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SPXZ2S : SERVICE INPUT TO CARD UPDATE SERVICE IS INCORRECT LENGTH<BR/>VPL5SPXZ4S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SPXZ5S : APPLICATION IN NO-PROCESSING STATUS RE-TRY<BR/>VPL5SPXZ6S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SPXZ7S : SERVICE INPUT TO CARD UPDATE SERVICE IS AN INCORRECT LENGTH<BR/>VPL5SPX01S : INPUT CARD NUMBER IS NOT NUMERIC<BR/>VPL5SPX02S : KEY ASSOCIATION MUST BE GREATER THAN SPACES<BR/>VPL5SPX03S : EXPIRY DATE INVALID<BR/>VPL5SPX04S : ORGANIZATION NUMBER NOT FOUND IN ARGETOL<BR/>VPL5SPX05S : SYSTEM RECORD NOT ON FILE<BR/>VPL5SPX06S : ORGANIZATION RECORD FILE OPEN<BR/>VPL5SPX07S : ORGANIZATION RECORD NOT FOUND<BR/>VPL5SPX08S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SPX09S : REQUESTED ORG NUMBER IS NOT FOUND<BR/>VPL5SPX10S : APPLICATION IN NO-PROCESSING STATUS RE-TRY<BR/>VPL5SPX11S : LOGO BASE RECORD NOT FOUND<BR/>VPL5SPX12S : WEB OPTION IS NOT AVAILABLE FOR USER<BR/>VPL5SPX13S : EMBOSSER RECORD FILE IS NOT OPEN<BR/>VPL5SPX14S : EMBOSSER RECORD NOT FOUND<BR/>VPL5SPX15S : ACCOUNT DETAILS RECORD FILE IS NOT OPEN<BR/>VPL5SPX16S : ACCOUNT DETAILS RECORD NOT FOUND<BR/>VPL5SPX17S : CUSTOMER DETAILS RECORD FILE IS NOT OPEN<BR/>VPL5SPX18S : CUSTOMER DETAILS RECORD NOT FOUND<BR/>VPL5SPX22S : INPUT  DATE OF BIRTH NOT MATCHING OR NOT NUMERIC<BR/>VPL5SPX23S : INPUT POSTAL CODE NOT MATCHING OR EQUAL TO SPACES<BR/>VPL5SPX24S : INPUT MEMORABLE WORD NOT MACHING WITH CUSTOMER RECORD<BR/>VPL5SPX25S : INPUT SSN IS NOT MATCHING WITH USER SSN<BR/>VPL5SPX26S : INPUT MOBILE NUMBER NOT MATCHING WITH USER MOBILE NUMBER<BR/>VPL5SPX27S : INPUT HOME NUMBER NOT MATCHING WITH USER HOME NUMBER<BR/>VPL5SPX28S : INPUT UNIQUE ID NOT MATCHING WITH USER UNIQUE ID<BR/>VPL5SPX29S : INPUT EMBOSSED NAME NOT MATCHING WITH USER EMBOSSING NAME<BR/>VPL5SPX30S : INPUT BANK SORT CODE NOT MATCHING WITH USER ACCT DETAILS<BR/>VPL5SPX31S : INPUT CURRENT ACCT NUMBER NOT MATCHING WITH ACCT DETAILS<BR/>VPL5SPX32S : INVALID PIN BLOCK<BR/>VPL5SPX33S : PIN BLOCK ERROR<BR/>VPL5SPX34S : PIN BLOCK KEY ERROR<BR/>VPL5SPX35S : CHIP CARD NUMBER NOT FOUND<BR/>VPL5SPX36S : CARD SEC CD VALIDATION FAILED-INCORRECT EXP DT OR SEC CD<BR/>VPL5SPX37S : HSM RESP- ERROR WITH MASTER KEY<BR/>VPL5SPX38S : HSM CALL FAILE
*/
type PinBlockInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *PinBlockInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/pinBlockInquiry][%d] pinBlockInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *PinBlockInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *PinBlockInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

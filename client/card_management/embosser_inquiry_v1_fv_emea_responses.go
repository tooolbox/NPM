// Code generated by go-swagger; DO NOT EDIT.

package card_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// EmbosserInquiryV1FvEmeaReader is a Reader for the EmbosserInquiryV1FvEmea structure.
type EmbosserInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmbosserInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEmbosserInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEmbosserInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEmbosserInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEmbosserInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEmbosserInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEmbosserInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewEmbosserInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewEmbosserInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewEmbosserInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewEmbosserInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEmbosserInquiryV1FvEmeaOK creates a EmbosserInquiryV1FvEmeaOK with default headers values
func NewEmbosserInquiryV1FvEmeaOK() *EmbosserInquiryV1FvEmeaOK {
	return &EmbosserInquiryV1FvEmeaOK{}
}

/*EmbosserInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type EmbosserInquiryV1FvEmeaOK struct {
	Payload *models.EmbosserInquiryResponse
}

func (o *EmbosserInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaOK) GetPayload() *models.EmbosserInquiryResponse {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EmbosserInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmbosserInquiryV1FvEmeaBadRequest creates a EmbosserInquiryV1FvEmeaBadRequest with default headers values
func NewEmbosserInquiryV1FvEmeaBadRequest() *EmbosserInquiryV1FvEmeaBadRequest {
	return &EmbosserInquiryV1FvEmeaBadRequest{}
}

/*EmbosserInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type EmbosserInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *EmbosserInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmbosserInquiryV1FvEmeaUnauthorized creates a EmbosserInquiryV1FvEmeaUnauthorized with default headers values
func NewEmbosserInquiryV1FvEmeaUnauthorized() *EmbosserInquiryV1FvEmeaUnauthorized {
	return &EmbosserInquiryV1FvEmeaUnauthorized{}
}

/*EmbosserInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type EmbosserInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *EmbosserInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmbosserInquiryV1FvEmeaForbidden creates a EmbosserInquiryV1FvEmeaForbidden with default headers values
func NewEmbosserInquiryV1FvEmeaForbidden() *EmbosserInquiryV1FvEmeaForbidden {
	return &EmbosserInquiryV1FvEmeaForbidden{}
}

/*EmbosserInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type EmbosserInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *EmbosserInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmbosserInquiryV1FvEmeaNotFound creates a EmbosserInquiryV1FvEmeaNotFound with default headers values
func NewEmbosserInquiryV1FvEmeaNotFound() *EmbosserInquiryV1FvEmeaNotFound {
	return &EmbosserInquiryV1FvEmeaNotFound{}
}

/*EmbosserInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type EmbosserInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *EmbosserInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmbosserInquiryV1FvEmeaTooManyRequests creates a EmbosserInquiryV1FvEmeaTooManyRequests with default headers values
func NewEmbosserInquiryV1FvEmeaTooManyRequests() *EmbosserInquiryV1FvEmeaTooManyRequests {
	return &EmbosserInquiryV1FvEmeaTooManyRequests{}
}

/*EmbosserInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type EmbosserInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *EmbosserInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmbosserInquiryV1FvEmeaStatus452 creates a EmbosserInquiryV1FvEmeaStatus452 with default headers values
func NewEmbosserInquiryV1FvEmeaStatus452() *EmbosserInquiryV1FvEmeaStatus452 {
	return &EmbosserInquiryV1FvEmeaStatus452{}
}

/*EmbosserInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type EmbosserInquiryV1FvEmeaStatus452 struct {
}

func (o *EmbosserInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaStatus452 ", 452)
}

func (o *EmbosserInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmbosserInquiryV1FvEmeaStatus453 creates a EmbosserInquiryV1FvEmeaStatus453 with default headers values
func NewEmbosserInquiryV1FvEmeaStatus453() *EmbosserInquiryV1FvEmeaStatus453 {
	return &EmbosserInquiryV1FvEmeaStatus453{}
}

/*EmbosserInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type EmbosserInquiryV1FvEmeaStatus453 struct {
}

func (o *EmbosserInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaStatus453 ", 453)
}

func (o *EmbosserInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmbosserInquiryV1FvEmeaStatus455 creates a EmbosserInquiryV1FvEmeaStatus455 with default headers values
func NewEmbosserInquiryV1FvEmeaStatus455() *EmbosserInquiryV1FvEmeaStatus455 {
	return &EmbosserInquiryV1FvEmeaStatus455{}
}

/*EmbosserInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type EmbosserInquiryV1FvEmeaStatus455 struct {
}

func (o *EmbosserInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaStatus455 ", 455)
}

func (o *EmbosserInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmbosserInquiryV1FvEmeaStatus465 creates a EmbosserInquiryV1FvEmeaStatus465 with default headers values
func NewEmbosserInquiryV1FvEmeaStatus465() *EmbosserInquiryV1FvEmeaStatus465 {
	return &EmbosserInquiryV1FvEmeaStatus465{}
}

/*EmbosserInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE1SCI01S : SERVICE INPUT TO CorI SERVICE IS AN INCORRECT LENGTH<BR/>VPE1SCI03S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE1SCI09S : REQUESTED ORGANIZATION NUMBER IS NOT FOUND<BR/>VPE1SCI10S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE5SCI01E : ORGANIZATION NUMBER MUST BE NUMERIC AND VALID VALUES ARE 001-998<BR/>VPE5SCI02E : INVALID LOCALorFOREIGN IND SPECIFIED-VALID VALUES ARE SPACE 0 OR 1<BR/>VPE5SCI02S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE5SCI03E : INPUT CARD NUMBER IS NOT NUMERIC<BR/>VPE5SCI03S : ORGANIZATION NUMBER NOT DETERMINED<BR/>VPE5SCI04E : CARD SEQUENCE IS NOT NUMERIC<BR/>VPE5SCI04S : BASE SEGMENT FILE READ ERROR<BR/>VPE5SCI05E : ACCOUNTorCARD NUMBER IS NOT NUMERIC OR EQUALS SPACES<BR/>VPE5SCI05S : REQUESTED CARD or ACCOUNT NUMBER IS NOT FOUND<BR/>VPE5SCI06E : CARD SEQUENCE NUMBER IS NOT NUMERIC OR EQUALS SPACES<BR/>VPE5SCI06S : LOGO RECORD NOT FOUND<BR/>VPE5SCI07E : INVALID LOCALorFOREIGN IND SPECIFIED-VALID VALUES ARE SPACE 0 OR 1<BR/>VPE5SCI07S : ORG RECORD NOT FOUND<BR/>VPE5SCI08S : FOREIGN ORG RECORD NOT FOUND<BR/>VPE5SCI09S : EMBOSSER RECORD NOT FOUND<BR/>VPE5SCI11S : ORGANIZATION FILE NOT OPEN<BR/>VPE5SCI12S : ORGANIZATION NUMBER NOT FOUND<BR/>VPE5SCI13S : CARD NUMBER NOT FOUND<BR/>VPE5SCI14S : ACCOUNT FILE NOT OPEN<BR/>VPE5SCI15S : CARDorACCOUNT NUMBER NOT FOUND<BR/>VPE5SCI16S : ERROR ACCESSING ACCOUNT FILE<BR/>VPE5SCI17S : LOGO FILE NOT OPEN<BR/>VPE5SCI18S : LOGO NUMBER NOT FOUND<BR/>VPE5SCI19S : CHIP CARD NUMBER NOT FOUN
*/
type EmbosserInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *EmbosserInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/embosserInquiry][%d] embosserInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *EmbosserInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *EmbosserInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

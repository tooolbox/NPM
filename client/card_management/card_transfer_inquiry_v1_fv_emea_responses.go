// Code generated by go-swagger; DO NOT EDIT.

package card_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// CardTransferInquiryV1FvEmeaReader is a Reader for the CardTransferInquiryV1FvEmea structure.
type CardTransferInquiryV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CardTransferInquiryV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCardTransferInquiryV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCardTransferInquiryV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCardTransferInquiryV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCardTransferInquiryV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCardTransferInquiryV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCardTransferInquiryV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewCardTransferInquiryV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewCardTransferInquiryV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewCardTransferInquiryV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewCardTransferInquiryV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCardTransferInquiryV1FvEmeaOK creates a CardTransferInquiryV1FvEmeaOK with default headers values
func NewCardTransferInquiryV1FvEmeaOK() *CardTransferInquiryV1FvEmeaOK {
	return &CardTransferInquiryV1FvEmeaOK{}
}

/*CardTransferInquiryV1FvEmeaOK handles this case with default header values.

successful operation
*/
type CardTransferInquiryV1FvEmeaOK struct {
	Payload *models.CardTransferInquiryResponse
}

func (o *CardTransferInquiryV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaOK) GetPayload() *models.CardTransferInquiryResponse {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CardTransferInquiryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardTransferInquiryV1FvEmeaBadRequest creates a CardTransferInquiryV1FvEmeaBadRequest with default headers values
func NewCardTransferInquiryV1FvEmeaBadRequest() *CardTransferInquiryV1FvEmeaBadRequest {
	return &CardTransferInquiryV1FvEmeaBadRequest{}
}

/*CardTransferInquiryV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type CardTransferInquiryV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *CardTransferInquiryV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardTransferInquiryV1FvEmeaUnauthorized creates a CardTransferInquiryV1FvEmeaUnauthorized with default headers values
func NewCardTransferInquiryV1FvEmeaUnauthorized() *CardTransferInquiryV1FvEmeaUnauthorized {
	return &CardTransferInquiryV1FvEmeaUnauthorized{}
}

/*CardTransferInquiryV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type CardTransferInquiryV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *CardTransferInquiryV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardTransferInquiryV1FvEmeaForbidden creates a CardTransferInquiryV1FvEmeaForbidden with default headers values
func NewCardTransferInquiryV1FvEmeaForbidden() *CardTransferInquiryV1FvEmeaForbidden {
	return &CardTransferInquiryV1FvEmeaForbidden{}
}

/*CardTransferInquiryV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type CardTransferInquiryV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *CardTransferInquiryV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardTransferInquiryV1FvEmeaNotFound creates a CardTransferInquiryV1FvEmeaNotFound with default headers values
func NewCardTransferInquiryV1FvEmeaNotFound() *CardTransferInquiryV1FvEmeaNotFound {
	return &CardTransferInquiryV1FvEmeaNotFound{}
}

/*CardTransferInquiryV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type CardTransferInquiryV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *CardTransferInquiryV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardTransferInquiryV1FvEmeaTooManyRequests creates a CardTransferInquiryV1FvEmeaTooManyRequests with default headers values
func NewCardTransferInquiryV1FvEmeaTooManyRequests() *CardTransferInquiryV1FvEmeaTooManyRequests {
	return &CardTransferInquiryV1FvEmeaTooManyRequests{}
}

/*CardTransferInquiryV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type CardTransferInquiryV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *CardTransferInquiryV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCardTransferInquiryV1FvEmeaStatus452 creates a CardTransferInquiryV1FvEmeaStatus452 with default headers values
func NewCardTransferInquiryV1FvEmeaStatus452() *CardTransferInquiryV1FvEmeaStatus452 {
	return &CardTransferInquiryV1FvEmeaStatus452{}
}

/*CardTransferInquiryV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type CardTransferInquiryV1FvEmeaStatus452 struct {
}

func (o *CardTransferInquiryV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaStatus452 ", 452)
}

func (o *CardTransferInquiryV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardTransferInquiryV1FvEmeaStatus453 creates a CardTransferInquiryV1FvEmeaStatus453 with default headers values
func NewCardTransferInquiryV1FvEmeaStatus453() *CardTransferInquiryV1FvEmeaStatus453 {
	return &CardTransferInquiryV1FvEmeaStatus453{}
}

/*CardTransferInquiryV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type CardTransferInquiryV1FvEmeaStatus453 struct {
}

func (o *CardTransferInquiryV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaStatus453 ", 453)
}

func (o *CardTransferInquiryV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardTransferInquiryV1FvEmeaStatus455 creates a CardTransferInquiryV1FvEmeaStatus455 with default headers values
func NewCardTransferInquiryV1FvEmeaStatus455() *CardTransferInquiryV1FvEmeaStatus455 {
	return &CardTransferInquiryV1FvEmeaStatus455{}
}

/*CardTransferInquiryV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type CardTransferInquiryV1FvEmeaStatus455 struct {
}

func (o *CardTransferInquiryV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaStatus455 ", 455)
}

func (o *CardTransferInquiryV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCardTransferInquiryV1FvEmeaStatus465 creates a CardTransferInquiryV1FvEmeaStatus465 with default headers values
func NewCardTransferInquiryV1FvEmeaStatus465() *CardTransferInquiryV1FvEmeaStatus465 {
	return &CardTransferInquiryV1FvEmeaStatus465{}
}

/*CardTransferInquiryV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL1S0100S : SERVICE REQUEST LENGTH ERROR                                     SERVICE INPUT FOR SERVICE IS AN INCORRECT LENGTH<BR/>VPL5S0002S : CMS FILE TABLE RECORD NOT FOUND                                  CMS FILE TABLE RECORD NOT FOUND<BR/>VPL5S0004E : INPUT CARD NUMBER IS NOT NUMERIC                                 INPUT CARD NUMBER IS NOT NUMERIC<BR/>VPL5S0006S : REQUESTED ORG NUMBER IS NOT FOUND                                USER IS NOT ALLOWED TO ACCESS THE ORG<BR/>VPL5S1000E : LOGO RECORD NOT FOUND<BR/>VPL5S1001E : LOGO RECORD INCOMPLETE<BR/>VPL5S1003E : CARD FRAUD PROCESSING IS NOT ALLOWED FOR THIS ACCOUNT<BR/>VPL5S1004E : CARD FRAUD PROCESSING IS NOT ALLOWED FOR THIS ACCOUNT<BR/>VPL5S1005E : NO ORGANIZATION RECORD ON FILE<BR/>VPL5S1006E : NO ACCOUNT RECORD ON FILE<BR/>VPL5S1007E : CANNOT TRANSFER ON A PURGED ACCOUNT<BR/>VPL5S1008E : CANNOT TRANSFER ON A CLOSED ACCOUNT<BR/>VPL5S1010E : CANNOT TRANSFER ON A CHARGE-OFF ACCOUNT<BR/>VPL5S1011E : CANNOT TRANSFER ON A NEW ACCOUNT<BR/>VPL5S1012E : CANNOT TRANSFER ON A CONVERSION ACCOUNT<BR/>VPL5S1013E : TRANSFER ALREADY IN PROGRESS<BR/>VPL5S1014E : CARD ALREADY TRANSFERRED - ONLY REVERSAL ALLOWED<BR/>VPL5S1015E : CARD CAN NOT BE REVERSED<BR/>VPL5S1016E : CANNOT TRANSFER ON COMPANY ACCOUNTS<BR/>VPL5S1020E : FUNCTION MUST BE T OR R<BR/>VPL5S1053E : DUAL ACCOUNT RECORD NOT ON FILE                                  DUAL ACCOUNT RECORD NOT ON FILE<BR/>VPL5S1054E : DUAL ACCOUNT RECORD - ADD PENDING                                DUAL ACCOUNT RECORD - ADD PENDING<BR/>VPL5S1055E : CANNOT TRANSFER PURGED ACCOUNT- DUAL ORG                         CANNOT TRANSFER PURGED ACCOUNT- DUAL ORG<BR/>VPL5S1056E : CANNOT TRANSFER CLOSED ACCOUNT- DUAL ORG                         CANNOT TRANSFER CLOSED ACCOUNT- DUAL ORG<BR/>VPL5S1057E : CANNOT TRANSFER CHARGEOFF ACCOUNT- DUAL ORG                      CANNOT TRANSFER CHARGEOFF ACCOUNT- DUAL ORG<BR/>VPL5S1058E : CANNOT TRANSFER NEW ACCOUNT - DUAL ORG                           CANNOT TRANSFER NEW ACCOUNT - DUAL ORG<BR/>VPL5S1059E : CANNOT TRANSFER CONVERSION ACCOUNT - DUAL ORG                    CANNOT TRANSFER CONVERSION ACCOUNT - DUAL ORG<BR/>VPL5S1060E : CANNOT TRANSFER COMPANY ACCOUNT - DUAL ORG                       CANNOT TRANSFER COMPANY ACCOUNT - DUAL ORG<BR/>VPL5S1068E : CARD TRANSFERorREVERSAL CAN ONLY BE PERFORMED ON THE LOCAL ORG    CARD TRANSFERorREVERSAL CAN ONLY BE PERFORMED ON THE LOCAL ORG<BR/>VPL5S1069E : NO EMBOSSER REC ON FILE FOR THE DUAL ORG                         NO EMBOSSER REC ON FILE FOR THE DUAL ORG<BR/>VPL5S1070E : THIS CARD IS NOT TRANSFERRED TO BE REVERSED                      THIS CARD IS NOT TRANSFERRED TO BE REVERSED<BR/>VPL5S1081E : REVERSAL NOT ALLOWED FOR THE LOGO<BR/>VPL5S1083E : TRANSFER NOT HAPPENED THRU ARXE OR REVERSAL NOT INITIATED<BR/>VPL5S1086E : ERROR IN ADDRESS VERIFICATION SERVICE ROUTINE<BR/>VPL5S9900S : RESOURCE IS UNAVAILABLE - CONTACT YOUR ADMINISTRATO
*/
type CardTransferInquiryV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *CardTransferInquiryV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/cardTransferInquiry][%d] cardTransferInquiryV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *CardTransferInquiryV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *CardTransferInquiryV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

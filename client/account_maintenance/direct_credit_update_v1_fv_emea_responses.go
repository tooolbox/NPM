// Code generated by go-swagger; DO NOT EDIT.

package account_maintenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// DirectCreditUpdateV1FvEmeaReader is a Reader for the DirectCreditUpdateV1FvEmea structure.
type DirectCreditUpdateV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectCreditUpdateV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectCreditUpdateV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectCreditUpdateV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDirectCreditUpdateV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectCreditUpdateV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDirectCreditUpdateV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDirectCreditUpdateV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewDirectCreditUpdateV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewDirectCreditUpdateV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewDirectCreditUpdateV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewDirectCreditUpdateV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDirectCreditUpdateV1FvEmeaOK creates a DirectCreditUpdateV1FvEmeaOK with default headers values
func NewDirectCreditUpdateV1FvEmeaOK() *DirectCreditUpdateV1FvEmeaOK {
	return &DirectCreditUpdateV1FvEmeaOK{}
}

/*DirectCreditUpdateV1FvEmeaOK handles this case with default header values.

successful operation
*/
type DirectCreditUpdateV1FvEmeaOK struct {
	Payload *models.DirectCreditUpdateResponse
}

func (o *DirectCreditUpdateV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaOK) GetPayload() *models.DirectCreditUpdateResponse {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DirectCreditUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectCreditUpdateV1FvEmeaBadRequest creates a DirectCreditUpdateV1FvEmeaBadRequest with default headers values
func NewDirectCreditUpdateV1FvEmeaBadRequest() *DirectCreditUpdateV1FvEmeaBadRequest {
	return &DirectCreditUpdateV1FvEmeaBadRequest{}
}

/*DirectCreditUpdateV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type DirectCreditUpdateV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *DirectCreditUpdateV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectCreditUpdateV1FvEmeaUnauthorized creates a DirectCreditUpdateV1FvEmeaUnauthorized with default headers values
func NewDirectCreditUpdateV1FvEmeaUnauthorized() *DirectCreditUpdateV1FvEmeaUnauthorized {
	return &DirectCreditUpdateV1FvEmeaUnauthorized{}
}

/*DirectCreditUpdateV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type DirectCreditUpdateV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *DirectCreditUpdateV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectCreditUpdateV1FvEmeaForbidden creates a DirectCreditUpdateV1FvEmeaForbidden with default headers values
func NewDirectCreditUpdateV1FvEmeaForbidden() *DirectCreditUpdateV1FvEmeaForbidden {
	return &DirectCreditUpdateV1FvEmeaForbidden{}
}

/*DirectCreditUpdateV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type DirectCreditUpdateV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *DirectCreditUpdateV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectCreditUpdateV1FvEmeaNotFound creates a DirectCreditUpdateV1FvEmeaNotFound with default headers values
func NewDirectCreditUpdateV1FvEmeaNotFound() *DirectCreditUpdateV1FvEmeaNotFound {
	return &DirectCreditUpdateV1FvEmeaNotFound{}
}

/*DirectCreditUpdateV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type DirectCreditUpdateV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *DirectCreditUpdateV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectCreditUpdateV1FvEmeaTooManyRequests creates a DirectCreditUpdateV1FvEmeaTooManyRequests with default headers values
func NewDirectCreditUpdateV1FvEmeaTooManyRequests() *DirectCreditUpdateV1FvEmeaTooManyRequests {
	return &DirectCreditUpdateV1FvEmeaTooManyRequests{}
}

/*DirectCreditUpdateV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type DirectCreditUpdateV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *DirectCreditUpdateV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectCreditUpdateV1FvEmeaStatus452 creates a DirectCreditUpdateV1FvEmeaStatus452 with default headers values
func NewDirectCreditUpdateV1FvEmeaStatus452() *DirectCreditUpdateV1FvEmeaStatus452 {
	return &DirectCreditUpdateV1FvEmeaStatus452{}
}

/*DirectCreditUpdateV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type DirectCreditUpdateV1FvEmeaStatus452 struct {
}

func (o *DirectCreditUpdateV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaStatus452 ", 452)
}

func (o *DirectCreditUpdateV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDirectCreditUpdateV1FvEmeaStatus453 creates a DirectCreditUpdateV1FvEmeaStatus453 with default headers values
func NewDirectCreditUpdateV1FvEmeaStatus453() *DirectCreditUpdateV1FvEmeaStatus453 {
	return &DirectCreditUpdateV1FvEmeaStatus453{}
}

/*DirectCreditUpdateV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type DirectCreditUpdateV1FvEmeaStatus453 struct {
}

func (o *DirectCreditUpdateV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaStatus453 ", 453)
}

func (o *DirectCreditUpdateV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDirectCreditUpdateV1FvEmeaStatus455 creates a DirectCreditUpdateV1FvEmeaStatus455 with default headers values
func NewDirectCreditUpdateV1FvEmeaStatus455() *DirectCreditUpdateV1FvEmeaStatus455 {
	return &DirectCreditUpdateV1FvEmeaStatus455{}
}

/*DirectCreditUpdateV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type DirectCreditUpdateV1FvEmeaStatus455 struct {
}

func (o *DirectCreditUpdateV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaStatus455 ", 455)
}

func (o *DirectCreditUpdateV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDirectCreditUpdateV1FvEmeaStatus465 creates a DirectCreditUpdateV1FvEmeaStatus465 with default headers values
func NewDirectCreditUpdateV1FvEmeaStatus465() *DirectCreditUpdateV1FvEmeaStatus465 {
	return &DirectCreditUpdateV1FvEmeaStatus465{}
}

/*DirectCreditUpdateV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPL5SDC01S : ORGANIZATION NUMBER COULD NOT BE DETERMINED<BR/>VPL5SDC02S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPL5SDC03E : ORGANIZATION NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPL5SDC04E : ACCOUNT OR CARD NUMBER REQUIRED<BR/>VPL5SDC05E : INVALID FOREIGN USE INDICATOR - VALID VALUES ARE SPACE 0 OR 1   INVALID FOREIGN USE INDICATOR SPECIFIED - VALID VALUES ARE       SPACE 0 OR 1<BR/>VPL5SDC06E : INVALID DIRECT CREDIT TYPE - VALUE VALUES ARE SPACE 0 OR 1<BR/>VPL5SDC07E : DC PLAN NUMBER IS NOT NUMERIC<BR/>VPL5SDC08E : DC EXPIRE DATE IS NOT NUMERIC<BR/>VPL5SDC09E : DC START DATE IS NOT NUMERIC<BR/>VPL5SDC10E : INVALID DC ACCOUNT TYPE - VALUE VALUES ARE D O           R S<BR/>VPL5SDC11E : DC ACH ACCOUNT IS REQUIRED<BR/>VPL5SDC12E : DC AMOUNT IS NOT NUMERIC<BR/>VPL5SDC13E : INVALID DC REQ DAY IND - VALUE VALUES ARE 0 -            4 6 - 9<BR/>VPL5SDC14E : INVALID DC REQUEST DAY - VALUE VALUES ARE 00 -            31<BR/>VPL5SDC15E : INVALID ON DEMAND DC TYPE - VALUE VALUES ARE D OR S<BR/>VPL5SDC16E : ON DEMAND ROUTING NUMBER IS NOT NUMERIC<BR/>VPL5SDC17S : REQUESTED CARDorACCOUNT NUMBER IS NOT FOUND<BR/>VPL5SDC18S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPL5SDC19S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SDC20S : FOREIGN ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SDC21S : ACCOUNT NUMBER NOT FOUND<BR/>VPL5SDC22S : LOGO NUMBER NOT FOUND<BR/>VPL5SDC23S : LOGO NOT SETUP FOR ACH PROCESSING<BR/>VPL5SDC24E : DC ACH PLAN NUMBER VALUE INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC25E : DC ACH PLAN NUMBER VALUE NOT ON FILE<BR/>VPL5SDC25S : PLAN MASTER NOT FOUND<BR/>VPL5SDC26E : DC ACH PLAN NUMBER TYPE IS NOT A RETAIL PLAN NUMBER<BR/>VPL5SDC27E : DC ACH RorT BANK ID VALUE INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC28E : DC ACH RorT BANK ID IS NOT A VALID NACHA FORMAT<BR/>VPL5SDC29E : DC RorT BANK ID MUST BE GREATER THAN ZEROS<BR/>VPL5SDC30E : DC ACH RorT BANK ID IS NOT A VALID NACHA FORMAT<BR/>VPL5SDC31E : DC ACH EXPIRE DATE INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC32E : DC ACH EXPIRE DATE IS NOT A VALID DATE<BR/>VPL5SDC33E : DC ACH EXPIRE DATE MUST BE GREATER OR EQUAL NEXT PROCESSING DATE<BR/>VPL5SDC34E : DC ACH START DATE INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC35E : DC ACH START DATE IS NOT A VALID DATE<BR/>VPL5SDC36E : DC ACH TYPE INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC37E : DC ACH TYPE INVALID VALUE VALID VALUES ARE D OR S<BR/>VPL5SDC38E : DC ACH REQUEST DAY IND INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC39E : DC ACH REQUEST DAY IND MUST BE 0 1 2 3 4<BR/>VPL5SDC40E : DC ACH REQUEST DAY IND MUST BE 0 OR 1<BR/>VPL5SDC41E : DC ACH ACCOUNT INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC42E : DC ACH ACCOUNT IS REQUIRED<BR/>VPL5SDC43E : DC ACH REQUEST DAY INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC44E : DC ON DEMAND TYPE INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC45E : DC ON DEMAND TYPE INVALID VALID VALUES ARE D OR S<BR/>VPL5SDC46E : DC ON DEMAND ACCOUNT NUMBER INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC47E : DC ON DEMAND ACCOUNT NUMBER IS REQUIRED<BR/>VPL5SDC48E : DC ON DEMAND RorT BANK ID INVALID FOR ACCOUNT TYPE<BR/>VPL5SDC49E : DC ON DEMAND RorT BANK ID IS NOT A VALID NACHA FORMAT<BR/>VPL5SDC50E : DC ON DEMAND RorT BANK ID IS NOT A VALID NACHA FORMAT<BR/>VPL5SDC51E : DC ON DEMAND RorT BANK ID MUST BE GREATER THAN ZEROS<BR/>VPL5SDC52E : DC ON DEMAND IBAN NOT VALID FOR ACCOUNT TYPE<BR/>VPL5SDC53E : LOGO NOT SETUP TO PROCESS ON DEMAND IBAN<BR/>VPL5SDC54E : DC ON DEMAND IBAN IS REQUIRED<BR/>VPL5SDC55E : DC ACH START DATE MUST BE LESS OR EQUAL DC ACH EXPIRE DATE<BR/>VPL5SDC56E : DC REQUEST DAY INDICATOR MUST EQUAL ZEROS<BR/>VPL5SDC57E : DC REQUEST DAY MUST BE BETWEEN 01 AND 31<BR/>VPL5SDC58E : DC REQUEST DAY MUST BE GREATER THAN ZEROS<BR/>VPL5SDC59E : DC ACH PLAN CAN'T BE ZEROES FOR RECUR DC TYPE<BR/>VPL5SDC60E : INVALID ON DEM BIC  ENTER ALPHABETICorNUMERIC<BR/>VPL5SDC61E : DC ON DEMAND IBAN NOT VALID FOR ACCOUNT TYPE<BR/>VPL5SDC62E : DD BIC SHOULD BE 8 OR 11 CHARACTERS IN LENGTH<BR/>VPL5SDC63E : DC IBAN IS INVALID FOR LOGO<BR/>VPL5SDC63W : ON DEMAND DC BANK ID DOES NOT PARTICIPATE IN FPS<BR/>VPL5SDCZ1S : SERVICE INPUT TO DC UPDATE SERVICE IS AN INCORRECT LENGTH<BR/>VPL5SDCZ2S : SERVICE INPUT TO DorC SERVICE IS AN INCORRECT LENGTH<BR/>VPL5SDCZ3S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SDCZ4S : ORGANIZATION NUMBER NOT FOUND<BR/>VPL5SDCZ5S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPL5SDCZ6S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPL5SDCZ7S : ORGANIZATION NUMBER COULD NOT BE DETERMINED<BR/>VPL5SDCZ8S : ACCOUNT NUMBER UNAVAILABLE<BR/>VPL5SDCZ9S : RELATIONSHIP FILE UNAVAILABL
*/
type DirectCreditUpdateV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *DirectCreditUpdateV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/directCreditUpdate][%d] directCreditUpdateV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *DirectCreditUpdateV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *DirectCreditUpdateV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

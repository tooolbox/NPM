// Code generated by go-swagger; DO NOT EDIT.

package account_maintenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/tooolbox/firstvision/models"
)

// WaiveFeesandInterestUpdateV1FvEmeaReader is a Reader for the WaiveFeesandInterestUpdateV1FvEmea structure.
type WaiveFeesandInterestUpdateV1FvEmeaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WaiveFeesandInterestUpdateV1FvEmeaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 452:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaStatus452()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 453:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaStatus453()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 455:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaStatus455()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 465:
		result := NewWaiveFeesandInterestUpdateV1FvEmeaStatus465()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewWaiveFeesandInterestUpdateV1FvEmeaOK creates a WaiveFeesandInterestUpdateV1FvEmeaOK with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaOK() *WaiveFeesandInterestUpdateV1FvEmeaOK {
	return &WaiveFeesandInterestUpdateV1FvEmeaOK{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaOK handles this case with default header values.

successful operation
*/
type WaiveFeesandInterestUpdateV1FvEmeaOK struct {
	Payload *models.WaiveFeesandInterestUpdateResponse
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaOK) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaOK  %+v", 200, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaOK) GetPayload() *models.WaiveFeesandInterestUpdateResponse {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WaiveFeesandInterestUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaBadRequest creates a WaiveFeesandInterestUpdateV1FvEmeaBadRequest with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaBadRequest() *WaiveFeesandInterestUpdateV1FvEmeaBadRequest {
	return &WaiveFeesandInterestUpdateV1FvEmeaBadRequest{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaBadRequest handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-003 - Invalid request. This could be because of invalid data in the request or header, among other reasons.<BR/>API-Sec-004 - Invalid request. The client_assertion JWT is invalid<BR/>API-Sec-013 - The JWT has an invalid expiry. Pleases end a request with a valid JWT
*/
type WaiveFeesandInterestUpdateV1FvEmeaBadRequest struct {
	Payload *models.FsErrorDetails
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaBadRequest) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaBadRequest  %+v", 400, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaBadRequest) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaUnauthorized creates a WaiveFeesandInterestUpdateV1FvEmeaUnauthorized with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaUnauthorized() *WaiveFeesandInterestUpdateV1FvEmeaUnauthorized {
	return &WaiveFeesandInterestUpdateV1FvEmeaUnauthorized{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaUnauthorized handles this case with default header values.

Unauthorized: Authorization failed due to missing or invalid credentials. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-001 - The auth header has invalid values. Please try with valid values<BR/>API-Sec-002 - The client id provided is invalid. Please try with valid client id<BR/>API-Sec-007 - The access token is invalid. It may have expired, or maybe incorrect
*/
type WaiveFeesandInterestUpdateV1FvEmeaUnauthorized struct {
	Payload *models.FsErrorDetails
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaUnauthorized  %+v", 401, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaUnauthorized) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaForbidden creates a WaiveFeesandInterestUpdateV1FvEmeaForbidden with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaForbidden() *WaiveFeesandInterestUpdateV1FvEmeaForbidden {
	return &WaiveFeesandInterestUpdateV1FvEmeaForbidden{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaForbidden handles this case with default header values.

Forbidden: Insufficient access for requested operation. <BR/>Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-006 - Replay attack detected. Please try again with valid data<BR/>API-Sec-008 - Mismatch in scope. The access token does not have the permission to access this resource
*/
type WaiveFeesandInterestUpdateV1FvEmeaForbidden struct {
	Payload *models.FsErrorDetails
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaForbidden) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaForbidden  %+v", 403, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaForbidden) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaNotFound creates a WaiveFeesandInterestUpdateV1FvEmeaNotFound with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaNotFound() *WaiveFeesandInterestUpdateV1FvEmeaNotFound {
	return &WaiveFeesandInterestUpdateV1FvEmeaNotFound{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaNotFound handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-005 - Resource not found
*/
type WaiveFeesandInterestUpdateV1FvEmeaNotFound struct {
	Payload *models.FsErrorDetails
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaNotFound) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaNotFound  %+v", 404, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaNotFound) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaTooManyRequests creates a WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaTooManyRequests() *WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests {
	return &WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests handles this case with default header values.

Below are the error codes you can expect when connecting over internet:<BR/><BR/>API-Sec-009 - You have exceeded the App level quota<BR/>API-Sec-010 - You have exceeded the Developer level quota<BR/>API-Sec-011 - You have exceeded the Product level quota<BR/>API-Sec-012 - Too many requests for this API. Please try after sometime
*/
type WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests struct {
	Payload *models.FsErrorDetails
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaTooManyRequests  %+v", 429, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaStatus452 creates a WaiveFeesandInterestUpdateV1FvEmeaStatus452 with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaStatus452() *WaiveFeesandInterestUpdateV1FvEmeaStatus452 {
	return &WaiveFeesandInterestUpdateV1FvEmeaStatus452{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaStatus452 handles this case with default header values.

System Exception: Internal processes not related to client interaction with application are the cause of the failure
*/
type WaiveFeesandInterestUpdateV1FvEmeaStatus452 struct {
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus452) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaStatus452 ", 452)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus452) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaStatus453 creates a WaiveFeesandInterestUpdateV1FvEmeaStatus453 with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaStatus453() *WaiveFeesandInterestUpdateV1FvEmeaStatus453 {
	return &WaiveFeesandInterestUpdateV1FvEmeaStatus453{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaStatus453 handles this case with default header values.

Validation Exception: The request failed validation, modify the request and resubmit
*/
type WaiveFeesandInterestUpdateV1FvEmeaStatus453 struct {
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus453) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaStatus453 ", 453)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus453) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaStatus455 creates a WaiveFeesandInterestUpdateV1FvEmeaStatus455 with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaStatus455() *WaiveFeesandInterestUpdateV1FvEmeaStatus455 {
	return &WaiveFeesandInterestUpdateV1FvEmeaStatus455{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaStatus455 handles this case with default header values.

ODS Error Exception: ODS returned a message with transaction status ERROR
*/
type WaiveFeesandInterestUpdateV1FvEmeaStatus455 struct {
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus455) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaStatus455 ", 455)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus455) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWaiveFeesandInterestUpdateV1FvEmeaStatus465 creates a WaiveFeesandInterestUpdateV1FvEmeaStatus465 with default headers values
func NewWaiveFeesandInterestUpdateV1FvEmeaStatus465() *WaiveFeesandInterestUpdateV1FvEmeaStatus465 {
	return &WaiveFeesandInterestUpdateV1FvEmeaStatus465{}
}

/*WaiveFeesandInterestUpdateV1FvEmeaStatus465 handles this case with default header values.

Backend Response Code and message in odsMessages field: <BR/><BR/>VPE5SWFZ1S : SERVICE COULD NOT OBTAIN STORAGE AREA<BR/>VPE5SWFZ2S : SERVICE INPUT TO ACCOUNT WAIVE FEE SERVICE IS AN INCORRECT LENGTH<BR/>VPE5SWFZ3S : FILE TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE5SWFZ4S : ORGANIZATION COULD NOT BE DETERMINED FROM ACCOUNT<BR/>VPE5SWFZ5S : ORGANIZATION COULD NOT BE DETERMINED<BR/>VPE5SWFZ6S : FILE-TABLE USED BY THIS SERVICE IS NOT FOUND<BR/>VPE5SWF02S : APPLICATION IN NO-PROCESSING STATUS RE-TRY IN A FEW MINUTES<BR/>VPE5SWF03E : ORGANIZATION NUMBER MUST BE NUMERIC AND VALID VALUES ARE 000-998<BR/>VPE5SWF04E : ACCOUNT NUMBER IS NOT NUMERIC OR EQUAL SPACES<BR/>VPE5SWF05E : INVALID FOREIGN USE INDICATOR - VALID VALUES ARE SPACE 0 OR 1<BR/>VPE5SWF06E : INVALID REQUEST TYPE  VALID VALUES ARE 0 1 OR 2<BR/>VPE5SWF07S : FILE TABLE USED BY THIS SERVICE IS MISSING<BR/>VPE5SWF08S : ORG RECORD IN ADD PENDING STATUS<BR/>VPE5SWF09S : ORG RECORD IN ADD PENDING STATUS<BR/>VPE5SWF10S : BASE SEGMENT RECORD NOT FOUND<BR/>VPE5SWF11S : ACCOUNT IS NOT PREPAID AND UPDATE REQUEST IS FOR PREPAID<BR/>VPE5SWF12S : LOGO RECORD NOT FOUND<BR/>VPE5SWF13I : NO FIELDS UPDATED ALL HAVE SAME VALUES<BR/>VPE5SWF14E : INVALID WAIVE INTR CHG INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF15E : INVALID WAIVE LATE CHG INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF16E : INVALID WAIVE LATE NOTC INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF17E : INVALID WAIVE FEE CHG INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF18E : INVALID WAIVE LTR CHG INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF19E : INVALID WAIVE OVLM INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF20E : INVALID WAIVE OVLM NOTC INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF21E : INVALID WAIVE NSF FEE INDICATOR VALID VALUES ARE 0123456<BR/>VPE5SWF22E : INVALID WAIVE SVC CHG INDICATOR VALID VALUES ARE 0123456<BR/>VPE5SWF23E : INVALID WAIVE CASH ADV FEE INDICATOR VALID VALUES ARE 0123456<BR/>VPE5SWF24E : INVALID WAIVE USER FEE 1 INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF25E : INVALID WAIVE USER FEE 2 INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF26E : INVALID WAIVE USER FEE 3 INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF27E : INVALID WAIVE USER FEE 4 INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF28E : INVALID WAIVE USER FEE 5 INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF29E : INVALID WAIVE USER FEE 6 INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF30E : INVALID WAIVE CARD FEE INDICATOR VALID VALUES ARE 01456<BR/>VPE5SWF31E : INVALID WAIVE DORM FEE INDICATOR  VALID VALUES ARE 0 OR 1<BR/>VPE5SWF32E : INVALID WAIVE REFUND INDICATOR  VALID VALUES ARE 0 OR 1<BR/>VPE5SWF33E : INVALID WAIVE STMT FEE INDICATOR  VALID VALUES ARE 0 OR 1<BR/>VPE5SWF34E : INVALID WAIVE TXN FEE INDICATOR  VALID VALUES ARE 0 OR 1<BR/>VPE5SWF35E : INVAILD CYCLE SPEND FEE INDICATOR - VALID VALUES ARE 0 OR 1<BR/>VPE5SWF36E : VALID VALUES ARE 0001 TO 99<BR/>VPE5SWF37E : VALID VALUES ARE W R AND SPACES<BR/>VPE5SWF38E : FOREX FEE VALUE MUST BE 98 WHEN FOREX FEE WAIVE DATES ENTRD<BR/>VPE5SWF39E : INVALID WAIVE SUPP MEM FEE INDICATOR VALID VALUES ARE 0 OR 1<BR/>VPE5SWF40E : INVALID WAIVE TAX CALC INDICATOR VALID VALUES ARE 0 OR 1<BR/>VPE5SWF41E : FOREX FEE WAIVE START DATE MUST BE A VALID DATE<BR/>VPE5SWF42E : FOREX FEE WAIVE START DATE IS NOT NUMERIC<BR/>VPE5SWF43E : FOREX FEE WAIVE EXPIR DATE MUST BE A VALID DATE<BR/>VPE5SWF44E : FOREX FEE WAIVE EXPIR DATE IS NOT NUMERIC<BR/>VPE5SWF45E : FOREX FEE WAIVE DATES MUST BE ENTRD WHEN FOREX FEE VALUE IS 98<BR/>VPE5SWF46E : FOREX FEE WAIVE START AND EXPIR DATE MUST BE GREATER THAN OR EQUAL TO CURRENT DATE<BR/>VPE5SWF47E : FOREX FEE WAIVE EXPIR DATE MUST BE GREATER THAN START DAT
*/
type WaiveFeesandInterestUpdateV1FvEmeaStatus465 struct {
	Payload *models.FsErrorDetails
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus465) Error() string {
	return fmt.Sprintf("[POST /fv_emea/v1/waiveFeesandInterestUpdate][%d] waiveFeesandInterestUpdateV1FvEmeaStatus465  %+v", 465, o.Payload)
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus465) GetPayload() *models.FsErrorDetails {
	return o.Payload
}

func (o *WaiveFeesandInterestUpdateV1FvEmeaStatus465) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FsErrorDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

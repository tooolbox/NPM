// Package fiserv provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package fiserv

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LookupAccount request  with any body
	LookupAccountWithBody(ctx context.Context, params *LookupAccountParams, contentType string, body io.Reader) (*http.Response, error)

	LookupAccount(ctx context.Context, params *LookupAccountParams, body LookupAccountJSONRequestBody) (*http.Response, error)

	// VerifyAccount request  with any body
	VerifyAccountWithBody(ctx context.Context, params *VerifyAccountParams, contentType string, body io.Reader) (*http.Response, error)

	VerifyAccount(ctx context.Context, params *VerifyAccountParams, body VerifyAccountJSONRequestBody) (*http.Response, error)

	// PostAuthenticationAccessTokens request  with any body
	PostAuthenticationAccessTokensWithBody(ctx context.Context, params *PostAuthenticationAccessTokensParams, contentType string, body io.Reader) (*http.Response, error)

	PostAuthenticationAccessTokens(ctx context.Context, params *PostAuthenticationAccessTokensParams, body PostAuthenticationAccessTokensJSONRequestBody) (*http.Response, error)

	// CardInfoLookup request  with any body
	CardInfoLookupWithBody(ctx context.Context, params *CardInfoLookupParams, contentType string, body io.Reader) (*http.Response, error)

	CardInfoLookup(ctx context.Context, params *CardInfoLookupParams, body CardInfoLookupJSONRequestBody) (*http.Response, error)

	// VerifyCard request  with any body
	VerifyCardWithBody(ctx context.Context, params *VerifyCardParams, contentType string, body io.Reader) (*http.Response, error)

	VerifyCard(ctx context.Context, params *VerifyCardParams, body VerifyCardJSONRequestBody) (*http.Response, error)

	// GetExchangeRate request  with any body
	GetExchangeRateWithBody(ctx context.Context, params *GetExchangeRateParams, contentType string, body io.Reader) (*http.Response, error)

	GetExchangeRate(ctx context.Context, params *GetExchangeRateParams, body GetExchangeRateJSONRequestBody) (*http.Response, error)

	// PostFraudClientRegistration request  with any body
	PostFraudClientRegistrationWithBody(ctx context.Context, params *PostFraudClientRegistrationParams, contentType string, body io.Reader) (*http.Response, error)

	PostFraudClientRegistration(ctx context.Context, params *PostFraudClientRegistrationParams, body PostFraudClientRegistrationJSONRequestBody) (*http.Response, error)

	// PostFraudPaymentRegistration request  with any body
	PostFraudPaymentRegistrationWithBody(ctx context.Context, params *PostFraudPaymentRegistrationParams, contentType string, body io.Reader) (*http.Response, error)

	PostFraudPaymentRegistration(ctx context.Context, params *PostFraudPaymentRegistrationParams, body PostFraudPaymentRegistrationJSONRequestBody) (*http.Response, error)

	// ScoreOnly request  with any body
	ScoreOnlyWithBody(ctx context.Context, params *ScoreOnlyParams, contentType string, body io.Reader) (*http.Response, error)

	ScoreOnly(ctx context.Context, params *ScoreOnlyParams, body ScoreOnlyJSONRequestBody) (*http.Response, error)

	// OrderInquiry request
	OrderInquiry(ctx context.Context, orderId OrderIdParam, params *OrderInquiryParams) (*http.Response, error)

	// SubmitSecondaryTransactionFromOrder request  with any body
	SubmitSecondaryTransactionFromOrderWithBody(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, contentType string, body io.Reader) (*http.Response, error)

	SubmitSecondaryTransactionFromOrder(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, body SubmitSecondaryTransactionFromOrderJSONRequestBody) (*http.Response, error)

	// CreatePaymentSchedule request  with any body
	CreatePaymentScheduleWithBody(ctx context.Context, params *CreatePaymentScheduleParams, contentType string, body io.Reader) (*http.Response, error)

	CreatePaymentSchedule(ctx context.Context, params *CreatePaymentScheduleParams, body CreatePaymentScheduleJSONRequestBody) (*http.Response, error)

	// CancelPaymentSchedule request
	CancelPaymentSchedule(ctx context.Context, orderId OrderIdParam, params *CancelPaymentScheduleParams) (*http.Response, error)

	// InquiryPaymentSchedule request
	InquiryPaymentSchedule(ctx context.Context, orderId OrderIdParam, params *InquiryPaymentScheduleParams) (*http.Response, error)

	// UpdatePaymentSchedule request  with any body
	UpdatePaymentScheduleWithBody(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, contentType string, body io.Reader) (*http.Response, error)

	UpdatePaymentSchedule(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, body UpdatePaymentScheduleJSONRequestBody) (*http.Response, error)

	// UpdatePaymentToken request  with any body
	UpdatePaymentTokenWithBody(ctx context.Context, params *UpdatePaymentTokenParams, contentType string, body io.Reader) (*http.Response, error)

	UpdatePaymentToken(ctx context.Context, params *UpdatePaymentTokenParams, body UpdatePaymentTokenJSONRequestBody) (*http.Response, error)

	// CreatePaymentToken request  with any body
	CreatePaymentTokenWithBody(ctx context.Context, params *CreatePaymentTokenParams, contentType string, body io.Reader) (*http.Response, error)

	CreatePaymentToken(ctx context.Context, params *CreatePaymentTokenParams, body CreatePaymentTokenJSONRequestBody) (*http.Response, error)

	// DeletePaymentToken request
	DeletePaymentToken(ctx context.Context, tokenId TokenIdParam, params *DeletePaymentTokenParams) (*http.Response, error)

	// GetPaymentTokenDetails request
	GetPaymentTokenDetails(ctx context.Context, tokenId TokenIdParam, params *GetPaymentTokenDetailsParams) (*http.Response, error)

	// DeletePaymentUrl request
	DeletePaymentUrl(ctx context.Context, params *DeletePaymentUrlParams) (*http.Response, error)

	// PaymentUrlDetail request
	PaymentUrlDetail(ctx context.Context, params *PaymentUrlDetailParams) (*http.Response, error)

	// CreatePaymentUrl request  with any body
	CreatePaymentUrlWithBody(ctx context.Context, params *CreatePaymentUrlParams, contentType string, body io.Reader) (*http.Response, error)

	CreatePaymentUrl(ctx context.Context, params *CreatePaymentUrlParams, body CreatePaymentUrlJSONRequestBody) (*http.Response, error)

	// SubmitPrimaryTransaction request  with any body
	SubmitPrimaryTransactionWithBody(ctx context.Context, params *SubmitPrimaryTransactionParams, contentType string, body io.Reader) (*http.Response, error)

	SubmitPrimaryTransaction(ctx context.Context, params *SubmitPrimaryTransactionParams, body SubmitPrimaryTransactionJSONRequestBody) (*http.Response, error)

	// TransactionInquiry request
	TransactionInquiry(ctx context.Context, transactionId TransactionIdParam, params *TransactionInquiryParams) (*http.Response, error)

	// FinalizeSecureTransaction request  with any body
	FinalizeSecureTransactionWithBody(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, contentType string, body io.Reader) (*http.Response, error)

	FinalizeSecureTransaction(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, body FinalizeSecureTransactionJSONRequestBody) (*http.Response, error)

	// SubmitSecondaryTransaction request  with any body
	SubmitSecondaryTransactionWithBody(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, contentType string, body io.Reader) (*http.Response, error)

	SubmitSecondaryTransaction(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, body SubmitSecondaryTransactionJSONRequestBody) (*http.Response, error)
}

func (c *Client) LookupAccountWithBody(ctx context.Context, params *LookupAccountParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLookupAccountRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LookupAccount(ctx context.Context, params *LookupAccountParams, body LookupAccountJSONRequestBody) (*http.Response, error) {
	req, err := NewLookupAccountRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyAccountWithBody(ctx context.Context, params *VerifyAccountParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewVerifyAccountRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyAccount(ctx context.Context, params *VerifyAccountParams, body VerifyAccountJSONRequestBody) (*http.Response, error) {
	req, err := NewVerifyAccountRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthenticationAccessTokensWithBody(ctx context.Context, params *PostAuthenticationAccessTokensParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostAuthenticationAccessTokensRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthenticationAccessTokens(ctx context.Context, params *PostAuthenticationAccessTokensParams, body PostAuthenticationAccessTokensJSONRequestBody) (*http.Response, error) {
	req, err := NewPostAuthenticationAccessTokensRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CardInfoLookupWithBody(ctx context.Context, params *CardInfoLookupParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCardInfoLookupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CardInfoLookup(ctx context.Context, params *CardInfoLookupParams, body CardInfoLookupJSONRequestBody) (*http.Response, error) {
	req, err := NewCardInfoLookupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyCardWithBody(ctx context.Context, params *VerifyCardParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewVerifyCardRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyCard(ctx context.Context, params *VerifyCardParams, body VerifyCardJSONRequestBody) (*http.Response, error) {
	req, err := NewVerifyCardRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExchangeRateWithBody(ctx context.Context, params *GetExchangeRateParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGetExchangeRateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExchangeRate(ctx context.Context, params *GetExchangeRateParams, body GetExchangeRateJSONRequestBody) (*http.Response, error) {
	req, err := NewGetExchangeRateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostFraudClientRegistrationWithBody(ctx context.Context, params *PostFraudClientRegistrationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostFraudClientRegistrationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostFraudClientRegistration(ctx context.Context, params *PostFraudClientRegistrationParams, body PostFraudClientRegistrationJSONRequestBody) (*http.Response, error) {
	req, err := NewPostFraudClientRegistrationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostFraudPaymentRegistrationWithBody(ctx context.Context, params *PostFraudPaymentRegistrationParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostFraudPaymentRegistrationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostFraudPaymentRegistration(ctx context.Context, params *PostFraudPaymentRegistrationParams, body PostFraudPaymentRegistrationJSONRequestBody) (*http.Response, error) {
	req, err := NewPostFraudPaymentRegistrationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreOnlyWithBody(ctx context.Context, params *ScoreOnlyParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewScoreOnlyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreOnly(ctx context.Context, params *ScoreOnlyParams, body ScoreOnlyJSONRequestBody) (*http.Response, error) {
	req, err := NewScoreOnlyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) OrderInquiry(ctx context.Context, orderId OrderIdParam, params *OrderInquiryParams) (*http.Response, error) {
	req, err := NewOrderInquiryRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitSecondaryTransactionFromOrderWithBody(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitSecondaryTransactionFromOrderRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitSecondaryTransactionFromOrder(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, body SubmitSecondaryTransactionFromOrderJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitSecondaryTransactionFromOrderRequest(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentScheduleWithBody(ctx context.Context, params *CreatePaymentScheduleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreatePaymentScheduleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentSchedule(ctx context.Context, params *CreatePaymentScheduleParams, body CreatePaymentScheduleJSONRequestBody) (*http.Response, error) {
	req, err := NewCreatePaymentScheduleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPaymentSchedule(ctx context.Context, orderId OrderIdParam, params *CancelPaymentScheduleParams) (*http.Response, error) {
	req, err := NewCancelPaymentScheduleRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) InquiryPaymentSchedule(ctx context.Context, orderId OrderIdParam, params *InquiryPaymentScheduleParams) (*http.Response, error) {
	req, err := NewInquiryPaymentScheduleRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePaymentScheduleWithBody(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdatePaymentScheduleRequestWithBody(c.Server, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePaymentSchedule(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, body UpdatePaymentScheduleJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdatePaymentScheduleRequest(c.Server, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePaymentTokenWithBody(ctx context.Context, params *UpdatePaymentTokenParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdatePaymentTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePaymentToken(ctx context.Context, params *UpdatePaymentTokenParams, body UpdatePaymentTokenJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdatePaymentTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentTokenWithBody(ctx context.Context, params *CreatePaymentTokenParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreatePaymentTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentToken(ctx context.Context, params *CreatePaymentTokenParams, body CreatePaymentTokenJSONRequestBody) (*http.Response, error) {
	req, err := NewCreatePaymentTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePaymentToken(ctx context.Context, tokenId TokenIdParam, params *DeletePaymentTokenParams) (*http.Response, error) {
	req, err := NewDeletePaymentTokenRequest(c.Server, tokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentTokenDetails(ctx context.Context, tokenId TokenIdParam, params *GetPaymentTokenDetailsParams) (*http.Response, error) {
	req, err := NewGetPaymentTokenDetailsRequest(c.Server, tokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePaymentUrl(ctx context.Context, params *DeletePaymentUrlParams) (*http.Response, error) {
	req, err := NewDeletePaymentUrlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PaymentUrlDetail(ctx context.Context, params *PaymentUrlDetailParams) (*http.Response, error) {
	req, err := NewPaymentUrlDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentUrlWithBody(ctx context.Context, params *CreatePaymentUrlParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreatePaymentUrlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentUrl(ctx context.Context, params *CreatePaymentUrlParams, body CreatePaymentUrlJSONRequestBody) (*http.Response, error) {
	req, err := NewCreatePaymentUrlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitPrimaryTransactionWithBody(ctx context.Context, params *SubmitPrimaryTransactionParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitPrimaryTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitPrimaryTransaction(ctx context.Context, params *SubmitPrimaryTransactionParams, body SubmitPrimaryTransactionJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitPrimaryTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) TransactionInquiry(ctx context.Context, transactionId TransactionIdParam, params *TransactionInquiryParams) (*http.Response, error) {
	req, err := NewTransactionInquiryRequest(c.Server, transactionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeSecureTransactionWithBody(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewFinalizeSecureTransactionRequestWithBody(c.Server, transactionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeSecureTransaction(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, body FinalizeSecureTransactionJSONRequestBody) (*http.Response, error) {
	req, err := NewFinalizeSecureTransactionRequest(c.Server, transactionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitSecondaryTransactionWithBody(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSubmitSecondaryTransactionRequestWithBody(c.Server, transactionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitSecondaryTransaction(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, body SubmitSecondaryTransactionJSONRequestBody) (*http.Response, error) {
	req, err := NewSubmitSecondaryTransactionRequest(c.Server, transactionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewLookupAccountRequest calls the generic LookupAccount builder with application/json body
func NewLookupAccountRequest(server string, params *LookupAccountParams, body LookupAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLookupAccountRequestWithBody(server, params, "application/json", bodyReader)
}

// NewLookupAccountRequestWithBody generates requests for LookupAccount with any type of body
func NewLookupAccountRequestWithBody(server string, params *LookupAccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/account-information")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewVerifyAccountRequest calls the generic VerifyAccount builder with application/json body
func NewVerifyAccountRequest(server string, params *VerifyAccountParams, body VerifyAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyAccountRequestWithBody(server, params, "application/json", bodyReader)
}

// NewVerifyAccountRequestWithBody generates requests for VerifyAccount with any type of body
func NewVerifyAccountRequestWithBody(server string, params *VerifyAccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/account-verification")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewPostAuthenticationAccessTokensRequest calls the generic PostAuthenticationAccessTokens builder with application/json body
func NewPostAuthenticationAccessTokensRequest(server string, params *PostAuthenticationAccessTokensParams, body PostAuthenticationAccessTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthenticationAccessTokensRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAuthenticationAccessTokensRequestWithBody generates requests for PostAuthenticationAccessTokens with any type of body
func NewPostAuthenticationAccessTokensRequestWithBody(server string, params *PostAuthenticationAccessTokensParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/authentication/access-tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	return req, nil
}

// NewCardInfoLookupRequest calls the generic CardInfoLookup builder with application/json body
func NewCardInfoLookupRequest(server string, params *CardInfoLookupParams, body CardInfoLookupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCardInfoLookupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCardInfoLookupRequestWithBody generates requests for CardInfoLookup with any type of body
func NewCardInfoLookupRequestWithBody(server string, params *CardInfoLookupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/card-information")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewVerifyCardRequest calls the generic VerifyCard builder with application/json body
func NewVerifyCardRequest(server string, params *VerifyCardParams, body VerifyCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyCardRequestWithBody(server, params, "application/json", bodyReader)
}

// NewVerifyCardRequestWithBody generates requests for VerifyCard with any type of body
func NewVerifyCardRequestWithBody(server string, params *VerifyCardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/card-verification")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewGetExchangeRateRequest calls the generic GetExchangeRate builder with application/json body
func NewGetExchangeRateRequest(server string, params *GetExchangeRateParams, body GetExchangeRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetExchangeRateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetExchangeRateRequestWithBody generates requests for GetExchangeRate with any type of body
func NewGetExchangeRateRequestWithBody(server string, params *GetExchangeRateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/exchange-rates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewPostFraudClientRegistrationRequest calls the generic PostFraudClientRegistration builder with application/json body
func NewPostFraudClientRegistrationRequest(server string, params *PostFraudClientRegistrationParams, body PostFraudClientRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFraudClientRegistrationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFraudClientRegistrationRequestWithBody generates requests for PostFraudClientRegistration with any type of body
func NewPostFraudClientRegistrationRequestWithBody(server string, params *PostFraudClientRegistrationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/fraud/client-registration")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewPostFraudPaymentRegistrationRequest calls the generic PostFraudPaymentRegistration builder with application/json body
func NewPostFraudPaymentRegistrationRequest(server string, params *PostFraudPaymentRegistrationParams, body PostFraudPaymentRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFraudPaymentRegistrationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFraudPaymentRegistrationRequestWithBody generates requests for PostFraudPaymentRegistration with any type of body
func NewPostFraudPaymentRegistrationRequestWithBody(server string, params *PostFraudPaymentRegistrationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/fraud/payment-registration")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewScoreOnlyRequest calls the generic ScoreOnly builder with application/json body
func NewScoreOnlyRequest(server string, params *ScoreOnlyParams, body ScoreOnlyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScoreOnlyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewScoreOnlyRequestWithBody generates requests for ScoreOnly with any type of body
func NewScoreOnlyRequestWithBody(server string, params *ScoreOnlyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/fraud/score-only")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewOrderInquiryRequest generates requests for OrderInquiry
func NewOrderInquiryRequest(server string, orderId OrderIdParam, params *OrderInquiryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "order-id", orderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/orders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewSubmitSecondaryTransactionFromOrderRequest calls the generic SubmitSecondaryTransactionFromOrder builder with application/json body
func NewSubmitSecondaryTransactionFromOrderRequest(server string, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, body SubmitSecondaryTransactionFromOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitSecondaryTransactionFromOrderRequestWithBody(server, orderId, params, "application/json", bodyReader)
}

// NewSubmitSecondaryTransactionFromOrderRequestWithBody generates requests for SubmitSecondaryTransactionFromOrder with any type of body
func NewSubmitSecondaryTransactionFromOrderRequestWithBody(server string, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "order-id", orderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/orders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewCreatePaymentScheduleRequest calls the generic CreatePaymentSchedule builder with application/json body
func NewCreatePaymentScheduleRequest(server string, params *CreatePaymentScheduleParams, body CreatePaymentScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePaymentScheduleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePaymentScheduleRequestWithBody generates requests for CreatePaymentSchedule with any type of body
func NewCreatePaymentScheduleRequestWithBody(server string, params *CreatePaymentScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-schedules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewCancelPaymentScheduleRequest generates requests for CancelPaymentSchedule
func NewCancelPaymentScheduleRequest(server string, orderId OrderIdParam, params *CancelPaymentScheduleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "order-id", orderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-schedules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewInquiryPaymentScheduleRequest generates requests for InquiryPaymentSchedule
func NewInquiryPaymentScheduleRequest(server string, orderId OrderIdParam, params *InquiryPaymentScheduleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "order-id", orderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-schedules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewUpdatePaymentScheduleRequest calls the generic UpdatePaymentSchedule builder with application/json body
func NewUpdatePaymentScheduleRequest(server string, orderId OrderIdParam, params *UpdatePaymentScheduleParams, body UpdatePaymentScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePaymentScheduleRequestWithBody(server, orderId, params, "application/json", bodyReader)
}

// NewUpdatePaymentScheduleRequestWithBody generates requests for UpdatePaymentSchedule with any type of body
func NewUpdatePaymentScheduleRequestWithBody(server string, orderId OrderIdParam, params *UpdatePaymentScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "order-id", orderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-schedules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewUpdatePaymentTokenRequest calls the generic UpdatePaymentToken builder with application/json body
func NewUpdatePaymentTokenRequest(server string, params *UpdatePaymentTokenParams, body UpdatePaymentTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePaymentTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdatePaymentTokenRequestWithBody generates requests for UpdatePaymentToken with any type of body
func NewUpdatePaymentTokenRequestWithBody(server string, params *UpdatePaymentTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Authorization != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Authorization", *params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam5)
	}

	if params.Region != nil {
		var headerParam6 string

		headerParam6, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam6)
	}

	return req, nil
}

// NewCreatePaymentTokenRequest calls the generic CreatePaymentToken builder with application/json body
func NewCreatePaymentTokenRequest(server string, params *CreatePaymentTokenParams, body CreatePaymentTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePaymentTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePaymentTokenRequestWithBody generates requests for CreatePaymentToken with any type of body
func NewCreatePaymentTokenRequestWithBody(server string, params *CreatePaymentTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Authorization != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Authorization", *params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam5)
	}

	if params.Region != nil {
		var headerParam6 string

		headerParam6, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam6)
	}

	return req, nil
}

// NewDeletePaymentTokenRequest generates requests for DeletePaymentToken
func NewDeletePaymentTokenRequest(server string, tokenId TokenIdParam, params *DeletePaymentTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "token-id", tokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Authorization != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Authorization", *params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam5)
	}

	if params.Region != nil {
		var headerParam6 string

		headerParam6, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam6)
	}

	return req, nil
}

// NewGetPaymentTokenDetailsRequest generates requests for GetPaymentTokenDetails
func NewGetPaymentTokenDetailsRequest(server string, tokenId TokenIdParam, params *GetPaymentTokenDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "token-id", tokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Authorization != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Authorization", *params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam5)
	}

	if params.Region != nil {
		var headerParam6 string

		headerParam6, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam6)
	}

	return req, nil
}

// NewDeletePaymentUrlRequest generates requests for DeletePaymentUrl
func NewDeletePaymentUrlRequest(server string, params *DeletePaymentUrlParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-url")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TransactionId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "transactionId", *params.TransactionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "orderId", *params.OrderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PaymentUrlId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "paymentUrlId", *params.PaymentUrlId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TransactionTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "transactionTime", *params.TransactionTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewPaymentUrlDetailRequest generates requests for PaymentUrlDetail
func NewPaymentUrlDetailRequest(server string, params *PaymentUrlDetailParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-url")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "orderId", *params.OrderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MerchantTransactionId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "merchantTransactionId", *params.MerchantTransactionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "fromDate", params.FromDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "toDate", params.ToDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewCreatePaymentUrlRequest calls the generic CreatePaymentUrl builder with application/json body
func NewCreatePaymentUrlRequest(server string, params *CreatePaymentUrlParams, body CreatePaymentUrlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePaymentUrlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePaymentUrlRequestWithBody generates requests for CreatePaymentUrl with any type of body
func NewCreatePaymentUrlRequestWithBody(server string, params *CreatePaymentUrlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payment-url")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewSubmitPrimaryTransactionRequest calls the generic SubmitPrimaryTransaction builder with application/json body
func NewSubmitPrimaryTransactionRequest(server string, params *SubmitPrimaryTransactionParams, body SubmitPrimaryTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitPrimaryTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSubmitPrimaryTransactionRequestWithBody generates requests for SubmitPrimaryTransaction with any type of body
func NewSubmitPrimaryTransactionRequestWithBody(server string, params *SubmitPrimaryTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payments")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewTransactionInquiryRequest generates requests for TransactionInquiry
func NewTransactionInquiryRequest(server string, transactionId TransactionIdParam, params *TransactionInquiryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "transaction-id", transactionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewFinalizeSecureTransactionRequest calls the generic FinalizeSecureTransaction builder with application/json body
func NewFinalizeSecureTransactionRequest(server string, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, body FinalizeSecureTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinalizeSecureTransactionRequestWithBody(server, transactionId, params, "application/json", bodyReader)
}

// NewFinalizeSecureTransactionRequestWithBody generates requests for FinalizeSecureTransaction with any type of body
func NewFinalizeSecureTransactionRequestWithBody(server string, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "transaction-id", transactionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// NewSubmitSecondaryTransactionRequest calls the generic SubmitSecondaryTransaction builder with application/json body
func NewSubmitSecondaryTransactionRequest(server string, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, body SubmitSecondaryTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitSecondaryTransactionRequestWithBody(server, transactionId, params, "application/json", bodyReader)
}

// NewSubmitSecondaryTransactionRequestWithBody generates requests for SubmitSecondaryTransaction with any type of body
func NewSubmitSecondaryTransactionRequestWithBody(server string, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "transaction-id", transactionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/payments/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "storeId", *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Content-Type", params.ContentType)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", headerParam0)

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "Client-Request-Id", params.ClientRequestId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Client-Request-Id", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Api-Key", params.ApiKey)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Api-Key", headerParam2)

	var headerParam3 string

	headerParam3, err = runtime.StyleParam("simple", false, "Timestamp", params.Timestamp)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Timestamp", headerParam3)

	if params.MessageSignature != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", false, "Message-Signature", *params.MessageSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Message-Signature", headerParam4)
	}

	if params.Region != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "Region", *params.Region)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Region", headerParam5)
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LookupAccount request  with any body
	LookupAccountWithBodyWithResponse(ctx context.Context, params *LookupAccountParams, contentType string, body io.Reader) (*LookupAccountRzp, error)

	LookupAccountWithResponse(ctx context.Context, params *LookupAccountParams, body LookupAccountJSONRequestBody) (*LookupAccountRzp, error)

	// VerifyAccount request  with any body
	VerifyAccountWithBodyWithResponse(ctx context.Context, params *VerifyAccountParams, contentType string, body io.Reader) (*VerifyAccountRzp, error)

	VerifyAccountWithResponse(ctx context.Context, params *VerifyAccountParams, body VerifyAccountJSONRequestBody) (*VerifyAccountRzp, error)

	// PostAuthenticationAccessTokens request  with any body
	PostAuthenticationAccessTokensWithBodyWithResponse(ctx context.Context, params *PostAuthenticationAccessTokensParams, contentType string, body io.Reader) (*PostAuthenticationAccessTokensRzp, error)

	PostAuthenticationAccessTokensWithResponse(ctx context.Context, params *PostAuthenticationAccessTokensParams, body PostAuthenticationAccessTokensJSONRequestBody) (*PostAuthenticationAccessTokensRzp, error)

	// CardInfoLookup request  with any body
	CardInfoLookupWithBodyWithResponse(ctx context.Context, params *CardInfoLookupParams, contentType string, body io.Reader) (*CardInfoLookupRzp, error)

	CardInfoLookupWithResponse(ctx context.Context, params *CardInfoLookupParams, body CardInfoLookupJSONRequestBody) (*CardInfoLookupRzp, error)

	// VerifyCard request  with any body
	VerifyCardWithBodyWithResponse(ctx context.Context, params *VerifyCardParams, contentType string, body io.Reader) (*VerifyCardRzp, error)

	VerifyCardWithResponse(ctx context.Context, params *VerifyCardParams, body VerifyCardJSONRequestBody) (*VerifyCardRzp, error)

	// GetExchangeRate request  with any body
	GetExchangeRateWithBodyWithResponse(ctx context.Context, params *GetExchangeRateParams, contentType string, body io.Reader) (*GetExchangeRateRzp, error)

	GetExchangeRateWithResponse(ctx context.Context, params *GetExchangeRateParams, body GetExchangeRateJSONRequestBody) (*GetExchangeRateRzp, error)

	// PostFraudClientRegistration request  with any body
	PostFraudClientRegistrationWithBodyWithResponse(ctx context.Context, params *PostFraudClientRegistrationParams, contentType string, body io.Reader) (*PostFraudClientRegistrationRzp, error)

	PostFraudClientRegistrationWithResponse(ctx context.Context, params *PostFraudClientRegistrationParams, body PostFraudClientRegistrationJSONRequestBody) (*PostFraudClientRegistrationRzp, error)

	// PostFraudPaymentRegistration request  with any body
	PostFraudPaymentRegistrationWithBodyWithResponse(ctx context.Context, params *PostFraudPaymentRegistrationParams, contentType string, body io.Reader) (*PostFraudPaymentRegistrationRzp, error)

	PostFraudPaymentRegistrationWithResponse(ctx context.Context, params *PostFraudPaymentRegistrationParams, body PostFraudPaymentRegistrationJSONRequestBody) (*PostFraudPaymentRegistrationRzp, error)

	// ScoreOnly request  with any body
	ScoreOnlyWithBodyWithResponse(ctx context.Context, params *ScoreOnlyParams, contentType string, body io.Reader) (*ScoreOnlyRzp, error)

	ScoreOnlyWithResponse(ctx context.Context, params *ScoreOnlyParams, body ScoreOnlyJSONRequestBody) (*ScoreOnlyRzp, error)

	// OrderInquiry request
	OrderInquiryWithResponse(ctx context.Context, orderId OrderIdParam, params *OrderInquiryParams) (*OrderInquiryRzp, error)

	// SubmitSecondaryTransactionFromOrder request  with any body
	SubmitSecondaryTransactionFromOrderWithBodyWithResponse(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, contentType string, body io.Reader) (*SubmitSecondaryTransactionFromOrderRzp, error)

	SubmitSecondaryTransactionFromOrderWithResponse(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, body SubmitSecondaryTransactionFromOrderJSONRequestBody) (*SubmitSecondaryTransactionFromOrderRzp, error)

	// CreatePaymentSchedule request  with any body
	CreatePaymentScheduleWithBodyWithResponse(ctx context.Context, params *CreatePaymentScheduleParams, contentType string, body io.Reader) (*CreatePaymentScheduleRzp, error)

	CreatePaymentScheduleWithResponse(ctx context.Context, params *CreatePaymentScheduleParams, body CreatePaymentScheduleJSONRequestBody) (*CreatePaymentScheduleRzp, error)

	// CancelPaymentSchedule request
	CancelPaymentScheduleWithResponse(ctx context.Context, orderId OrderIdParam, params *CancelPaymentScheduleParams) (*CancelPaymentScheduleRzp, error)

	// InquiryPaymentSchedule request
	InquiryPaymentScheduleWithResponse(ctx context.Context, orderId OrderIdParam, params *InquiryPaymentScheduleParams) (*InquiryPaymentScheduleRzp, error)

	// UpdatePaymentSchedule request  with any body
	UpdatePaymentScheduleWithBodyWithResponse(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, contentType string, body io.Reader) (*UpdatePaymentScheduleRzp, error)

	UpdatePaymentScheduleWithResponse(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, body UpdatePaymentScheduleJSONRequestBody) (*UpdatePaymentScheduleRzp, error)

	// UpdatePaymentToken request  with any body
	UpdatePaymentTokenWithBodyWithResponse(ctx context.Context, params *UpdatePaymentTokenParams, contentType string, body io.Reader) (*UpdatePaymentTokenRzp, error)

	UpdatePaymentTokenWithResponse(ctx context.Context, params *UpdatePaymentTokenParams, body UpdatePaymentTokenJSONRequestBody) (*UpdatePaymentTokenRzp, error)

	// CreatePaymentToken request  with any body
	CreatePaymentTokenWithBodyWithResponse(ctx context.Context, params *CreatePaymentTokenParams, contentType string, body io.Reader) (*CreatePaymentTokenRzp, error)

	CreatePaymentTokenWithResponse(ctx context.Context, params *CreatePaymentTokenParams, body CreatePaymentTokenJSONRequestBody) (*CreatePaymentTokenRzp, error)

	// DeletePaymentToken request
	DeletePaymentTokenWithResponse(ctx context.Context, tokenId TokenIdParam, params *DeletePaymentTokenParams) (*DeletePaymentTokenRzp, error)

	// GetPaymentTokenDetails request
	GetPaymentTokenDetailsWithResponse(ctx context.Context, tokenId TokenIdParam, params *GetPaymentTokenDetailsParams) (*GetPaymentTokenDetailsRzp, error)

	// DeletePaymentUrl request
	DeletePaymentUrlWithResponse(ctx context.Context, params *DeletePaymentUrlParams) (*DeletePaymentUrlRzp, error)

	// PaymentUrlDetail request
	PaymentUrlDetailWithResponse(ctx context.Context, params *PaymentUrlDetailParams) (*PaymentUrlDetailRzp, error)

	// CreatePaymentUrl request  with any body
	CreatePaymentUrlWithBodyWithResponse(ctx context.Context, params *CreatePaymentUrlParams, contentType string, body io.Reader) (*CreatePaymentUrlRzp, error)

	CreatePaymentUrlWithResponse(ctx context.Context, params *CreatePaymentUrlParams, body CreatePaymentUrlJSONRequestBody) (*CreatePaymentUrlRzp, error)

	// SubmitPrimaryTransaction request  with any body
	SubmitPrimaryTransactionWithBodyWithResponse(ctx context.Context, params *SubmitPrimaryTransactionParams, contentType string, body io.Reader) (*SubmitPrimaryTransactionRzp, error)

	SubmitPrimaryTransactionWithResponse(ctx context.Context, params *SubmitPrimaryTransactionParams, body SubmitPrimaryTransactionJSONRequestBody) (*SubmitPrimaryTransactionRzp, error)

	// TransactionInquiry request
	TransactionInquiryWithResponse(ctx context.Context, transactionId TransactionIdParam, params *TransactionInquiryParams) (*TransactionInquiryRzp, error)

	// FinalizeSecureTransaction request  with any body
	FinalizeSecureTransactionWithBodyWithResponse(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, contentType string, body io.Reader) (*FinalizeSecureTransactionRzp, error)

	FinalizeSecureTransactionWithResponse(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, body FinalizeSecureTransactionJSONRequestBody) (*FinalizeSecureTransactionRzp, error)

	// SubmitSecondaryTransaction request  with any body
	SubmitSecondaryTransactionWithBodyWithResponse(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, contentType string, body io.Reader) (*SubmitSecondaryTransactionRzp, error)

	SubmitSecondaryTransactionWithResponse(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, body SubmitSecondaryTransactionJSONRequestBody) (*SubmitSecondaryTransactionRzp, error)
}

type LookupAccountRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardInfoLookupResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r LookupAccountRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LookupAccountRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyAccountRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON422      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r VerifyAccountRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyAccountRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthenticationAccessTokensRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON415      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthenticationAccessTokensRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthenticationAccessTokensRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CardInfoLookupRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardInfoLookupResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CardInfoLookupRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CardInfoLookupRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyCardRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON422      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r VerifyCardRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyCardRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExchangeRateRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExchangeRateResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetExchangeRateRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExchangeRateRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFraudClientRegistrationRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FraudRegistrationResponse
	JSON201      *ScoreOnlyResponse
	JSON400      *FraudRegistrationResponse
}

// Status returns HTTPResponse.Status
func (r PostFraudClientRegistrationRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFraudClientRegistrationRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFraudPaymentRegistrationRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FraudRegistrationResponse
	JSON201      *ScoreOnlyResponse
	JSON400      *FraudRegistrationResponse
}

// Status returns HTTPResponse.Status
func (r PostFraudPaymentRegistrationRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFraudPaymentRegistrationRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreOnlyRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScoreOnlyResponse
	JSON201      *ScoreOnlyResponse
	JSON400      *ScoreOnlyResponse
}

// Status returns HTTPResponse.Status
func (r ScoreOnlyRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreOnlyRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderInquiryRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r OrderInquiryRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderInquiryRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitSecondaryTransactionFromOrderRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *TransactionErrorResponse
	JSON422      *TransactionErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubmitSecondaryTransactionFromOrderRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitSecondaryTransactionFromOrderRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePaymentScheduleRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentSchedulesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *PaymentSchedulesErrorResponse
	JSON415      *ErrorResponse
	JSON422      *PaymentSchedulesErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePaymentScheduleRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePaymentScheduleRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPaymentScheduleRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentSchedulesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CancelPaymentScheduleRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPaymentScheduleRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InquiryPaymentScheduleRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecurringPaymentDetailsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON415      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r InquiryPaymentScheduleRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InquiryPaymentScheduleRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePaymentScheduleRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentSchedulesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON422      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePaymentScheduleRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePaymentScheduleRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePaymentTokenRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentTokenUpdateResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *PaymentTokenizationErrorResponse
	JSON422      *PaymentTokenizationErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePaymentTokenRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePaymentTokenRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePaymentTokenRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentTokenizationResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *PaymentTokenizationErrorResponse
	JSON422      *PaymentTokenizationErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePaymentTokenRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePaymentTokenRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePaymentTokenRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentTokenizationResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePaymentTokenRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePaymentTokenRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentTokenDetailsRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentTokenizationResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPaymentTokenDetailsRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentTokenDetailsRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePaymentUrlRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentUrlResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON415      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePaymentUrlRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePaymentUrlRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PaymentUrlDetailRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentUrlDetailResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON415      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PaymentUrlDetailRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PaymentUrlDetailRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePaymentUrlRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentUrlResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON415      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePaymentUrlRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePaymentUrlRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitPrimaryTransactionRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *TransactionErrorResponse
	JSON415      *ErrorResponse
	JSON422      *TransactionErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubmitPrimaryTransactionRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitPrimaryTransactionRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransactionInquiryRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *TransactionErrorResponse
	JSON415      *ErrorResponse
	JSON422      *TransactionErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TransactionInquiryRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransactionInquiryRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinalizeSecureTransactionRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *TransactionErrorResponse
	JSON415      *ErrorResponse
	JSON422      *TransactionErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FinalizeSecureTransactionRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinalizeSecureTransactionRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitSecondaryTransactionRzp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *TransactionErrorResponse
	JSON415      *ErrorResponse
	JSON422      *TransactionErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubmitSecondaryTransactionRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitSecondaryTransactionRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LookupAccountWithBodyWithResponse request with arbitrary body returning *LookupAccountRzp
func (c *ClientWithResponses) LookupAccountWithBodyWithResponse(ctx context.Context, params *LookupAccountParams, contentType string, body io.Reader) (*LookupAccountRzp, error) {
	rsp, err := c.LookupAccountWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLookupAccountRzp(rsp)
}

func (c *ClientWithResponses) LookupAccountWithResponse(ctx context.Context, params *LookupAccountParams, body LookupAccountJSONRequestBody) (*LookupAccountRzp, error) {
	rsp, err := c.LookupAccount(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseLookupAccountRzp(rsp)
}

// VerifyAccountWithBodyWithResponse request with arbitrary body returning *VerifyAccountRzp
func (c *ClientWithResponses) VerifyAccountWithBodyWithResponse(ctx context.Context, params *VerifyAccountParams, contentType string, body io.Reader) (*VerifyAccountRzp, error) {
	rsp, err := c.VerifyAccountWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseVerifyAccountRzp(rsp)
}

func (c *ClientWithResponses) VerifyAccountWithResponse(ctx context.Context, params *VerifyAccountParams, body VerifyAccountJSONRequestBody) (*VerifyAccountRzp, error) {
	rsp, err := c.VerifyAccount(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseVerifyAccountRzp(rsp)
}

// PostAuthenticationAccessTokensWithBodyWithResponse request with arbitrary body returning *PostAuthenticationAccessTokensRzp
func (c *ClientWithResponses) PostAuthenticationAccessTokensWithBodyWithResponse(ctx context.Context, params *PostAuthenticationAccessTokensParams, contentType string, body io.Reader) (*PostAuthenticationAccessTokensRzp, error) {
	rsp, err := c.PostAuthenticationAccessTokensWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthenticationAccessTokensRzp(rsp)
}

func (c *ClientWithResponses) PostAuthenticationAccessTokensWithResponse(ctx context.Context, params *PostAuthenticationAccessTokensParams, body PostAuthenticationAccessTokensJSONRequestBody) (*PostAuthenticationAccessTokensRzp, error) {
	rsp, err := c.PostAuthenticationAccessTokens(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthenticationAccessTokensRzp(rsp)
}

// CardInfoLookupWithBodyWithResponse request with arbitrary body returning *CardInfoLookupRzp
func (c *ClientWithResponses) CardInfoLookupWithBodyWithResponse(ctx context.Context, params *CardInfoLookupParams, contentType string, body io.Reader) (*CardInfoLookupRzp, error) {
	rsp, err := c.CardInfoLookupWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCardInfoLookupRzp(rsp)
}

func (c *ClientWithResponses) CardInfoLookupWithResponse(ctx context.Context, params *CardInfoLookupParams, body CardInfoLookupJSONRequestBody) (*CardInfoLookupRzp, error) {
	rsp, err := c.CardInfoLookup(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCardInfoLookupRzp(rsp)
}

// VerifyCardWithBodyWithResponse request with arbitrary body returning *VerifyCardRzp
func (c *ClientWithResponses) VerifyCardWithBodyWithResponse(ctx context.Context, params *VerifyCardParams, contentType string, body io.Reader) (*VerifyCardRzp, error) {
	rsp, err := c.VerifyCardWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseVerifyCardRzp(rsp)
}

func (c *ClientWithResponses) VerifyCardWithResponse(ctx context.Context, params *VerifyCardParams, body VerifyCardJSONRequestBody) (*VerifyCardRzp, error) {
	rsp, err := c.VerifyCard(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseVerifyCardRzp(rsp)
}

// GetExchangeRateWithBodyWithResponse request with arbitrary body returning *GetExchangeRateRzp
func (c *ClientWithResponses) GetExchangeRateWithBodyWithResponse(ctx context.Context, params *GetExchangeRateParams, contentType string, body io.Reader) (*GetExchangeRateRzp, error) {
	rsp, err := c.GetExchangeRateWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetExchangeRateRzp(rsp)
}

func (c *ClientWithResponses) GetExchangeRateWithResponse(ctx context.Context, params *GetExchangeRateParams, body GetExchangeRateJSONRequestBody) (*GetExchangeRateRzp, error) {
	rsp, err := c.GetExchangeRate(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseGetExchangeRateRzp(rsp)
}

// PostFraudClientRegistrationWithBodyWithResponse request with arbitrary body returning *PostFraudClientRegistrationRzp
func (c *ClientWithResponses) PostFraudClientRegistrationWithBodyWithResponse(ctx context.Context, params *PostFraudClientRegistrationParams, contentType string, body io.Reader) (*PostFraudClientRegistrationRzp, error) {
	rsp, err := c.PostFraudClientRegistrationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFraudClientRegistrationRzp(rsp)
}

func (c *ClientWithResponses) PostFraudClientRegistrationWithResponse(ctx context.Context, params *PostFraudClientRegistrationParams, body PostFraudClientRegistrationJSONRequestBody) (*PostFraudClientRegistrationRzp, error) {
	rsp, err := c.PostFraudClientRegistration(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFraudClientRegistrationRzp(rsp)
}

// PostFraudPaymentRegistrationWithBodyWithResponse request with arbitrary body returning *PostFraudPaymentRegistrationRzp
func (c *ClientWithResponses) PostFraudPaymentRegistrationWithBodyWithResponse(ctx context.Context, params *PostFraudPaymentRegistrationParams, contentType string, body io.Reader) (*PostFraudPaymentRegistrationRzp, error) {
	rsp, err := c.PostFraudPaymentRegistrationWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFraudPaymentRegistrationRzp(rsp)
}

func (c *ClientWithResponses) PostFraudPaymentRegistrationWithResponse(ctx context.Context, params *PostFraudPaymentRegistrationParams, body PostFraudPaymentRegistrationJSONRequestBody) (*PostFraudPaymentRegistrationRzp, error) {
	rsp, err := c.PostFraudPaymentRegistration(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFraudPaymentRegistrationRzp(rsp)
}

// ScoreOnlyWithBodyWithResponse request with arbitrary body returning *ScoreOnlyRzp
func (c *ClientWithResponses) ScoreOnlyWithBodyWithResponse(ctx context.Context, params *ScoreOnlyParams, contentType string, body io.Reader) (*ScoreOnlyRzp, error) {
	rsp, err := c.ScoreOnlyWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseScoreOnlyRzp(rsp)
}

func (c *ClientWithResponses) ScoreOnlyWithResponse(ctx context.Context, params *ScoreOnlyParams, body ScoreOnlyJSONRequestBody) (*ScoreOnlyRzp, error) {
	rsp, err := c.ScoreOnly(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseScoreOnlyRzp(rsp)
}

// OrderInquiryWithResponse request returning *OrderInquiryRzp
func (c *ClientWithResponses) OrderInquiryWithResponse(ctx context.Context, orderId OrderIdParam, params *OrderInquiryParams) (*OrderInquiryRzp, error) {
	rsp, err := c.OrderInquiry(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseOrderInquiryRzp(rsp)
}

// SubmitSecondaryTransactionFromOrderWithBodyWithResponse request with arbitrary body returning *SubmitSecondaryTransactionFromOrderRzp
func (c *ClientWithResponses) SubmitSecondaryTransactionFromOrderWithBodyWithResponse(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, contentType string, body io.Reader) (*SubmitSecondaryTransactionFromOrderRzp, error) {
	rsp, err := c.SubmitSecondaryTransactionFromOrderWithBody(ctx, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitSecondaryTransactionFromOrderRzp(rsp)
}

func (c *ClientWithResponses) SubmitSecondaryTransactionFromOrderWithResponse(ctx context.Context, orderId OrderIdParam, params *SubmitSecondaryTransactionFromOrderParams, body SubmitSecondaryTransactionFromOrderJSONRequestBody) (*SubmitSecondaryTransactionFromOrderRzp, error) {
	rsp, err := c.SubmitSecondaryTransactionFromOrder(ctx, orderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitSecondaryTransactionFromOrderRzp(rsp)
}

// CreatePaymentScheduleWithBodyWithResponse request with arbitrary body returning *CreatePaymentScheduleRzp
func (c *ClientWithResponses) CreatePaymentScheduleWithBodyWithResponse(ctx context.Context, params *CreatePaymentScheduleParams, contentType string, body io.Reader) (*CreatePaymentScheduleRzp, error) {
	rsp, err := c.CreatePaymentScheduleWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentScheduleRzp(rsp)
}

func (c *ClientWithResponses) CreatePaymentScheduleWithResponse(ctx context.Context, params *CreatePaymentScheduleParams, body CreatePaymentScheduleJSONRequestBody) (*CreatePaymentScheduleRzp, error) {
	rsp, err := c.CreatePaymentSchedule(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentScheduleRzp(rsp)
}

// CancelPaymentScheduleWithResponse request returning *CancelPaymentScheduleRzp
func (c *ClientWithResponses) CancelPaymentScheduleWithResponse(ctx context.Context, orderId OrderIdParam, params *CancelPaymentScheduleParams) (*CancelPaymentScheduleRzp, error) {
	rsp, err := c.CancelPaymentSchedule(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseCancelPaymentScheduleRzp(rsp)
}

// InquiryPaymentScheduleWithResponse request returning *InquiryPaymentScheduleRzp
func (c *ClientWithResponses) InquiryPaymentScheduleWithResponse(ctx context.Context, orderId OrderIdParam, params *InquiryPaymentScheduleParams) (*InquiryPaymentScheduleRzp, error) {
	rsp, err := c.InquiryPaymentSchedule(ctx, orderId, params)
	if err != nil {
		return nil, err
	}
	return ParseInquiryPaymentScheduleRzp(rsp)
}

// UpdatePaymentScheduleWithBodyWithResponse request with arbitrary body returning *UpdatePaymentScheduleRzp
func (c *ClientWithResponses) UpdatePaymentScheduleWithBodyWithResponse(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, contentType string, body io.Reader) (*UpdatePaymentScheduleRzp, error) {
	rsp, err := c.UpdatePaymentScheduleWithBody(ctx, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePaymentScheduleRzp(rsp)
}

func (c *ClientWithResponses) UpdatePaymentScheduleWithResponse(ctx context.Context, orderId OrderIdParam, params *UpdatePaymentScheduleParams, body UpdatePaymentScheduleJSONRequestBody) (*UpdatePaymentScheduleRzp, error) {
	rsp, err := c.UpdatePaymentSchedule(ctx, orderId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePaymentScheduleRzp(rsp)
}

// UpdatePaymentTokenWithBodyWithResponse request with arbitrary body returning *UpdatePaymentTokenRzp
func (c *ClientWithResponses) UpdatePaymentTokenWithBodyWithResponse(ctx context.Context, params *UpdatePaymentTokenParams, contentType string, body io.Reader) (*UpdatePaymentTokenRzp, error) {
	rsp, err := c.UpdatePaymentTokenWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePaymentTokenRzp(rsp)
}

func (c *ClientWithResponses) UpdatePaymentTokenWithResponse(ctx context.Context, params *UpdatePaymentTokenParams, body UpdatePaymentTokenJSONRequestBody) (*UpdatePaymentTokenRzp, error) {
	rsp, err := c.UpdatePaymentToken(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePaymentTokenRzp(rsp)
}

// CreatePaymentTokenWithBodyWithResponse request with arbitrary body returning *CreatePaymentTokenRzp
func (c *ClientWithResponses) CreatePaymentTokenWithBodyWithResponse(ctx context.Context, params *CreatePaymentTokenParams, contentType string, body io.Reader) (*CreatePaymentTokenRzp, error) {
	rsp, err := c.CreatePaymentTokenWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentTokenRzp(rsp)
}

func (c *ClientWithResponses) CreatePaymentTokenWithResponse(ctx context.Context, params *CreatePaymentTokenParams, body CreatePaymentTokenJSONRequestBody) (*CreatePaymentTokenRzp, error) {
	rsp, err := c.CreatePaymentToken(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentTokenRzp(rsp)
}

// DeletePaymentTokenWithResponse request returning *DeletePaymentTokenRzp
func (c *ClientWithResponses) DeletePaymentTokenWithResponse(ctx context.Context, tokenId TokenIdParam, params *DeletePaymentTokenParams) (*DeletePaymentTokenRzp, error) {
	rsp, err := c.DeletePaymentToken(ctx, tokenId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeletePaymentTokenRzp(rsp)
}

// GetPaymentTokenDetailsWithResponse request returning *GetPaymentTokenDetailsRzp
func (c *ClientWithResponses) GetPaymentTokenDetailsWithResponse(ctx context.Context, tokenId TokenIdParam, params *GetPaymentTokenDetailsParams) (*GetPaymentTokenDetailsRzp, error) {
	rsp, err := c.GetPaymentTokenDetails(ctx, tokenId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentTokenDetailsRzp(rsp)
}

// DeletePaymentUrlWithResponse request returning *DeletePaymentUrlRzp
func (c *ClientWithResponses) DeletePaymentUrlWithResponse(ctx context.Context, params *DeletePaymentUrlParams) (*DeletePaymentUrlRzp, error) {
	rsp, err := c.DeletePaymentUrl(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseDeletePaymentUrlRzp(rsp)
}

// PaymentUrlDetailWithResponse request returning *PaymentUrlDetailRzp
func (c *ClientWithResponses) PaymentUrlDetailWithResponse(ctx context.Context, params *PaymentUrlDetailParams) (*PaymentUrlDetailRzp, error) {
	rsp, err := c.PaymentUrlDetail(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsePaymentUrlDetailRzp(rsp)
}

// CreatePaymentUrlWithBodyWithResponse request with arbitrary body returning *CreatePaymentUrlRzp
func (c *ClientWithResponses) CreatePaymentUrlWithBodyWithResponse(ctx context.Context, params *CreatePaymentUrlParams, contentType string, body io.Reader) (*CreatePaymentUrlRzp, error) {
	rsp, err := c.CreatePaymentUrlWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentUrlRzp(rsp)
}

func (c *ClientWithResponses) CreatePaymentUrlWithResponse(ctx context.Context, params *CreatePaymentUrlParams, body CreatePaymentUrlJSONRequestBody) (*CreatePaymentUrlRzp, error) {
	rsp, err := c.CreatePaymentUrl(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentUrlRzp(rsp)
}

// SubmitPrimaryTransactionWithBodyWithResponse request with arbitrary body returning *SubmitPrimaryTransactionRzp
func (c *ClientWithResponses) SubmitPrimaryTransactionWithBodyWithResponse(ctx context.Context, params *SubmitPrimaryTransactionParams, contentType string, body io.Reader) (*SubmitPrimaryTransactionRzp, error) {
	rsp, err := c.SubmitPrimaryTransactionWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitPrimaryTransactionRzp(rsp)
}

func (c *ClientWithResponses) SubmitPrimaryTransactionWithResponse(ctx context.Context, params *SubmitPrimaryTransactionParams, body SubmitPrimaryTransactionJSONRequestBody) (*SubmitPrimaryTransactionRzp, error) {
	rsp, err := c.SubmitPrimaryTransaction(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitPrimaryTransactionRzp(rsp)
}

// TransactionInquiryWithResponse request returning *TransactionInquiryRzp
func (c *ClientWithResponses) TransactionInquiryWithResponse(ctx context.Context, transactionId TransactionIdParam, params *TransactionInquiryParams) (*TransactionInquiryRzp, error) {
	rsp, err := c.TransactionInquiry(ctx, transactionId, params)
	if err != nil {
		return nil, err
	}
	return ParseTransactionInquiryRzp(rsp)
}

// FinalizeSecureTransactionWithBodyWithResponse request with arbitrary body returning *FinalizeSecureTransactionRzp
func (c *ClientWithResponses) FinalizeSecureTransactionWithBodyWithResponse(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, contentType string, body io.Reader) (*FinalizeSecureTransactionRzp, error) {
	rsp, err := c.FinalizeSecureTransactionWithBody(ctx, transactionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeSecureTransactionRzp(rsp)
}

func (c *ClientWithResponses) FinalizeSecureTransactionWithResponse(ctx context.Context, transactionId TransactionIdParam, params *FinalizeSecureTransactionParams, body FinalizeSecureTransactionJSONRequestBody) (*FinalizeSecureTransactionRzp, error) {
	rsp, err := c.FinalizeSecureTransaction(ctx, transactionId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeSecureTransactionRzp(rsp)
}

// SubmitSecondaryTransactionWithBodyWithResponse request with arbitrary body returning *SubmitSecondaryTransactionRzp
func (c *ClientWithResponses) SubmitSecondaryTransactionWithBodyWithResponse(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, contentType string, body io.Reader) (*SubmitSecondaryTransactionRzp, error) {
	rsp, err := c.SubmitSecondaryTransactionWithBody(ctx, transactionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitSecondaryTransactionRzp(rsp)
}

func (c *ClientWithResponses) SubmitSecondaryTransactionWithResponse(ctx context.Context, transactionId TransactionIdParam, params *SubmitSecondaryTransactionParams, body SubmitSecondaryTransactionJSONRequestBody) (*SubmitSecondaryTransactionRzp, error) {
	rsp, err := c.SubmitSecondaryTransaction(ctx, transactionId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseSubmitSecondaryTransactionRzp(rsp)
}

// ParseLookupAccountRzp parses an HTTP response from a LookupAccountWithResponse call
func ParseLookupAccountRzp(rsp *http.Response) (*LookupAccountRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LookupAccountRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardInfoLookupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyAccountRzp parses an HTTP response from a VerifyAccountWithResponse call
func ParseVerifyAccountRzp(rsp *http.Response) (*VerifyAccountRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VerifyAccountRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthenticationAccessTokensRzp parses an HTTP response from a PostAuthenticationAccessTokensWithResponse call
func ParsePostAuthenticationAccessTokensRzp(rsp *http.Response) (*PostAuthenticationAccessTokensRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAuthenticationAccessTokensRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCardInfoLookupRzp parses an HTTP response from a CardInfoLookupWithResponse call
func ParseCardInfoLookupRzp(rsp *http.Response) (*CardInfoLookupRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CardInfoLookupRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardInfoLookupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyCardRzp parses an HTTP response from a VerifyCardWithResponse call
func ParseVerifyCardRzp(rsp *http.Response) (*VerifyCardRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VerifyCardRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetExchangeRateRzp parses an HTTP response from a GetExchangeRateWithResponse call
func ParseGetExchangeRateRzp(rsp *http.Response) (*GetExchangeRateRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExchangeRateRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExchangeRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePostFraudClientRegistrationRzp parses an HTTP response from a PostFraudClientRegistrationWithResponse call
func ParsePostFraudClientRegistrationRzp(rsp *http.Response) (*PostFraudClientRegistrationRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFraudClientRegistrationRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FraudRegistrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScoreOnlyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest FraudRegistrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostFraudPaymentRegistrationRzp parses an HTTP response from a PostFraudPaymentRegistrationWithResponse call
func ParsePostFraudPaymentRegistrationRzp(rsp *http.Response) (*PostFraudPaymentRegistrationRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFraudPaymentRegistrationRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FraudRegistrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScoreOnlyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest FraudRegistrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseScoreOnlyRzp parses an HTTP response from a ScoreOnlyWithResponse call
func ParseScoreOnlyRzp(rsp *http.Response) (*ScoreOnlyRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScoreOnlyRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScoreOnlyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScoreOnlyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ScoreOnlyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseOrderInquiryRzp parses an HTTP response from a OrderInquiryWithResponse call
func ParseOrderInquiryRzp(rsp *http.Response) (*OrderInquiryRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &OrderInquiryRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseSubmitSecondaryTransactionFromOrderRzp parses an HTTP response from a SubmitSecondaryTransactionFromOrderWithResponse call
func ParseSubmitSecondaryTransactionFromOrderRzp(rsp *http.Response) (*SubmitSecondaryTransactionFromOrderRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SubmitSecondaryTransactionFromOrderRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseCreatePaymentScheduleRzp parses an HTTP response from a CreatePaymentScheduleWithResponse call
func ParseCreatePaymentScheduleRzp(rsp *http.Response) (*CreatePaymentScheduleRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePaymentScheduleRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PaymentSchedulesErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest PaymentSchedulesErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCancelPaymentScheduleRzp parses an HTTP response from a CancelPaymentScheduleWithResponse call
func ParseCancelPaymentScheduleRzp(rsp *http.Response) (*CancelPaymentScheduleRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelPaymentScheduleRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseInquiryPaymentScheduleRzp parses an HTTP response from a InquiryPaymentScheduleWithResponse call
func ParseInquiryPaymentScheduleRzp(rsp *http.Response) (*InquiryPaymentScheduleRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InquiryPaymentScheduleRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecurringPaymentDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePaymentScheduleRzp parses an HTTP response from a UpdatePaymentScheduleWithResponse call
func ParseUpdatePaymentScheduleRzp(rsp *http.Response) (*UpdatePaymentScheduleRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePaymentScheduleRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePaymentTokenRzp parses an HTTP response from a UpdatePaymentTokenWithResponse call
func ParseUpdatePaymentTokenRzp(rsp *http.Response) (*UpdatePaymentTokenRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdatePaymentTokenRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentTokenUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PaymentTokenizationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest PaymentTokenizationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePaymentTokenRzp parses an HTTP response from a CreatePaymentTokenWithResponse call
func ParseCreatePaymentTokenRzp(rsp *http.Response) (*CreatePaymentTokenRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePaymentTokenRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentTokenizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PaymentTokenizationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest PaymentTokenizationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePaymentTokenRzp parses an HTTP response from a DeletePaymentTokenWithResponse call
func ParseDeletePaymentTokenRzp(rsp *http.Response) (*DeletePaymentTokenRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePaymentTokenRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentTokenizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPaymentTokenDetailsRzp parses an HTTP response from a GetPaymentTokenDetailsWithResponse call
func ParseGetPaymentTokenDetailsRzp(rsp *http.Response) (*GetPaymentTokenDetailsRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentTokenDetailsRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentTokenizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePaymentUrlRzp parses an HTTP response from a DeletePaymentUrlWithResponse call
func ParseDeletePaymentUrlRzp(rsp *http.Response) (*DeletePaymentUrlRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeletePaymentUrlRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentUrlResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePaymentUrlDetailRzp parses an HTTP response from a PaymentUrlDetailWithResponse call
func ParsePaymentUrlDetailRzp(rsp *http.Response) (*PaymentUrlDetailRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PaymentUrlDetailRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentUrlDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePaymentUrlRzp parses an HTTP response from a CreatePaymentUrlWithResponse call
func ParseCreatePaymentUrlRzp(rsp *http.Response) (*CreatePaymentUrlRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePaymentUrlRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentUrlResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSubmitPrimaryTransactionRzp parses an HTTP response from a SubmitPrimaryTransactionWithResponse call
func ParseSubmitPrimaryTransactionRzp(rsp *http.Response) (*SubmitPrimaryTransactionRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SubmitPrimaryTransactionRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseTransactionInquiryRzp parses an HTTP response from a TransactionInquiryWithResponse call
func ParseTransactionInquiryRzp(rsp *http.Response) (*TransactionInquiryRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TransactionInquiryRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseFinalizeSecureTransactionRzp parses an HTTP response from a FinalizeSecureTransactionWithResponse call
func ParseFinalizeSecureTransactionRzp(rsp *http.Response) (*FinalizeSecureTransactionRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FinalizeSecureTransactionRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseSubmitSecondaryTransactionRzp parses an HTTP response from a SubmitSecondaryTransactionWithResponse call
func ParseSubmitSecondaryTransactionRzp(rsp *http.Response) (*SubmitSecondaryTransactionRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SubmitSecondaryTransactionRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest TransactionErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

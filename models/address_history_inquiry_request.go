// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressHistoryInquiryRequest address history inquiry request
//
// swagger:model AddressHistoryInquiryRequest
type AddressHistoryInquiryRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Current or prior flag The values are: B = Both current and prior address information (Default) C = Current address information only P = Prior address information only
	// Max Length: 1
	// Min Length: 0
	CurrPriorFlag *string `json:"currPriorFlag,omitempty"`

	//  Max length = 1, Owner or co-owner flag. The values are: 0 = Both owner and co-owner 1 = Owner only (Default) 2 = Co-owner only
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OwnerCoownerInd *string `json:"ownerCoownerInd,omitempty"`
}

// Validate validates this address history inquiry request
func (m *AddressHistoryInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrPriorFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerCoownerInd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressHistoryInquiryRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AddressHistoryInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AddressHistoryInquiryRequest) validateCurrPriorFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrPriorFlag) { // not required
		return nil
	}

	if err := validate.MinLength("currPriorFlag", "body", string(*m.CurrPriorFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currPriorFlag", "body", string(*m.CurrPriorFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AddressHistoryInquiryRequest) validateOwnerCoownerInd(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerCoownerInd) { // not required
		return nil
	}

	if err := validate.MinLength("ownerCoownerInd", "body", string(*m.OwnerCoownerInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ownerCoownerInd", "body", string(*m.OwnerCoownerInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ownerCoownerInd", "body", string(*m.OwnerCoownerInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressHistoryInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressHistoryInquiryRequest) UnmarshalBinary(b []byte) error {
	var res AddressHistoryInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarketingPreferencesUpdateRequest marketing preferences update request
//
// swagger:model MarketingPreferencesUpdateRequest
type MarketingPreferencesUpdateRequest struct {

	//  Max length = 1, Action Indicator: Indicates type of action. Values are: A = Add Marketing Preferences Record U = Update Marketing Preference Record
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ActionInd *string `json:"actionInd"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Cust *string `json:"cust"`

	// Marketing Channels Data Group. Occurrence 1 is for owner. Occurrence 2 is for co-Owner. If no valid value is provided in the following fields, processing is as follows: In ADD mode the field is set to the default value indicated in the ORG record. In UPDATE mode the field is ignored and no update to this indicator will occur.
	MktingChnlsData []*MktingChnlsDataForMarketingPreferencesUpdate1 `json:"mktingChnlsData"`

	// Marketing Products Data Group. Occurrence 1 is for owner. Occurrence 2 is for co-Owner.  If no valid value is provided, processing is as follows: In ADD mode the field is set to the default value indicated in the ORG record. In UPDATE mode the field is ignored and no update to this indicator will occur.
	MktingPrdtsData []*MktingPrdtsDataForMarketingPreferencesUpdate1 `json:"mktingPrdtsData"`
}

// Validate validates this marketing preferences update request
func (m *MarketingPreferencesUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCust(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMktingChnlsData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMktingPrdtsData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketingPreferencesUpdateRequest) validateActionInd(formats strfmt.Registry) error {

	if err := validate.Required("actionInd", "body", m.ActionInd); err != nil {
		return err
	}

	if err := validate.MinLength("actionInd", "body", string(*m.ActionInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actionInd", "body", string(*m.ActionInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingPreferencesUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *MarketingPreferencesUpdateRequest) validateCust(formats strfmt.Registry) error {

	if err := validate.Required("cust", "body", m.Cust); err != nil {
		return err
	}

	if err := validate.MinLength("cust", "body", string(*m.Cust), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cust", "body", string(*m.Cust), 19); err != nil {
		return err
	}

	return nil
}

func (m *MarketingPreferencesUpdateRequest) validateMktingChnlsData(formats strfmt.Registry) error {

	if swag.IsZero(m.MktingChnlsData) { // not required
		return nil
	}

	for i := 0; i < len(m.MktingChnlsData); i++ {
		if swag.IsZero(m.MktingChnlsData[i]) { // not required
			continue
		}

		if m.MktingChnlsData[i] != nil {
			if err := m.MktingChnlsData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mktingChnlsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MarketingPreferencesUpdateRequest) validateMktingPrdtsData(formats strfmt.Registry) error {

	if swag.IsZero(m.MktingPrdtsData) { // not required
		return nil
	}

	for i := 0; i < len(m.MktingPrdtsData); i++ {
		if swag.IsZero(m.MktingPrdtsData[i]) { // not required
			continue
		}

		if m.MktingPrdtsData[i] != nil {
			if err := m.MktingPrdtsData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mktingPrdtsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketingPreferencesUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketingPreferencesUpdateRequest) UnmarshalBinary(b []byte) error {
	var res MarketingPreferencesUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

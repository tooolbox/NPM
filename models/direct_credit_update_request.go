// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectCreditUpdateRequest direct credit update request
//
// swagger:model DirectCreditUpdateRequest
type DirectCreditUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Amount of the direct credit. Required if the DC Type Flag equals 0. Must be numeric.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	DcAchAmt *string `json:"dcAchAmt"`

	//  Max length = 17, Direct Credit Processing Debit Account Number: Field that indicates the debit account number participating in direct credit processing payment. Must be numeric
	// Required: true
	// Max Length: 17
	// Min Length: 0
	DcAchDbNbr *string `json:"dcAchDbNbr"`

	//  Max length = 1, Direct Credit Processing Debit Type: Field that indicates the type of account participating in direct credit processing. Values are: 'D' - AMBS-DC-DEMAND-DEPOSIT  'S' - AMBS-DC-SAVING-ACCT
	// Required: true
	// Max Length: 1
	// Min Length: 0
	DcAchDbType *string `json:"dcAchDbType"`

	// Format: YYYYMMDD. Direct Credit Payment Expiry Date: Date on which direct credit processing expires for the account. A value of zeros means the DD does not expire.  Required if DC Type Flag equals 0. Date must be greater than the DC Payment Start Date. Must be a valid Gregorian date or zeros. Field must be greater than the systems Next Processing Date.
	// Required: true
	DcAchExpireDate *string `json:"dcAchExpireDate"`

	//  Max length = 5, Direct Credit Plan Number: Plan number that identifies the Credit Plan Master record of a retail credit plan that CMS debits for direct credits to the account. DC TYPE FLAG  must equal 0.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcAchPlan *string `json:"dcAchPlan"`

	//  Max length = 2, Direct Credit Request Day: Field that indicates the day of the month when CMS generates the direct credit for the account. Required if the DC Type Flag equals 0. If the DC REQUEST DAY IND is 0 this field must be equal to 00 If the DC REQUEST DAY IND is 1 this field must be equal to 00 or 01-31 If the DC REQUEST DAY IND is 2 this field must be equal to 00 If the DC REQUEST DAY IND is 3 this field must be equal to 00 If the DC REQUEST DAY IND is 4 this field must be greater than 0
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcAchReqDay *string `json:"dcAchReqDay"`

	//  Max length = 1, Direct Credit Request Day Indicator: Field that indicates the day of the month when CMS generates the direct credit for the account. Required if the DC Type Flag = 0. Values are:  0 - Direct credit processing is not used  1 - Generate the direct credit on the cycle day or on a specific day each month  2 - Generate the direct credit on the first cycle only  3 - Generate the direct credit at account opening only  4 - Generate the direct credit on a specific number of days after account opening
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcAchReqDayInd *string `json:"dcAchReqDayInd"`

	//  Max length = 10, Direct Credit Routing/transit Number: Dual-use field that accepts a nine-digit routing/transit number (ACH format) or a ten-digit Bank ID (non-ACH format) to identify the financial institution to receive direct credit transactions for account payments. Field must be numeric. If the DD/DC Indicator on ARMO02 equals 0, the first byte if the DD R/T Bank ID must equal 0 followed by a 9 digit numeric value.
	// Required: true
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcAchRtNbr *string `json:"dcAchRtNbr"`

	// Format: YYYYMMDD. Direct Credit Payment Start Date: Date on which direct credit processing starts for the account. Required if the DC Type Flag equals 0. Date must be less than the date in DC Payment Expire Date. Must be a valid Gregorian date or zeros. Field must be greater than the systems Next Processing Date.
	// Required: true
	DcAchStartDate *string `json:"dcAchStartDate"`

	//  Max length = 1, Direct Credit Type Flag: field that indicates if the fields being updated are recurring direct credit fields or on-demand direct credit fields.   Values are: Spaces or Zeroes = Recurring direct credit (default) 1 = On-Demand Direct Credit
	// Required: true
	// Max Length: 1
	// Min Length: 0
	DcType *string `json:"dcType"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 11, ON DEM DC BIC
	// Max Length: 11
	// Min Length: 0
	OnDemDcBic *string `json:"onDemDcBic,omitempty"`

	//  Max length = 34, On Demand Direct Credit IBAN: International Banking Account Number (IBAN) associated with the on-demand direct credit account.
	// Required: true
	// Max Length: 34
	// Min Length: 0
	OnDemandDcIban *string `json:"onDemandDcIban"`
}

// Validate validates this direct credit update request
func (m *DirectCreditUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchDbNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchDbType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchExpireDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchReqDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchReqDayInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchRtNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAchStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemDcBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemandDcIban(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectCreditUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchAmt(formats strfmt.Registry) error {

	if err := validate.Required("dcAchAmt", "body", m.DcAchAmt); err != nil {
		return err
	}

	if err := validate.Pattern("dcAchAmt", "body", string(*m.DcAchAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchDbNbr(formats strfmt.Registry) error {

	if err := validate.Required("dcAchDbNbr", "body", m.DcAchDbNbr); err != nil {
		return err
	}

	if err := validate.MinLength("dcAchDbNbr", "body", string(*m.DcAchDbNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAchDbNbr", "body", string(*m.DcAchDbNbr), 17); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchDbType(formats strfmt.Registry) error {

	if err := validate.Required("dcAchDbType", "body", m.DcAchDbType); err != nil {
		return err
	}

	if err := validate.MinLength("dcAchDbType", "body", string(*m.DcAchDbType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAchDbType", "body", string(*m.DcAchDbType), 1); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchExpireDate(formats strfmt.Registry) error {

	if err := validate.Required("dcAchExpireDate", "body", m.DcAchExpireDate); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchPlan(formats strfmt.Registry) error {

	if err := validate.Required("dcAchPlan", "body", m.DcAchPlan); err != nil {
		return err
	}

	if err := validate.MinLength("dcAchPlan", "body", string(*m.DcAchPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAchPlan", "body", string(*m.DcAchPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("dcAchPlan", "body", string(*m.DcAchPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchReqDay(formats strfmt.Registry) error {

	if err := validate.Required("dcAchReqDay", "body", m.DcAchReqDay); err != nil {
		return err
	}

	if err := validate.MinLength("dcAchReqDay", "body", string(*m.DcAchReqDay), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAchReqDay", "body", string(*m.DcAchReqDay), 2); err != nil {
		return err
	}

	if err := validate.Pattern("dcAchReqDay", "body", string(*m.DcAchReqDay), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchReqDayInd(formats strfmt.Registry) error {

	if err := validate.Required("dcAchReqDayInd", "body", m.DcAchReqDayInd); err != nil {
		return err
	}

	if err := validate.MinLength("dcAchReqDayInd", "body", string(*m.DcAchReqDayInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAchReqDayInd", "body", string(*m.DcAchReqDayInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("dcAchReqDayInd", "body", string(*m.DcAchReqDayInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchRtNbr(formats strfmt.Registry) error {

	if err := validate.Required("dcAchRtNbr", "body", m.DcAchRtNbr); err != nil {
		return err
	}

	if err := validate.MinLength("dcAchRtNbr", "body", string(*m.DcAchRtNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAchRtNbr", "body", string(*m.DcAchRtNbr), 10); err != nil {
		return err
	}

	if err := validate.Pattern("dcAchRtNbr", "body", string(*m.DcAchRtNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcAchStartDate(formats strfmt.Registry) error {

	if err := validate.Required("dcAchStartDate", "body", m.DcAchStartDate); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateDcType(formats strfmt.Registry) error {

	if err := validate.Required("dcType", "body", m.DcType); err != nil {
		return err
	}

	if err := validate.MinLength("dcType", "body", string(*m.DcType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcType", "body", string(*m.DcType), 1); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateOnDemDcBic(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDemDcBic) { // not required
		return nil
	}

	if err := validate.MinLength("onDemDcBic", "body", string(*m.OnDemDcBic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("onDemDcBic", "body", string(*m.OnDemDcBic), 11); err != nil {
		return err
	}

	return nil
}

func (m *DirectCreditUpdateRequest) validateOnDemandDcIban(formats strfmt.Registry) error {

	if err := validate.Required("onDemandDcIban", "body", m.OnDemandDcIban); err != nil {
		return err
	}

	if err := validate.MinLength("onDemandDcIban", "body", string(*m.OnDemandDcIban), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("onDemandDcIban", "body", string(*m.OnDemandDcIban), 34); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectCreditUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectCreditUpdateRequest) UnmarshalBinary(b []byte) error {
	var res DirectCreditUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

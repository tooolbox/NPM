// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyBlockCodeUpdateRequest loyalty block code update request
//
// swagger:model LoyaltyBlockCodeUpdateRequest
type LoyaltyBlockCodeUpdateRequest struct {

	//  Max length = 19, LMS Account Number. The account number should be present in account demographic records. Must be numeric and greater than spaces. This should be a valid LMS Account number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	//  Max length = 1, Block code assigned to the points account record. This block code and the block codes assigned to the linked account in the accounts receivable system control how loyalty points can be earned and redeemed.  Valid values are 'A' thru 'Z' and spaces.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	BlkCd1 *string `json:"blkCd1"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, Scheme ID that identifies the points scheme record assigned to the points account.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	Schm *string `json:"schm"`
}

// Validate validates this loyalty block code update request
func (m *LoyaltyBlockCodeUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlkCd1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyBlockCodeUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyBlockCodeUpdateRequest) validateBlkCd1(formats strfmt.Registry) error {

	if err := validate.Required("blkCd1", "body", m.BlkCd1); err != nil {
		return err
	}

	if err := validate.MinLength("blkCd1", "body", string(*m.BlkCd1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blkCd1", "body", string(*m.BlkCd1), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyBlockCodeUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyBlockCodeUpdateRequest) validateSchm(formats strfmt.Registry) error {

	if err := validate.Required("schm", "body", m.Schm); err != nil {
		return err
	}

	if err := validate.MinLength("schm", "body", string(*m.Schm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("schm", "body", string(*m.Schm), 5); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyBlockCodeUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyBlockCodeUpdateRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltyBlockCodeUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

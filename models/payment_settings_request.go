// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentSettingsRequest payment settings request
//
// swagger:model paymentSettingsRequest
type PaymentSettingsRequest struct {

	// 19 digit Account Number. Mandatory if CardNumber not used.
	// Max Length: 19
	// Min Length: 19
	// Pattern: ^[0-9]+$
	AccountNumber string `json:"accountNumber,omitempty"`

	// 16 digit Card Number. Mandatory if AccountNumber not used.
	// Max Length: 16
	// Min Length: 16
	// Pattern: ^[0-9]+$
	CardNumber string `json:"cardNumber,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	// Department set up in FirstPay.
	Department string `json:"department,omitempty"`

	// Issuer set up in FirstPay.
	Issuer string `json:"issuer,omitempty"`

	// Populate with the FirstPay userID
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this payment settings request
func (m *PaymentSettingsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentSettingsRequest) validateAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("accountNumber", "body", string(m.AccountNumber), 19); err != nil {
		return err
	}

	if err := validate.MaxLength("accountNumber", "body", string(m.AccountNumber), 19); err != nil {
		return err
	}

	if err := validate.Pattern("accountNumber", "body", string(m.AccountNumber), `^[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSettingsRequest) validateCardNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNumber) { // not required
		return nil
	}

	if err := validate.MinLength("cardNumber", "body", string(m.CardNumber), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNumber", "body", string(m.CardNumber), 16); err != nil {
		return err
	}

	if err := validate.Pattern("cardNumber", "body", string(m.CardNumber), `^[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSettingsRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentSettingsRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSettingsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSettingsRequest) UnmarshalBinary(b []byte) error {
	var res PaymentSettingsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

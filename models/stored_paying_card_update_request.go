// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoredPayingCardUpdateRequest stored paying card update request
//
// swagger:model storedPayingCardUpdateRequest
type StoredPayingCardUpdateRequest struct {

	// common
	Common *Header `json:"common,omitempty"`

	// Populate with True or False to indicate if the card is the default stored card.
	DefaultCard string `json:"defaultCard,omitempty"`

	// Populate with name of card given by customer, e.g. 'Joint Card'.
	StoredCardName string `json:"storedCardName,omitempty"`

	// Populate with the TokenID of the stored card.
	// Required: true
	TokenID *string `json:"tokenId"`

	// Populate with the FirstPay userID to target a specific region. Mandatory if memos are needed.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this stored paying card update request
func (m *StoredPayingCardUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoredPayingCardUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *StoredPayingCardUpdateRequest) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("tokenId", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

func (m *StoredPayingCardUpdateRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoredPayingCardUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoredPayingCardUpdateRequest) UnmarshalBinary(b []byte) error {
	var res StoredPayingCardUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

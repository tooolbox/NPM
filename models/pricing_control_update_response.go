// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PricingControlUpdateResponse pricing control update response
//
// swagger:model PricingControlUpdateResponse
type PricingControlUpdateResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	Account string `json:"account,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Unique Card Number embossed on card plastic.
	CrdNbr string `json:"crdNbr,omitempty"`

	//  Max length = 1, Dual Account Indicator: Value received from Input.  Values are: L = Local account F = Foreign account
	DualInd string `json:"dualInd,omitempty"`

	//  Max length = 3, Organization: Three digit Identification number of the organization.
	FgnOrg string `json:"fgnOrg,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`

	//  Max length = 3, PCT Control Indicator: Temporary Processing Control Table identification override controlled on the base segment.
	PctCtlID string `json:"pctCtlId,omitempty"`

	// Format: YYYYMMDD. PCT Expiry Date: Date on which the special pricing controls expire for the account.
	PctExpireDate string `json:"pctExpireDate,omitempty"`

	//  Max length = 1, PCT Level: Code that specifies the Processing Control Table level for the pricing control indicator. The logo in which accounts reside initially determines the level at which all accounts will process.  Values are: Space - Is not used  'S' - System Level  'O' - ORG Level  'L' - LOGO level
	PctLevel string `json:"pctLevel,omitempty"`

	// Format: YYYYMMDD. PCT Level Expiry Date: Date when PCT-LEVEL expires.
	PctLevelExpirDate string `json:"pctLevelExpirDate,omitempty"`

	// Format: YYYYMMDD. PCT Level Start Date: Date when PCT-LEVEL is effective. Temporary override at the base segment level.
	PctLevelStartDate string `json:"pctLevelStartDate,omitempty"`

	// Format: YYYYMMDD. PCT Start Date: Date on which the special pricing controls start for the account.
	PctStartDate string `json:"pctStartDate,omitempty"`

	//  Max length = 3, State Of Issue:  If account has a Bankcard Logo (Logo 'Type' value of 'X'), this field identifies the PCT, used for pricing options (interest, fees, account control, insurance).  If account has a non-Bankcard Logo, this code identifies the state, province, or country in which the account was issued.
	StateOfIssue string `json:"stateOfIssue,omitempty"`

	//  Max length = 3, State of Residence: Residence ID that identifies the state, province, or country where the accountholder resides.
	StateOfResid string `json:"stateOfResid,omitempty"`
}

// Validate validates this pricing control update response
func (m *PricingControlUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PricingControlUpdateResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PricingControlUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PricingControlUpdateResponse) UnmarshalBinary(b []byte) error {
	var res PricingControlUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

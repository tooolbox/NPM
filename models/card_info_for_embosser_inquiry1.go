// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardInfoForEmbosserInquiry1 card info for embosser inquiry1
//
// swagger:model CardInfoForEmbosserInquiry1
type CardInfoForEmbosserInquiry1 struct {

	//  Max length = 2, CRD SP##: Code that identifies each of the commercial card spending categories. Use the corresponding MAXIMUM, NBR, and FREQ fields to establish spending limits by category. The card association determines the CRD SP codes displayed.
	CardSpNbr string `json:"cardSpNbr,omitempty"`

	//  Max length = 6, Literal Value 'CRD SP'
	Literal string `json:"literal,omitempty"`

	//  Max length = 11, Spending limit in monetary units and subunits for each commercial card spending category.
	MaxSpndLmt string `json:"maxSpndLmt,omitempty"`

	//  Max length = 1, Code that indicates the frequency for commercial card spending limits.  The values are: 0 = Not used (Default) 1 = Daily 2 = Week-to-date 3 = Cycle-to-date 4 = Year-to-date.  E.g.: If FREQ is 1 (daily), the NBR field is the maximum number of transactions allowed per day.  If FREQ is 2 (week-to-date), the NBR field is the maximum number of transactions allowed per week (Sunday through Saturday).  If freq is 3 (cycle-to-date), the nbr field is the maximum number of transactions allowed per cycle.
	SpndFreq string `json:"spndFreq,omitempty"`

	//  Max length = 3, Number of transactions allowed for the frequency defined in the FREQ field. If this field is zero, the number of transactions is unlimited.
	SpndTxnNbr string `json:"spndTxnNbr,omitempty"`
}

// Validate validates this card info for embosser inquiry1
func (m *CardInfoForEmbosserInquiry1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CardInfoForEmbosserInquiry1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardInfoForEmbosserInquiry1) UnmarshalBinary(b []byte) error {
	var res CardInfoForEmbosserInquiry1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

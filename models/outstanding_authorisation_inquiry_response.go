// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OutstandingAuthorisationInquiryResponse outstanding authorisation inquiry response
//
// swagger:model OutstandingAuthorisationInquiryResponse
type OutstandingAuthorisationInquiryResponse struct {

	// 50 Occurrences of return authorisation data
	AuthGrp []*AuthGrpForOutstandingAuthorisationInquiry1 `json:"authGrp"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 61, Continuation data: Value populated by the service with the key values of the last populated auth records and this is used in the next service call to fetch the remaining records.
	ContData string `json:"contData,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyNod string `json:"currencyNod,omitempty"`

	//  Max length = 5, Indicates the number of authorization details retuned.
	NbrAuths string `json:"nbrAuths,omitempty"`
}

// Validate validates this outstanding authorisation inquiry response
func (m *OutstandingAuthorisationInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthGrp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutstandingAuthorisationInquiryResponse) validateAuthGrp(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthGrp) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthGrp); i++ {
		if swag.IsZero(m.AuthGrp[i]) { // not required
			continue
		}

		if m.AuthGrp[i] != nil {
			if err := m.AuthGrp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authGrp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutstandingAuthorisationInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutstandingAuthorisationInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutstandingAuthorisationInquiryResponse) UnmarshalBinary(b []byte) error {
	var res OutstandingAuthorisationInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

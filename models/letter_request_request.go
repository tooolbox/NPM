// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LetterRequestRequest letter request request
//
// swagger:model LetterRequestRequest
type LetterRequestRequest struct {

	//  Max length = 1, Code that determines whether a letter fee is charged. The values are: 0 = Do not charge a letter fee (Default) 1 = Charge letter fee 1 2 = Charge letter fee 2 3 = Charge letter fee 3 4 = Charge letter fee 4 5 = Charge letter fee 5
	// Max Length: 1
	// Min Length: 0
	ChgLtrFee *string `json:"chgLtrFee,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Flag that indicates whether this letter should be held from printing or held after printing.  The values are: Space = Do not hold this letter unless specified at another record level(Default) H = Print and hold this letter C = Do not print this coupon book request (send) D = Do not print this coupon book request (hold) T = Do not print this special letter request (hold) S = Do not print this special letter request (send) X = Payoff letter mailing (system-generated only) 0-9 = User-defined
	// Max Length: 1
	// Min Length: 0
	Hold *string `json:"hold,omitempty"`

	//  Max length = 11, Identification number assigned by the ASM (Account Service Management  System)
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiAsmCase *string `json:"kiAsmCase,omitempty"`

	//  Max length = 16, CDM (Credit Decision Management) system application number
	// Max Length: 16
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCdmAppl *string `json:"kiCdmAppl,omitempty"`

	//  Max length = 1, Application association within the CDM (Credit Decision Management) system. This field applies only to CDM. The values are: A = Applicant C = Co-applicant G = Guarantor
	// Max Length: 1
	// Min Length: 0
	KiCdmAssoc *string `json:"kiCdmAssoc,omitempty"`

	//  Max length = 3, CDM (Credit Decision Management) system. organization number that is required when the application is CDM
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCdmOrg *string `json:"kiCdmOrg,omitempty"`

	//  Max length = 1, Code that indicates that CDM files will be used for the letter The values are: 0 = Select CDM 1 = Do not select CDM
	// Max Length: 1
	// Min Length: 0
	KiCdmSelect *string `json:"kiCdmSelect,omitempty"`

	//  Max length = 3, CDM (Credit Decision Management) system identification number of the type of account to be accessed for this letter's information
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCdmType *string `json:"kiCdmType,omitempty"`

	//  Max length = 19, CMS account number
	// Max Length: 19
	// Min Length: 0
	KiCmsAcct *string `json:"kiCmsAcct,omitempty"`

	//  Max length = 4, CMS card sequence number
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCmsCardSeq *string `json:"kiCmsCardSeq,omitempty"`

	//  Max length = 3, CMS organization number
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCmsOrg *string `json:"kiCmsOrg,omitempty"`

	//  Max length = 2, Code that indicates the source of the name used to generate the name key. This field applies only to CMS.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCmsSc *string `json:"kiCmsSc,omitempty"`

	//  Max length = 1, Code that indicates that CMS files will be used for the letter The values are: 0 = Select CMS 1 = Do not select CMS
	// Max Length: 1
	// Min Length: 0
	KiCmsSelect *string `json:"kiCmsSelect,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	KiForeignUse *string `json:"kiForeignUse,omitempty"`

	//  Max length = 19, CMS account number that corresponds to the node
	// Max Length: 19
	// Min Length: 0
	KiHcsAcct *string `json:"kiHcsAcct,omitempty"`

	//  Max length = 2, Number that identifies the HCS hierarchy node level record to access for letter information. This field applies only when APPL is HCS.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiHcsLevel *string `json:"kiHcsLevel,omitempty"`

	//  Max length = 9, Number that identifies the HCS node record to access for letter information.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiHcsNode *string `json:"kiHcsNode,omitempty"`

	//  Max length = 3, Identification number of the HCS node organization accessed for this letter's information
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiHcsOrg *string `json:"kiHcsOrg,omitempty"`

	//  Max length = 1, Code that indicates that HCS files will be used for the letter The values are: 0 = Select HCS 1 = Do not select HCS
	// Max Length: 1
	// Min Length: 0
	KiHcsSelect *string `json:"kiHcsSelect,omitempty"`

	//  Max length = 1, Code that identifies the entry as either a store or merchant The values are: S = Store M = Merchant
	// Max Length: 1
	// Min Length: 0
	KiMbsFlag *string `json:"kiMbsFlag,omitempty"`

	//  Max length = 9, MBS store or merchant number
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiMbsKey *string `json:"kiMbsKey,omitempty"`

	//  Max length = 3, MBS organization number that is required when the application is MBS
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiMbsOrg *string `json:"kiMbsOrg,omitempty"`

	//  Max length = 1, Code that indicates that MBS files will be used for the letter The values are: 0 = Select MBS 1 = Do not select MBS
	// Max Length: 1
	// Min Length: 0
	KiMbsSelect *string `json:"kiMbsSelect,omitempty"`

	//  Max length = 3, Code that identifies the letter being requested
	// Max Length: 3
	// Min Length: 0
	LetterCode *string `json:"letterCode,omitempty"`

	//  Max length = 1, Code that indicates the letter's intended destination media. This service uses this field only when the REQUEST TYPE is 2 (both online and batch). The values are: Space = LTS printer defined in PRINTER ID field of this message (Default) 1 = Printer external to LTS 2 = SMS (Short message server such as mobile phone message) 3 = E-mail 4 = Other media external to LTS
	// Max Length: 1
	// Min Length: 0
	LetterDest *string `json:"letterDest,omitempty"`

	//  Max length = 3, Number that identifies the organization with which the letter is associated
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LetterOrg *string `json:"letterOrg,omitempty"`

	//  Max length = 6, User-defined variable 1
	// Max Length: 6
	// Min Length: 0
	Lv001 *string `json:"lv001,omitempty"`

	//  Max length = 8, User-defined variable 2
	// Max Length: 8
	// Min Length: 0
	Lv002 *string `json:"lv002,omitempty"`

	//  Max length = 12, User-defined variable 3
	// Max Length: 12
	// Min Length: 0
	Lv003 *string `json:"lv003,omitempty"`

	//  Max length = 16, User-defined variable 4
	// Max Length: 16
	// Min Length: 0
	Lv004 *string `json:"lv004,omitempty"`

	//  Max length = 20, User-defined variable 5
	// Max Length: 20
	// Min Length: 0
	Lv005 *string `json:"lv005,omitempty"`

	//  Max length = 40, User-defined variable 6
	// Max Length: 40
	// Min Length: 0
	Lv006 *string `json:"lv006,omitempty"`

	//  Max length = 40, User-defined variable 7
	// Max Length: 40
	// Min Length: 0
	Lv007 *string `json:"lv007,omitempty"`

	//  Max length = 40, User-defined variable 8
	// Max Length: 40
	// Min Length: 0
	Lv008 *string `json:"lv008,omitempty"`

	//  Max length = 40, User-defined variable 9
	// Max Length: 40
	// Min Length: 0
	Lv009 *string `json:"lv009,omitempty"`

	//  Max length = 40, User-defined variable 10
	// Max Length: 40
	// Min Length: 0
	Lv010 *string `json:"lv010,omitempty"`

	//  Max length = 5, Credit plan number of the account for which a letter is requested
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNo *string `json:"planNo,omitempty"`

	//  Max length = 4, Code that identifies the printer
	// Max Length: 4
	// Min Length: 0
	PrinterID *string `json:"printerId,omitempty"`

	//  Max length = 3, Plan sequence/record number for which a letter is requested
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecNo *string `json:"recNo,omitempty"`

	//  Max length = 23, User-defined identification number for the loan credit plan segment for which a letter is requested
	// Max Length: 23
	// Min Length: 0
	RefNumber *string `json:"refNumber,omitempty"`

	//  Max length = 1, Letter request action The values are: 0 = Online only 1 = Batch only 2 = Both online and batch
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RequestType *string `json:"requestType,omitempty"`

	//  Max length = 17, Reserved Amount 1
	// Pattern: ^(-)?[0-9]{1,17}$
	ResvAmt1 string `json:"resvAmt1,omitempty"`

	//  Max length = 17, Reserved Amount 2
	// Pattern: ^(-)?[0-9]{1,17}$
	ResvAmt2 string `json:"resvAmt2,omitempty"`

	//  Max length = 17, Reserved Amount 3
	// Pattern: ^(-)?[0-9]{1,17}$
	ResvAmt3 string `json:"resvAmt3,omitempty"`

	//  Max length = 17, Reserved Amount 4
	// Pattern: ^(-)?[0-9]{1,17}$
	ResvAmt4 string `json:"resvAmt4,omitempty"`

	//  Max length = 17, Reserved Amount 5
	// Pattern: ^(-)?[0-9]{1,17}$
	ResvAmt5 string `json:"resvAmt5,omitempty"`

	//  Max length = 2, Reserved code 1
	// Max Length: 2
	// Min Length: 0
	ResvCode1 *string `json:"resvCode1,omitempty"`

	//  Max length = 2, Reserved code 2
	// Max Length: 2
	// Min Length: 0
	ResvCode2 *string `json:"resvCode2,omitempty"`

	//  Max length = 2, Reserved code 3
	// Max Length: 2
	// Min Length: 0
	ResvCode3 *string `json:"resvCode3,omitempty"`

	//  Max length = 2, Reserved code 4
	// Max Length: 2
	// Min Length: 0
	ResvCode4 *string `json:"resvCode4,omitempty"`

	//  Max length = 2, Reserved code 5
	// Max Length: 2
	// Min Length: 0
	ResvCode5 *string `json:"resvCode5,omitempty"`

	// Format: YYYYMMDD. Reserved Date 1
	ResvDate1 string `json:"resvDate1,omitempty"`

	// Format: YYYYMMDD. Reserved Date 2
	ResvDate2 string `json:"resvDate2,omitempty"`

	// Format: YYYYMMDD. Reserved Date 3
	ResvDate3 string `json:"resvDate3,omitempty"`

	// Format: YYYYMMDD. Reserved Date 4
	ResvDate4 string `json:"resvDate4,omitempty"`

	// Format: YYYYMMDD. Reserved Date 5
	ResvDate5 string `json:"resvDate5,omitempty"`

	//  Max length = 1, ort code for the letter that is defined at either the system or organization level. If you do not provide the code, the sort code on the letter record becomes the default.
	// Max Length: 1
	// Min Length: 0
	Sort *string `json:"sort,omitempty"`
}

// Validate validates this letter request request
func (m *LetterRequestRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChgLtrFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiAsmCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmAppl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmAssoc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsSc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterDest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv001(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv002(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv003(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv004(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv005(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv006(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv007(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv008(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv009(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLv010(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrinterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmt1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmt2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmt3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmt4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmt5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LetterRequestRequest) validateChgLtrFee(formats strfmt.Registry) error {

	if swag.IsZero(m.ChgLtrFee) { // not required
		return nil
	}

	if err := validate.MinLength("chgLtrFee", "body", string(*m.ChgLtrFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chgLtrFee", "body", string(*m.ChgLtrFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LetterRequestRequest) validateHold(formats strfmt.Registry) error {

	if swag.IsZero(m.Hold) { // not required
		return nil
	}

	if err := validate.MinLength("hold", "body", string(*m.Hold), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("hold", "body", string(*m.Hold), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiAsmCase(formats strfmt.Registry) error {

	if swag.IsZero(m.KiAsmCase) { // not required
		return nil
	}

	if err := validate.MinLength("kiAsmCase", "body", string(*m.KiAsmCase), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiAsmCase", "body", string(*m.KiAsmCase), 11); err != nil {
		return err
	}

	if err := validate.Pattern("kiAsmCase", "body", string(*m.KiAsmCase), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCdmAppl(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmAppl) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmAppl", "body", string(*m.KiCdmAppl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmAppl", "body", string(*m.KiCdmAppl), 16); err != nil {
		return err
	}

	if err := validate.Pattern("kiCdmAppl", "body", string(*m.KiCdmAppl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCdmAssoc(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmAssoc) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmAssoc", "body", string(*m.KiCdmAssoc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmAssoc", "body", string(*m.KiCdmAssoc), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCdmOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmOrg", "body", string(*m.KiCdmOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmOrg", "body", string(*m.KiCdmOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiCdmOrg", "body", string(*m.KiCdmOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCdmSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmSelect", "body", string(*m.KiCdmSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmSelect", "body", string(*m.KiCdmSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCdmType(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmType) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmType", "body", string(*m.KiCdmType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmType", "body", string(*m.KiCdmType), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiCdmType", "body", string(*m.KiCdmType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCmsAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsAcct) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsAcct", "body", string(*m.KiCmsAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsAcct", "body", string(*m.KiCmsAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCmsCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsCardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsCardSeq", "body", string(*m.KiCmsCardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsCardSeq", "body", string(*m.KiCmsCardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("kiCmsCardSeq", "body", string(*m.KiCmsCardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCmsOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsOrg", "body", string(*m.KiCmsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsOrg", "body", string(*m.KiCmsOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiCmsOrg", "body", string(*m.KiCmsOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCmsSc(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsSc) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsSc", "body", string(*m.KiCmsSc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsSc", "body", string(*m.KiCmsSc), 2); err != nil {
		return err
	}

	if err := validate.Pattern("kiCmsSc", "body", string(*m.KiCmsSc), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiCmsSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsSelect", "body", string(*m.KiCmsSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsSelect", "body", string(*m.KiCmsSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.KiForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("kiForeignUse", "body", string(*m.KiForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiForeignUse", "body", string(*m.KiForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiHcsAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsAcct) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsAcct", "body", string(*m.KiHcsAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsAcct", "body", string(*m.KiHcsAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiHcsLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsLevel) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsLevel", "body", string(*m.KiHcsLevel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsLevel", "body", string(*m.KiHcsLevel), 2); err != nil {
		return err
	}

	if err := validate.Pattern("kiHcsLevel", "body", string(*m.KiHcsLevel), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiHcsNode(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsNode) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsNode", "body", string(*m.KiHcsNode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsNode", "body", string(*m.KiHcsNode), 9); err != nil {
		return err
	}

	if err := validate.Pattern("kiHcsNode", "body", string(*m.KiHcsNode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiHcsOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsOrg", "body", string(*m.KiHcsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsOrg", "body", string(*m.KiHcsOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiHcsOrg", "body", string(*m.KiHcsOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiHcsSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsSelect", "body", string(*m.KiHcsSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsSelect", "body", string(*m.KiHcsSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiMbsFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsFlag) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsFlag", "body", string(*m.KiMbsFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsFlag", "body", string(*m.KiMbsFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiMbsKey(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsKey) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsKey", "body", string(*m.KiMbsKey), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsKey", "body", string(*m.KiMbsKey), 9); err != nil {
		return err
	}

	if err := validate.Pattern("kiMbsKey", "body", string(*m.KiMbsKey), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiMbsOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsOrg", "body", string(*m.KiMbsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsOrg", "body", string(*m.KiMbsOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiMbsOrg", "body", string(*m.KiMbsOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateKiMbsSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsSelect", "body", string(*m.KiMbsSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsSelect", "body", string(*m.KiMbsSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLetterCode(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterCode) { // not required
		return nil
	}

	if err := validate.MinLength("letterCode", "body", string(*m.LetterCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letterCode", "body", string(*m.LetterCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLetterDest(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterDest) { // not required
		return nil
	}

	if err := validate.MinLength("letterDest", "body", string(*m.LetterDest), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letterDest", "body", string(*m.LetterDest), 1); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLetterOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterOrg) { // not required
		return nil
	}

	if err := validate.MinLength("letterOrg", "body", string(*m.LetterOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letterOrg", "body", string(*m.LetterOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("letterOrg", "body", string(*m.LetterOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv001(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv001) { // not required
		return nil
	}

	if err := validate.MinLength("lv001", "body", string(*m.Lv001), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv001", "body", string(*m.Lv001), 6); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv002(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv002) { // not required
		return nil
	}

	if err := validate.MinLength("lv002", "body", string(*m.Lv002), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv002", "body", string(*m.Lv002), 8); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv003(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv003) { // not required
		return nil
	}

	if err := validate.MinLength("lv003", "body", string(*m.Lv003), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv003", "body", string(*m.Lv003), 12); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv004(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv004) { // not required
		return nil
	}

	if err := validate.MinLength("lv004", "body", string(*m.Lv004), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv004", "body", string(*m.Lv004), 16); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv005(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv005) { // not required
		return nil
	}

	if err := validate.MinLength("lv005", "body", string(*m.Lv005), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv005", "body", string(*m.Lv005), 20); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv006(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv006) { // not required
		return nil
	}

	if err := validate.MinLength("lv006", "body", string(*m.Lv006), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv006", "body", string(*m.Lv006), 40); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv007(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv007) { // not required
		return nil
	}

	if err := validate.MinLength("lv007", "body", string(*m.Lv007), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv007", "body", string(*m.Lv007), 40); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv008(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv008) { // not required
		return nil
	}

	if err := validate.MinLength("lv008", "body", string(*m.Lv008), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv008", "body", string(*m.Lv008), 40); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv009(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv009) { // not required
		return nil
	}

	if err := validate.MinLength("lv009", "body", string(*m.Lv009), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv009", "body", string(*m.Lv009), 40); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateLv010(formats strfmt.Registry) error {

	if swag.IsZero(m.Lv010) { // not required
		return nil
	}

	if err := validate.MinLength("lv010", "body", string(*m.Lv010), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lv010", "body", string(*m.Lv010), 40); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validatePlanNo(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanNo) { // not required
		return nil
	}

	if err := validate.MinLength("planNo", "body", string(*m.PlanNo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNo", "body", string(*m.PlanNo), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNo", "body", string(*m.PlanNo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validatePrinterID(formats strfmt.Registry) error {

	if swag.IsZero(m.PrinterID) { // not required
		return nil
	}

	if err := validate.MinLength("printerId", "body", string(*m.PrinterID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("printerId", "body", string(*m.PrinterID), 4); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateRecNo(formats strfmt.Registry) error {

	if swag.IsZero(m.RecNo) { // not required
		return nil
	}

	if err := validate.MinLength("recNo", "body", string(*m.RecNo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recNo", "body", string(*m.RecNo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("recNo", "body", string(*m.RecNo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateRefNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.RefNumber) { // not required
		return nil
	}

	if err := validate.MinLength("refNumber", "body", string(*m.RefNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("refNumber", "body", string(*m.RefNumber), 23); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateRequestType(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	if err := validate.MinLength("requestType", "body", string(*m.RequestType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("requestType", "body", string(*m.RequestType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("requestType", "body", string(*m.RequestType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvAmt1(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmt1) { // not required
		return nil
	}

	if err := validate.Pattern("resvAmt1", "body", string(m.ResvAmt1), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvAmt2(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmt2) { // not required
		return nil
	}

	if err := validate.Pattern("resvAmt2", "body", string(m.ResvAmt2), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvAmt3(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmt3) { // not required
		return nil
	}

	if err := validate.Pattern("resvAmt3", "body", string(m.ResvAmt3), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvAmt4(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmt4) { // not required
		return nil
	}

	if err := validate.Pattern("resvAmt4", "body", string(m.ResvAmt4), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvAmt5(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmt5) { // not required
		return nil
	}

	if err := validate.Pattern("resvAmt5", "body", string(m.ResvAmt5), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode1) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode1", "body", string(*m.ResvCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode1", "body", string(*m.ResvCode1), 2); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode2) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode2", "body", string(*m.ResvCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode2", "body", string(*m.ResvCode2), 2); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvCode3(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode3) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode3", "body", string(*m.ResvCode3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode3", "body", string(*m.ResvCode3), 2); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvCode4(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode4) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode4", "body", string(*m.ResvCode4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode4", "body", string(*m.ResvCode4), 2); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateResvCode5(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode5) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode5", "body", string(*m.ResvCode5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode5", "body", string(*m.ResvCode5), 2); err != nil {
		return err
	}

	return nil
}

func (m *LetterRequestRequest) validateSort(formats strfmt.Registry) error {

	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if err := validate.MinLength("sort", "body", string(*m.Sort), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sort", "body", string(*m.Sort), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LetterRequestRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LetterRequestRequest) UnmarshalBinary(b []byte) error {
	var res LetterRequestRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PinValidationRequest pin validation request
//
// swagger:model PinValidationRequest
type PinValidationRequest struct {

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Key Association: Association used to reference keys that are shared with an external association such as a card bureau, Visa, or MasterCard.
	// Max Length: 3
	// Min Length: 0
	KeyAssoc *string `json:"keyAssoc,omitempty"`

	//  Max length = 16, Pin block encrypted under keys exchanged between First Data and Client. Pin Block cannot be spaces.
	// Max Length: 16
	// Min Length: 0
	PinBlock *string `json:"pinBlock,omitempty"`
}

// Validate validates this pin validation request
func (m *PinValidationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyAssoc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinBlock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PinValidationRequest) validateCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *PinValidationRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *PinValidationRequest) validateKeyAssoc(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyAssoc) { // not required
		return nil
	}

	if err := validate.MinLength("keyAssoc", "body", string(*m.KeyAssoc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("keyAssoc", "body", string(*m.KeyAssoc), 3); err != nil {
		return err
	}

	return nil
}

func (m *PinValidationRequest) validatePinBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.PinBlock) { // not required
		return nil
	}

	if err := validate.MinLength("pinBlock", "body", string(*m.PinBlock), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pinBlock", "body", string(*m.PinBlock), 16); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PinValidationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PinValidationRequest) UnmarshalBinary(b []byte) error {
	var res PinValidationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

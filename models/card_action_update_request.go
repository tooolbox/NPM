// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardActionUpdateRequest card action update request
//
// swagger:model CardActionUpdateRequest
type CardActionUpdateRequest struct {

	//  Max length = 1, Card Issue Action Code.  Values are: 0= No action 1= Issue new card(s) 2= Issue additional card(s) 3= Issue replacement card(s) 4= Returned card(s) 5= Produce PIN Mailer 6= Issue emergency replacement        card(s) Value can't be 2 (additional card requested) if smart card. Value of 1 allowed only if date last plastic issued is equal to zeroes. If Date Last Plastic issued > 0, this field must be 0, 2,3,4,5, or 6. When Action = 5,cards:returned and # cards requested must be      0.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	Actn *string `json:"actn"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CrdNbr *string `json:"crdNbr"`

	//  Max length = 4, Card sequence number: record number assigned to the card (for card numbering schemes of 0, 1, and 3) and the sequence number assigned to the card (for card numbering schemes of 2). This number is part of the record key.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdSeq *string `json:"crdSeq,omitempty"`

	//  Max length = 2, Number of Cards Requested. Cannot be greater than 1 if smart card. Must be greater than 0 and < CARDS:OUTSTANDING  if ACTION = 3, 6. If ACTION = 5, this field must be 0.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrReqCrds *string `json:"nbrReqCrds,omitempty"`

	//  Max length = 2, Number of cards that were returned.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrRtnCrds *string `json:"nbrRtnCrds,omitempty"`
}

// Validate validates this card action update request
func (m *CardActionUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrReqCrds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrRtnCrds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardActionUpdateRequest) validateActn(formats strfmt.Registry) error {

	if err := validate.Required("actn", "body", m.Actn); err != nil {
		return err
	}

	if err := validate.MinLength("actn", "body", string(*m.Actn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actn", "body", string(*m.Actn), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardActionUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardActionUpdateRequest) validateCrdNbr(formats strfmt.Registry) error {

	if err := validate.Required("crdNbr", "body", m.CrdNbr); err != nil {
		return err
	}

	if err := validate.MinLength("crdNbr", "body", string(*m.CrdNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdNbr", "body", string(*m.CrdNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardActionUpdateRequest) validateCrdSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdSeq) { // not required
		return nil
	}

	if err := validate.MinLength("crdSeq", "body", string(*m.CrdSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdSeq", "body", string(*m.CrdSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("crdSeq", "body", string(*m.CrdSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardActionUpdateRequest) validateNbrReqCrds(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrReqCrds) { // not required
		return nil
	}

	if err := validate.MinLength("nbrReqCrds", "body", string(*m.NbrReqCrds), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrReqCrds", "body", string(*m.NbrReqCrds), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrReqCrds", "body", string(*m.NbrReqCrds), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardActionUpdateRequest) validateNbrRtnCrds(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrRtnCrds) { // not required
		return nil
	}

	if err := validate.MinLength("nbrRtnCrds", "body", string(*m.NbrRtnCrds), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrRtnCrds", "body", string(*m.NbrRtnCrds), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrRtnCrds", "body", string(*m.NbrRtnCrds), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardActionUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardActionUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CardActionUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FasterPaymentRequest faster payment request
//
// swagger:model FasterPaymentRequest
type FasterPaymentRequest struct {

	//  Max length = 19, Account or Card Number: Number of Customer's account or Card. Must be numeric and greater than zero.  Enter an account number to search for a match on the Account Base Segment record or card number to search for a match on the Embossing Record.
	// Max Length: 19
	// Min Length: 0
	AcctNo *string `json:"acctNo,omitempty"`

	//  Max length = 17, Valid Amount.  1. Value should be numeric, In monetary units and subunits
	// Required: true
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Amt *string `json:"amt"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 42, Standard as defined by Faster Payment Scheme Made up of                                Length TRANSACTION REF NUMBER     18  PAYMENT TYPE CODE                 2 DATE SENT                                    8 CURRENCY                                    3 SENDING FPS INSTITUTION       11  Field cannot be spaces or low-values.
	// Required: true
	// Max Length: 42
	// Min Length: 0
	FpsID *string `json:"fpsId"`

	//  Max length = 8, Return Code from FPS(Faster Payment Scheme).  1. Value should be numeric
	// Max Length: 8
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FpsRetCd *string `json:"fpsRetCd,omitempty"`

	//  Max length = 20, User's sign-on name: User ID as defined in FirstVision.
	// Max Length: 20
	// Min Length: 0
	Name *string `json:"name,omitempty"`

	//  Max length = 34, Sending Account Number. Standard as defined by Faster Payment Scheme 1. Field cannot be spaces or low-values.
	// Required: true
	// Max Length: 34
	// Min Length: 0
	SendingAccNo *string `json:"sendingAccNo"`

	//  Max length = 11, Identifies settlement processed. Format of field is CCYYMMDDnnn 1. Value should be numeric
	// Required: true
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SettID *string `json:"settId"`

	//  Max length = 11, Branch sort code of the institution from which the payment funds are being provided. 1. Field cannot be spaces or low values
	// Required: true
	// Max Length: 11
	// Min Length: 0
	SortCode *string `json:"sortCode"`

	//  Max length = 5, Source Channel. Defines the channel through which the payment was received. E.g. 'FP CI' - for External Payment 'IB'  for INTERNET BANKING  'TB' for TELEPHONE BANKING 'IVR' for  IVR 'IB' for IBAPP1LL 'LL' for OFL 'LLOLI' for PFE 'O4B' for ONLINE4BUSINESS 'COL' for COL 1. Field cannot be spaces or low-values. There is no editing for specific values.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	SrcCnl *string `json:"srcCnl"`

	//  Max length = 4, PYMT=  for payment txns PYRV = for payment reversal txns 1. Must contain 'PYMT' or 'PYRV'
	// Required: true
	// Max Length: 4
	// Min Length: 0
	SvcType *string `json:"svcType"`

	//  Max length = 16, Creation timestamp. Format of field is CCYYMMDD HHMMSSS.  1. Field cannot be spaces or low-values.
	// Required: true
	// Max Length: 16
	// Min Length: 0
	TimeStamp *string `json:"timeStamp"`

	// Format: YYYYMMDD. FPS(Faster Payment Scheme) cutoff date. Valid date in CCYYMMDD format 1. Must be a valid date
	// Required: true
	ValDate *string `json:"valDate"`
}

// Validate validates this faster payment request
func (m *FasterPaymentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFpsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFpsRetCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendingAccNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcCnl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FasterPaymentRequest) validateAcctNo(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNo) { // not required
		return nil
	}

	if err := validate.MinLength("acctNo", "body", string(*m.AcctNo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNo", "body", string(*m.AcctNo), 19); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateAmt(formats strfmt.Registry) error {

	if err := validate.Required("amt", "body", m.Amt); err != nil {
		return err
	}

	if err := validate.MinLength("amt", "body", string(*m.Amt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amt", "body", string(*m.Amt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("amt", "body", string(*m.Amt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *FasterPaymentRequest) validateFpsID(formats strfmt.Registry) error {

	if err := validate.Required("fpsId", "body", m.FpsID); err != nil {
		return err
	}

	if err := validate.MinLength("fpsId", "body", string(*m.FpsID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fpsId", "body", string(*m.FpsID), 42); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateFpsRetCd(formats strfmt.Registry) error {

	if swag.IsZero(m.FpsRetCd) { // not required
		return nil
	}

	if err := validate.MinLength("fpsRetCd", "body", string(*m.FpsRetCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fpsRetCd", "body", string(*m.FpsRetCd), 8); err != nil {
		return err
	}

	if err := validate.Pattern("fpsRetCd", "body", string(*m.FpsRetCd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 20); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateSendingAccNo(formats strfmt.Registry) error {

	if err := validate.Required("sendingAccNo", "body", m.SendingAccNo); err != nil {
		return err
	}

	if err := validate.MinLength("sendingAccNo", "body", string(*m.SendingAccNo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sendingAccNo", "body", string(*m.SendingAccNo), 34); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateSettID(formats strfmt.Registry) error {

	if err := validate.Required("settId", "body", m.SettID); err != nil {
		return err
	}

	if err := validate.MinLength("settId", "body", string(*m.SettID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("settId", "body", string(*m.SettID), 11); err != nil {
		return err
	}

	if err := validate.Pattern("settId", "body", string(*m.SettID), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateSortCode(formats strfmt.Registry) error {

	if err := validate.Required("sortCode", "body", m.SortCode); err != nil {
		return err
	}

	if err := validate.MinLength("sortCode", "body", string(*m.SortCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sortCode", "body", string(*m.SortCode), 11); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateSrcCnl(formats strfmt.Registry) error {

	if err := validate.Required("srcCnl", "body", m.SrcCnl); err != nil {
		return err
	}

	if err := validate.MinLength("srcCnl", "body", string(*m.SrcCnl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("srcCnl", "body", string(*m.SrcCnl), 5); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateSvcType(formats strfmt.Registry) error {

	if err := validate.Required("svcType", "body", m.SvcType); err != nil {
		return err
	}

	if err := validate.MinLength("svcType", "body", string(*m.SvcType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcType", "body", string(*m.SvcType), 4); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateTimeStamp(formats strfmt.Registry) error {

	if err := validate.Required("timeStamp", "body", m.TimeStamp); err != nil {
		return err
	}

	if err := validate.MinLength("timeStamp", "body", string(*m.TimeStamp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("timeStamp", "body", string(*m.TimeStamp), 16); err != nil {
		return err
	}

	return nil
}

func (m *FasterPaymentRequest) validateValDate(formats strfmt.Registry) error {

	if err := validate.Required("valDate", "body", m.ValDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FasterPaymentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FasterPaymentRequest) UnmarshalBinary(b []byte) error {
	var res FasterPaymentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

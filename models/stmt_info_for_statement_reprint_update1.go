// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StmtInfoForStatementReprintUpdate1 stmt info for statement reprint update1
//
// swagger:model StmtInfoForStatementReprintUpdate1
type StmtInfoForStatementReprintUpdate1 struct {

	//  Max length = 1, Reprint Flag: Code that requests a statement reprint and identifies the address to use for each listed cycle. Requested statements are produced during the next batch processing run.  Values are: C = Reprint statement with current address P = Reprint statement with the address that existed at the time the statement was originally produced. If you use P, the PRIOR ADDR field on the CMS Organization record (ARMO02) must be set to Y to build the prior address file.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ReprintFlg *string `json:"reprintFlg"`

	// Format: YYYYMMDD. Statement ID Code: Code that puts the statements records into descending date sequence.   Must be numeric. Must be a valid date. The statement date is stored in the Small and Large Statement file in CMS. Date format is CCYY-MM-DD.
	// Required: true
	StmtDt *string `json:"stmtDt"`
}

// Validate validates this stmt info for statement reprint update1
func (m *StmtInfoForStatementReprintUpdate1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReprintFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtDt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StmtInfoForStatementReprintUpdate1) validateReprintFlg(formats strfmt.Registry) error {

	if err := validate.Required("reprintFlg", "body", m.ReprintFlg); err != nil {
		return err
	}

	if err := validate.MinLength("reprintFlg", "body", string(*m.ReprintFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reprintFlg", "body", string(*m.ReprintFlg), 1); err != nil {
		return err
	}

	return nil
}

func (m *StmtInfoForStatementReprintUpdate1) validateStmtDt(formats strfmt.Registry) error {

	if err := validate.Required("stmtDt", "body", m.StmtDt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StmtInfoForStatementReprintUpdate1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StmtInfoForStatementReprintUpdate1) UnmarshalBinary(b []byte) error {
	var res StmtInfoForStatementReprintUpdate1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

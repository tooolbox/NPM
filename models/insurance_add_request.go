// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InsuranceAddRequest insurance add request
//
// swagger:model InsuranceAddRequest
type InsuranceAddRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account or card. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	// Format: YYYYMMDD. Date of birth of the insured party.
	Dob string `json:"dob,omitempty"`

	//  Max length = 1, Dual currency indicator that specifies whether the request applies to the local or foreign account when the dual currency feature is in use and the account organization is not provided in the input message The values are: L = Local account F = Foreign account. If dual currency is not being used or if the field is left blank, the value is L.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	// Format: YYYYMMDD. Effective date of the insurance product. This date may be a future date. CMS assesses the first insurance premium in the cycle that this date occurs. Even if you backdate this field to a date in a previous cycle, CMS calculates insurance charges for the current cycle only. If no entry is made to the EFFECTIVE DATE field when the insurance product is added to the account, CMS assigns the organization's next processing date to this field
	EffDate string `json:"effDate,omitempty"`

	//  Max length = 3, Code that identifies the insurance enrollment ID of the account holder which determines the Processing Control Table and the Insurance table for an account. If this field is blank, CMS defaults to the residence ID in the Account Base Segment record (RESIDENCE ID on ARMB03). You can enter a code in this field only if the enrollment ID option is established in the Insurance table associated with a product (ENROLLMENT ID on ARMI02).
	// Max Length: 3
	// Min Length: 0
	EnrollmentID *string `json:"enrollmentId,omitempty"`

	//  Max length = 9, Identification number of the microfiche where documents for this insurance product are located. The fiche number may be required using an option on the Insurance table (FICHE NBR on ARMI02 is 1).  If the fiche number is not required, (FICHE NBR on ARMI02 is 0), you can still enter a fiche number in this field. If the fiche number is required, CMS does not assess insurance premiums until the fiche number has been entered.
	// Max Length: 9
	// Min Length: 0
	FicheNbr *string `json:"ficheNbr,omitempty"`

	//  Max length = 1, Insurance Channel from which insurance  application received. Example: internet, Postal, store and phone.  Valid values are: P - Postal S - Store I - Internet T - Phone Spaces or low values will be defaulted to a value of 'P'
	// Max Length: 1
	// Min Length: 0
	InsChannel *string `json:"insChannel,omitempty"`

	//  Max length = 19, Customer number of the Customer Name/Address record that identifies the insured customer for the insurance product. This customer number must identify a valid, active Customer Name/ Address record.  The INSURED CUST NBR field is used only when the INSURED PARTY flag is 2 (insured third party).
	// Max Length: 19
	// Min Length: 0
	InsCustNbr *string `json:"insCustNbr,omitempty"`

	//  Max length = 1, Code that identifies the type of insured party whose date of birth is used. The values are: 0 = cardholder (Default) 1 = Co-cardholder 2 = Insured third party 3 = cardholder and co-cardholder.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	InsParty *string `json:"insParty,omitempty"`

	//  Max length = 18, INS POLICY NBR
	// Max Length: 18
	// Min Length: 0
	InsPolicyNbr *string `json:"insPolicyNbr,omitempty"`

	//  Max length = 2, INS PROD CD
	// Max Length: 2
	// Min Length: 0
	InsProdCd *string `json:"insProdCd,omitempty"`

	// Format: YYYYMMDD. Sales date is the date when the customer has contracted the insurance, not the system enrolment date.
	InsSalesDate string `json:"insSalesDate,omitempty"`

	//  Max length = 1, Insurance status code: F = Insurance product is in force. Assign this value to add a new insurance product or to manually reinstate an insurance product that has been canceled. I = Insurance product is inactive due to a user defined condition. CMS does not calculate or bill a premium until you set INS-STATUS to F.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	InsStatCd *string `json:"insStatCd"`

	//  Max length = 9, Fixed premium amount. The RATE METHOD on the Insurance table (ARMI02) must be 07 (flat rate defined on the account) to enter a fixed premium amount.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PremRate1 *string `json:"premRate1,omitempty"`

	//  Max length = 2, SRC
	// Max Length: 2
	// Min Length: 0
	Src *string `json:"src,omitempty"`
}

// Validate validates this insurance add request
func (m *InsuranceAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFicheNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsCustNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsPolicyNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsProdCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsStatCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePremRate1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsuranceAddRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *InsuranceAddRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateEnrollmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentID) { // not required
		return nil
	}

	if err := validate.MinLength("enrollmentId", "body", string(*m.EnrollmentID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("enrollmentId", "body", string(*m.EnrollmentID), 3); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateFicheNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.FicheNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ficheNbr", "body", string(*m.FicheNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ficheNbr", "body", string(*m.FicheNbr), 9); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateInsChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.InsChannel) { // not required
		return nil
	}

	if err := validate.MinLength("insChannel", "body", string(*m.InsChannel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("insChannel", "body", string(*m.InsChannel), 1); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateInsCustNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.InsCustNbr) { // not required
		return nil
	}

	if err := validate.MinLength("insCustNbr", "body", string(*m.InsCustNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("insCustNbr", "body", string(*m.InsCustNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateInsParty(formats strfmt.Registry) error {

	if swag.IsZero(m.InsParty) { // not required
		return nil
	}

	if err := validate.MinLength("insParty", "body", string(*m.InsParty), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("insParty", "body", string(*m.InsParty), 1); err != nil {
		return err
	}

	if err := validate.Pattern("insParty", "body", string(*m.InsParty), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateInsPolicyNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.InsPolicyNbr) { // not required
		return nil
	}

	if err := validate.MinLength("insPolicyNbr", "body", string(*m.InsPolicyNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("insPolicyNbr", "body", string(*m.InsPolicyNbr), 18); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateInsProdCd(formats strfmt.Registry) error {

	if swag.IsZero(m.InsProdCd) { // not required
		return nil
	}

	if err := validate.MinLength("insProdCd", "body", string(*m.InsProdCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("insProdCd", "body", string(*m.InsProdCd), 2); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateInsStatCd(formats strfmt.Registry) error {

	if err := validate.Required("insStatCd", "body", m.InsStatCd); err != nil {
		return err
	}

	if err := validate.MinLength("insStatCd", "body", string(*m.InsStatCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("insStatCd", "body", string(*m.InsStatCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validatePremRate1(formats strfmt.Registry) error {

	if swag.IsZero(m.PremRate1) { // not required
		return nil
	}

	if err := validate.MinLength("premRate1", "body", string(*m.PremRate1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("premRate1", "body", string(*m.PremRate1), 9); err != nil {
		return err
	}

	if err := validate.Pattern("premRate1", "body", string(*m.PremRate1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InsuranceAddRequest) validateSrc(formats strfmt.Registry) error {

	if swag.IsZero(m.Src) { // not required
		return nil
	}

	if err := validate.MinLength("src", "body", string(*m.Src), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("src", "body", string(*m.Src), 2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InsuranceAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InsuranceAddRequest) UnmarshalBinary(b []byte) error {
	var res InsuranceAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

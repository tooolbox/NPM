// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountCustomFieldsUpdateRequest account custom fields update request
//
// swagger:model AccountCustomFieldsUpdateRequest
type AccountCustomFieldsUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	//  Max length = 7, Annual percentage rate defined for balance transfers. The value entered in this field is based on the percentage NOD defined on the Organization record
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AprBalxfr *string `json:"aprBalxfr,omitempty"`

	//  Max length = 7, Cash APR: Annual percentage rate defined for cash transactions. The value entered in this field is based on the percentage NOD defined on the Organization record.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AprCash *string `json:"aprCash,omitempty"`

	//  Max length = 7, Retail APR: Annual percentage rate defined for retail transactions. The value entered in this field is based on the percentage NOD defined on the Organization record.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AprRtl *string `json:"aprRtl,omitempty"`

	//  Max length = 2, Field indicates whether Customer wants to update the ATM Pacakge Counter value. Valid values are 01 thru 98 andshould be less than or equal to Logo Level field ATM CASH LIM value.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AtmPckgCtr *string `json:"atmPckgCtr,omitempty"`

	//  Max length = 1, Field indicates whether Customer has opted in for ATM Package Feature at Account Level. Valid Values are 'Y','N',Spaces. 'Y' - Customer has opted for ATM Package Feature 'N' or Space = Customer has not opted for ATM Pacakge Feature.
	// Max Length: 1
	// Min Length: 0
	AtmPckgReq *string `json:"atmPckgReq,omitempty"`

	//  Max length = 1, Auth EPP Opt Flag. Valid values are: <UL><LI><EM>Y-</EM>YES VALID</LI><LI><EM>N-</EM>NO VALID</LI></UL>
	// Max Length: 1
	// Min Length: 0
	AuthEppOptFlag *string `json:"authEppOptFlag,omitempty"`

	//  Max length = 1, ATM AUTH Channel: Code that indicates whether ATM transaction channel selection for authorization alert. Valid values: 0 - ATM channel selection is not active 1 - ATM channel selection is active
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTxtChnlAtm *string `json:"authTxtChnlAtm,omitempty"`

	//  Max length = 1, ECOM AUTH Channel: Code that indicates whether ECOM transaction channel selection for authorization alert. Valid values: 0 - ECOM channel selection is not active 1 - ECOM channel selection is active
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTxtChnlEcom *string `json:"authTxtChnlEcom,omitempty"`

	//  Max length = 1, MOTO AUTH Channel: Code that indicates whether MOTO transaction channel selection for authorization alert. Valid values: 0 - MOTO channel selection is not active 1 - MOTO channel selection is active
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTxtChnlMoto *string `json:"authTxtChnlMoto,omitempty"`

	//  Max length = 1, POS AUTH Channel: Code that indicates whether POS transaction channel selection for authorization alert. Valid values: 0 - POS channel selection is not active 1 - POS channel selection is active
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTxtChnlPos *string `json:"authTxtChnlPos,omitempty"`

	//  Max length = 1, Auth text message switch: Code that indicates whether authorization alert is set at the account level. Valid values are: 0 - OFF 1 - SMS  2 - EMAIL 3 - BOTH
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTxtMsg *string `json:"authTxtMsg,omitempty"`

	//  Max length = 9, Authorization Treshold:An authorisation equal to or greater than this amount initiates a text message to the cardholder. Numeric (whole monetary units)
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTxtMsgAmt *string `json:"authTxtMsgAmt,omitempty"`

	//  Max length = 1, Code that indicates whether or not the customer has opted for the promotional cheques.  Values are:  Y = Yes, customer opted for promotional cheques N = No, customer not opted for promotional cheques.
	// Max Length: 1
	// Min Length: 0
	CcqOpt *string `json:"ccqOpt,omitempty"`

	//  Max length = 1, Check Request Indicator: Code that indicates whether checks have been requested for the account.  Values are:  '0' - No checks requested  '1' - Checks requested
	// Max Length: 1
	// Min Length: 0
	ChkreqInd *string `json:"chkreqInd,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, Contact Indicator. Indicator field that is used by TRIAD to determine if customer contact is restricted. The values are: 00 = No restriction (Default) 01 = Do not telephone 02 = Do not mail 03 = Do not mail or telephone 04-09 = Reserved for future use by FDI 10-99 = Client-defined.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ContactInd *string `json:"contactInd,omitempty"`

	//  Max length = 1, Credit Limit Alert: Flag that will indicate account is opted for credit limit proximity alert.  Values are: 0 = Alert is inactive (Default) 1 = Alert is sent via SMS 2 = Alert is sent via email 3 = Alert is sent via email and SMS.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdtLmtAlert *string `json:"crdtLmtAlert,omitempty"`

	//  Max length = 9, Credit Limit Proximity Amount: Amount after which Credit Limit alert is initiated.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdtLmtAmt *string `json:"crdtLmtAmt,omitempty"`

	// Format: MMYY. Credit Limit Bypass Expiry Date: ]Date up to which an account must remain excluded from TRIAD credit line review. The date entered must be a future date.  f provided, it should be a numeric field The format is MMYYI
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrlimBypExp *string `json:"crlimBypExp,omitempty"`

	//  Max length = 1, Credit Limit Bypass Indicator: indicator that determines whether an account is excluded for credit limit review by TRIAD.  Values are:  0 - Include (Default)  1 - Exclude from credit limit increase  2 - Exclude from credit limit decrease  3 - Exclude from credit limit decision area.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrlimBypInd *string `json:"crlimBypInd,omitempty"`

	//  Max length = 1, Customer Credit Limit Increase preference Valid Values are: 0= Opt in (default) 1=Exclude 4=Opt out
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CustUcliPref *string `json:"custUcliPref,omitempty"`

	//  Max length = 17, Indicates the interim direct debit amount for the account.
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdIntPmtAmt *string `json:"ddIntPmtAmt,omitempty"`

	//  Max length = 3, Delivery Option. Values are:  000 - Regular mail (Default)  001 - First-class mail  002 - Registered mail  003 - Internal delivery mail  004-999 - User-defined
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DelOpt *string `json:"delOpt,omitempty"`

	//  Max length = 1, Disability Indicator: used to identify customers (at account level) that have a requirement for correspondence to be sent in a particular format.  Values are:                          Blank = Not used (Default) A = Audio B = Braille C = CD-ROM H = Hard of hearing/Minicom L = Large print P = Plain text E = Elderly (old age) M = Mental difficulties O = Other.
	// Max Length: 1
	// Min Length: 0
	DisInd *string `json:"disInd,omitempty"`

	//  Max length = 1, Dual Account Indicator: Value received from Input.  Values are: L = Local account F = Foreign account
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	//  Max length = 5, Affiliate Emblem. Code that defines the cardholder's affiliation or affinity group. The values are user-defined. If this field is left blank during account setup, system populates this field with the value from the Logo record
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Emblem *string `json:"emblem,omitempty"`

	//  Max length = 2, User-defined employee code: Code that indicates that the accountholder is an employee.
	// Max Length: 2
	// Min Length: 0
	EmployeeCode *string `json:"employeeCode,omitempty"`

	//  Max length = 17, Fixed payment amount of the credit limit that CMS uses to calculate the payment amount if the CONTROLLING PLAN OVERRIDE is F, X, A.
	// Pattern: ^(-)?[0-9]{1,17}$
	FixedPmtAmt string `json:"fixedPmtAmt,omitempty"`

	//  Max length = 7, Fixed payment percentage of the credit limit that CMS uses to calculate the payment percentage if the CONTROLLING PLAN OVERRIDE is P, B.
	// Pattern: ^(-)?[0-9]{1,7}$
	FixedPmtPct string `json:"fixedPmtPct,omitempty"`

	//  Max length = 1, Marketing opt out options: Code that indicates whether the customer has opted out ofmarketing campaigns.  Values are: 0 = Customer has not opted out of marketing campaigns (Default) 1 = Customer has opted out of marketing campaigns at the joint venture level only 2 = Customer has opted out of marketing campaigns at the group level only 3 = Customer has opted out of marketing campaigns at both the joint venture and group levels.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MktOptOut *string `json:"mktOptOut,omitempty"`

	//  Max length = 1, Overseas Transactions Message Indicator: Code that indicates whether the functionality to send message alerts for overseas transactions is active. An overseas transaction is an approved authorization for a transaction in which the merchant country code and issuer country code are different.  Values are: 0 = Inactive 1 = Active 2 = Active for domestic
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OtaTxtMsg *string `json:"otaTxtMsg,omitempty"`

	//  Max length = 1, Over Limit Alert: Flag that will indicate account is opted for over limit alert.  Values are: 0 = Alert is inactive (Default) 1 = Alert is sent via SMS 2 = Alert is sent via email 3 = Alert is sent via email and SMS.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OverLmtAlert *string `json:"overLmtAlert,omitempty"`

	//  Max length = 1, Overlimit Pay Alert: indicates the communication channel through which Over Limit Pay alerts to be sent.Values are: 0 - Do not send alert 1 -	Send alert only through SMS 2 -	Send alert only through Email 3 - Send alert via both SMS and Email 9 - Send alert as per communication channel define at logo level
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OverlimitPayAlert *string `json:"overlimitPayAlert,omitempty"`

	//  Max length = 1, Overlimit Proximity Alert: indicates the communication channel through which statement Over limit proximity alerts to be sent.Values are: 0 - Do not send alert 1 -	Send alert only through SMS 2 -	Send alert only through Email 3 - Send alert via both SMS and Email 9 - Send alert as per communication channel define at logo level
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OverlimitProximityAlert *string `json:"overlimitProximityAlert,omitempty"`

	//  Max length = 1, Flag that indicates whether CMS overrides the controlling Credit Plan Master record and assesses a fixed payment or a percentage of credit limit/account balance payment for this account. <P>The values are:<UL><LI>F = A fixed payment is in effect for this account</LI><LI>P = A percentage of credit limit payment is in effect for this account</LI><LI>X = A fixed payment is in effect for this account until purchase activity occurs, either a logic module 001 (purchase) or a logic module 028 (advance check request)</LI><LI>A = A fixed payment is in effect for this account. This option will prorate and distribute the <EM>FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>B = A percentage of the account balance is in effect of the account.  This option will prorate and distribute the <EM>FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>C = A full account balance is in effect of the account.  This option will prorate and distribute the <EM>FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>Blank = No override is in effect. (Default)</LI></UL><P>The <EM>FIXED PAYMENT AMOUNT/PERCENT</EM> field must be greater than zero if this field is F, P, X, A, B or C.
	// Max Length: 1
	// Min Length: 0
	PlanPmtOvrdFlag *string `json:"planPmtOvrdFlag,omitempty"`

	//  Max length = 1, Payment Due alert: Flag that indicate account is opted for payment due day's alert option.  Values are: 0 = Alert is inactive (Default) 1 = Alert is sent via SMS 2 = Alert is sent via email 3 = Alert is sent via email and SMS.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtDueAlert *string `json:"pmtDueAlert,omitempty"`

	//  Max length = 2, Number of days before the generation of payment due date that the remainder alert needs to be generated.  Values are: 00 = Do not generate payment due remainder alert(Default) 01-15 = Generate payment due remainder alert before x number of days. (max 15) 99 = Generate payment due remainder alert only during cycle date.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtDueRemDays *string `json:"pmtDueRemDays,omitempty"`

	//  Max length = 1, Payment Skip Flag
	// Max Length: 1
	// Min Length: 0
	PmtSkipFlag *string `json:"pmtSkipFlag,omitempty"`

	// Format: YYYYMMDD. Payment Skip Start Date
	PmtSkipStartDate string `json:"pmtSkipStartDate,omitempty"`

	//  Max length = 2, Payment Skip Term
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtSkipTerm *string `json:"pmtSkipTerm,omitempty"`

	//  Max length = 1, SMS General banking indicator. Valid values are: 0 = General banking SMS feature is not used 1 = SMS message is sent daily 2 = SMS message is sent weekly after the Friday batch run 3 = SMS message is sent monthly 4 = SMS message is sent on every cycle day/statement day
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SmsGenBankInd *string `json:"smsGenBankInd,omitempty"`

	//  Max length = 1, Spend Cap Indicator: indicates the type of spend cap alert that is active for the account.Values are: 0 – Spend cap alert not active 1 – Soft cap alert is active 2 – Hard cap alert is active
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpendCapInd *string `json:"spendCapInd,omitempty"`

	//  Max length = 1, Spending Limit Alert: Flag that will indicate account is opted for spend limit threshold alert. spend limit threshold alert.  Values are: 0 = Alert is inactive (Default) 1 = Alert is sent via SMS 2 = Alert is sent via email 3 = Alert is sent via email and SMS
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpndLmtAlert *string `json:"spndLmtAlert,omitempty"`

	//  Max length = 9, Spend Threshold Amount: Amount after which Spend Limit alert is initiated.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpndLmtAmt *string `json:"spndLmtAmt,omitempty"`

	//  Max length = 2, User Defined Sub-Status.  Works in conjunction with Block Code 1 to identify reason for Block code being set.  Variable Decision Key used in TRIAD.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SubStatus *string `json:"subStatus,omitempty"`

	//  Max length = 17, Temporary fixed payment amount of the credit limit that CMS uses to calculate the payment amount if the TEMP FIXD OMT MTD/EXP DATE is F, X, A with a valid date.
	// Pattern: ^(-)?[0-9]{1,17}$
	TempFixedPmtAmt string `json:"tempFixedPmtAmt,omitempty"`

	//  Max length = 1, First part of the field is the Flag that indicates whether CMS overrides the controlling Credit Plan Master record temporarily and assesses a fixed payment or a percentage of credit limit/account balance payment for this account. <P>The values are:<UL><LI>F = A fixed payment is in effect for this account</LI><LI>P = A percentage of credit limit payment is in effect for this account</LI><LI>X = A fixed payment is in effect for this account until purchase activity occurs, either a logic module 001 (purchase) or a logic module 028 (advance check request)</LI><LI>A = A fixed payment is in effect for this account. This option will prorate and distribute the <EM>TEMP FIXD PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>B = A percentage of the account balance is in effect of the account.  This option will prorate and distribute the <EM>TEMP FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>C = A full account balance is in effect of the account.  This option will prorate and distribute the <EM>TEMP FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>Blank = No override is in effect. (Default)</LI></UL><P>The <EM>TEMP FIXED PAYMENT AMOUNT/PERCENT</EM> field must be greater than zero if this field is F, P, X, A, B or C.Second part of this field indicates the date until which the temporary method will be applicable.This second field must contain a valid date in Gregorian format and is mandatory to provide along with the first part of the field.
	// Max Length: 1
	// Min Length: 0
	TempFixedPmtMthd *string `json:"tempFixedPmtMthd,omitempty"`

	// Format: YYYYMMDD. Temporary fixed payment expiry date.
	TempFixedPmtMthdExp string `json:"tempFixedPmtMthdExp,omitempty"`

	//  Max length = 7, Temporary fixed payment percentage of the credit limit that CMS uses to calculate the payment percentage if the TEMP FIXD OMT MTD/EXP DATE is P, B with a valid date.
	// Pattern: ^(-)?[0-9]{1,7}$
	TempFixedPmtPct string `json:"tempFixedPmtPct,omitempty"`

	//  Max length = 1, Waive mora Interest. Valid values are: <UL><LI><EM>0-</EM>DO NOT WAIVE</LI><LI><EM>1-</EM>WAIVE MORA</LI></UL>
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveMoraInterest *string `json:"waiveMoraInterest,omitempty"`
}

// Validate validates this account custom fields update request
func (m *AccountCustomFieldsUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAprBalxfr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAprCash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAprRtl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtmPckgCtr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtmPckgReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthEppOptFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxtChnlAtm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxtChnlEcom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxtChnlMoto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxtChnlPos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxtMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxtMsgAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcqOpt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChkreqInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdtLmtAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdtLmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrlimBypExp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrlimBypInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustUcliPref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdIntPmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelOpt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmblem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMktOptOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtaTxtMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverLmtAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverlimitPayAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverlimitProximityAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanPmtOvrdFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtDueAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtDueRemDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtSkipFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtSkipTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsGenBankInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpendCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpndLmtAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpndLmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtMthd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveMoraInterest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAprBalxfr(formats strfmt.Registry) error {

	if swag.IsZero(m.AprBalxfr) { // not required
		return nil
	}

	if err := validate.MinLength("aprBalxfr", "body", string(*m.AprBalxfr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("aprBalxfr", "body", string(*m.AprBalxfr), 7); err != nil {
		return err
	}

	if err := validate.Pattern("aprBalxfr", "body", string(*m.AprBalxfr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAprCash(formats strfmt.Registry) error {

	if swag.IsZero(m.AprCash) { // not required
		return nil
	}

	if err := validate.MinLength("aprCash", "body", string(*m.AprCash), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("aprCash", "body", string(*m.AprCash), 7); err != nil {
		return err
	}

	if err := validate.Pattern("aprCash", "body", string(*m.AprCash), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAprRtl(formats strfmt.Registry) error {

	if swag.IsZero(m.AprRtl) { // not required
		return nil
	}

	if err := validate.MinLength("aprRtl", "body", string(*m.AprRtl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("aprRtl", "body", string(*m.AprRtl), 7); err != nil {
		return err
	}

	if err := validate.Pattern("aprRtl", "body", string(*m.AprRtl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAtmPckgCtr(formats strfmt.Registry) error {

	if swag.IsZero(m.AtmPckgCtr) { // not required
		return nil
	}

	if err := validate.MinLength("atmPckgCtr", "body", string(*m.AtmPckgCtr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("atmPckgCtr", "body", string(*m.AtmPckgCtr), 2); err != nil {
		return err
	}

	if err := validate.Pattern("atmPckgCtr", "body", string(*m.AtmPckgCtr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAtmPckgReq(formats strfmt.Registry) error {

	if swag.IsZero(m.AtmPckgReq) { // not required
		return nil
	}

	if err := validate.MinLength("atmPckgReq", "body", string(*m.AtmPckgReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("atmPckgReq", "body", string(*m.AtmPckgReq), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthEppOptFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthEppOptFlag) { // not required
		return nil
	}

	if err := validate.MinLength("authEppOptFlag", "body", string(*m.AuthEppOptFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authEppOptFlag", "body", string(*m.AuthEppOptFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthTxtChnlAtm(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxtChnlAtm) { // not required
		return nil
	}

	if err := validate.MinLength("authTxtChnlAtm", "body", string(*m.AuthTxtChnlAtm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTxtChnlAtm", "body", string(*m.AuthTxtChnlAtm), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authTxtChnlAtm", "body", string(*m.AuthTxtChnlAtm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthTxtChnlEcom(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxtChnlEcom) { // not required
		return nil
	}

	if err := validate.MinLength("authTxtChnlEcom", "body", string(*m.AuthTxtChnlEcom), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTxtChnlEcom", "body", string(*m.AuthTxtChnlEcom), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authTxtChnlEcom", "body", string(*m.AuthTxtChnlEcom), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthTxtChnlMoto(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxtChnlMoto) { // not required
		return nil
	}

	if err := validate.MinLength("authTxtChnlMoto", "body", string(*m.AuthTxtChnlMoto), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTxtChnlMoto", "body", string(*m.AuthTxtChnlMoto), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authTxtChnlMoto", "body", string(*m.AuthTxtChnlMoto), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthTxtChnlPos(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxtChnlPos) { // not required
		return nil
	}

	if err := validate.MinLength("authTxtChnlPos", "body", string(*m.AuthTxtChnlPos), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTxtChnlPos", "body", string(*m.AuthTxtChnlPos), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authTxtChnlPos", "body", string(*m.AuthTxtChnlPos), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthTxtMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxtMsg) { // not required
		return nil
	}

	if err := validate.MinLength("authTxtMsg", "body", string(*m.AuthTxtMsg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTxtMsg", "body", string(*m.AuthTxtMsg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authTxtMsg", "body", string(*m.AuthTxtMsg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateAuthTxtMsgAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxtMsgAmt) { // not required
		return nil
	}

	if err := validate.MinLength("authTxtMsgAmt", "body", string(*m.AuthTxtMsgAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTxtMsgAmt", "body", string(*m.AuthTxtMsgAmt), 9); err != nil {
		return err
	}

	if err := validate.Pattern("authTxtMsgAmt", "body", string(*m.AuthTxtMsgAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCcqOpt(formats strfmt.Registry) error {

	if swag.IsZero(m.CcqOpt) { // not required
		return nil
	}

	if err := validate.MinLength("ccqOpt", "body", string(*m.CcqOpt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ccqOpt", "body", string(*m.CcqOpt), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateChkreqInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ChkreqInd) { // not required
		return nil
	}

	if err := validate.MinLength("chkreqInd", "body", string(*m.ChkreqInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chkreqInd", "body", string(*m.ChkreqInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateContactInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactInd) { // not required
		return nil
	}

	if err := validate.MinLength("contactInd", "body", string(*m.ContactInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("contactInd", "body", string(*m.ContactInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("contactInd", "body", string(*m.ContactInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCrdtLmtAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdtLmtAlert) { // not required
		return nil
	}

	if err := validate.MinLength("crdtLmtAlert", "body", string(*m.CrdtLmtAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdtLmtAlert", "body", string(*m.CrdtLmtAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("crdtLmtAlert", "body", string(*m.CrdtLmtAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCrdtLmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdtLmtAmt) { // not required
		return nil
	}

	if err := validate.MinLength("crdtLmtAmt", "body", string(*m.CrdtLmtAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdtLmtAmt", "body", string(*m.CrdtLmtAmt), 9); err != nil {
		return err
	}

	if err := validate.Pattern("crdtLmtAmt", "body", string(*m.CrdtLmtAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCrlimBypExp(formats strfmt.Registry) error {

	if swag.IsZero(m.CrlimBypExp) { // not required
		return nil
	}

	if err := validate.MinLength("crlimBypExp", "body", string(*m.CrlimBypExp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crlimBypExp", "body", string(*m.CrlimBypExp), 4); err != nil {
		return err
	}

	if err := validate.Pattern("crlimBypExp", "body", string(*m.CrlimBypExp), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCrlimBypInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CrlimBypInd) { // not required
		return nil
	}

	if err := validate.MinLength("crlimBypInd", "body", string(*m.CrlimBypInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crlimBypInd", "body", string(*m.CrlimBypInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("crlimBypInd", "body", string(*m.CrlimBypInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateCustUcliPref(formats strfmt.Registry) error {

	if swag.IsZero(m.CustUcliPref) { // not required
		return nil
	}

	if err := validate.MinLength("custUcliPref", "body", string(*m.CustUcliPref), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custUcliPref", "body", string(*m.CustUcliPref), 1); err != nil {
		return err
	}

	if err := validate.Pattern("custUcliPref", "body", string(*m.CustUcliPref), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateDdIntPmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.DdIntPmtAmt) { // not required
		return nil
	}

	if err := validate.MinLength("ddIntPmtAmt", "body", string(*m.DdIntPmtAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddIntPmtAmt", "body", string(*m.DdIntPmtAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("ddIntPmtAmt", "body", string(*m.DdIntPmtAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateDelOpt(formats strfmt.Registry) error {

	if swag.IsZero(m.DelOpt) { // not required
		return nil
	}

	if err := validate.MinLength("delOpt", "body", string(*m.DelOpt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("delOpt", "body", string(*m.DelOpt), 3); err != nil {
		return err
	}

	if err := validate.Pattern("delOpt", "body", string(*m.DelOpt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateDisInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DisInd) { // not required
		return nil
	}

	if err := validate.MinLength("disInd", "body", string(*m.DisInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("disInd", "body", string(*m.DisInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateEmblem(formats strfmt.Registry) error {

	if swag.IsZero(m.Emblem) { // not required
		return nil
	}

	if err := validate.MinLength("emblem", "body", string(*m.Emblem), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emblem", "body", string(*m.Emblem), 5); err != nil {
		return err
	}

	if err := validate.Pattern("emblem", "body", string(*m.Emblem), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateEmployeeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeCode) { // not required
		return nil
	}

	if err := validate.MinLength("employeeCode", "body", string(*m.EmployeeCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employeeCode", "body", string(*m.EmployeeCode), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateFixedPmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtAmt) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPmtAmt", "body", string(m.FixedPmtAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateFixedPmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtPct) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPmtPct", "body", string(m.FixedPmtPct), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateMktOptOut(formats strfmt.Registry) error {

	if swag.IsZero(m.MktOptOut) { // not required
		return nil
	}

	if err := validate.MinLength("mktOptOut", "body", string(*m.MktOptOut), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mktOptOut", "body", string(*m.MktOptOut), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mktOptOut", "body", string(*m.MktOptOut), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateOtaTxtMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.OtaTxtMsg) { // not required
		return nil
	}

	if err := validate.MinLength("otaTxtMsg", "body", string(*m.OtaTxtMsg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("otaTxtMsg", "body", string(*m.OtaTxtMsg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("otaTxtMsg", "body", string(*m.OtaTxtMsg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateOverLmtAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.OverLmtAlert) { // not required
		return nil
	}

	if err := validate.MinLength("overLmtAlert", "body", string(*m.OverLmtAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overLmtAlert", "body", string(*m.OverLmtAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("overLmtAlert", "body", string(*m.OverLmtAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateOverlimitPayAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.OverlimitPayAlert) { // not required
		return nil
	}

	if err := validate.MinLength("overlimitPayAlert", "body", string(*m.OverlimitPayAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overlimitPayAlert", "body", string(*m.OverlimitPayAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("overlimitPayAlert", "body", string(*m.OverlimitPayAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateOverlimitProximityAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.OverlimitProximityAlert) { // not required
		return nil
	}

	if err := validate.MinLength("overlimitProximityAlert", "body", string(*m.OverlimitProximityAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overlimitProximityAlert", "body", string(*m.OverlimitProximityAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("overlimitProximityAlert", "body", string(*m.OverlimitProximityAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validatePlanPmtOvrdFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanPmtOvrdFlag) { // not required
		return nil
	}

	if err := validate.MinLength("planPmtOvrdFlag", "body", string(*m.PlanPmtOvrdFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planPmtOvrdFlag", "body", string(*m.PlanPmtOvrdFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validatePmtDueAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtDueAlert) { // not required
		return nil
	}

	if err := validate.MinLength("pmtDueAlert", "body", string(*m.PmtDueAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtDueAlert", "body", string(*m.PmtDueAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("pmtDueAlert", "body", string(*m.PmtDueAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validatePmtDueRemDays(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtDueRemDays) { // not required
		return nil
	}

	if err := validate.MinLength("pmtDueRemDays", "body", string(*m.PmtDueRemDays), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtDueRemDays", "body", string(*m.PmtDueRemDays), 2); err != nil {
		return err
	}

	if err := validate.Pattern("pmtDueRemDays", "body", string(*m.PmtDueRemDays), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validatePmtSkipFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtSkipFlag) { // not required
		return nil
	}

	if err := validate.MinLength("pmtSkipFlag", "body", string(*m.PmtSkipFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtSkipFlag", "body", string(*m.PmtSkipFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validatePmtSkipTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtSkipTerm) { // not required
		return nil
	}

	if err := validate.MinLength("pmtSkipTerm", "body", string(*m.PmtSkipTerm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtSkipTerm", "body", string(*m.PmtSkipTerm), 2); err != nil {
		return err
	}

	if err := validate.Pattern("pmtSkipTerm", "body", string(*m.PmtSkipTerm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateSmsGenBankInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsGenBankInd) { // not required
		return nil
	}

	if err := validate.MinLength("smsGenBankInd", "body", string(*m.SmsGenBankInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("smsGenBankInd", "body", string(*m.SmsGenBankInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("smsGenBankInd", "body", string(*m.SmsGenBankInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateSpendCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SpendCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("spendCapInd", "body", string(*m.SpendCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spendCapInd", "body", string(*m.SpendCapInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("spendCapInd", "body", string(*m.SpendCapInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateSpndLmtAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndLmtAlert) { // not required
		return nil
	}

	if err := validate.MinLength("spndLmtAlert", "body", string(*m.SpndLmtAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spndLmtAlert", "body", string(*m.SpndLmtAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("spndLmtAlert", "body", string(*m.SpndLmtAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateSpndLmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndLmtAmt) { // not required
		return nil
	}

	if err := validate.MinLength("spndLmtAmt", "body", string(*m.SpndLmtAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spndLmtAmt", "body", string(*m.SpndLmtAmt), 9); err != nil {
		return err
	}

	if err := validate.Pattern("spndLmtAmt", "body", string(*m.SpndLmtAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateSubStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.SubStatus) { // not required
		return nil
	}

	if err := validate.MinLength("subStatus", "body", string(*m.SubStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("subStatus", "body", string(*m.SubStatus), 2); err != nil {
		return err
	}

	if err := validate.Pattern("subStatus", "body", string(*m.SubStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateTempFixedPmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtAmt) { // not required
		return nil
	}

	if err := validate.Pattern("tempFixedPmtAmt", "body", string(m.TempFixedPmtAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateTempFixedPmtMthd(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtMthd) { // not required
		return nil
	}

	if err := validate.MinLength("tempFixedPmtMthd", "body", string(*m.TempFixedPmtMthd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("tempFixedPmtMthd", "body", string(*m.TempFixedPmtMthd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateTempFixedPmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtPct) { // not required
		return nil
	}

	if err := validate.Pattern("tempFixedPmtPct", "body", string(m.TempFixedPmtPct), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountCustomFieldsUpdateRequest) validateWaiveMoraInterest(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveMoraInterest) { // not required
		return nil
	}

	if err := validate.MinLength("waiveMoraInterest", "body", string(*m.WaiveMoraInterest), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveMoraInterest", "body", string(*m.WaiveMoraInterest), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveMoraInterest", "body", string(*m.WaiveMoraInterest), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountCustomFieldsUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountCustomFieldsUpdateRequest) UnmarshalBinary(b []byte) error {
	var res AccountCustomFieldsUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DelinquencyAdjustmentUpdateRequest delinquency adjustment update request
//
// swagger:model DelinquencyAdjustmentUpdateRequest
type DelinquencyAdjustmentUpdateRequest struct {

	//  Max length = 1, Action code. Values are: C = Calculate S = Submit
	// Required: true
	// Max Length: 1
	// Min Length: 0
	Action *string `json:"action"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Amount of payment currently due (not including delinquent amounts).
	// Pattern: ^(-)?[0-9]{1,17}$
	CurrDue string `json:"currDue,omitempty"`

	//  Max length = 17, DAYS DUE 030
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue030 string `json:"daysDue030,omitempty"`

	//  Max length = 17, DAYS DUE 060
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue060 string `json:"daysDue060,omitempty"`

	//  Max length = 17, DAYS DUE 090
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue090 string `json:"daysDue090,omitempty"`

	//  Max length = 17, Amount of payment that is 120 to 149 days past due.
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue120 string `json:"daysDue120,omitempty"`

	//  Max length = 17, Amount of payment that is 150 to 179 days past due.
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue150 string `json:"daysDue150,omitempty"`

	//  Max length = 17, Amount of payment that is 180 to 209 days past due.
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue180 string `json:"daysDue180,omitempty"`

	//  Max length = 17, Amount of payment that is 210+ days past due.
	// Pattern: ^(-)?[0-9]{1,17}$
	DaysDue210 string `json:"daysDue210,omitempty"`

	//  Max length = 2, Number of items: Number of Plan segment details passed from front-end.
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrItems *string `json:"nbrItems"`

	//  Max length = 17, Amount of payment past due.
	// Pattern: ^(-)?[0-9]{1,17}$
	PastDue string `json:"pastDue,omitempty"`

	// Group.
	PaymentPsData []*PaymentPsDataForDelinquencyAdjustmentUpdate1 `json:"paymentPsData"`

	//  Max length = 1, Reage code. Values are: X = Manual Reage 1-8 = Automatic Reage
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ReageCd *string `json:"reageCd"`
}

// Validate validates this delinquency adjustment update request
func (m *DelinquencyAdjustmentUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue030(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue060(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue090(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue120(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue150(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue180(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysDue210(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePastDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentPsData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReageCd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if err := validate.MinLength("action", "body", string(*m.Action), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("action", "body", string(*m.Action), 1); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateCurrDue(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrDue) { // not required
		return nil
	}

	if err := validate.Pattern("currDue", "body", string(m.CurrDue), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue030(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue030) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue030", "body", string(m.DaysDue030), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue060(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue060) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue060", "body", string(m.DaysDue060), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue090(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue090) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue090", "body", string(m.DaysDue090), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue120(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue120) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue120", "body", string(m.DaysDue120), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue150(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue150) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue150", "body", string(m.DaysDue150), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue180(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue180) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue180", "body", string(m.DaysDue180), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateDaysDue210(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysDue210) { // not required
		return nil
	}

	if err := validate.Pattern("daysDue210", "body", string(m.DaysDue210), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateNbrItems(formats strfmt.Registry) error {

	if err := validate.Required("nbrItems", "body", m.NbrItems); err != nil {
		return err
	}

	if err := validate.MinLength("nbrItems", "body", string(*m.NbrItems), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrItems", "body", string(*m.NbrItems), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrItems", "body", string(*m.NbrItems), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validatePastDue(formats strfmt.Registry) error {

	if swag.IsZero(m.PastDue) { // not required
		return nil
	}

	if err := validate.Pattern("pastDue", "body", string(m.PastDue), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validatePaymentPsData(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentPsData) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentPsData); i++ {
		if swag.IsZero(m.PaymentPsData[i]) { // not required
			continue
		}

		if m.PaymentPsData[i] != nil {
			if err := m.PaymentPsData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentPsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DelinquencyAdjustmentUpdateRequest) validateReageCd(formats strfmt.Registry) error {

	if err := validate.Required("reageCd", "body", m.ReageCd); err != nil {
		return err
	}

	if err := validate.MinLength("reageCd", "body", string(*m.ReageCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reageCd", "body", string(*m.ReageCd), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DelinquencyAdjustmentUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DelinquencyAdjustmentUpdateRequest) UnmarshalBinary(b []byte) error {
	var res DelinquencyAdjustmentUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

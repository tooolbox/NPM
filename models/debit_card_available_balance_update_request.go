// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DebitCardAvailableBalanceUpdateRequest debit card available balance update request
//
// swagger:model DebitCardAvailableBalanceUpdateRequest
type DebitCardAvailableBalanceUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Debit Card available balance to be  updated in FirstVision.   Must be numeric.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	IbsCrlim *string `json:"ibsCrlim"`

	// Format: YYYYMMDD. IBS last updated date. Format is YYYYMMDD.
	IbsLstUpdDate string `json:"ibsLstUpdDate,omitempty"`

	//  Max length = 9, IBS last updated time. Format is HHMMSS.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IbsLstUpdTime *string `json:"ibsLstUpdTime,omitempty"`

	//  Max length = 1, Memo Balance Indicator. Indicates the type of transaction to be posted to the account. Valid values are: 'C' (Credit) 'D' (Debit)
	// Required: true
	// Max Length: 1
	// Min Length: 0
	IbsMemoInd *string `json:"ibsMemoInd"`

	//  Max length = 17, Transaction Amount for which 'Credit' or 'Debit' transaction to be posted to the account. Must be numeric.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	IbsTxnAmt *string `json:"ibsTxnAmt"`
}

// Validate validates this debit card available balance update request
func (m *DebitCardAvailableBalanceUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsCrlim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsLstUpdTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsMemoInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebitCardAvailableBalanceUpdateRequest) validateAcct(formats strfmt.Registry) error {

	if err := validate.Required("acct", "body", m.Acct); err != nil {
		return err
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *DebitCardAvailableBalanceUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *DebitCardAvailableBalanceUpdateRequest) validateIbsCrlim(formats strfmt.Registry) error {

	if err := validate.Required("ibsCrlim", "body", m.IbsCrlim); err != nil {
		return err
	}

	if err := validate.Pattern("ibsCrlim", "body", string(*m.IbsCrlim), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DebitCardAvailableBalanceUpdateRequest) validateIbsLstUpdTime(formats strfmt.Registry) error {

	if swag.IsZero(m.IbsLstUpdTime) { // not required
		return nil
	}

	if err := validate.MinLength("ibsLstUpdTime", "body", string(*m.IbsLstUpdTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsLstUpdTime", "body", string(*m.IbsLstUpdTime), 9); err != nil {
		return err
	}

	if err := validate.Pattern("ibsLstUpdTime", "body", string(*m.IbsLstUpdTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DebitCardAvailableBalanceUpdateRequest) validateIbsMemoInd(formats strfmt.Registry) error {

	if err := validate.Required("ibsMemoInd", "body", m.IbsMemoInd); err != nil {
		return err
	}

	if err := validate.MinLength("ibsMemoInd", "body", string(*m.IbsMemoInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsMemoInd", "body", string(*m.IbsMemoInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *DebitCardAvailableBalanceUpdateRequest) validateIbsTxnAmt(formats strfmt.Registry) error {

	if err := validate.Required("ibsTxnAmt", "body", m.IbsTxnAmt); err != nil {
		return err
	}

	if err := validate.Pattern("ibsTxnAmt", "body", string(*m.IbsTxnAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebitCardAvailableBalanceUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebitCardAvailableBalanceUpdateRequest) UnmarshalBinary(b []byte) error {
	var res DebitCardAvailableBalanceUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

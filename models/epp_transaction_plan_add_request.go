// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EppTransactionPlanAddRequest epp transaction plan add request
//
// swagger:model EppTransactionPlanAddRequest
type EppTransactionPlanAddRequest struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.  Must be numeric and greater than zero.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 27, Unstatemented transaction key. This can be obtained from transactionInquiry API and used for Transaction EPP conversion. This field is not required for Plan EPP.
	// Max Length: 27
	// Min Length: 0
	AmosAmxtKey *string `json:"amosAmxtKey,omitempty"`

	//  Max length = 22, Statemented transaction organisation Account. This can be obtained from transactionInquiry API and used for Transaction EPP conversion. This field is not required for Plan EPP.
	// Max Length: 22
	// Min Length: 0
	AmssAmslOrgAcct *string `json:"amssAmslOrgAcct,omitempty"`

	//  Max length = 4, Statemented transaction record number. This can be obtained from transactionInquiry API and used for Transaction EPP conversion. This field is not required for Plan EPP.
	// Pattern: ^(-)?[0-9]{1,4}$
	AmssAmslRecNbr string `json:"amssAmslRecNbr,omitempty"`

	//  Max length = 1, Statemented transaction record type. This can be obtained from transactionInquiry API and used for Transaction EPP conversion. This field is not required for Plan EPP.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AmssAmslRecType *string `json:"amssAmslRecType,omitempty"`

	//  Max length = 7, Statemented transaction statement id code. This can be obtained from transactionInquiry API and used for Transaction EPP conversion. This field is not required for Plan EPP.
	// Pattern: ^(-)?[0-9]{1,7}$
	AmssAmslStmtIDCode string `json:"amssAmslStmtIdCode,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided Not required for Plan EPP.
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr,omitempty"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card.1. Must be numeric and greater than 0 if provided2. Must be between 0 and 99 if smart card3. If not provided, and not a smart card, default to value of 0001
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq,omitempty"`

	//  Max length = 15, Channel Id
	// Max Length: 15
	// Min Length: 0
	ChannelID *string `json:"channelId,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, Plan number to be converted to.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EppPlanNbr *string `json:"eppPlanNbr"`

	//  Max length = 7, Interest Rate: Last interest rate used for this particular credit plan.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IntRate *string `json:"intRate,omitempty"`

	//  Max length = 6, Authorization code for the transaction.
	// Max Length: 6
	// Min Length: 0
	MtAuthCode *string `json:"mtAuthCode,omitempty"`

	//  Max length = 40, Description
	// Max Length: 40
	// Min Length: 0
	MtDesc *string `json:"mtDesc,omitempty"`

	// Format: YYYYMMDD. Effective Date. The date when the transactions was done Date format is CCYYMMDD format.
	MtEffDate string `json:"mtEffDate,omitempty"`

	//  Max length = 1, For TXN EPP set based on the value returned from the Transaction Inquiry - if set to Y the request will be rejected as this indicates the transaction  is already converted.  If the value returned is a null tag set to spaces or N.  Not required for Plan EPP.
	// Max Length: 1
	// Min Length: 0
	MtEppConvInd *string `json:"mtEppConvInd,omitempty"`

	//  Max length = 3, For TXN EPP set based on the value returned from the Transaction Inquiry .  Not required for Plan EPP.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtLogicMod *string `json:"mtLogicMod,omitempty"`

	//  Max length = 4, Merchant organization
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtMerchantOrg *string `json:"mtMerchantOrg,omitempty"`

	//  Max length = 9, Merchant store
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtMerchantStore *string `json:"mtMerchantStore,omitempty"`

	//  Max length = 5, For TXN EPP set based on the value returned from the Transaction Inquiry .  Not required for Plan EPP.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtPlan *string `json:"mtPlan,omitempty"`

	// Format: YYYYMMDD. Posting Date. The date when the transactions was posted to the account. Date format is CCYYMMDD format.
	MtPostingDate string `json:"mtPostingDate,omitempty"`

	//  Max length = 23, Reference number
	// Max Length: 23
	// Min Length: 0
	MtRefNbr *string `json:"mtRefNbr,omitempty"`

	//  Max length = 9, Store number
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtSiNbr *string `json:"mtSiNbr,omitempty"`

	//  Max length = 5, Transaction code
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtTxnCode *string `json:"mtTxnCode,omitempty"`

	//  Max length = 5, Plan number of existing Plan or Transction to be converted.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNbr *string `json:"planNbr"`

	//  Max length = 3, Term of the loan plan.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Term *string `json:"term,omitempty"`

	//  Max length = 17, Transaction amount. without the commas and decimal places.    Example: if an account has available credit of EUR52.50 and the system's NOD set at 2, this field will be entered as 00000000000005250.
	// Required: true
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnAmt *string `json:"txnAmt"`

	//  Max length = 15, User Code 1
	// Max Length: 15
	// Min Length: 0
	UserCode1 *string `json:"userCode1,omitempty"`

	//  Max length = 15, User Code 2
	// Max Length: 15
	// Min Length: 0
	UserCode2 *string `json:"userCode2,omitempty"`

	//  Max length = 15, User Code 3
	// Max Length: 15
	// Min Length: 0
	UserCode3 *string `json:"userCode3,omitempty"`

	//  Max length = 15, User Code 4
	// Max Length: 15
	// Min Length: 0
	UserCode4 *string `json:"userCode4,omitempty"`
}

// Validate validates this epp transaction plan add request
func (m *EppTransactionPlanAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmosAmxtKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslOrgAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslRecNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslRecType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslStmtIDCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEppPlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtAuthCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtEppConvInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtLogicMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtMerchantOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtMerchantStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtSiNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtTxnCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EppTransactionPlanAddRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateAmosAmxtKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AmosAmxtKey) { // not required
		return nil
	}

	if err := validate.MinLength("amosAmxtKey", "body", string(*m.AmosAmxtKey), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amosAmxtKey", "body", string(*m.AmosAmxtKey), 27); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateAmssAmslOrgAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslOrgAcct) { // not required
		return nil
	}

	if err := validate.MinLength("amssAmslOrgAcct", "body", string(*m.AmssAmslOrgAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amssAmslOrgAcct", "body", string(*m.AmssAmslOrgAcct), 22); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateAmssAmslRecNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslRecNbr) { // not required
		return nil
	}

	if err := validate.Pattern("amssAmslRecNbr", "body", string(m.AmssAmslRecNbr), `^(-)?[0-9]{1,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateAmssAmslRecType(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslRecType) { // not required
		return nil
	}

	if err := validate.MinLength("amssAmslRecType", "body", string(*m.AmssAmslRecType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amssAmslRecType", "body", string(*m.AmssAmslRecType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("amssAmslRecType", "body", string(*m.AmssAmslRecType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateAmssAmslStmtIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslStmtIDCode) { // not required
		return nil
	}

	if err := validate.Pattern("amssAmslStmtIdCode", "body", string(m.AmssAmslStmtIDCode), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateChannelID(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelID) { // not required
		return nil
	}

	if err := validate.MinLength("channelId", "body", string(*m.ChannelID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("channelId", "body", string(*m.ChannelID), 15); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateEppPlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("eppPlanNbr", "body", m.EppPlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("eppPlanNbr", "body", string(*m.EppPlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("eppPlanNbr", "body", string(*m.EppPlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("eppPlanNbr", "body", string(*m.EppPlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateIntRate(formats strfmt.Registry) error {

	if swag.IsZero(m.IntRate) { // not required
		return nil
	}

	if err := validate.MinLength("intRate", "body", string(*m.IntRate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("intRate", "body", string(*m.IntRate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("intRate", "body", string(*m.IntRate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtAuthCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MtAuthCode) { // not required
		return nil
	}

	if err := validate.MinLength("mtAuthCode", "body", string(*m.MtAuthCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtAuthCode", "body", string(*m.MtAuthCode), 6); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtDesc(formats strfmt.Registry) error {

	if swag.IsZero(m.MtDesc) { // not required
		return nil
	}

	if err := validate.MinLength("mtDesc", "body", string(*m.MtDesc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtDesc", "body", string(*m.MtDesc), 40); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtEppConvInd(formats strfmt.Registry) error {

	if swag.IsZero(m.MtEppConvInd) { // not required
		return nil
	}

	if err := validate.MinLength("mtEppConvInd", "body", string(*m.MtEppConvInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtEppConvInd", "body", string(*m.MtEppConvInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtLogicMod(formats strfmt.Registry) error {

	if swag.IsZero(m.MtLogicMod) { // not required
		return nil
	}

	if err := validate.MinLength("mtLogicMod", "body", string(*m.MtLogicMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtLogicMod", "body", string(*m.MtLogicMod), 3); err != nil {
		return err
	}

	if err := validate.Pattern("mtLogicMod", "body", string(*m.MtLogicMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtMerchantOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.MtMerchantOrg) { // not required
		return nil
	}

	if err := validate.MinLength("mtMerchantOrg", "body", string(*m.MtMerchantOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtMerchantOrg", "body", string(*m.MtMerchantOrg), 4); err != nil {
		return err
	}

	if err := validate.Pattern("mtMerchantOrg", "body", string(*m.MtMerchantOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtMerchantStore(formats strfmt.Registry) error {

	if swag.IsZero(m.MtMerchantStore) { // not required
		return nil
	}

	if err := validate.MinLength("mtMerchantStore", "body", string(*m.MtMerchantStore), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtMerchantStore", "body", string(*m.MtMerchantStore), 9); err != nil {
		return err
	}

	if err := validate.Pattern("mtMerchantStore", "body", string(*m.MtMerchantStore), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.MtPlan) { // not required
		return nil
	}

	if err := validate.MinLength("mtPlan", "body", string(*m.MtPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtPlan", "body", string(*m.MtPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("mtPlan", "body", string(*m.MtPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtRefNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MtRefNbr) { // not required
		return nil
	}

	if err := validate.MinLength("mtRefNbr", "body", string(*m.MtRefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtRefNbr", "body", string(*m.MtRefNbr), 23); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtSiNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MtSiNbr) { // not required
		return nil
	}

	if err := validate.MinLength("mtSiNbr", "body", string(*m.MtSiNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtSiNbr", "body", string(*m.MtSiNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("mtSiNbr", "body", string(*m.MtSiNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateMtTxnCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MtTxnCode) { // not required
		return nil
	}

	if err := validate.MinLength("mtTxnCode", "body", string(*m.MtTxnCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtTxnCode", "body", string(*m.MtTxnCode), 5); err != nil {
		return err
	}

	if err := validate.Pattern("mtTxnCode", "body", string(*m.MtTxnCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validatePlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("planNbr", "body", m.PlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("planNbr", "body", string(*m.PlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNbr", "body", string(*m.PlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNbr", "body", string(*m.PlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.Term) { // not required
		return nil
	}

	if err := validate.MinLength("term", "body", string(*m.Term), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("term", "body", string(*m.Term), 3); err != nil {
		return err
	}

	if err := validate.Pattern("term", "body", string(*m.Term), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateTxnAmt(formats strfmt.Registry) error {

	if err := validate.Required("txnAmt", "body", m.TxnAmt); err != nil {
		return err
	}

	if err := validate.MinLength("txnAmt", "body", string(*m.TxnAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnAmt", "body", string(*m.TxnAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("txnAmt", "body", string(*m.TxnAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateUserCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode1) { // not required
		return nil
	}

	if err := validate.MinLength("userCode1", "body", string(*m.UserCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode1", "body", string(*m.UserCode1), 15); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateUserCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode2) { // not required
		return nil
	}

	if err := validate.MinLength("userCode2", "body", string(*m.UserCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode2", "body", string(*m.UserCode2), 15); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateUserCode3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode3) { // not required
		return nil
	}

	if err := validate.MinLength("userCode3", "body", string(*m.UserCode3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode3", "body", string(*m.UserCode3), 15); err != nil {
		return err
	}

	return nil
}

func (m *EppTransactionPlanAddRequest) validateUserCode4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode4) { // not required
		return nil
	}

	if err := validate.MinLength("userCode4", "body", string(*m.UserCode4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode4", "body", string(*m.UserCode4), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EppTransactionPlanAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EppTransactionPlanAddRequest) UnmarshalBinary(b []byte) error {
	var res EppTransactionPlanAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

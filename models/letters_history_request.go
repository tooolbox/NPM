// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LettersHistoryRequest letters history request
//
// swagger:model LettersHistoryRequest
type LettersHistoryRequest struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 4, File Name. Associated with the page scroll. Value  in this field will be populated with the value that was received in the previous request response.
	// Max Length: 4
	// Min Length: 0
	FileName *string `json:"fileName,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	HistReqAccountNbr *string `json:"histReqAccountNbr,omitempty"`

	// Format: YYYYMMDD. Historical Request Beginning Date.
	HistReqBeginDate string `json:"histReqBeginDate,omitempty"`

	//  Max length = 8, Historical Request Class: Field which contains the class value which was defined to groups enterprise letters.
	// Max Length: 8
	// Min Length: 0
	HistReqClass *string `json:"histReqClass,omitempty"`

	//  Max length = 2, Historical Request Count. Selection count number which will be applied as a filter to extract the number of records based on the input value.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HistReqCount *string `json:"histReqCount,omitempty"`

	// Format: YYYYMMDD. Historical Request End Date.
	HistReqEndDate string `json:"histReqEndDate,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HistReqOrg *string `json:"histReqOrg,omitempty"`

	// Format: CCYYMMDDC. Historical Request Start Date. Associated with the page scroll.Value  in this field will be populated with the value that was received in the previous request response.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HistReqStartDate *string `json:"histReqStartDate,omitempty"`

	//  Max length = 9, Historical Request Start Timestamp. Associated with the page scroll. Value  in this field will be populated with the value that was received in the previous request response.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HistReqStartTimestamp *string `json:"histReqStartTimestamp,omitempty"`

	//  Max length = 2, Historical Request Status.
	// Max Length: 2
	// Min Length: 0
	HistReqStatus *string `json:"histReqStatus,omitempty"`
}

// Validate validates this letters history request
func (m *LettersHistoryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqAccountNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistReqStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LettersHistoryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LettersHistoryRequest) validateFileName(formats strfmt.Registry) error {

	if swag.IsZero(m.FileName) { // not required
		return nil
	}

	if err := validate.MinLength("fileName", "body", string(*m.FileName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fileName", "body", string(*m.FileName), 4); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqAccountNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqAccountNbr) { // not required
		return nil
	}

	if err := validate.MinLength("histReqAccountNbr", "body", string(*m.HistReqAccountNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqAccountNbr", "body", string(*m.HistReqAccountNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqClass(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqClass) { // not required
		return nil
	}

	if err := validate.MinLength("histReqClass", "body", string(*m.HistReqClass), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqClass", "body", string(*m.HistReqClass), 8); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqCount(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqCount) { // not required
		return nil
	}

	if err := validate.MinLength("histReqCount", "body", string(*m.HistReqCount), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqCount", "body", string(*m.HistReqCount), 2); err != nil {
		return err
	}

	if err := validate.Pattern("histReqCount", "body", string(*m.HistReqCount), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqOrg) { // not required
		return nil
	}

	if err := validate.MinLength("histReqOrg", "body", string(*m.HistReqOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqOrg", "body", string(*m.HistReqOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("histReqOrg", "body", string(*m.HistReqOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqStartDate) { // not required
		return nil
	}

	if err := validate.MinLength("histReqStartDate", "body", string(*m.HistReqStartDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqStartDate", "body", string(*m.HistReqStartDate), 9); err != nil {
		return err
	}

	if err := validate.Pattern("histReqStartDate", "body", string(*m.HistReqStartDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqStartTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqStartTimestamp) { // not required
		return nil
	}

	if err := validate.MinLength("histReqStartTimestamp", "body", string(*m.HistReqStartTimestamp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqStartTimestamp", "body", string(*m.HistReqStartTimestamp), 9); err != nil {
		return err
	}

	if err := validate.Pattern("histReqStartTimestamp", "body", string(*m.HistReqStartTimestamp), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LettersHistoryRequest) validateHistReqStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.HistReqStatus) { // not required
		return nil
	}

	if err := validate.MinLength("histReqStatus", "body", string(*m.HistReqStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("histReqStatus", "body", string(*m.HistReqStatus), 2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LettersHistoryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LettersHistoryRequest) UnmarshalBinary(b []byte) error {
	var res LettersHistoryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

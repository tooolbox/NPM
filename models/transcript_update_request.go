// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TranscriptUpdateRequest transcript update request
//
// swagger:model TranscriptUpdateRequest
type TranscriptUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	// act option
	// Max Length: 1
	// Min Length: 0
	ActOption *string `json:"actOption,omitempty"`

	//  Max length = 4, Action code.
	// Max Length: 4
	// Min Length: 0
	ActnCd *string `json:"actnCd,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 11, Transaction Amount. Amount of the transaction or ticket. The format is whole monetary units and subunits (no decimal point).
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MemoAmt *string `json:"memoAmt,omitempty"`

	//  Max length = 60, Free text that is stored against  the account, this can be used to identify to operators why the Action code has been used.
	// Max Length: 60
	// Min Length: 0
	MemoLine1 *string `json:"memoLine1,omitempty"`

	//  Max length = 60, Memo Line 2
	// Max Length: 60
	// Min Length: 0
	MemoLine2 *string `json:"memoLine2,omitempty"`

	//  Max length = 60, Memo Line 3
	// Max Length: 60
	// Min Length: 0
	MemoLine3 *string `json:"memoLine3,omitempty"`

	//  Max length = 60, Memo Line 3
	// Max Length: 60
	// Min Length: 0
	MemoLine4 *string `json:"memoLine4,omitempty"`

	//  Max length = 60, Memo Line 3
	// Max Length: 60
	// Min Length: 0
	MemoLine5 *string `json:"memoLine5,omitempty"`

	//  Max length = 3, Referral REP-ID  User to whom the action will be referred.
	// Max Length: 3
	// Min Length: 0
	RvwRepID *string `json:"rvwRepId,omitempty"`

	//  Max length = 3, Referral ORG. Organisation to where the action will be referred.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RvwRepOrg *string `json:"rvwRepOrg,omitempty"`
}

// Validate validates this transcript update request
func (m *TranscriptUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActnCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoLine4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoLine5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRvwRepID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRvwRepOrg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TranscriptUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateActOption(formats strfmt.Registry) error {

	if swag.IsZero(m.ActOption) { // not required
		return nil
	}

	if err := validate.MinLength("actOption", "body", string(*m.ActOption), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actOption", "body", string(*m.ActOption), 1); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateActnCd(formats strfmt.Registry) error {

	if swag.IsZero(m.ActnCd) { // not required
		return nil
	}

	if err := validate.MinLength("actnCd", "body", string(*m.ActnCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actnCd", "body", string(*m.ActnCd), 4); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateMemoAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoAmt) { // not required
		return nil
	}

	if err := validate.MinLength("memoAmt", "body", string(*m.MemoAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoAmt", "body", string(*m.MemoAmt), 11); err != nil {
		return err
	}

	if err := validate.Pattern("memoAmt", "body", string(*m.MemoAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateMemoLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoLine1) { // not required
		return nil
	}

	if err := validate.MinLength("memoLine1", "body", string(*m.MemoLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoLine1", "body", string(*m.MemoLine1), 60); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateMemoLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoLine2) { // not required
		return nil
	}

	if err := validate.MinLength("memoLine2", "body", string(*m.MemoLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoLine2", "body", string(*m.MemoLine2), 60); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateMemoLine3(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoLine3) { // not required
		return nil
	}

	if err := validate.MinLength("memoLine3", "body", string(*m.MemoLine3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoLine3", "body", string(*m.MemoLine3), 60); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateMemoLine4(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoLine4) { // not required
		return nil
	}

	if err := validate.MinLength("memoLine4", "body", string(*m.MemoLine4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoLine4", "body", string(*m.MemoLine4), 60); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateMemoLine5(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoLine5) { // not required
		return nil
	}

	if err := validate.MinLength("memoLine5", "body", string(*m.MemoLine5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoLine5", "body", string(*m.MemoLine5), 60); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateRvwRepID(formats strfmt.Registry) error {

	if swag.IsZero(m.RvwRepID) { // not required
		return nil
	}

	if err := validate.MinLength("rvwRepId", "body", string(*m.RvwRepID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rvwRepId", "body", string(*m.RvwRepID), 3); err != nil {
		return err
	}

	return nil
}

func (m *TranscriptUpdateRequest) validateRvwRepOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.RvwRepOrg) { // not required
		return nil
	}

	if err := validate.MinLength("rvwRepOrg", "body", string(*m.RvwRepOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rvwRepOrg", "body", string(*m.RvwRepOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("rvwRepOrg", "body", string(*m.RvwRepOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TranscriptUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TranscriptUpdateRequest) UnmarshalBinary(b []byte) error {
	var res TranscriptUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionsMaintenanceRequest collections maintenance request
//
// swagger:model CollectionsMaintenanceRequest
type CollectionsMaintenanceRequest struct {

	// Format: YYYYMMDD. Account Discharge Date.
	AcctDiscDate string `json:"acctDiscDate,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Customer Preferred Method. Values are: 0 - Dial not preferred 1 - Dial preferred
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CpmDial *string `json:"cpmDial,omitempty"`

	//  Max length = 1, Customer Preferred Method. Values are: 0 - e-Mail not preferred 1 - e-Mail preferred
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CpmEmail *string `json:"cpmEmail,omitempty"`

	//  Max length = 1, Customer Preferred Method. Values are: 0 - Letter not preferred 1 - Letter preferred
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CpmLtr *string `json:"cpmLtr,omitempty"`

	//  Max length = 1, Customer Preferred Method. Values are: 0 - Secured mail not preferred 1 - Secured mail preferred
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CpmSecMail *string `json:"cpmSecMail,omitempty"`

	//  Max length = 1, Customer Preferred Method. Values are: 0 - SMS not preferred 1 - SMS preferred
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CpmSms *string `json:"cpmSms,omitempty"`

	//  Max length = 1, Customer Preferred Method. Values are: 0 - Un-Secured mail not preferred 1 - Un-Secured mail preferred
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CpmUnsecMail *string `json:"cpmUnsecMail,omitempty"`

	//  Max length = 3, Current Function State.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CurrFncState *string `json:"currFncState,omitempty"`

	//  Max length = 1, Debt arrange scheme (DAS).Indicates if the account has enrolled into  debt arrange scheme. Values are: 0 = No    1 = Yes
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Das *string `json:"das,omitempty"`

	// Format: YYYYMMDD. Default Notice Date.
	DfltNtcDt string `json:"dfltNtcDt,omitempty"`

	// Format: YYYYMMDD. Date in Current Collections class: Field will populate the date on which collection queue assignment happens.
	DtInCurrClass string `json:"dtInCurrClass,omitempty"`

	//  Max length = 2, Employment status.  Values are:  01 - E/U or U/E Employee unknown    02 - OOW Out of work,   03 - Retired      04 - Bankrupt or B/Rupt     05 - IVA     06 - A/U    07 - DRO    08 - Agency    09 - Deceased    10 - Trust Deed/Deed    11 - Unknown    12 - Income Support    13 - JSA    14 - Would not disclose     15 - Student    16 - Pension    17 - Unemployed    18 - Maternity leave    19 - Army
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmpStatus *string `json:"empStatus,omitempty"`

	// Format: YYYYMMDD. Final Demand Notice Date.
	FinalDmndNtcDt string `json:"finalDmndNtcDt,omitempty"`

	//  Max length = 1, Functional ID. Values are:  I - Inquiry U - Update A - Add
	// Required: true
	// Max Length: 1
	// Min Length: 0
	FuncID *string `json:"funcId"`

	// Format: YYYYMMDD. Last 192 Attempt Date: Date of cleansing when Home, Mobile, Work phone number of the Customer is marked as Bad in Collections System.
	Last192AttemptDt string `json:"last192AttemptDt,omitempty"`

	// Format: YYYYMMDD. Last Party Contact Date: Date on which last customer contacted
	LastPartyContactDt string `json:"lastPartyContactDt,omitempty"`

	// Format: YYYYMMDD. Payment Arrangement Date.
	PmtArrDt string `json:"pmtArrDt,omitempty"`

	//  Max length = 2, Payment Arrangement Function. Values are: 01 = STNA (Short Term no affordability) 02 = LTNA (Long Term no affordability) 03 = FPA (Fixed Payment arrangement) 04 = Re-age 05 = MCP Plus Part 06 = LMTD  07 = Charitable Write off 08 = Short Settlements 09 = Partial Settlements
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtArrFuncCd *string `json:"pmtArrFuncCd,omitempty"`

	//  Max length = 1, Primary Default Flag. Values are: 0 = Account is not in default 1 = Manual default 2 = Automatic default
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PrimDfltFlag *string `json:"primDfltFlag,omitempty"`

	//  Max length = 17, Promise-To-Pay Amount: Next payment amount for a promise-to-pay.
	// Pattern: ^(-)?[0-9]{1,17}$
	PtpAmt string `json:"ptpAmt,omitempty"`

	//  Max length = 2, Special address indicator.  Values are:  00 - No Special Address  01 - BFPO - British Forces Postal Address    02 - Deceased - Deceased Customer    03 - Foreign - Account with a foreign address     04 - Gone away - Account marked as Address Unknown    05 - Insolvent - Accounts marked as Insolvent    06 - Ireland - Accounts with an Irish Address    07 - Scotland - Accounts with a Scottish Address  08 - Other Special Address
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpclAddrInd *string `json:"spclAddrInd,omitempty"`

	//  Max length = 1, Special Handling Indicator. Values are: 0 = no special handling 1 = special handling in effect 2 = unset special handling
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpclHandlingInd *string `json:"spclHandlingInd,omitempty"`
}

// Validate validates this collections maintenance request
func (m *CollectionsMaintenanceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpmDial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpmEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpmLtr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpmSecMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpmSms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpmUnsecMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrFncState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuncID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtArrFuncCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimDfltFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePtpAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpclAddrInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpclHandlingInd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionsMaintenanceRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCpmDial(formats strfmt.Registry) error {

	if swag.IsZero(m.CpmDial) { // not required
		return nil
	}

	if err := validate.MinLength("cpmDial", "body", string(*m.CpmDial), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpmDial", "body", string(*m.CpmDial), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cpmDial", "body", string(*m.CpmDial), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCpmEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.CpmEmail) { // not required
		return nil
	}

	if err := validate.MinLength("cpmEmail", "body", string(*m.CpmEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpmEmail", "body", string(*m.CpmEmail), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cpmEmail", "body", string(*m.CpmEmail), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCpmLtr(formats strfmt.Registry) error {

	if swag.IsZero(m.CpmLtr) { // not required
		return nil
	}

	if err := validate.MinLength("cpmLtr", "body", string(*m.CpmLtr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpmLtr", "body", string(*m.CpmLtr), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cpmLtr", "body", string(*m.CpmLtr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCpmSecMail(formats strfmt.Registry) error {

	if swag.IsZero(m.CpmSecMail) { // not required
		return nil
	}

	if err := validate.MinLength("cpmSecMail", "body", string(*m.CpmSecMail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpmSecMail", "body", string(*m.CpmSecMail), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cpmSecMail", "body", string(*m.CpmSecMail), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCpmSms(formats strfmt.Registry) error {

	if swag.IsZero(m.CpmSms) { // not required
		return nil
	}

	if err := validate.MinLength("cpmSms", "body", string(*m.CpmSms), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpmSms", "body", string(*m.CpmSms), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cpmSms", "body", string(*m.CpmSms), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCpmUnsecMail(formats strfmt.Registry) error {

	if swag.IsZero(m.CpmUnsecMail) { // not required
		return nil
	}

	if err := validate.MinLength("cpmUnsecMail", "body", string(*m.CpmUnsecMail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cpmUnsecMail", "body", string(*m.CpmUnsecMail), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cpmUnsecMail", "body", string(*m.CpmUnsecMail), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateCurrFncState(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrFncState) { // not required
		return nil
	}

	if err := validate.MinLength("currFncState", "body", string(*m.CurrFncState), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currFncState", "body", string(*m.CurrFncState), 3); err != nil {
		return err
	}

	if err := validate.Pattern("currFncState", "body", string(*m.CurrFncState), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateDas(formats strfmt.Registry) error {

	if swag.IsZero(m.Das) { // not required
		return nil
	}

	if err := validate.MinLength("das", "body", string(*m.Das), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("das", "body", string(*m.Das), 1); err != nil {
		return err
	}

	if err := validate.Pattern("das", "body", string(*m.Das), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateEmpStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpStatus) { // not required
		return nil
	}

	if err := validate.MinLength("empStatus", "body", string(*m.EmpStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empStatus", "body", string(*m.EmpStatus), 2); err != nil {
		return err
	}

	if err := validate.Pattern("empStatus", "body", string(*m.EmpStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateFuncID(formats strfmt.Registry) error {

	if err := validate.Required("funcId", "body", m.FuncID); err != nil {
		return err
	}

	if err := validate.MinLength("funcId", "body", string(*m.FuncID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("funcId", "body", string(*m.FuncID), 1); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validatePmtArrFuncCd(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtArrFuncCd) { // not required
		return nil
	}

	if err := validate.MinLength("pmtArrFuncCd", "body", string(*m.PmtArrFuncCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtArrFuncCd", "body", string(*m.PmtArrFuncCd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("pmtArrFuncCd", "body", string(*m.PmtArrFuncCd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validatePrimDfltFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimDfltFlag) { // not required
		return nil
	}

	if err := validate.MinLength("primDfltFlag", "body", string(*m.PrimDfltFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("primDfltFlag", "body", string(*m.PrimDfltFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("primDfltFlag", "body", string(*m.PrimDfltFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validatePtpAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.PtpAmt) { // not required
		return nil
	}

	if err := validate.Pattern("ptpAmt", "body", string(m.PtpAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateSpclAddrInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SpclAddrInd) { // not required
		return nil
	}

	if err := validate.MinLength("spclAddrInd", "body", string(*m.SpclAddrInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spclAddrInd", "body", string(*m.SpclAddrInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("spclAddrInd", "body", string(*m.SpclAddrInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsMaintenanceRequest) validateSpclHandlingInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SpclHandlingInd) { // not required
		return nil
	}

	if err := validate.MinLength("spclHandlingInd", "body", string(*m.SpclHandlingInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spclHandlingInd", "body", string(*m.SpclHandlingInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("spclHandlingInd", "body", string(*m.SpclHandlingInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionsMaintenanceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionsMaintenanceRequest) UnmarshalBinary(b []byte) error {
	var res CollectionsMaintenanceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

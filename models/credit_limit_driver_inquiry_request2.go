// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditLimitDriverInquiryRequest2 credit limit driver inquiry request2
//
// swagger:model CreditLimitDriverInquiryRequest2
type CreditLimitDriverInquiryRequest2 struct {

	//  Max length = 19, Account or Card Number: Number of Customer's account or Card. Must be numeric and greater than zero.  Enter an account number to search for a match on the Account Base Segment record or card number to search for a match on the Embossing Record.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 1, Indicates if this is a request to call TRIAD for the recommended credit limit or if TRIAD recommended credit limit is to be accepted or overridden. Valid values: A = Accept TRIAD recommended credit limit O = Override TRIAD recommended credit limit T = Get TRIAD recommended credit limit
	// Required: true
	// Max Length: 1
	// Min Length: 0
	Action *string `json:"action"`

	// afford skip flg
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordSkipFlg *string `json:"affordSkipFlg,omitempty"`

	//  Max length = 8, Calculated value returned in message response as part of call to TRIAD (Credit Limit Action = T).  Must be provided with credit limit update request (Credit Limit Action = A or O)
	// Max Length: 8
	// Min Length: 0
	Checksum *string `json:"checksum,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Requested Credit Limit Amount.  T= Get TRAID recommended credit limit. This amount is considered during the TRIAD decision process. O= (Override), this amount is used for the new Credit Limit.   When the override amount is more than the TRIAD recommended amount, the service will check to see if the client is using operator limits. If so then the operator limits is used to determine the max. override amount. If operator limits are not being used, the service will reject the override request
	// Required: true
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrlimReq *string `json:"crlimReq"`

	//  Max length = 17, TRIAD recommended credit limit value returned in message response as part of call to TRIAD (Credit Limit Action = T).  Must be provided with credit limit update request (Credit Limit Action = A or O)
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrlimTriad *string `json:"crlimTriad,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 2, Client defined code for the override reason. Must be provided with override request (Credit Limit Action = O)
	// Max Length: 2
	// Min Length: 0
	OverrideReason *string `json:"overrideReason,omitempty"`
}

// Validate validates this credit limit driver inquiry request2
func (m *CreditLimitDriverInquiryRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordSkipFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrlimReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrlimTriad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if err := validate.MinLength("action", "body", string(*m.Action), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("action", "body", string(*m.Action), 1); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateAffordSkipFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordSkipFlg) { // not required
		return nil
	}

	if err := validate.MinLength("affordSkipFlg", "body", string(*m.AffordSkipFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordSkipFlg", "body", string(*m.AffordSkipFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("affordSkipFlg", "body", string(*m.AffordSkipFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateChecksum(formats strfmt.Registry) error {

	if swag.IsZero(m.Checksum) { // not required
		return nil
	}

	if err := validate.MinLength("checksum", "body", string(*m.Checksum), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("checksum", "body", string(*m.Checksum), 8); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateCrlimReq(formats strfmt.Registry) error {

	if err := validate.Required("crlimReq", "body", m.CrlimReq); err != nil {
		return err
	}

	if err := validate.MinLength("crlimReq", "body", string(*m.CrlimReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crlimReq", "body", string(*m.CrlimReq), 17); err != nil {
		return err
	}

	if err := validate.Pattern("crlimReq", "body", string(*m.CrlimReq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateCrlimTriad(formats strfmt.Registry) error {

	if swag.IsZero(m.CrlimTriad) { // not required
		return nil
	}

	if err := validate.MinLength("crlimTriad", "body", string(*m.CrlimTriad), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crlimTriad", "body", string(*m.CrlimTriad), 17); err != nil {
		return err
	}

	if err := validate.Pattern("crlimTriad", "body", string(*m.CrlimTriad), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitDriverInquiryRequest2) validateOverrideReason(formats strfmt.Registry) error {

	if swag.IsZero(m.OverrideReason) { // not required
		return nil
	}

	if err := validate.MinLength("overrideReason", "body", string(*m.OverrideReason), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overrideReason", "body", string(*m.OverrideReason), 2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditLimitDriverInquiryRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditLimitDriverInquiryRequest2) UnmarshalBinary(b []byte) error {
	var res CreditLimitDriverInquiryRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

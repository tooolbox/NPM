// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NonMonetaryActionUpdateRequest non monetary action update request
//
// swagger:model NonMonetaryActionUpdateRequest
type NonMonetaryActionUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	//  Max length = 4, A Four character code that identifies  the action to be taken
	// Required: true
	// Max Length: 4
	// Min Length: 0
	ActionCode *string `json:"actionCode"`

	// card convert
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardConvert *string `json:"cardConvert,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Max Length: 19
	// Min Length: 0
	CardNumber *string `json:"cardNumber,omitempty"`

	//  Max length = 4, This field identifies the sequence number of the card
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSequence *string `json:"cardSequence,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Field indicates the user-defined letter code assigned to the letter to be sent to this customer  through batch processing.
	// Max Length: 3
	// Min Length: 0
	LetterCode *string `json:"letterCode,omitempty"`

	//  Max length = 3, This field is the letter organization of the letters system  to be sent to the customer. It can be defined  a default letter organization at product level.
	// Max Length: 3
	// Min Length: 0
	LetterOrg *string `json:"letterOrg,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo1 *string `json:"memo1,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo2 *string `json:"memo2,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo3 *string `json:"memo3,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo4 *string `json:"memo4,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo5 *string `json:"memo5,omitempty"`

	// Format: YYYYMMDD. Date when this account is to be placed in the representative's queue for review
	ReviewDate string `json:"reviewDate,omitempty"`

	//  Max length = 4, Time when this account  is placed for review. The format is HHMM.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ReviewTime *string `json:"reviewTime,omitempty"`
}

// Validate validates this non monetary action update request
func (m *NonMonetaryActionUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardConvert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateActionCode(formats strfmt.Registry) error {

	if err := validate.Required("actionCode", "body", m.ActionCode); err != nil {
		return err
	}

	if err := validate.MinLength("actionCode", "body", string(*m.ActionCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actionCode", "body", string(*m.ActionCode), 4); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateCardConvert(formats strfmt.Registry) error {

	if swag.IsZero(m.CardConvert) { // not required
		return nil
	}

	if err := validate.MinLength("cardConvert", "body", string(*m.CardConvert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardConvert", "body", string(*m.CardConvert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cardConvert", "body", string(*m.CardConvert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateCardNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNumber) { // not required
		return nil
	}

	if err := validate.MinLength("cardNumber", "body", string(*m.CardNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNumber", "body", string(*m.CardNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateCardSequence(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSequence) { // not required
		return nil
	}

	if err := validate.MinLength("cardSequence", "body", string(*m.CardSequence), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSequence", "body", string(*m.CardSequence), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSequence", "body", string(*m.CardSequence), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateLetterCode(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterCode) { // not required
		return nil
	}

	if err := validate.MinLength("letterCode", "body", string(*m.LetterCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letterCode", "body", string(*m.LetterCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateLetterOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterOrg) { // not required
		return nil
	}

	if err := validate.MinLength("letterOrg", "body", string(*m.LetterOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letterOrg", "body", string(*m.LetterOrg), 3); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateMemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo1) { // not required
		return nil
	}

	if err := validate.MinLength("memo1", "body", string(*m.Memo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo1", "body", string(*m.Memo1), 60); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateMemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo2) { // not required
		return nil
	}

	if err := validate.MinLength("memo2", "body", string(*m.Memo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo2", "body", string(*m.Memo2), 60); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateMemo3(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo3) { // not required
		return nil
	}

	if err := validate.MinLength("memo3", "body", string(*m.Memo3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo3", "body", string(*m.Memo3), 60); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateMemo4(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo4) { // not required
		return nil
	}

	if err := validate.MinLength("memo4", "body", string(*m.Memo4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo4", "body", string(*m.Memo4), 60); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateMemo5(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo5) { // not required
		return nil
	}

	if err := validate.MinLength("memo5", "body", string(*m.Memo5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo5", "body", string(*m.Memo5), 60); err != nil {
		return err
	}

	return nil
}

func (m *NonMonetaryActionUpdateRequest) validateReviewTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ReviewTime) { // not required
		return nil
	}

	if err := validate.MinLength("reviewTime", "body", string(*m.ReviewTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reviewTime", "body", string(*m.ReviewTime), 4); err != nil {
		return err
	}

	if err := validate.Pattern("reviewTime", "body", string(*m.ReviewTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NonMonetaryActionUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NonMonetaryActionUpdateRequest) UnmarshalBinary(b []byte) error {
	var res NonMonetaryActionUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

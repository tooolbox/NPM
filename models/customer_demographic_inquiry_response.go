// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerDemographicInquiryResponse customer demographic inquiry response
//
// swagger:model CustomerDemographicInquiryResponse
type CustomerDemographicInquiryResponse struct {

	//  Max length = 2, Add Status of that Customer record. Values are: 00 to 49 - Add pending Value 99 - Add complete
	AddStatus string `json:"addStatus,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	CustNbr string `json:"custNbr,omitempty"`

	// Format: YYYYMMDD. Date Last Address Change: Date when the address got last changed.
	DateLastAddrChange string `json:"dateLastAddrChange,omitempty"`

	// Format: YYYYMMDD. Date Last Maintenance: Date when the customer record got last modified/updated.
	DateLastMaint string `json:"dateLastMaint,omitempty"`

	//  Max length = 3, Delivery Point Suffix Address.
	DelivPointSuffix string `json:"delivPointSuffix,omitempty"`

	//  Max length = 1, Duplicate Currency Status. Values are: 0 - Dual currency OFF 1 - Dual currency ON
	DuplicateCurrency string `json:"duplicateCurrency,omitempty"`

	//  Max length = 40, Address Line 3 of part 1 of the customer as defined on the Customer Name/Address record.
	EmpAddress3Part1 string `json:"empAddress3Part1,omitempty"`

	//  Max length = 40, Address Line 3 of part 2 of the customer as defined on the Customer Name/Address record.
	EmpAddress3Part2 string `json:"empAddress3Part2,omitempty"`

	//  Max length = 20, City: City of the customer address as defined on the Customer Name/Address record.
	EmpCity1 string `json:"empCity1,omitempty"`

	//  Max length = 20, City: City of the customer address as defined on the Customer Name/Address record.
	EmpCity2 string `json:"empCity2,omitempty"`

	//  Max length = 3, Country code: Country code of the customer address as defined on the Customer Name/Address record.
	EmpCountryCode1 string `json:"empCountryCode1,omitempty"`

	//  Max length = 3, Country code: Country code of the customer address as defined on the Customer Name/Address record.
	EmpCountryCode2 string `json:"empCountryCode2,omitempty"`

	//  Max length = 40, Country name: Country name of the customer address as defined on the Customer Name/Address record.
	EmpCountryName1 string `json:"empCountryName1,omitempty"`

	//  Max length = 40, Country name: Country name of the customer address as defined on the Customer Name/Address record.
	EmpCountryName2 string `json:"empCountryName2,omitempty"`

	//  Max length = 10, Postal code: Postal code of the customer address as defined on the Customer Name/Address record.
	EmpPostalCode1 string `json:"empPostalCode1,omitempty"`

	//  Max length = 10, Postal code: Postal code of the customer address as defined on the Customer Name/Address record.
	EmpPostalCode2 string `json:"empPostalCode2,omitempty"`

	//  Max length = 20, State: State of the customer address as defined on the Customer Name/Address record.
	EmpState1 string `json:"empState1,omitempty"`

	//  Max length = 20, State: State of the customer address as defined on the Customer Name/Address record.
	EmpState2 string `json:"empState2,omitempty"`

	//  Max length = 1, Mail preferences: Mail preference selected by the customer. Valid values are <UL><LI><EM> 0 - </EM>Home Address</LI><LI><EM> 1 - </EM>Office Address</LI><LI><EM> 2 - </EM>Permanent Residence Address.</LI></UL>
	MailPref string `json:"mailPref,omitempty"`

	//  Max length = 20, Memorable Word, as selected by the customer.
	MemorableWord string `json:"memorableWord,omitempty"`

	//  Max length = 30, Memorable Word Reminder, used by the customer to remember the memorable word.
	MemorableWordReminder string `json:"memorableWordReminder,omitempty"`

	// 2 Occurrences of Owner and Co -owner data (1715 bytes each group occurrence).
	OwnerCoownerData []*OwnerCoownerDataForCustomerDemographicInquiry1 `json:"ownerCoownerData"`

	//  Max length = 1, Co Maker Indicator: Flag indicating the presence of Co-Maker (secondary or additional owner of the account) data within the customer record.  Values are:  1 - Maker  2 - Co-maker
	OwnerCoownerInd string `json:"ownerCoownerInd,omitempty"`

	//  Max length = 6, Standard Industrial Classification code: code used to identify the industry to which the commercial card customer is associated.
	SicCode string `json:"sicCode,omitempty"`

	//  Max length = 1, Source of boarding.  Values are:  'C'   Conversion  'O'   Online     'U'    User input  'S'    Service  'T'   Transfer
	Source string `json:"source,omitempty"`

	//  Max length = 1, Status: Code that indicates the status of the Customer Name/Address record. The values are: 0 = Active (Default) 1 = Closed 2 = Purge pending
	Status string `json:"status,omitempty"`

	//  Max length = 19, Unique ID: It identifies a customer uniquely.
	UniqueID string `json:"uniqueId,omitempty"`

	//  Max length = 1, VIP Status: User-defined code that indicates this account holder is an important or influential customer.  Values are:  0 - Regular Customer  1 - VIP Customer
	VipStatus string `json:"vipStatus,omitempty"`
}

// Validate validates this customer demographic inquiry response
func (m *CustomerDemographicInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerCoownerData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerDemographicInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerDemographicInquiryResponse) validateOwnerCoownerData(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerCoownerData) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerCoownerData); i++ {
		if swag.IsZero(m.OwnerCoownerData[i]) { // not required
			continue
		}

		if m.OwnerCoownerData[i] != nil {
			if err := m.OwnerCoownerData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerCoownerData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerDemographicInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerDemographicInquiryResponse) UnmarshalBinary(b []byte) error {
	var res CustomerDemographicInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

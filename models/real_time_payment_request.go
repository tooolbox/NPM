// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealTimePaymentRequest real time payment request
//
// swagger:model RealTimePaymentRequest
type RealTimePaymentRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	CurrCd *string `json:"currCd"`

	//  Max length = 1, Dual Indicator: Dual Account Flag of account.Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	// Format: YYYYMMDD. Effective date of this payment transaction. Date format is CCYY-MM-DD.
	// Required: true
	EffDt *string `json:"effDt"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Org *string `json:"org,omitempty"`

	//  Max length = 23, Payment reference number: Unique 23 digit number provided by the message sender to identify this transaction through the host systems. If the same reference number is used  again in the same day, then an error is returned.  After the transaction is posted, this number is carried through and can be viewed through the transaction details on the ARTD / ARSD screens, and is returned when using  the transaction detail message.
	// Required: true
	// Max Length: 23
	// Min Length: 0
	PmtRefNbr *string `json:"pmtRefNbr"`

	//  Max length = 4, Service Type. Values are: 'PYMT'-  Payment 'PYRV' - Payment Reversal
	// Required: true
	// Max Length: 4
	// Min Length: 0
	SvcTyp *string `json:"svcTyp"`

	//  Max length = 17, Transaction Amount. Note: Transaction amount can be entered in dollars and cents (without the commas and decimal places.  Decimal places are dependent on what value is set for the number of decimals on the Org record).  Example: if an account has available credit of EUR52.50 and the system's NOD set at 2, this field is entered as 00000000000005250.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	TxnAmt *string `json:"txnAmt"`
}

// Validate validates this real time payment request
func (m *RealTimePaymentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffDt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealTimePaymentRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *RealTimePaymentRequest) validateCurrCd(formats strfmt.Registry) error {

	if err := validate.Required("currCd", "body", m.CurrCd); err != nil {
		return err
	}

	if err := validate.MinLength("currCd", "body", string(*m.CurrCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currCd", "body", string(*m.CurrCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validateEffDt(formats strfmt.Registry) error {

	if err := validate.Required("effDt", "body", m.EffDt); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validateOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if err := validate.MinLength("org", "body", string(*m.Org), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("org", "body", string(*m.Org), 3); err != nil {
		return err
	}

	if err := validate.Pattern("org", "body", string(*m.Org), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validatePmtRefNbr(formats strfmt.Registry) error {

	if err := validate.Required("pmtRefNbr", "body", m.PmtRefNbr); err != nil {
		return err
	}

	if err := validate.MinLength("pmtRefNbr", "body", string(*m.PmtRefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtRefNbr", "body", string(*m.PmtRefNbr), 23); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validateSvcTyp(formats strfmt.Registry) error {

	if err := validate.Required("svcTyp", "body", m.SvcTyp); err != nil {
		return err
	}

	if err := validate.MinLength("svcTyp", "body", string(*m.SvcTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcTyp", "body", string(*m.SvcTyp), 4); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentRequest) validateTxnAmt(formats strfmt.Registry) error {

	if err := validate.Required("txnAmt", "body", m.TxnAmt); err != nil {
		return err
	}

	if err := validate.Pattern("txnAmt", "body", string(*m.TxnAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RealTimePaymentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealTimePaymentRequest) UnmarshalBinary(b []byte) error {
	var res RealTimePaymentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

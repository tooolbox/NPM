// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardReplacementRequest card replacement request
//
// swagger:model CardReplacementRequest
type CardReplacementRequest struct {

	// action
	// Max Length: 1
	// Min Length: 0
	Action *string `json:"action,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	// card seq
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	// nbr req cards
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrReqCards *string `json:"nbrReqCards,omitempty"`

	// nbr ret cards
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrRetCards *string `json:"nbrRetCards,omitempty"`
}

// Validate validates this card replacement request
func (m *CardReplacementRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrReqCards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrRetCards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardReplacementRequest) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := validate.MinLength("action", "body", string(*m.Action), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("action", "body", string(*m.Action), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardReplacementRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardReplacementRequest) validateCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardReplacementRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardReplacementRequest) validateNbrReqCards(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrReqCards) { // not required
		return nil
	}

	if err := validate.MinLength("nbrReqCards", "body", string(*m.NbrReqCards), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrReqCards", "body", string(*m.NbrReqCards), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrReqCards", "body", string(*m.NbrReqCards), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardReplacementRequest) validateNbrRetCards(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrRetCards) { // not required
		return nil
	}

	if err := validate.MinLength("nbrRetCards", "body", string(*m.NbrRetCards), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrRetCards", "body", string(*m.NbrRetCards), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrRetCards", "body", string(*m.NbrRetCards), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardReplacementRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardReplacementRequest) UnmarshalBinary(b []byte) error {
	var res CardReplacementRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

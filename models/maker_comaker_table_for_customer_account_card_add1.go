// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MakerComakerTableForCustomerAccountCardAdd1 maker comaker table for customer account card add1
//
// swagger:model MakerComakerTableForCustomerAccountCardAdd1
type MakerComakerTableForCustomerAccountCardAdd1 struct {

	//  Max length = 40, Mailing address for the owner
	// Max Length: 40
	// Min Length: 0
	AddrLine1 *string `json:"addrLine1,omitempty"`

	//  Max length = 40, Mailing address for the owner
	// Max Length: 40
	// Min Length: 0
	AddrLine2 *string `json:"addrLine2,omitempty"`

	//  Max length = 40, Mailing address line 3
	// Max Length: 40
	// Min Length: 0
	AddressLine3 *string `json:"addressLine3,omitempty"`

	//  Max length = 40, Mailing address line 4
	// Max Length: 40
	// Min Length: 0
	AddressLine4 *string `json:"addressLine4,omitempty"`

	//  Max length = 30, City: City portion of the mailing address.
	// Max Length: 30
	// Min Length: 0
	City *string `json:"city,omitempty"`

	//  Max length = 3, Country ISO code
	// Max Length: 3
	// Min Length: 0
	CountryCode *string `json:"countryCode,omitempty"`

	//  Max length = 30, County of the Customer
	// Max Length: 30
	// Min Length: 0
	County *string `json:"county,omitempty"`

	// Format: YYYYMMDD. Date of birth of the Customer/Owner. Must be a valid date
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	//  Max length = 60, E-mail address of the customer REQUIRED IF EMAIL-FLAG IS  1 OR 2
	// Max Length: 60
	// Min Length: 0
	EmailAddr *string `json:"emailAddr,omitempty"`

	//  Max length = 1, Email Flag: code that indicates whether you have permission from the owner to Email. Values are:  0 - Do not send  1 - May be sent  2 - Prefer to be sent
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmailFlag *string `json:"emailFlag,omitempty"`

	//  Max length = 6, Phone Number Extension at place of Employment.
	// Max Length: 6
	// Min Length: 0
	EmpPhoneExtn *string `json:"empPhoneExtn,omitempty"`

	//  Max length = 1, Phone Flag: Code that specifies whether the customer grants permission to call this number. The values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmpPhoneFlag *string `json:"empPhoneFlag,omitempty"`

	//  Max length = 40, Name of the Employer of the Customer.
	// Max Length: 40
	// Min Length: 0
	Employer *string `json:"employer,omitempty"`

	//  Max length = 40, Employer's Address 1
	// Max Length: 40
	// Min Length: 0
	EmployerAddress1 *string `json:"employerAddress1,omitempty"`

	//  Max length = 40, Employer's Address 2
	// Max Length: 40
	// Min Length: 0
	EmployerAddress2 *string `json:"employerAddress2,omitempty"`

	//  Max length = 1, Fax Flag: Code that specifies whether the customer grants permission to use this number. Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FaxPhoneFlag *string `json:"faxPhoneFlag,omitempty"`

	//  Max length = 40, First Name of the Customer
	// Max Length: 40
	// Min Length: 0
	FirstName *string `json:"firstName,omitempty"`

	//  Max length = 1, Gender code. Values are: 0 - Gender not specified 1 - Male 2 - Female
	// Max Length: 1
	// Min Length: 0
	GenderCode *string `json:"genderCode,omitempty"`

	//  Max length = 1, Code that specifies whether the customer grants permission to  call this number. The values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HomePhoneFlag *string `json:"homePhoneFlag,omitempty"`

	//  Max length = 20, Home telephone number. REQUIRED IF -HOME-PHONE-FLAG IS 1 OR 2
	// Max Length: 20
	// Min Length: 0
	HomePhoneNumber *string `json:"homePhoneNumber,omitempty"`

	//  Max length = 40, Identifies the house name of the customer
	// Max Length: 40
	// Min Length: 0
	HouseName *string `json:"houseName,omitempty"`

	//  Max length = 20, Identifies the house number of the customer
	// Max Length: 20
	// Min Length: 0
	HouseNumber *string `json:"houseNumber,omitempty"`

	// Format: YYYYMMDD. Date on which the tax identification number of the customer was recorded in the Customer  name/Address record as a result of receiving the W-9 form
	IDExpDte string `json:"idExpDte,omitempty"`

	//  Max length = 1, Value to indicate whether the customer has been the target of identity fraud. Valid values are 0 or 1. 0 = Customer has not been the target of identity fraud. (Default) 1 = Customer has been the target of identity fraud.
	// Max Length: 1
	// Min Length: 0
	IDFraud *string `json:"idFraud,omitempty"`

	//  Max length = 3, Language Indicator: ISO code that indicates the language spoken by the Customer.
	// Max Length: 3
	// Min Length: 0
	LangInd *string `json:"langInd,omitempty"`

	//  Max length = 40, Last Name of the Customer
	// Max Length: 40
	// Min Length: 0
	LastName *string `json:"lastName,omitempty"`

	//  Max length = 1, Letter Notification Mode 0 - LTR-NOTIFY-MOD-NONE 1 - LTR-NOTIFY-MOD-EMAIL 2 - LTR-NOTIFY-MOD-SMS 3 - LTR-NOTIFY-MOD-BOTH
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LtrNtfyMod *string `json:"ltrNtfyMod,omitempty"`

	//  Max length = 1, Letter Preference Indicator 0 - LTR-PREF-NONE 1 -  LTR-PREF-SOFT-ONLY 2 -LTR-PREF-SOFT-HARD
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LtrPref *string `json:"ltrPref,omitempty"`

	//  Max length = 1, Marital Status code: code that indicates the marital and address status of the owner and co-owner. Values are: 0 = Not used (Default) 1 = Married and living at the same address 2 = Married and living at different addresses 3 = Not married and living at the same address 4 = Not married and living at different addresses.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MaritalStatus *string `json:"maritalStatus,omitempty"`

	//  Max length = 40, Middle Name of the Customer
	// Max Length: 40
	// Min Length: 0
	MiddleName *string `json:"middleName,omitempty"`

	//  Max length = 20, Mobile number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	MobilePhone *string `json:"mobilePhone,omitempty"`

	//  Max length = 1, Valid Values 0 , 1 and 2 0 - Do not call the mobile number 1 -  May be called on the mobile number 2 - Preferred contact method is the mobile number
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MobilePhoneFlag *string `json:"mobilePhoneFlag,omitempty"`

	//  Max length = 10, Postal Code: Postal code portion of the mailing address.
	// Max Length: 10
	// Min Length: 0
	NaPostalCode *string `json:"naPostalCode,omitempty"`

	// Format: YYYYMMDD. User 10 field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	NaUser10 string `json:"naUser10,omitempty"`

	//  Max length = 3, User 9 field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 3
	// Min Length: 0
	NaUser9 *string `json:"naUser9,omitempty"`

	//  Max length = 40, Personal name, business name, or a generic name.
	// Max Length: 40
	// Min Length: 0
	NameLine1 *string `json:"nameLine1,omitempty"`

	//  Max length = 40, Personal name, business name, or a generic name.(cont.)
	// Max Length: 40
	// Min Length: 0
	NameLine2 *string `json:"nameLine2,omitempty"`

	//  Max length = 40, Personal name, business name, or a generic name.(cont.)
	// Max Length: 40
	// Min Length: 0
	NameLine3 *string `json:"nameLine3,omitempty"`

	//  Max length = 1, Indicates the type of name. Valid values are: 0 = Personal name (Default) 1 = Business name 2 = Store name 3 = Generic name.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NameType1Ind *string `json:"nameType1Ind,omitempty"`

	//  Max length = 1, Indicates the type of name. Valid values are: 0 = Personal name (Default) 1 = Business name 2 = Store name 3 = Generic name.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NameType2Ind *string `json:"nameType2Ind,omitempty"`

	//  Max length = 1, Indicates the type of name. Valid values are: 0 = Personal name (Default) 1 = Business name 2 = Store name 3 = Generic name.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NameType3Ind *string `json:"nameType3Ind,omitempty"`

	//  Max length = 20, Nationality of the Customer
	// Max Length: 20
	// Min Length: 0
	Nationality *string `json:"nationality,omitempty"`

	//  Max length = 3, Number of dependents
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrOfDependents *string `json:"nbrOfDependents,omitempty"`

	//  Max length = 40, Relative Name - owner
	// Max Length: 40
	// Min Length: 0
	RelativeName *string `json:"relativeName,omitempty"`

	//  Max length = 1, Own or Rent Residence Flag: Code that identifies whether the customer owns or rents their primary residence.   Values are: 0 - Unknown or not used (Default) 1 - Owns or is buying a home 2 - Rents or leases a home 3 - Neither owns nor rents primary residence
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ResidenceCode *string `json:"residenceCode,omitempty"`

	//  Max length = 1, SMS Flag: code that indicates whether you have permission from the owner to SMS.  Values are:  0 - Do not send  1 - May be sent
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SmsFlag *string `json:"smsFlag,omitempty"`

	//  Max length = 3, Abbreviation of the state or province portion of the mailing address
	// Max Length: 3
	// Min Length: 0
	StateProvince *string `json:"stateProvince,omitempty"`

	//  Max length = 1, Customer's preferred statement type The values are: 0 = Hard copy 1 = Electronic statement 2 = Hard copy and electronic statement.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNotify *string `json:"stmtNotify,omitempty"`

	//  Max length = 1, Mode of customer statement notification The values are: 0 = No notification 1 = E-mail 2 = SMS (Short message service) 3 = SMS and E-mail 4 = No notification required
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNotifyMod *string `json:"stmtNotifyMod,omitempty"`

	//  Max length = 20, Suffix of the Customer if applicable e.g. Jr or Sr
	// Max Length: 20
	// Min Length: 0
	Suffix *string `json:"suffix,omitempty"`

	//  Max length = 25, Tax identification number
	// Max Length: 25
	// Min Length: 0
	TaxID *string `json:"taxId,omitempty"`

	//  Max length = 1, Tax ID type. Indicates the type of identification number held in the AMNA-SSAN field.  Values are: 0 - Social Security Number 1 - Tax Id Number 2 - Other ID 3 - National ID 4 - Tabiya ID 5 - Iqama ID 6 - Passport ID 7 - Diplomat ID 8 - National insurance number ID
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TaxIDFlag *string `json:"taxIdFlag,omitempty"`

	//  Max length = 20, Title: Professional or honorary title associated with the owner name entered in the NAME LINE 1 field.
	// Max Length: 20
	// Min Length: 0
	Title *string `json:"title,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User1 *string `json:"user1,omitempty"`

	// Format: YYYYMMDD. User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.   Must be numeric and in valid date format
	User11 string `json:"user11,omitempty"`

	//  Max length = 30, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 30
	// Min Length: 0
	User12 *string `json:"user12,omitempty"`

	//  Max length = 30, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 30
	// Min Length: 0
	User13 *string `json:"user13,omitempty"`

	//  Max length = 20, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 20
	// Min Length: 0
	User14 *string `json:"user14,omitempty"`

	//  Max length = 20, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 20
	// Min Length: 0
	User15 *string `json:"user15,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User2 *string `json:"user2,omitempty"`

	//  Max length = 7, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 7
	// Min Length: 0
	User3 *string `json:"user3,omitempty"`

	//  Max length = 1, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 1
	// Min Length: 0
	User4 *string `json:"user4,omitempty"`

	//  Max length = 1, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 1
	// Min Length: 0
	User5 *string `json:"user5,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User6 *string `json:"user6,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User7 *string `json:"user7,omitempty"`

	//  Max length = 3, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 3
	// Min Length: 0
	User8 *string `json:"user8,omitempty"`

	//  Max length = 20, User-defined demographic data or other information for the customer
	// Max Length: 20
	// Min Length: 0
	UserDemo1 *string `json:"userDemo1,omitempty"`

	//  Max length = 20, User-defined demographic data or other information for the customer
	// Max Length: 20
	// Min Length: 0
	UserDemo2 *string `json:"userDemo2,omitempty"`

	//  Max length = 20, User-defined demographic data or other information for the customer
	// Max Length: 20
	// Min Length: 0
	UserDemo3 *string `json:"userDemo3,omitempty"`

	//  Max length = 20, Work Phone number. REQUIRED IF PHONE-FLAG IS  1 OR 2
	// Max Length: 20
	// Min Length: 0
	WorkPhoneNumber *string `json:"workPhoneNumber,omitempty"`
}

// Validate validates this maker comaker table for customer account card add1
func (m *MakerComakerTableForCustomerAccountCardAdd1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddrLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddrLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpPhoneExtn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployerAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployerAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenderCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHouseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHouseNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDFraud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLangInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrNtfyMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrPref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaritalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNaPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNaUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameType1Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameType2Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameType3Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNationality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrOfDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidenceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateProvince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNotifyMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIDFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDemo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkPhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateAddrLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.AddrLine1) { // not required
		return nil
	}

	if err := validate.MinLength("addrLine1", "body", string(*m.AddrLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addrLine1", "body", string(*m.AddrLine1), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateAddrLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.AddrLine2) { // not required
		return nil
	}

	if err := validate.MinLength("addrLine2", "body", string(*m.AddrLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addrLine2", "body", string(*m.AddrLine2), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateAddressLine3(formats strfmt.Registry) error {

	if swag.IsZero(m.AddressLine3) { // not required
		return nil
	}

	if err := validate.MinLength("addressLine3", "body", string(*m.AddressLine3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addressLine3", "body", string(*m.AddressLine3), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateAddressLine4(formats strfmt.Registry) error {

	if swag.IsZero(m.AddressLine4) { // not required
		return nil
	}

	if err := validate.MinLength("addressLine4", "body", string(*m.AddressLine4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addressLine4", "body", string(*m.AddressLine4), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(*m.City), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(*m.City), 30); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MinLength("countryCode", "body", string(*m.CountryCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("countryCode", "body", string(*m.CountryCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.County) { // not required
		return nil
	}

	if err := validate.MinLength("county", "body", string(*m.County), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("county", "body", string(*m.County), 30); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmailAddr(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAddr) { // not required
		return nil
	}

	if err := validate.MinLength("emailAddr", "body", string(*m.EmailAddr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emailAddr", "body", string(*m.EmailAddr), 60); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmailFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailFlag) { // not required
		return nil
	}

	if err := validate.MinLength("emailFlag", "body", string(*m.EmailFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emailFlag", "body", string(*m.EmailFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("emailFlag", "body", string(*m.EmailFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmpPhoneExtn(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpPhoneExtn) { // not required
		return nil
	}

	if err := validate.MinLength("empPhoneExtn", "body", string(*m.EmpPhoneExtn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empPhoneExtn", "body", string(*m.EmpPhoneExtn), 6); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmpPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("empPhoneFlag", "body", string(*m.EmpPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empPhoneFlag", "body", string(*m.EmpPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("empPhoneFlag", "body", string(*m.EmpPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmployer(formats strfmt.Registry) error {

	if swag.IsZero(m.Employer) { // not required
		return nil
	}

	if err := validate.MinLength("employer", "body", string(*m.Employer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employer", "body", string(*m.Employer), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmployerAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployerAddress1) { // not required
		return nil
	}

	if err := validate.MinLength("employerAddress1", "body", string(*m.EmployerAddress1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employerAddress1", "body", string(*m.EmployerAddress1), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateEmployerAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployerAddress2) { // not required
		return nil
	}

	if err := validate.MinLength("employerAddress2", "body", string(*m.EmployerAddress2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employerAddress2", "body", string(*m.EmployerAddress2), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateFaxPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("faxPhoneFlag", "body", string(*m.FaxPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("faxPhoneFlag", "body", string(*m.FaxPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("faxPhoneFlag", "body", string(*m.FaxPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("firstName", "body", string(*m.FirstName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("firstName", "body", string(*m.FirstName), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateGenderCode(formats strfmt.Registry) error {

	if swag.IsZero(m.GenderCode) { // not required
		return nil
	}

	if err := validate.MinLength("genderCode", "body", string(*m.GenderCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("genderCode", "body", string(*m.GenderCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateHomePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("homePhoneFlag", "body", string(*m.HomePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homePhoneFlag", "body", string(*m.HomePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("homePhoneFlag", "body", string(*m.HomePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateHomePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("homePhoneNumber", "body", string(*m.HomePhoneNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homePhoneNumber", "body", string(*m.HomePhoneNumber), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateHouseName(formats strfmt.Registry) error {

	if swag.IsZero(m.HouseName) { // not required
		return nil
	}

	if err := validate.MinLength("houseName", "body", string(*m.HouseName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("houseName", "body", string(*m.HouseName), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateHouseNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.HouseNumber) { // not required
		return nil
	}

	if err := validate.MinLength("houseNumber", "body", string(*m.HouseNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("houseNumber", "body", string(*m.HouseNumber), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateIDFraud(formats strfmt.Registry) error {

	if swag.IsZero(m.IDFraud) { // not required
		return nil
	}

	if err := validate.MinLength("idFraud", "body", string(*m.IDFraud), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("idFraud", "body", string(*m.IDFraud), 1); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateLangInd(formats strfmt.Registry) error {

	if swag.IsZero(m.LangInd) { // not required
		return nil
	}

	if err := validate.MinLength("langInd", "body", string(*m.LangInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("langInd", "body", string(*m.LangInd), 3); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("lastName", "body", string(*m.LastName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lastName", "body", string(*m.LastName), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateLtrNtfyMod(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrNtfyMod) { // not required
		return nil
	}

	if err := validate.MinLength("ltrNtfyMod", "body", string(*m.LtrNtfyMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrNtfyMod", "body", string(*m.LtrNtfyMod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ltrNtfyMod", "body", string(*m.LtrNtfyMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateLtrPref(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrPref) { // not required
		return nil
	}

	if err := validate.MinLength("ltrPref", "body", string(*m.LtrPref), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrPref", "body", string(*m.LtrPref), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ltrPref", "body", string(*m.LtrPref), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateMaritalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MaritalStatus) { // not required
		return nil
	}

	if err := validate.MinLength("maritalStatus", "body", string(*m.MaritalStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("maritalStatus", "body", string(*m.MaritalStatus), 1); err != nil {
		return err
	}

	if err := validate.Pattern("maritalStatus", "body", string(*m.MaritalStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(m.MiddleName) { // not required
		return nil
	}

	if err := validate.MinLength("middleName", "body", string(*m.MiddleName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("middleName", "body", string(*m.MiddleName), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateMobilePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MobilePhone) { // not required
		return nil
	}

	if err := validate.MinLength("mobilePhone", "body", string(*m.MobilePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobilePhone", "body", string(*m.MobilePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateMobilePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MobilePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mobilePhoneFlag", "body", string(*m.MobilePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobilePhoneFlag", "body", string(*m.MobilePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mobilePhoneFlag", "body", string(*m.MobilePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNaPostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.NaPostalCode) { // not required
		return nil
	}

	if err := validate.MinLength("naPostalCode", "body", string(*m.NaPostalCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("naPostalCode", "body", string(*m.NaPostalCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNaUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.NaUser9) { // not required
		return nil
	}

	if err := validate.MinLength("naUser9", "body", string(*m.NaUser9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("naUser9", "body", string(*m.NaUser9), 3); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNameLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine1) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine1", "body", string(*m.NameLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine1", "body", string(*m.NameLine1), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNameLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine2) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine2", "body", string(*m.NameLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine2", "body", string(*m.NameLine2), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNameLine3(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine3) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine3", "body", string(*m.NameLine3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine3", "body", string(*m.NameLine3), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNameType1Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.NameType1Ind) { // not required
		return nil
	}

	if err := validate.MinLength("nameType1Ind", "body", string(*m.NameType1Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameType1Ind", "body", string(*m.NameType1Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("nameType1Ind", "body", string(*m.NameType1Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNameType2Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.NameType2Ind) { // not required
		return nil
	}

	if err := validate.MinLength("nameType2Ind", "body", string(*m.NameType2Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameType2Ind", "body", string(*m.NameType2Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("nameType2Ind", "body", string(*m.NameType2Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNameType3Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.NameType3Ind) { // not required
		return nil
	}

	if err := validate.MinLength("nameType3Ind", "body", string(*m.NameType3Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameType3Ind", "body", string(*m.NameType3Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("nameType3Ind", "body", string(*m.NameType3Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNationality(formats strfmt.Registry) error {

	if swag.IsZero(m.Nationality) { // not required
		return nil
	}

	if err := validate.MinLength("nationality", "body", string(*m.Nationality), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nationality", "body", string(*m.Nationality), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateNbrOfDependents(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrOfDependents) { // not required
		return nil
	}

	if err := validate.MinLength("nbrOfDependents", "body", string(*m.NbrOfDependents), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrOfDependents", "body", string(*m.NbrOfDependents), 3); err != nil {
		return err
	}

	if err := validate.Pattern("nbrOfDependents", "body", string(*m.NbrOfDependents), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateRelativeName(formats strfmt.Registry) error {

	if swag.IsZero(m.RelativeName) { // not required
		return nil
	}

	if err := validate.MinLength("relativeName", "body", string(*m.RelativeName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("relativeName", "body", string(*m.RelativeName), 40); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateResidenceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ResidenceCode) { // not required
		return nil
	}

	if err := validate.MinLength("residenceCode", "body", string(*m.ResidenceCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("residenceCode", "body", string(*m.ResidenceCode), 1); err != nil {
		return err
	}

	if err := validate.Pattern("residenceCode", "body", string(*m.ResidenceCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateSmsFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsFlag) { // not required
		return nil
	}

	if err := validate.MinLength("smsFlag", "body", string(*m.SmsFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("smsFlag", "body", string(*m.SmsFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("smsFlag", "body", string(*m.SmsFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateStateProvince(formats strfmt.Registry) error {

	if swag.IsZero(m.StateProvince) { // not required
		return nil
	}

	if err := validate.MinLength("stateProvince", "body", string(*m.StateProvince), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stateProvince", "body", string(*m.StateProvince), 3); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateStmtNotify(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNotify) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNotify", "body", string(*m.StmtNotify), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNotify", "body", string(*m.StmtNotify), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNotify", "body", string(*m.StmtNotify), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateStmtNotifyMod(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNotifyMod) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNotifyMod", "body", string(*m.StmtNotifyMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNotifyMod", "body", string(*m.StmtNotifyMod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNotifyMod", "body", string(*m.StmtNotifyMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if err := validate.MinLength("suffix", "body", string(*m.Suffix), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("suffix", "body", string(*m.Suffix), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateTaxID(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxID) { // not required
		return nil
	}

	if err := validate.MinLength("taxId", "body", string(*m.TaxID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("taxId", "body", string(*m.TaxID), 25); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateTaxIDFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxIDFlag) { // not required
		return nil
	}

	if err := validate.MinLength("taxIdFlag", "body", string(*m.TaxIDFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("taxIdFlag", "body", string(*m.TaxIDFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("taxIdFlag", "body", string(*m.TaxIDFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", string(*m.Title), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", string(*m.Title), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.User1) { // not required
		return nil
	}

	if err := validate.MinLength("user1", "body", string(*m.User1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user1", "body", string(*m.User1), 2); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser12(formats strfmt.Registry) error {

	if swag.IsZero(m.User12) { // not required
		return nil
	}

	if err := validate.MinLength("user12", "body", string(*m.User12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user12", "body", string(*m.User12), 30); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser13(formats strfmt.Registry) error {

	if swag.IsZero(m.User13) { // not required
		return nil
	}

	if err := validate.MinLength("user13", "body", string(*m.User13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user13", "body", string(*m.User13), 30); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser14(formats strfmt.Registry) error {

	if swag.IsZero(m.User14) { // not required
		return nil
	}

	if err := validate.MinLength("user14", "body", string(*m.User14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user14", "body", string(*m.User14), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser15(formats strfmt.Registry) error {

	if swag.IsZero(m.User15) { // not required
		return nil
	}

	if err := validate.MinLength("user15", "body", string(*m.User15), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user15", "body", string(*m.User15), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.User2) { // not required
		return nil
	}

	if err := validate.MinLength("user2", "body", string(*m.User2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user2", "body", string(*m.User2), 2); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.User3) { // not required
		return nil
	}

	if err := validate.MinLength("user3", "body", string(*m.User3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user3", "body", string(*m.User3), 7); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.User4) { // not required
		return nil
	}

	if err := validate.MinLength("user4", "body", string(*m.User4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user4", "body", string(*m.User4), 1); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.User5) { // not required
		return nil
	}

	if err := validate.MinLength("user5", "body", string(*m.User5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user5", "body", string(*m.User5), 1); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.User6) { // not required
		return nil
	}

	if err := validate.MinLength("user6", "body", string(*m.User6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user6", "body", string(*m.User6), 2); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.User7) { // not required
		return nil
	}

	if err := validate.MinLength("user7", "body", string(*m.User7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user7", "body", string(*m.User7), 2); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.User8) { // not required
		return nil
	}

	if err := validate.MinLength("user8", "body", string(*m.User8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user8", "body", string(*m.User8), 3); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUserDemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDemo1) { // not required
		return nil
	}

	if err := validate.MinLength("userDemo1", "body", string(*m.UserDemo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDemo1", "body", string(*m.UserDemo1), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUserDemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDemo2) { // not required
		return nil
	}

	if err := validate.MinLength("userDemo2", "body", string(*m.UserDemo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDemo2", "body", string(*m.UserDemo2), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateUserDemo3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDemo3) { // not required
		return nil
	}

	if err := validate.MinLength("userDemo3", "body", string(*m.UserDemo3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDemo3", "body", string(*m.UserDemo3), 20); err != nil {
		return err
	}

	return nil
}

func (m *MakerComakerTableForCustomerAccountCardAdd1) validateWorkPhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkPhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("workPhoneNumber", "body", string(*m.WorkPhoneNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("workPhoneNumber", "body", string(*m.WorkPhoneNumber), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MakerComakerTableForCustomerAccountCardAdd1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MakerComakerTableForCustomerAccountCardAdd1) UnmarshalBinary(b []byte) error {
	var res MakerComakerTableForCustomerAccountCardAdd1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

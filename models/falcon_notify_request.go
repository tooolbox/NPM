// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconNotifyRequest falcon notify request
//
// swagger:model FalconNotifyRequest
type FalconNotifyRequest struct {

	//  Max length = 3, Authorisation attempt counter
	// Max Length: 3
	// Min Length: 0
	AuthAttemptsCounter *string `json:"authAttemptsCounter,omitempty"`

	//  Max length = 36, Authorisation Method Available
	// Max Length: 36
	// Min Length: 0
	AuthMethodAvailable *string `json:"authMethodAvailable,omitempty"`

	//  Max length = 36, Authorisation Method Chosen
	// Max Length: 36
	// Min Length: 0
	AuthMethodChosen *string `json:"authMethodChosen,omitempty"`

	//  Max length = 100, Authorisation Result Description
	// Max Length: 100
	// Min Length: 0
	AuthResultDescription *string `json:"authResultDescription,omitempty"`

	//  Max length = 6, Authorisation Result Reason
	// Max Length: 6
	// Min Length: 0
	AuthResultReason *string `json:"authResultReason,omitempty"`

	//  Max length = 100, Billing Address
	// Max Length: 100
	// Min Length: 0
	BillingAddress *string `json:"billingAddress,omitempty"`

	//  Max length = 12, Brand
	// Max Length: 12
	// Min Length: 0
	Brand *string `json:"brand,omitempty"`

	//  Max length = 19, Card Number
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	//  Max length = 16, Channel Source
	// Max Length: 16
	// Min Length: 0
	ChannelSource *string `json:"channelSource,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, Data Specification Version
	// Max Length: 5
	// Min Length: 0
	DataSpecificationVersion *string `json:"dataSpecificationVersion,omitempty"`

	//  Max length = 100, Delivery Address
	// Max Length: 100
	// Min Length: 0
	DeliveryAddress *string `json:"deliveryAddress,omitempty"`

	//  Max length = 20, Device Name
	// Max Length: 20
	// Min Length: 0
	DeviceName *string `json:"deviceName,omitempty"`

	//  Max length = 20, Device Type
	// Max Length: 20
	// Min Length: 0
	DeviceType *string `json:"deviceType,omitempty"`

	//  Max length = 36, Event Type
	// Max Length: 36
	// Min Length: 0
	EventType *string `json:"eventType,omitempty"`

	//  Max length = 6, GMT OFFSET
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	GmtOffset *string `json:"gmtOffset,omitempty"`

	//  Max length = 4, Mobile Network Operator Result
	// Max Length: 4
	// Min Length: 0
	MnoResult *string `json:"mnoResult,omitempty"`

	//  Max length = 4, Non-Monetary Code
	// Max Length: 4
	// Min Length: 0
	NonmonCode *string `json:"nonmonCode,omitempty"`

	//  Max length = 48, Notifcation Name. Value: ESERVICING
	// Max Length: 48
	// Min Length: 0
	NotificationName *string `json:"notificationName,omitempty"`

	//  Max length = 8, Record Creation Date
	// Max Length: 8
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecordCreationDate *string `json:"recordCreationDate,omitempty"`

	//  Max length = 3, Record Creation MilliSeconds
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecordCreationMillisec *string `json:"recordCreationMillisec,omitempty"`

	//  Max length = 6, Record Creation Time
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecordCreationTime *string `json:"recordCreationTime,omitempty"`

	//  Max length = 8, Record Type. Value: NMON11
	// Max Length: 8
	// Min Length: 0
	RecordType *string `json:"recordType,omitempty"`

	//  Max length = 100, RSA Rule Name
	// Max Length: 100
	// Min Length: 0
	RsaRuleName *string `json:"rsaRuleName,omitempty"`

	//  Max length = 4, Zeroes
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Score1 *string `json:"score1,omitempty"`

	//  Max length = 36, Session Id
	// Max Length: 36
	// Min Length: 0
	SessionID *string `json:"sessionId,omitempty"`

	//  Max length = 16, Sub Channel
	// Max Length: 16
	// Min Length: 0
	SubChannel *string `json:"subChannel,omitempty"`

	//  Max length = 8, Transaction Date
	// Required: true
	// Max Length: 8
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TransactionDate *string `json:"transactionDate"`

	//  Max length = 36, Transaction Identifier
	// Max Length: 36
	// Min Length: 0
	TransactionIdentifier *string `json:"transactionIdentifier,omitempty"`

	//  Max length = 48, Transaction Source. The value must be the name of the source generated the transaction. If the value is not present it will have FICO in default.
	// Max Length: 48
	// Min Length: 0
	TransactionSource *string `json:"transactionSource,omitempty"`

	//  Max length = 6, Transaction Time
	// Required: true
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TransactionTime *string `json:"transactionTime"`

	//  Max length = 36, Transaction Type
	// Max Length: 36
	// Min Length: 0
	TransactionType *string `json:"transactionType,omitempty"`

	//  Max length = 8, RSA Risk Score
	// Max Length: 8
	// Min Length: 0
	UserData07 *string `json:"userData07,omitempty"`

	//  Max length = 4, Spaces
	// Max Length: 4
	// Min Length: 0
	UserData1 *string `json:"userData1,omitempty"`

	//  Max length = 60, Authentication Result / Authentication Status
	// Max Length: 60
	// Min Length: 0
	UserData12 *string `json:"userData12,omitempty"`

	//  Max length = 16, Mobile number
	// Max Length: 16
	// Min Length: 0
	UserData13 *string `json:"userData13,omitempty"`

	//  Max length = 16, Merchant Category Code
	// Max Length: 16
	// Min Length: 0
	UserData14 *string `json:"userData14,omitempty"`

	//  Max length = 16, Spaces
	// Max Length: 16
	// Min Length: 0
	UserData15 *string `json:"userData15,omitempty"`

	//  Max length = 40, Merchant Name
	// Max Length: 40
	// Min Length: 0
	UserData16 *string `json:"userData16,omitempty"`

	//  Max length = 40, DS Transaction ID
	// Max Length: 40
	// Min Length: 0
	UserData18 *string `json:"userData18,omitempty"`

	//  Max length = 32, Spaces
	// Max Length: 32
	// Min Length: 0
	UserData19 *string `json:"userData19,omitempty"`

	//  Max length = 4, Authentication Attempt Counter
	// Max Length: 4
	// Min Length: 0
	UserData2 *string `json:"userData2,omitempty"`

	//  Max length = 64, Device ID + Device Type + Device Name
	// Max Length: 64
	// Min Length: 0
	UserData28 *string `json:"userData28,omitempty"`

	//  Max length = 4, Currency Code
	// Max Length: 4
	// Min Length: 0
	UserData3 *string `json:"userData3,omitempty"`

	//  Max length = 13, Transaction Amount
	// Max Length: 13
	// Min Length: 0
	UserData6 *string `json:"userData6,omitempty"`
}

// Validate validates this falcon notify request
func (m *FalconNotifyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthAttemptsCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthMethodAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthMethodChosen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthResultDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthResultReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSpecificationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGmtOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMnoResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonmonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordCreationMillisec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsaRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData07(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData16(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData18(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData19(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData28(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconNotifyRequest) validateAuthAttemptsCounter(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthAttemptsCounter) { // not required
		return nil
	}

	if err := validate.MinLength("authAttemptsCounter", "body", string(*m.AuthAttemptsCounter), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authAttemptsCounter", "body", string(*m.AuthAttemptsCounter), 3); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateAuthMethodAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMethodAvailable) { // not required
		return nil
	}

	if err := validate.MinLength("authMethodAvailable", "body", string(*m.AuthMethodAvailable), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authMethodAvailable", "body", string(*m.AuthMethodAvailable), 36); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateAuthMethodChosen(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMethodChosen) { // not required
		return nil
	}

	if err := validate.MinLength("authMethodChosen", "body", string(*m.AuthMethodChosen), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authMethodChosen", "body", string(*m.AuthMethodChosen), 36); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateAuthResultDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthResultDescription) { // not required
		return nil
	}

	if err := validate.MinLength("authResultDescription", "body", string(*m.AuthResultDescription), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authResultDescription", "body", string(*m.AuthResultDescription), 100); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateAuthResultReason(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthResultReason) { // not required
		return nil
	}

	if err := validate.MinLength("authResultReason", "body", string(*m.AuthResultReason), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authResultReason", "body", string(*m.AuthResultReason), 6); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateBillingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAddress) { // not required
		return nil
	}

	if err := validate.MinLength("billingAddress", "body", string(*m.BillingAddress), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billingAddress", "body", string(*m.BillingAddress), 100); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateBrand(formats strfmt.Registry) error {

	if swag.IsZero(m.Brand) { // not required
		return nil
	}

	if err := validate.MinLength("brand", "body", string(*m.Brand), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("brand", "body", string(*m.Brand), 12); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateChannelSource(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelSource) { // not required
		return nil
	}

	if err := validate.MinLength("channelSource", "body", string(*m.ChannelSource), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("channelSource", "body", string(*m.ChannelSource), 16); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *FalconNotifyRequest) validateDataSpecificationVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSpecificationVersion) { // not required
		return nil
	}

	if err := validate.MinLength("dataSpecificationVersion", "body", string(*m.DataSpecificationVersion), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dataSpecificationVersion", "body", string(*m.DataSpecificationVersion), 5); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryAddress) { // not required
		return nil
	}

	if err := validate.MinLength("deliveryAddress", "body", string(*m.DeliveryAddress), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("deliveryAddress", "body", string(*m.DeliveryAddress), 100); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateDeviceName(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceName) { // not required
		return nil
	}

	if err := validate.MinLength("deviceName", "body", string(*m.DeviceName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("deviceName", "body", string(*m.DeviceName), 20); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateDeviceType(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceType) { // not required
		return nil
	}

	if err := validate.MinLength("deviceType", "body", string(*m.DeviceType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("deviceType", "body", string(*m.DeviceType), 20); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := validate.MinLength("eventType", "body", string(*m.EventType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("eventType", "body", string(*m.EventType), 36); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateGmtOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.GmtOffset) { // not required
		return nil
	}

	if err := validate.MinLength("gmtOffset", "body", string(*m.GmtOffset), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("gmtOffset", "body", string(*m.GmtOffset), 6); err != nil {
		return err
	}

	if err := validate.Pattern("gmtOffset", "body", string(*m.GmtOffset), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateMnoResult(formats strfmt.Registry) error {

	if swag.IsZero(m.MnoResult) { // not required
		return nil
	}

	if err := validate.MinLength("mnoResult", "body", string(*m.MnoResult), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mnoResult", "body", string(*m.MnoResult), 4); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateNonmonCode(formats strfmt.Registry) error {

	if swag.IsZero(m.NonmonCode) { // not required
		return nil
	}

	if err := validate.MinLength("nonmonCode", "body", string(*m.NonmonCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nonmonCode", "body", string(*m.NonmonCode), 4); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateNotificationName(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationName) { // not required
		return nil
	}

	if err := validate.MinLength("notificationName", "body", string(*m.NotificationName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("notificationName", "body", string(*m.NotificationName), 48); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateRecordCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordCreationDate) { // not required
		return nil
	}

	if err := validate.MinLength("recordCreationDate", "body", string(*m.RecordCreationDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recordCreationDate", "body", string(*m.RecordCreationDate), 8); err != nil {
		return err
	}

	if err := validate.Pattern("recordCreationDate", "body", string(*m.RecordCreationDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateRecordCreationMillisec(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordCreationMillisec) { // not required
		return nil
	}

	if err := validate.MinLength("recordCreationMillisec", "body", string(*m.RecordCreationMillisec), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recordCreationMillisec", "body", string(*m.RecordCreationMillisec), 3); err != nil {
		return err
	}

	if err := validate.Pattern("recordCreationMillisec", "body", string(*m.RecordCreationMillisec), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateRecordCreationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordCreationTime) { // not required
		return nil
	}

	if err := validate.MinLength("recordCreationTime", "body", string(*m.RecordCreationTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recordCreationTime", "body", string(*m.RecordCreationTime), 6); err != nil {
		return err
	}

	if err := validate.Pattern("recordCreationTime", "body", string(*m.RecordCreationTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateRecordType(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordType) { // not required
		return nil
	}

	if err := validate.MinLength("recordType", "body", string(*m.RecordType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recordType", "body", string(*m.RecordType), 8); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateRsaRuleName(formats strfmt.Registry) error {

	if swag.IsZero(m.RsaRuleName) { // not required
		return nil
	}

	if err := validate.MinLength("rsaRuleName", "body", string(*m.RsaRuleName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rsaRuleName", "body", string(*m.RsaRuleName), 100); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateScore1(formats strfmt.Registry) error {

	if swag.IsZero(m.Score1) { // not required
		return nil
	}

	if err := validate.MinLength("score1", "body", string(*m.Score1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("score1", "body", string(*m.Score1), 4); err != nil {
		return err
	}

	if err := validate.Pattern("score1", "body", string(*m.Score1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateSessionID(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionID) { // not required
		return nil
	}

	if err := validate.MinLength("sessionId", "body", string(*m.SessionID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sessionId", "body", string(*m.SessionID), 36); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateSubChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.SubChannel) { // not required
		return nil
	}

	if err := validate.MinLength("subChannel", "body", string(*m.SubChannel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("subChannel", "body", string(*m.SubChannel), 16); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateTransactionDate(formats strfmt.Registry) error {

	if err := validate.Required("transactionDate", "body", m.TransactionDate); err != nil {
		return err
	}

	if err := validate.MinLength("transactionDate", "body", string(*m.TransactionDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("transactionDate", "body", string(*m.TransactionDate), 8); err != nil {
		return err
	}

	if err := validate.Pattern("transactionDate", "body", string(*m.TransactionDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateTransactionIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionIdentifier) { // not required
		return nil
	}

	if err := validate.MinLength("transactionIdentifier", "body", string(*m.TransactionIdentifier), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("transactionIdentifier", "body", string(*m.TransactionIdentifier), 36); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateTransactionSource(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionSource) { // not required
		return nil
	}

	if err := validate.MinLength("transactionSource", "body", string(*m.TransactionSource), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("transactionSource", "body", string(*m.TransactionSource), 48); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateTransactionTime(formats strfmt.Registry) error {

	if err := validate.Required("transactionTime", "body", m.TransactionTime); err != nil {
		return err
	}

	if err := validate.MinLength("transactionTime", "body", string(*m.TransactionTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("transactionTime", "body", string(*m.TransactionTime), 6); err != nil {
		return err
	}

	if err := validate.Pattern("transactionTime", "body", string(*m.TransactionTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateTransactionType(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionType) { // not required
		return nil
	}

	if err := validate.MinLength("transactionType", "body", string(*m.TransactionType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("transactionType", "body", string(*m.TransactionType), 36); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData07(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData07) { // not required
		return nil
	}

	if err := validate.MinLength("userData07", "body", string(*m.UserData07), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData07", "body", string(*m.UserData07), 8); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData1) { // not required
		return nil
	}

	if err := validate.MinLength("userData1", "body", string(*m.UserData1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData1", "body", string(*m.UserData1), 4); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData12(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData12) { // not required
		return nil
	}

	if err := validate.MinLength("userData12", "body", string(*m.UserData12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData12", "body", string(*m.UserData12), 60); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData13(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData13) { // not required
		return nil
	}

	if err := validate.MinLength("userData13", "body", string(*m.UserData13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData13", "body", string(*m.UserData13), 16); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData14(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData14) { // not required
		return nil
	}

	if err := validate.MinLength("userData14", "body", string(*m.UserData14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData14", "body", string(*m.UserData14), 16); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData15(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData15) { // not required
		return nil
	}

	if err := validate.MinLength("userData15", "body", string(*m.UserData15), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData15", "body", string(*m.UserData15), 16); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData16(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData16) { // not required
		return nil
	}

	if err := validate.MinLength("userData16", "body", string(*m.UserData16), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData16", "body", string(*m.UserData16), 40); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData18(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData18) { // not required
		return nil
	}

	if err := validate.MinLength("userData18", "body", string(*m.UserData18), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData18", "body", string(*m.UserData18), 40); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData19(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData19) { // not required
		return nil
	}

	if err := validate.MinLength("userData19", "body", string(*m.UserData19), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData19", "body", string(*m.UserData19), 32); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData2) { // not required
		return nil
	}

	if err := validate.MinLength("userData2", "body", string(*m.UserData2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData2", "body", string(*m.UserData2), 4); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData28(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData28) { // not required
		return nil
	}

	if err := validate.MinLength("userData28", "body", string(*m.UserData28), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData28", "body", string(*m.UserData28), 64); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData3) { // not required
		return nil
	}

	if err := validate.MinLength("userData3", "body", string(*m.UserData3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData3", "body", string(*m.UserData3), 4); err != nil {
		return err
	}

	return nil
}

func (m *FalconNotifyRequest) validateUserData6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData6) { // not required
		return nil
	}

	if err := validate.MinLength("userData6", "body", string(*m.UserData6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData6", "body", string(*m.UserData6), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconNotifyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconNotifyRequest) UnmarshalBinary(b []byte) error {
	var res FalconNotifyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

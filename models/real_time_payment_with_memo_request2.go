// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealTimePaymentWithMemoRequest2 real time payment with memo request2
//
// swagger:model RealTimePaymentWithMemoRequest2
type RealTimePaymentWithMemoRequest2 struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AcctOrg *string `json:"acctOrg,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AsmOrg *string `json:"asmOrg,omitempty"`

	//  Max length = 3, Account Service Management(ASM) user name. Must be a valid ASM Rep.
	// Max Length: 3
	// Min Length: 0
	AsmRep *string `json:"asmRep,omitempty"`

	//  Max length = 6, Authorization code for the transaction.
	// Max Length: 6
	// Min Length: 0
	AuthCode *string `json:"authCode,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	// Max Length: 3
	// Min Length: 0
	CurrCode *string `json:"currCode,omitempty"`

	//  Max length = 1, Dual Indicator: Dual Account Flag of account.Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	// Format: YYYYMMDD. Effective date of the transfer Date fomat is CCYYMMDD.
	EffDate string `json:"effDate,omitempty"`

	//  Max length = 23, Payment reference Number.
	// Max Length: 23
	// Min Length: 0
	PymtRefNbr *string `json:"pymtRefNbr,omitempty"`

	//  Max length = 4, Service Type:  Values are:  C=indicates that incoming service is regarding current date S= indicates that incoming service is regarding statement date
	// Max Length: 4
	// Min Length: 0
	SvcType *string `json:"svcType,omitempty"`

	//  Max length = 17, Must be numeric Must be formatted in whole monetary and subunits (no decimal point) Must be within limits allowed for ASM rep. Cannot be signed if associated with a prepaid transaction
	// Pattern: ^(-)?[0-9]{1,17}$
	TxnAmount string `json:"txnAmount,omitempty"`
}

// Validate validates this real time payment with memo request2
func (m *RealTimePaymentWithMemoRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsmOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsmRep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePymtRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateAcctOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctOrg) { // not required
		return nil
	}

	if err := validate.MinLength("acctOrg", "body", string(*m.AcctOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctOrg", "body", string(*m.AcctOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("acctOrg", "body", string(*m.AcctOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateAsmOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.AsmOrg) { // not required
		return nil
	}

	if err := validate.MinLength("asmOrg", "body", string(*m.AsmOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("asmOrg", "body", string(*m.AsmOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("asmOrg", "body", string(*m.AsmOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateAsmRep(formats strfmt.Registry) error {

	if swag.IsZero(m.AsmRep) { // not required
		return nil
	}

	if err := validate.MinLength("asmRep", "body", string(*m.AsmRep), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("asmRep", "body", string(*m.AsmRep), 3); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateAuthCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthCode) { // not required
		return nil
	}

	if err := validate.MinLength("authCode", "body", string(*m.AuthCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authCode", "body", string(*m.AuthCode), 6); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateCurrCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrCode) { // not required
		return nil
	}

	if err := validate.MinLength("currCode", "body", string(*m.CurrCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currCode", "body", string(*m.CurrCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validatePymtRefNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.PymtRefNbr) { // not required
		return nil
	}

	if err := validate.MinLength("pymtRefNbr", "body", string(*m.PymtRefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pymtRefNbr", "body", string(*m.PymtRefNbr), 23); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateSvcType(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcType) { // not required
		return nil
	}

	if err := validate.MinLength("svcType", "body", string(*m.SvcType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcType", "body", string(*m.SvcType), 4); err != nil {
		return err
	}

	return nil
}

func (m *RealTimePaymentWithMemoRequest2) validateTxnAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnAmount) { // not required
		return nil
	}

	if err := validate.Pattern("txnAmount", "body", string(m.TxnAmount), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RealTimePaymentWithMemoRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealTimePaymentWithMemoRequest2) UnmarshalBinary(b []byte) error {
	var res RealTimePaymentWithMemoRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

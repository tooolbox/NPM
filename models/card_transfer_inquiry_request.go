// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardTransferInquiryRequest card transfer inquiry request
//
// swagger:model CardTransferInquiryRequest
type CardTransferInquiryRequest struct {

	//  Max length = 1, Card Action function to be performed.  Values are: T= Transfer R=Reverse a previous card transfer
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CardAction *string `json:"cardAction"`

	//  Max length = 19, Number of the card to be transferred.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	//  Max length = 3, CARD ORG
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardOrg *string `json:"cardOrg,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Service Type: Fraud card transfer screen requested. Values are: 0 = Screen 00 1 = Screen 01
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FunctionType *string `json:"functionType"`
}

// Validate validates this card transfer inquiry request
func (m *CardTransferInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardTransferInquiryRequest) validateCardAction(formats strfmt.Registry) error {

	if err := validate.Required("cardAction", "body", m.CardAction); err != nil {
		return err
	}

	if err := validate.MinLength("cardAction", "body", string(*m.CardAction), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardAction", "body", string(*m.CardAction), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferInquiryRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferInquiryRequest) validateCardOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.CardOrg) { // not required
		return nil
	}

	if err := validate.MinLength("cardOrg", "body", string(*m.CardOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardOrg", "body", string(*m.CardOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("cardOrg", "body", string(*m.CardOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardTransferInquiryRequest) validateFunctionType(formats strfmt.Registry) error {

	if err := validate.Required("functionType", "body", m.FunctionType); err != nil {
		return err
	}

	if err := validate.MinLength("functionType", "body", string(*m.FunctionType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("functionType", "body", string(*m.FunctionType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("functionType", "body", string(*m.FunctionType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardTransferInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardTransferInquiryRequest) UnmarshalBinary(b []byte) error {
	var res CardTransferInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

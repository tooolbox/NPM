// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessPaymentRequest process payment request
//
// swagger:model processPaymentRequest
type ProcessPaymentRequest struct {

	// For information only. Use this field if a specific front-end user needs to be identified, e.g. if the front-end is a call centre used by agents.
	// Max Length: 64
	AgentID string `json:"agentId,omitempty"`

	// The payment amount. This figure includes a decimal point (numeric), e.g. 120.99.
	// Required: true
	// Max Length: 14
	// Min Length: 1
	Amount *string `json:"amount"`

	// This field is for Bank Products only. For bank products this is a mandatory field. The should be populated with the Account Number e.g. ‘12345678’.
	// Max Length: 6
	BankAccountNumber string `json:"bankAccountNumber,omitempty"`

	// This field is for Bank Products only. The should be populated with the bank reference. This is only required if a Head Office Bank Account is used.
	// Max Length: 16
	BankReferenceNumber string `json:"bankReferenceNumber,omitempty"`

	// This field is for Bank Products only. For bank products this is a mandatory field. The should be populated with the Sort code e.g. ‘100000’.
	// Max Length: 8
	BankSortCode string `json:"bankSortCode,omitempty"`

	// The beneficiary card or account number as stored on First Vision.
	// Required: true
	// Max Length: 20
	BeneficiaryCardOrAccountNumber *string `json:"beneficiaryCardOrAccountNumber"`

	// This field is for Non-First Vision Beneficiaries. The enhanced MCC 6012 authorisation process for UK issued Visa paying cards requires additional data elements pertaining to the recipient of the payment, to be collected and placed in the authorisation message. This should be populated with Date of Birth of the primary recipient.
	// Max Length: 10
	// Pattern: ^([0-2][0-9]|(3)[0-1])(/)(((0)[0-9])|((1)[0-2]))(/)\d{4}$
	BeneficiaryDob string `json:"beneficiaryDob,omitempty"`

	// This field is for Non-First Vision Beneficiaries. The enhanced MCC 6012 authorisation process for UK issued Visa paying cards requires additional data elements pertaining to the recipient of the payment, to be collected and placed in the authorisation message. Full post code. FirstPay will format the post code based on the Visa 6012 requirement (Partial post code of the primary recipient.).
	// Max Length: 8
	BeneficiaryPostCode string `json:"beneficiaryPostCode,omitempty"`

	// This field is for Non-First Vision Beneficiaries. The enhanced MCC 6012 authorisation process for UK issued Visa paying cards requires additional data elements pertaining to the recipient of the payment, to be collected and placed in the authorisation message. Full surname. FirstPay will format the surname based on the Visa 6012 requirement (First characters of the Surname of the primary recipient.).
	// Max Length: 20
	BeneficiarySurname string `json:"beneficiarySurname,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	// This field should be set to either ‘True’ or ‘False’. Set to ‘True’ in order to set up a Continuous Payment Authority. Default value is ‘False’.
	// Max Length: 5
	ContinuousPaymentAuthority string `json:"continuousPaymentAuthority,omitempty"`

	// This field indicates the Date when the first payment should be made. Format DDMMYYYY.
	// Max Length: 8
	CpaDateOfFirstPayment string `json:"cpaDateOfFirstPayment,omitempty"`

	// This field represents the frequency set for each payment plan. clients can choose the frequencies they want to make available to their customers. 1=Weekly, 2=Fortnightly, 3=Monthly, 4=Every 4 Weeks, 5=Last Day Of The Month
	// Max Length: 1
	CpaFrequency string `json:"cpaFrequency,omitempty"`

	// This field should be set to either ‘True’ or ‘False’.  Set to ‘True’ in order to make an immediate payment before setting up a continuous payment authority. Set to 'False' will initiate a card check before setting up a continuous payment authority. Default value is ‘False’.
	// Max Length: 5
	CpaImmediatePayment string `json:"cpaImmediatePayment,omitempty"`

	// This field represents the number of payments up to 99. client may have settings to restrict the numbers of payments / length of a continuous payment authority.
	// Max Length: 2
	CpaNumberOfPayments string `json:"cpaNumberOfPayments,omitempty"`

	// The currency of the payment, e.g. GBP. Derived from Issuer or Department if not present in the message.
	// Max Length: 3
	CurrencyCode string `json:"currencyCode,omitempty"`

	// This field corresponds to date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	CustomerAccountChangeDate string `json:"customerAccountChangeDate,omitempty"`

	// This field corresponds to date the cardholder opened the account.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	CustomerAccountCreateDate string `json:"customerAccountCreateDate,omitempty"`

	// This field corresponds to date the cardholder last changed or reset password on account.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	CustomerAccountPasswordChangeDate string `json:"customerAccountPasswordChangeDate,omitempty"`

	// This field corresponds to customer’s IP address,   reported by the web server via socket information. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 45
	CustomerIPAddress string `json:"customerIPAddress,omitempty"`

	// This field corresponds to issuing country for the cardholder’s passport. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 3
	CustomerPassportCountry string `json:"customerPassportCountry,omitempty"`

	// This field corresponds to the cardholder’s passport number. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 40
	CustomerPassportNumber string `json:"customerPassportNumber,omitempty"`

	// This field is for Bank Products only. For bank products this is a mandatory field. The should be populated with the surname of beneficiary (Bank Account holder).
	// Max Length: 18
	CustomerSurname string `json:"customerSurname,omitempty"`

	// The department within the issuer. If SINGLE_USE flag set then derived from UserID, if not present in the message.  A UserID can be set up as a ‘Single Use’ user which means that it can only have one department assigned to it.
	// Max Length: 64
	// Min Length: 1
	Department string `json:"department,omitempty"`

	// Set this value to true in order to set up a future payment.
	// Max Length: 5
	FuturePayment string `json:"futurePayment,omitempty"`

	// The date of when the payment should be made.
	// Max Length: 8
	// Pattern: ^([0-2][0-9]|(3)[0-1])(((0)[0-9])|((1)[0-2]))\d{4}$
	FuturePaymentDate string `json:"futurePaymentDate,omitempty"`

	// The issuer of the beneficiary card. This is derived from the BIN or the account number prefix (The first 6 digits of BeneficiaryCardorAccount).
	// Max Length: 128
	// Min Length: 1
	Issuer string `json:"issuer,omitempty"`

	// The ID used by transactions that are routed via ODA (First Data’s legacy message broker).
	// Max Length: 20
	OdaID string `json:"odaId,omitempty"`

	// This field corresponds to number of purchases with this cardholder account during the previous six months.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 4
	PaAccountPurchases string `json:"paAccountPurchases,omitempty"`

	// This field corresponds to the number of add card attempts in the last 24 hours.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 3
	PaAddCardAttempts string `json:"paAddCardAttempts,omitempty"`

	// This field corresponds to data that documents and supports a specific authentication process.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2048
	PaAlternateAuthenticationData string `json:"paAlternateAuthenticationData,omitempty"`

	// This field corresponds to date and time in UTC of the cardholder authentication.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 12
	PaAlternateAuthenticationDate string `json:"paAlternateAuthenticationDate,omitempty"`

	// This field corresponds to mechanism used by the cardholder to authenticate to the 3D Secure requestor.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaAlternateAuthenticationMethod string `json:"paAlternateAuthenticationMethod,omitempty"`

	// This field represents whether the transaction has been challenge requested.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaChallengeCode string `json:"paChallengeCode,omitempty"`

	// This field corresponds to an alias that uniquely identifies the customer's account and credit card on file. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 128
	PaCustomerCCAlias string `json:"paCustomerCCAlias,omitempty"`

	// This field indicates that the card being used is the one designated as the primary payment card for purchase. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 5
	PaDefaultCard string `json:"paDefaultCard,omitempty"`

	// This field is passed to link the check enrollment and validate authentication messages.This field is added as part of 3DS 2.0 version upgrade and it is conditionally mandatory field to be passed in order to be 3D secure 2.0 version compliant.
	// Max Length: 20
	PaEnrollAuthenticationTransactionID string `json:"paEnrollAuthenticationTransactionId,omitempty"`

	// This field indicates whether the merchant experienced suspicious activity (including previous fraud) on the account.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaFraudActivity string `json:"paFraudActivity,omitempty"`

	// This field represents the purchase amount total for prepaid gift cards in major units. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 15
	PaGiftCardAmount string `json:"paGiftCardAmount,omitempty"`

	// This field represents the total count of individual prepaid gift cards purchased.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaGiftCardCount string `json:"paGiftCardCount,omitempty"`

	// This field represents the currency used for the gift card purchase. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 3
	PaGiftCardCurrency string `json:"paGiftCardCurrency,omitempty"`

	// This field represents the value of the Accept header sent by the customer’s web browser. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 255
	PaHTTPAccept string `json:"paHttpAccept,omitempty"`

	// This field represents an integer value greater than 1 indicating the maximum number of permitted authorizations for installment payments.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 4
	PaInstallmentTotalCount string `json:"paInstallmentTotalCount,omitempty"`

	// This field indicates whether the customer has opted in for marketing offers.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 5
	PaMarketingOptin string `json:"paMarketingOptin,omitempty"`

	// This field indicates origin of the marketing offer. This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 40
	PaMarketingSource string `json:"paMarketingSource,omitempty"`

	// This field indicates whether the consumer is a new or existing customer with the merchant.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 5
	PaMerchantNewCustomer string `json:"paMerchantNewCustomer,omitempty"`

	// This field indicates category of the message for a specific use case.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaMessageCategory string `json:"paMessageCategory,omitempty"`

	// This field represents the Non-Payer Authentication indicator.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaNpaCode string `json:"paNpaCode,omitempty"`

	// This field represents the date the payment account was added to the cardholder account.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	PaPaymentAccountDate string `json:"paPaymentAccountDate,omitempty"`

	// This field indicates whether cardholder is placing an order with a future availability or release date.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaPreOrder string `json:"paPreOrder,omitempty"`

	// This field represents the expected date that a pre-ordered purchase will be available.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	PaPreOrderDate string `json:"paPreOrderDate,omitempty"`

	// This field represents the date after which no further recurring authorizations should be performed.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	PaRecurringEndDate string `json:"paRecurringEndDate,omitempty"`

	// This field represents the integer value indicating the minimum number of days between recurring authorizations.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 3
	PaRecurringFrequency string `json:"paRecurringFrequency,omitempty"`

	// This field represents the date of original purchase. Required for recurring transactions.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 17
	PaRecurringOriginalPurchaseDate string `json:"paRecurringOriginalPurchaseDate,omitempty"`

	// This field corresponds to the device fingerprinting data that was collected previously.This field is added as part of 3DS 2.0 version upgrade and it is conditionally mandatory field to be passed in order to be 3D secure 2.0 version compliant.
	// Max Length: 50
	PaReferenceID string `json:"paReferenceId,omitempty"`

	// This field indicates whether the cardholder is reordering previously purchased merchandise.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	PaReorder string `json:"paReorder,omitempty"`

	// This field represents the date when the shipping address for this transaction was first used.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 8
	PaShipAddressUsageDate string `json:"paShipAddressUsageDate,omitempty"`

	// This field represents the number of transaction (successful or abandoned) for this cardholder account within the last 24 hours.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 3
	PaTransactionCountDay string `json:"paTransactionCountDay,omitempty"`

	// This field represents the number of transactions (successful and abandoned) for this cardholder account within the last year.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 3
	PaTransactionCountYear string `json:"paTransactionCountYear,omitempty"`

	// Transaction mode identifier. Identifies the channel from which the transaction originates.This field is added as part of 3DS 2.0 version upgrade and it is conditionally mandatory field to be passed in order to be 3D secure 2.0 version compliant.
	// Max Length: 1
	PaTransactionMode string `json:"paTransactionMode,omitempty"`

	// 3D Secure only. Send this field only when the transaction is resent following customer authentication using 3D Secure. This should be the the response for 3D secure.
	Pares string `json:"pares,omitempty"`

	// The card that will be debited. Optional if using a stored card but mandatory if the stored card is not used.
	// Max Length: 20
	PayingCard string `json:"payingCard,omitempty"`

	// The first address line of the paying card's card holder. FirstPay can be configured to retrieve the address from Vision if it is required for AVS and the address of both paying and beneficiary cards are required to be the same. The address cannot be retrieved for a beneficiary not on Vision, e.g. Bank Products, therefore, in this case, these fields would need to be populated if AVS is switched on.Note that the full address needs to be sent, e.g. for PayingCardAddressLine1 send house number and street name. Care must be taken if retrieving data from vision as some accounts are boarded with the house number in the house number field whilst some are boarded with the house number in address line 1.
	// Max Length: 64
	PayingCardAddressLine1 string `json:"payingCardAddressLine1,omitempty"`

	// The second address line of the paying card's card holder.
	// Max Length: 64
	PayingCardAddressLine2 string `json:"payingCardAddressLine2,omitempty"`

	// The country of the paying card's card holder.
	// Max Length: 20
	PayingCardCountry string `json:"payingCardCountry,omitempty"`

	// The county of the paying card's card holder.
	// Max Length: 20
	PayingCardCounty string `json:"payingCardCounty,omitempty"`

	// The Cvv of the Paying Card. Optional but recommended.
	// Max Length: 4
	PayingCardCvv string `json:"payingCardCvv,omitempty"`

	// The expiry month on the Paying Card. Optional if using a stored card but mandatory if the stored card is not used.
	// Max Length: 2
	PayingCardExpiryMonth string `json:"payingCardExpiryMonth,omitempty"`

	// The expiry year on the Paying Card. Optional if using a stored card but mandatory if the stored card is not used.
	// Max Length: 2
	PayingCardExpiryYear string `json:"payingCardExpiryYear,omitempty"`

	// The first name of the paying card's cardholder. FirstPay can be configured to retrieve the name from Vision if the name on the paying and beneficiary cards is required to be the same. Optional if using a stored card.
	// Max Length: 20
	PayingCardFirstName string `json:"payingCardFirstName,omitempty"`

	// The post code of the paying card's card holder.
	// Max Length: 20
	PayingCardPostCode string `json:"payingCardPostCode,omitempty"`

	// The postal town of the paying card's card holder.
	// Max Length: 20
	PayingCardPostalTown string `json:"payingCardPostalTown,omitempty"`

	// The surname of the paying card's cardholder. FirstPay can be configured to retrieve the name from Vision if the name on the paying and beneficiary cards is required to be the same.  Optional if using a stored card.
	// Max Length: 20
	PayingCardSurname string `json:"payingCardSurname,omitempty"`

	// The product Name, e.g. Credit Card Collections. Derived from Beneficiary Card or Account if not present in the message.
	// Max Length: 64
	// Min Length: 1
	Product string `json:"product,omitempty"`

	// This field represents the brief description of item.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 256
	ProductDescription string `json:"productDescription,omitempty"`

	// This field indicates the destination chosen for the transaction.This field is added as part of 3DS 2.0 version upgrade and it is optional field to be passed for 3D secure 2.0 version.
	// Max Length: 2
	ShipToDestinationCode string `json:"shipToDestinationCode,omitempty"`

	// Identifies the type of payment and drives whether 3D Secure is required. Derived from Department if not present in the message.
	// Max Length: 64
	// Min Length: 1
	SourceOfPayment string `json:"sourceOfPayment,omitempty"`

	// This stores the paying card in First Pay, whilst making a payment. Set to either ‘True’ or ‘False’.  Set to ‘True’ in order to store the paying card whilst taking a payment.
	// Max Length: 5
	StoreCardWithPayment string `json:"storeCardWithPayment,omitempty"`

	// This enables the paying card to be stored in FirstPay. Set to either ‘True’ or ‘False’.  Set to ‘True’ in order to store the paying card for future use. Default value is ‘False’.
	// Max Length: 5
	StorePayingCard string `json:"storePayingCard,omitempty"`

	// This stores the paying card in First Pay, whilst making a payment, as the default stored card.Set to either ‘True’ or ‘False’. Set to ‘True’ in order to mark the paying card being used to take a payment as the default stored card.
	// Max Length: 5
	StorePayingCardDefault string `json:"storePayingCardDefault,omitempty"`

	// The name of card being stored whilst making a payment. This name is given by the customer, e.g. ‘Joint account’, ‘Barclays card’.
	// Max Length: 30
	StorePayingCardName string `json:"storePayingCardName,omitempty"`

	// The product Name, e.g. Credit Card Collections. Derived from Beneficiary Card or Account if not present in the message.
	// Max Length: 64
	// Min Length: 1
	SubProduct string `json:"subProduct,omitempty"`

	// The ID of a Stored Card. Send this field if a stored card in FirstPay is to be used. The ID can be obtained by first calling FirstPay using the ‘GetSettings’ message type.
	// Max Length: 22
	TokenID string `json:"tokenId,omitempty"`

	// 3D Secure only. Send this field when the transaction is resent following customer authentication using 3D Secure. This is the transaction ID.
	TransactionID string `json:"transactionId,omitempty"`

	// Populates with the FirstPay userID.
	// Required: true
	// Max Length: 16
	UserID *string `json:"userId"`
}

// Validate validates this process payment request
func (m *ProcessPaymentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankSortCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeneficiaryCardOrAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeneficiaryDob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeneficiaryPostCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeneficiarySurname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContinuousPaymentAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpaDateOfFirstPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpaFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpaImmediatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpaNumberOfPayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerAccountChangeDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerAccountCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerAccountPasswordChangeDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerPassportCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerPassportNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerSurname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuturePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuturePaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOdaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaAccountPurchases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaAddCardAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaAlternateAuthenticationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaAlternateAuthenticationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaAlternateAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaChallengeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaCustomerCCAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaDefaultCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaEnrollAuthenticationTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaFraudActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaGiftCardAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaGiftCardCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaGiftCardCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaHTTPAccept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaInstallmentTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaMarketingOptin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaMarketingSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaMerchantNewCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaMessageCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaNpaCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaPaymentAccountDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaPreOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaPreOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaRecurringEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaRecurringFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaRecurringOriginalPurchaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaReorder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaShipAddressUsageDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaTransactionCountDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaTransactionCountYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaTransactionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardAddressLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardCvv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardExpiryMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardExpiryYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardPostCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardPostalTown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayingCardSurname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToDestinationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceOfPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreCardWithPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorePayingCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorePayingCardDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorePayingCardName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessPaymentRequest) validateAgentID(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentID) { // not required
		return nil
	}

	if err := validate.MaxLength("agentId", "body", string(m.AgentID), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MinLength("amount", "body", string(*m.Amount), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("amount", "body", string(*m.Amount), 14); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBankAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccountNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("bankAccountNumber", "body", string(m.BankAccountNumber), 6); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBankReferenceNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BankReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("bankReferenceNumber", "body", string(m.BankReferenceNumber), 16); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBankSortCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankSortCode) { // not required
		return nil
	}

	if err := validate.MaxLength("bankSortCode", "body", string(m.BankSortCode), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBeneficiaryCardOrAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("beneficiaryCardOrAccountNumber", "body", m.BeneficiaryCardOrAccountNumber); err != nil {
		return err
	}

	if err := validate.MaxLength("beneficiaryCardOrAccountNumber", "body", string(*m.BeneficiaryCardOrAccountNumber), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBeneficiaryDob(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiaryDob) { // not required
		return nil
	}

	if err := validate.MaxLength("beneficiaryDob", "body", string(m.BeneficiaryDob), 10); err != nil {
		return err
	}

	if err := validate.Pattern("beneficiaryDob", "body", string(m.BeneficiaryDob), `^([0-2][0-9]|(3)[0-1])(/)(((0)[0-9])|((1)[0-2]))(/)\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBeneficiaryPostCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiaryPostCode) { // not required
		return nil
	}

	if err := validate.MaxLength("beneficiaryPostCode", "body", string(m.BeneficiaryPostCode), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateBeneficiarySurname(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiarySurname) { // not required
		return nil
	}

	if err := validate.MaxLength("beneficiarySurname", "body", string(m.BeneficiarySurname), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessPaymentRequest) validateContinuousPaymentAuthority(formats strfmt.Registry) error {

	if swag.IsZero(m.ContinuousPaymentAuthority) { // not required
		return nil
	}

	if err := validate.MaxLength("continuousPaymentAuthority", "body", string(m.ContinuousPaymentAuthority), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCpaDateOfFirstPayment(formats strfmt.Registry) error {

	if swag.IsZero(m.CpaDateOfFirstPayment) { // not required
		return nil
	}

	if err := validate.MaxLength("cpaDateOfFirstPayment", "body", string(m.CpaDateOfFirstPayment), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCpaFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.CpaFrequency) { // not required
		return nil
	}

	if err := validate.MaxLength("cpaFrequency", "body", string(m.CpaFrequency), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCpaImmediatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.CpaImmediatePayment) { // not required
		return nil
	}

	if err := validate.MaxLength("cpaImmediatePayment", "body", string(m.CpaImmediatePayment), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCpaNumberOfPayments(formats strfmt.Registry) error {

	if swag.IsZero(m.CpaNumberOfPayments) { // not required
		return nil
	}

	if err := validate.MaxLength("cpaNumberOfPayments", "body", string(m.CpaNumberOfPayments), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCurrencyCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrencyCode) { // not required
		return nil
	}

	if err := validate.MaxLength("currencyCode", "body", string(m.CurrencyCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerAccountChangeDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerAccountChangeDate) { // not required
		return nil
	}

	if err := validate.MaxLength("customerAccountChangeDate", "body", string(m.CustomerAccountChangeDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerAccountCreateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerAccountCreateDate) { // not required
		return nil
	}

	if err := validate.MaxLength("customerAccountCreateDate", "body", string(m.CustomerAccountCreateDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerAccountPasswordChangeDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerAccountPasswordChangeDate) { // not required
		return nil
	}

	if err := validate.MaxLength("customerAccountPasswordChangeDate", "body", string(m.CustomerAccountPasswordChangeDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerIPAddress) { // not required
		return nil
	}

	if err := validate.MaxLength("customerIPAddress", "body", string(m.CustomerIPAddress), 45); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerPassportCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerPassportCountry) { // not required
		return nil
	}

	if err := validate.MaxLength("customerPassportCountry", "body", string(m.CustomerPassportCountry), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerPassportNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerPassportNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("customerPassportNumber", "body", string(m.CustomerPassportNumber), 40); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateCustomerSurname(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerSurname) { // not required
		return nil
	}

	if err := validate.MaxLength("customerSurname", "body", string(m.CustomerSurname), 18); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateDepartment(formats strfmt.Registry) error {

	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if err := validate.MinLength("department", "body", string(m.Department), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("department", "body", string(m.Department), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateFuturePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.FuturePayment) { // not required
		return nil
	}

	if err := validate.MaxLength("futurePayment", "body", string(m.FuturePayment), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateFuturePaymentDate(formats strfmt.Registry) error {

	if swag.IsZero(m.FuturePaymentDate) { // not required
		return nil
	}

	if err := validate.MaxLength("futurePaymentDate", "body", string(m.FuturePaymentDate), 8); err != nil {
		return err
	}

	if err := validate.Pattern("futurePaymentDate", "body", string(m.FuturePaymentDate), `^([0-2][0-9]|(3)[0-1])(((0)[0-9])|((1)[0-2]))\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if err := validate.MinLength("issuer", "body", string(m.Issuer), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("issuer", "body", string(m.Issuer), 128); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateOdaID(formats strfmt.Registry) error {

	if swag.IsZero(m.OdaID) { // not required
		return nil
	}

	if err := validate.MaxLength("odaId", "body", string(m.OdaID), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaAccountPurchases(formats strfmt.Registry) error {

	if swag.IsZero(m.PaAccountPurchases) { // not required
		return nil
	}

	if err := validate.MaxLength("paAccountPurchases", "body", string(m.PaAccountPurchases), 4); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaAddCardAttempts(formats strfmt.Registry) error {

	if swag.IsZero(m.PaAddCardAttempts) { // not required
		return nil
	}

	if err := validate.MaxLength("paAddCardAttempts", "body", string(m.PaAddCardAttempts), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaAlternateAuthenticationData(formats strfmt.Registry) error {

	if swag.IsZero(m.PaAlternateAuthenticationData) { // not required
		return nil
	}

	if err := validate.MaxLength("paAlternateAuthenticationData", "body", string(m.PaAlternateAuthenticationData), 2048); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaAlternateAuthenticationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PaAlternateAuthenticationDate) { // not required
		return nil
	}

	if err := validate.MaxLength("paAlternateAuthenticationDate", "body", string(m.PaAlternateAuthenticationDate), 12); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaAlternateAuthenticationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PaAlternateAuthenticationMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("paAlternateAuthenticationMethod", "body", string(m.PaAlternateAuthenticationMethod), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaChallengeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PaChallengeCode) { // not required
		return nil
	}

	if err := validate.MaxLength("paChallengeCode", "body", string(m.PaChallengeCode), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaCustomerCCAlias(formats strfmt.Registry) error {

	if swag.IsZero(m.PaCustomerCCAlias) { // not required
		return nil
	}

	if err := validate.MaxLength("paCustomerCCAlias", "body", string(m.PaCustomerCCAlias), 128); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaDefaultCard(formats strfmt.Registry) error {

	if swag.IsZero(m.PaDefaultCard) { // not required
		return nil
	}

	if err := validate.MaxLength("paDefaultCard", "body", string(m.PaDefaultCard), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaEnrollAuthenticationTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(m.PaEnrollAuthenticationTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("paEnrollAuthenticationTransactionId", "body", string(m.PaEnrollAuthenticationTransactionID), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaFraudActivity(formats strfmt.Registry) error {

	if swag.IsZero(m.PaFraudActivity) { // not required
		return nil
	}

	if err := validate.MaxLength("paFraudActivity", "body", string(m.PaFraudActivity), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaGiftCardAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.PaGiftCardAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("paGiftCardAmount", "body", string(m.PaGiftCardAmount), 15); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaGiftCardCount(formats strfmt.Registry) error {

	if swag.IsZero(m.PaGiftCardCount) { // not required
		return nil
	}

	if err := validate.MaxLength("paGiftCardCount", "body", string(m.PaGiftCardCount), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaGiftCardCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.PaGiftCardCurrency) { // not required
		return nil
	}

	if err := validate.MaxLength("paGiftCardCurrency", "body", string(m.PaGiftCardCurrency), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaHTTPAccept(formats strfmt.Registry) error {

	if swag.IsZero(m.PaHTTPAccept) { // not required
		return nil
	}

	if err := validate.MaxLength("paHttpAccept", "body", string(m.PaHTTPAccept), 255); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaInstallmentTotalCount(formats strfmt.Registry) error {

	if swag.IsZero(m.PaInstallmentTotalCount) { // not required
		return nil
	}

	if err := validate.MaxLength("paInstallmentTotalCount", "body", string(m.PaInstallmentTotalCount), 4); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaMarketingOptin(formats strfmt.Registry) error {

	if swag.IsZero(m.PaMarketingOptin) { // not required
		return nil
	}

	if err := validate.MaxLength("paMarketingOptin", "body", string(m.PaMarketingOptin), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaMarketingSource(formats strfmt.Registry) error {

	if swag.IsZero(m.PaMarketingSource) { // not required
		return nil
	}

	if err := validate.MaxLength("paMarketingSource", "body", string(m.PaMarketingSource), 40); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaMerchantNewCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.PaMerchantNewCustomer) { // not required
		return nil
	}

	if err := validate.MaxLength("paMerchantNewCustomer", "body", string(m.PaMerchantNewCustomer), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaMessageCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.PaMessageCategory) { // not required
		return nil
	}

	if err := validate.MaxLength("paMessageCategory", "body", string(m.PaMessageCategory), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaNpaCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PaNpaCode) { // not required
		return nil
	}

	if err := validate.MaxLength("paNpaCode", "body", string(m.PaNpaCode), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaPaymentAccountDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PaPaymentAccountDate) { // not required
		return nil
	}

	if err := validate.MaxLength("paPaymentAccountDate", "body", string(m.PaPaymentAccountDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaPreOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.PaPreOrder) { // not required
		return nil
	}

	if err := validate.MaxLength("paPreOrder", "body", string(m.PaPreOrder), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaPreOrderDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PaPreOrderDate) { // not required
		return nil
	}

	if err := validate.MaxLength("paPreOrderDate", "body", string(m.PaPreOrderDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaRecurringEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PaRecurringEndDate) { // not required
		return nil
	}

	if err := validate.MaxLength("paRecurringEndDate", "body", string(m.PaRecurringEndDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaRecurringFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.PaRecurringFrequency) { // not required
		return nil
	}

	if err := validate.MaxLength("paRecurringFrequency", "body", string(m.PaRecurringFrequency), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaRecurringOriginalPurchaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PaRecurringOriginalPurchaseDate) { // not required
		return nil
	}

	if err := validate.MaxLength("paRecurringOriginalPurchaseDate", "body", string(m.PaRecurringOriginalPurchaseDate), 17); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaReferenceID(formats strfmt.Registry) error {

	if swag.IsZero(m.PaReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("paReferenceId", "body", string(m.PaReferenceID), 50); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaReorder(formats strfmt.Registry) error {

	if swag.IsZero(m.PaReorder) { // not required
		return nil
	}

	if err := validate.MaxLength("paReorder", "body", string(m.PaReorder), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaShipAddressUsageDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PaShipAddressUsageDate) { // not required
		return nil
	}

	if err := validate.MaxLength("paShipAddressUsageDate", "body", string(m.PaShipAddressUsageDate), 8); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaTransactionCountDay(formats strfmt.Registry) error {

	if swag.IsZero(m.PaTransactionCountDay) { // not required
		return nil
	}

	if err := validate.MaxLength("paTransactionCountDay", "body", string(m.PaTransactionCountDay), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaTransactionCountYear(formats strfmt.Registry) error {

	if swag.IsZero(m.PaTransactionCountYear) { // not required
		return nil
	}

	if err := validate.MaxLength("paTransactionCountYear", "body", string(m.PaTransactionCountYear), 3); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePaTransactionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.PaTransactionMode) { // not required
		return nil
	}

	if err := validate.MaxLength("paTransactionMode", "body", string(m.PaTransactionMode), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCard(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCard) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCard", "body", string(m.PayingCard), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardAddressLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardAddressLine1) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardAddressLine1", "body", string(m.PayingCardAddressLine1), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardAddressLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardAddressLine2) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardAddressLine2", "body", string(m.PayingCardAddressLine2), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardCountry) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardCountry", "body", string(m.PayingCardCountry), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardCounty) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardCounty", "body", string(m.PayingCardCounty), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardCvv(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardCvv) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardCvv", "body", string(m.PayingCardCvv), 4); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardExpiryMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardExpiryMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardExpiryMonth", "body", string(m.PayingCardExpiryMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardExpiryYear(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardExpiryYear) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardExpiryYear", "body", string(m.PayingCardExpiryYear), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardFirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardFirstName", "body", string(m.PayingCardFirstName), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardPostCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardPostCode) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardPostCode", "body", string(m.PayingCardPostCode), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardPostalTown(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardPostalTown) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardPostalTown", "body", string(m.PayingCardPostalTown), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validatePayingCardSurname(formats strfmt.Registry) error {

	if swag.IsZero(m.PayingCardSurname) { // not required
		return nil
	}

	if err := validate.MaxLength("payingCardSurname", "body", string(m.PayingCardSurname), 20); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if err := validate.MinLength("product", "body", string(m.Product), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("product", "body", string(m.Product), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateProductDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductDescription) { // not required
		return nil
	}

	if err := validate.MaxLength("productDescription", "body", string(m.ProductDescription), 256); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateShipToDestinationCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipToDestinationCode) { // not required
		return nil
	}

	if err := validate.MaxLength("shipToDestinationCode", "body", string(m.ShipToDestinationCode), 2); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateSourceOfPayment(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceOfPayment) { // not required
		return nil
	}

	if err := validate.MinLength("sourceOfPayment", "body", string(m.SourceOfPayment), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceOfPayment", "body", string(m.SourceOfPayment), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateStoreCardWithPayment(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreCardWithPayment) { // not required
		return nil
	}

	if err := validate.MaxLength("storeCardWithPayment", "body", string(m.StoreCardWithPayment), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateStorePayingCard(formats strfmt.Registry) error {

	if swag.IsZero(m.StorePayingCard) { // not required
		return nil
	}

	if err := validate.MaxLength("storePayingCard", "body", string(m.StorePayingCard), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateStorePayingCardDefault(formats strfmt.Registry) error {

	if swag.IsZero(m.StorePayingCardDefault) { // not required
		return nil
	}

	if err := validate.MaxLength("storePayingCardDefault", "body", string(m.StorePayingCardDefault), 5); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateStorePayingCardName(formats strfmt.Registry) error {

	if swag.IsZero(m.StorePayingCardName) { // not required
		return nil
	}

	if err := validate.MaxLength("storePayingCardName", "body", string(m.StorePayingCardName), 30); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateSubProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.SubProduct) { // not required
		return nil
	}

	if err := validate.MinLength("subProduct", "body", string(m.SubProduct), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("subProduct", "body", string(m.SubProduct), 64); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateTokenID(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenID) { // not required
		return nil
	}

	if err := validate.MaxLength("tokenId", "body", string(m.TokenID), 22); err != nil {
		return err
	}

	return nil
}

func (m *ProcessPaymentRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	if err := validate.MaxLength("userId", "body", string(*m.UserID), 16); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessPaymentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessPaymentRequest) UnmarshalBinary(b []byte) error {
	var res ProcessPaymentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

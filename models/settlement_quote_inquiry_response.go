// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SettlementQuoteInquiryResponse settlement quote inquiry response
//
// swagger:model SettlementQuoteInquiryResponse
type SettlementQuoteInquiryResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	AcctNbr string `json:"acctNbr,omitempty"`

	//  Max length = 17, Account Level Loan Settlement Amount.
	AcctPayoffAmt string `json:"acctPayoffAmt,omitempty"`

	// Format: YYYYMMDD. Account Level Loan Settlement Date.
	AcctPayoffDate string `json:"acctPayoffDate,omitempty"`

	//  Max length = 1, Account Level previous Loan Quote Indicator. Values are: Space - AMBS-ACCT-LVL-PREV-QTE-NONE-YT 'P' - AMBS-ACCT-LVL-PREV-QTE-FR-ONL 'W' - AMBS-ACCT-LVL-PREV-QTE-WAV-ONL 'S' - AMBS-ACCT-LVL-PREV-QTE-DELQ
	AcctQuote string `json:"acctQuote,omitempty"`

	// Format: YYYYMMDD. Epiration date of the account-level settlement quote.
	AcctQuoteExpDte string `json:"acctQuoteExpDte,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`

	// Plan Data Group ends.
	PlanData []*PlanDataForSettlementQuoteInquiry1 `json:"planData"`

	//  Max length = 2, Number of plans present for that particular account. Maximum allowed value is 99.
	PlanNbrOccurs string `json:"planNbrOccurs,omitempty"`

	//  Max length = 1, This field will contain value Y if more plans are present for that account, otherwise this field is returned with value N.
	RrMoreInd string `json:"rrMoreInd,omitempty"`
}

// Validate validates this settlement quote inquiry response
func (m *SettlementQuoteInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettlementQuoteInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *SettlementQuoteInquiryResponse) validatePlanData(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanData) { // not required
		return nil
	}

	for i := 0; i < len(m.PlanData); i++ {
		if swag.IsZero(m.PlanData[i]) { // not required
			continue
		}

		if m.PlanData[i] != nil {
			if err := m.PlanData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("planData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettlementQuoteInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettlementQuoteInquiryResponse) UnmarshalBinary(b []byte) error {
	var res SettlementQuoteInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

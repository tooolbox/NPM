// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WaiveFeesandInterestUpdateRequest waive feesand interest update request
//
// swagger:model WaiveFeesandInterestUpdateRequest
type WaiveFeesandInterestUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	// foreign use
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 2, Foreign Exchange Fee Waiver Flag: This field is used to indicate if the Forex Fee needs to be waived for the account.  Values are:  0 - Do Not Waive  1 - Waive Forever  2 - Charge  3 - AR Waive  4 - 1st Cycle Waive  5 - 2nd Cycle Waive  98 - CTL Waive
	// Max Length: 2
	// Min Length: 0
	ForexFee *string `json:"forexFee,omitempty"`

	// Format: YYYYMMDD. Foreign Exchange Fee Waiver Expiry Date: this field identifies the expiry date for the Forex Fee Waiver.
	ForexFeeWvExpDt string `json:"forexFeeWvExpDt,omitempty"`

	// Format: YYYYMMDD. Foreign Exchange Fee Waiver Start Date: this field identifies the start date for the forex fee waiver offer.
	ForexFeeWvStDt string `json:"forexFeeWvStDt,omitempty"`

	//  Max length = 1, Membership Fee Waive Method: This field is used to indicate method of membership waive.  Values are:  Space - Membership Waive   'W' - Membership Waive  'R' - Membership Refund
	// Max Length: 1
	// Min Length: 0
	MembMeth *string `json:"membMeth,omitempty"`

	//  Max length = 1, Request Type. Values are: 0 = Update Account  1 = Prepaid Account 2 = Both
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ReqType *string `json:"reqType,omitempty"`

	// 5 Occurrences of waive cash advance fee   (1  byte each group occurrence).
	WaiveCashAdvFeeGrp []*WaiveCashAdvFeeGrpForWaiveFeesandInterestUpdate1 `json:"waiveCashAdvFeeGrp"`

	//  Max length = 1, Waive Card Fee Indicator: Flag that indicates whether to waive card issuance fees whenever cards are issued on the account.  Values are:  0  - Do not waive  1  - Permanently  waive card fee.  4  - Waive card fee for 1 cycle  5  - Waive card fee for 2 cycles  6  - Waive card fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveCrdFee *string `json:"waiveCrdFee,omitempty"`

	//  Max length = 1, Waive Cycle Spend Fee Flag: Flag that indicates whether to waive the cycle spend fee for the account.  Values are:  0 - Do not waive cycle spend fee (Default)  1 - Waive cycle spend fee
	// Max Length: 1
	// Min Length: 0
	WaiveCycleSpendFee *string `json:"waiveCycleSpendFee,omitempty"`

	//  Max length = 1, Waive Dormancy Fee Flag: Flag that indicates whether to waive dormancy fees for prepaid accounts.  Values are:  0 - Do not waive dormancy fee  1 - Waive dormancy fee
	// Max Length: 1
	// Min Length: 0
	WaiveDormFee *string `json:"waiveDormFee,omitempty"`

	//  Max length = 1, Waive Interest Charge Flag: Flag that indicates whether to waive interest for the account.  Values are:  0 - Assess interest (Default)  1 - Permanently waive interest charges.  4 - Waive interest charges for 1 cycle  5 - Waive interest charges for 2 cycles  6 - Waive interest charges for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveIntr *string `json:"waiveIntr,omitempty"`

	//  Max length = 1, Waive Late Charge Flag: Flag that indicates whether to waive late charges for the account.  Values are:  0 - Do not waive late charges (Default)  1 - Permanently Waive late charges.  4 - Waive late charges for 1 cyclewaive  5 - Waive late charges for 2 cycles  6 - Waive late charges for 3 cycles  9 - Waive late charges for cycle 1
	// Max Length: 1
	// Min Length: 0
	WaiveLateChg *string `json:"waiveLateChg,omitempty"`

	//  Max length = 1, Waive Late Notice Flag: Flag that indicates whether to waive late notices for the account.  Values are:  0 - Do not waive; send late notice (Default)  1  - Permanently waive late notice; do not send.  4 - Waive late notice; do not send for 1 cycle  5 - Waive late notice; do not send for 2 cycles  6 - Waive late notice; do not send for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveLateNtc *string `json:"waiveLateNtc,omitempty"`

	//  Max length = 1, Waive Letter Fee Charge Flag: Flag that indicates whether to waive the letter fee for the account.  Values are:  0 - Do not waive the letter fee (Default)  1 - Permanently waive the letter fee.  4 - Waive letter fee for 1 cycle  5 - Waive letter fee for 2 cycles  6 - Waive letter fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveLtrFee *string `json:"waiveLtrFee,omitempty"`

	//  Max length = 1, Waive Membership Fee Charge Flag:  Flag that indicates whether to waive the annual membership fee for the account. Values are:  0 - Do not waive membership fee (Default)  1 - Permanently waive membership fee.  2 - Waive Initial membership fee  3 - Waive Renewal membership fee  4 - Waive membership fee for 1 cycle  5 - Waive membership fee for 2 cycles  6 - Waive membership fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveMembFee *string `json:"waiveMembFee,omitempty"`

	//  Max length = 1, Waive NSF Fee indicator: Flag that indicates whether to waive non sufficient funds (NSF) fees for returned checks.  Values are:  0 - Do not waive NSF fees if in accounts/receivable (A/R) and waive if in profit/loss (P/L)  1  - Waive NSF fees in A/R and P/L  2 - Do not waive NSF fees in A/R and P/L  3 - Waive NSF fees in A/R but do not waive in P/L.  4 - Waive NSF fees in A/R and P/L for 1 cycle  5 - Waive NSF fees in A/R and P/L for 2 cycles  6 - Waive NSF fees in A/R and P/L for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveNsfFee *string `json:"waiveNsfFee,omitempty"`

	//  Max length = 1, Waive Over Limit Fee Flag: Flag that indicates whether to waive the overlimit fee.  Values are:  0 - Do not waive the overlimit fee (Default)  1 - Permanently waive overlimit fee  4 - Waive overlimit fee for 1 cycle  5 - Waive overlimit fee for 2 cycles  6 - Waive overlimit fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveOvlmFee *string `json:"waiveOvlmFee,omitempty"`

	//  Max length = 1, Waive Over Limit Notice Flag: Flag that indicates whether to waive the overlimit notice.  Values are:  0 - Do not waive overlimit notice; send to the account holder (Default)  1  - Permanently waive overlimit notice; do not send.  4 - Waive overlimit notice; do not send for 1 cycle  5 - Waive overlimit notice; do not send for 2 cycles  6 - Waive overlimit notice; do not send for 3 cycles
	// Max Length: 1
	// Min Length: 0
	WaiveOvlmNtc *string `json:"waiveOvlmNtc,omitempty"`

	//  Max length = 1, Waive Refund Fee Flag: Flag that indicates whether to waive refund fees for prepaid accounts.  Values are:  0 - Do not waive refund fee (Default)  1 - Waive refund fee
	// Max Length: 1
	// Min Length: 0
	WaiveRefundFee *string `json:"waiveRefundFee,omitempty"`

	//  Max length = 1, Waive Statement Fee Flag: Flag that indicates whether to waive statement fees for prepaid accounts.  Values are:  0 - Do not waive statement fee (Default)  1 - Waive statement fee
	// Max Length: 1
	// Min Length: 0
	WaiveStmtFee *string `json:"waiveStmtFee,omitempty"`

	//  Max length = 1, Supplementary Membership  fee Waiver: Flag that indicates whether to waive all supplemental card membership fees.  Values are:  0 - Do not waive supplemental card membership fees (Default)  1 - Waive supplemental card membership fees.
	// Max Length: 1
	// Min Length: 0
	WaiveSuppMemFee *string `json:"waiveSuppMemFee,omitempty"`

	// 25 Occurrences of waive service charges  (1  byte each group occurrence).
	WaiveSvcChgGrp []*WaiveSvcChgGrpForWaiveFeesandInterestUpdate1 `json:"waiveSvcChgGrp"`

	//  Max length = 1, Waive Tax Flag: Flag that indicates whether to waive the tax for the account.  Values are:  '0' - Do not waive  '1' - Waive tax on transactions
	// Max Length: 1
	// Min Length: 0
	WaiveTaxCalc *string `json:"waiveTaxCalc,omitempty"`

	// Waive Transactions Fee Group.
	WaiveTxnFeeGrp []*WaiveTxnFeeGrpForWaiveFeesandInterestUpdate1 `json:"waiveTxnFeeGrp"`

	//  Max length = 1, Waive User Fee 1: Field used to waive user fee 1, which defaults from Service Charge/Fee table (ARVM04).  Values are:  0 - Do not waive user fees (Default)  1 - Waive user fees  4 - Waive user fees for one cycle (Waive in current cycle)  5 - Waive user fees for two cycles (Waive in current cycle and next cycle)  6 - Waive user fees for three cycles (Waive in current cycle and next two cycles).
	// Max Length: 1
	// Min Length: 0
	WaiveUserFee1 *string `json:"waiveUserFee1,omitempty"`

	//  Max length = 1, Waive User Fee 2: Field used to waive user fee 2, which defaults from Service Charge/Fee table (ARVM04).  Values are:  0 - Do not waive user fees (Default)  1 - Waive user fees  4 - Waive user fees for one cycle (Waive in current cycle)  5 - Waive user fees for two cycles (Waive in current cycle and next cycle)  6 - Waive user fees for three cycles (Waive in current cycle and next two cycles).
	// Max Length: 1
	// Min Length: 0
	WaiveUserFee2 *string `json:"waiveUserFee2,omitempty"`

	//  Max length = 1, Waive User Fee 3: Field used to waive user fee 3, which defaults from Service Charge/Fee table (ARVM04).  Values are:  0 - Do not waive user fees (Default)  1 - Waive user fees  4 - Waive user fees for one cycle (Waive in current cycle)  5 - Waive user fees for two cycles (Waive in current cycle and next cycle)  6 - Waive user fees for three cycles (Waive in current cycle and next two cycles).
	// Max Length: 1
	// Min Length: 0
	WaiveUserFee3 *string `json:"waiveUserFee3,omitempty"`

	//  Max length = 1, Waive User Fee 4: Field used to waive user fee 4, which defaults from Service Charge/Fee table (ARVM04).  Values are:  0 - Do not waive user fees (Default)  1 - Waive user fees  4 - Waive user fees for one cycle (Waive in current cycle)  5 - Waive user fees for two cycles (Waive in current cycle and next cycle)  6 - Waive user fees for three cycles (Waive in current cycle and next two cycles).
	// Max Length: 1
	// Min Length: 0
	WaiveUserFee4 *string `json:"waiveUserFee4,omitempty"`

	//  Max length = 1, Waive User Fee 5: Field used to waive user fee 5, which defaults from Service Charge/Fee table (ARVM04).  Values are:  0 - Do not waive user fees (Default)  1 - Waive user fees  4 - Waive user fees for one cycle (Waive in current cycle)  5 - Waive user fees for two cycles (Waive in current cycle and next cycle)  6 - Waive user fees for three cycles (Waive in current cycle and next two cycles).
	// Max Length: 1
	// Min Length: 0
	WaiveUserFee5 *string `json:"waiveUserFee5,omitempty"`

	//  Max length = 1, Waive User Fee 6: Field used to waive user fee 6, which defaults from Service Charge/Fee table (ARVM04).  Values are:  0 - Do not waive user fees (Default)  1 - Waive user fees  4 - Waive user fees for one cycle (Waive in current cycle)  5 - Waive user fees for two cycles (Waive in current cycle and next cycle)  6 - Waive user fees for three cycles (Waive in current cycle and next two cycles).
	// Max Length: 1
	// Min Length: 0
	WaiveUserFee6 *string `json:"waiveUserFee6,omitempty"`
}

// Validate validates this waive feesand interest update request
func (m *WaiveFeesandInterestUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForexFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembMeth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReqType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveCashAdvFeeGrp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveCrdFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveCycleSpendFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveDormFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveIntr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveLateChg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveLateNtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveLtrFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveMembFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveNsfFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveOvlmFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveOvlmNtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveRefundFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveStmtFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveSuppMemFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveSvcChgGrp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveTaxCalc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveTxnFeeGrp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateForexFee(formats strfmt.Registry) error {

	if swag.IsZero(m.ForexFee) { // not required
		return nil
	}

	if err := validate.MinLength("forexFee", "body", string(*m.ForexFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("forexFee", "body", string(*m.ForexFee), 2); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateMembMeth(formats strfmt.Registry) error {

	if swag.IsZero(m.MembMeth) { // not required
		return nil
	}

	if err := validate.MinLength("membMeth", "body", string(*m.MembMeth), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("membMeth", "body", string(*m.MembMeth), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateReqType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReqType) { // not required
		return nil
	}

	if err := validate.MinLength("reqType", "body", string(*m.ReqType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reqType", "body", string(*m.ReqType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("reqType", "body", string(*m.ReqType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveCashAdvFeeGrp(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveCashAdvFeeGrp) { // not required
		return nil
	}

	for i := 0; i < len(m.WaiveCashAdvFeeGrp); i++ {
		if swag.IsZero(m.WaiveCashAdvFeeGrp[i]) { // not required
			continue
		}

		if m.WaiveCashAdvFeeGrp[i] != nil {
			if err := m.WaiveCashAdvFeeGrp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("waiveCashAdvFeeGrp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveCrdFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveCrdFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveCrdFee", "body", string(*m.WaiveCrdFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveCrdFee", "body", string(*m.WaiveCrdFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveCycleSpendFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveCycleSpendFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveCycleSpendFee", "body", string(*m.WaiveCycleSpendFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveCycleSpendFee", "body", string(*m.WaiveCycleSpendFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveDormFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveDormFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveDormFee", "body", string(*m.WaiveDormFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveDormFee", "body", string(*m.WaiveDormFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveIntr(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveIntr) { // not required
		return nil
	}

	if err := validate.MinLength("waiveIntr", "body", string(*m.WaiveIntr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveIntr", "body", string(*m.WaiveIntr), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveLateChg(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveLateChg) { // not required
		return nil
	}

	if err := validate.MinLength("waiveLateChg", "body", string(*m.WaiveLateChg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveLateChg", "body", string(*m.WaiveLateChg), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveLateNtc(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveLateNtc) { // not required
		return nil
	}

	if err := validate.MinLength("waiveLateNtc", "body", string(*m.WaiveLateNtc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveLateNtc", "body", string(*m.WaiveLateNtc), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveLtrFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveLtrFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveLtrFee", "body", string(*m.WaiveLtrFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveLtrFee", "body", string(*m.WaiveLtrFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveMembFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveMembFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveMembFee", "body", string(*m.WaiveMembFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveMembFee", "body", string(*m.WaiveMembFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveNsfFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveNsfFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveNsfFee", "body", string(*m.WaiveNsfFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveNsfFee", "body", string(*m.WaiveNsfFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveOvlmFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveOvlmFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveOvlmFee", "body", string(*m.WaiveOvlmFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveOvlmFee", "body", string(*m.WaiveOvlmFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveOvlmNtc(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveOvlmNtc) { // not required
		return nil
	}

	if err := validate.MinLength("waiveOvlmNtc", "body", string(*m.WaiveOvlmNtc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveOvlmNtc", "body", string(*m.WaiveOvlmNtc), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveRefundFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveRefundFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveRefundFee", "body", string(*m.WaiveRefundFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveRefundFee", "body", string(*m.WaiveRefundFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveStmtFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveStmtFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveStmtFee", "body", string(*m.WaiveStmtFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveStmtFee", "body", string(*m.WaiveStmtFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveSuppMemFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveSuppMemFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveSuppMemFee", "body", string(*m.WaiveSuppMemFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveSuppMemFee", "body", string(*m.WaiveSuppMemFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveSvcChgGrp(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveSvcChgGrp) { // not required
		return nil
	}

	for i := 0; i < len(m.WaiveSvcChgGrp); i++ {
		if swag.IsZero(m.WaiveSvcChgGrp[i]) { // not required
			continue
		}

		if m.WaiveSvcChgGrp[i] != nil {
			if err := m.WaiveSvcChgGrp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("waiveSvcChgGrp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveTaxCalc(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveTaxCalc) { // not required
		return nil
	}

	if err := validate.MinLength("waiveTaxCalc", "body", string(*m.WaiveTaxCalc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveTaxCalc", "body", string(*m.WaiveTaxCalc), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveTxnFeeGrp(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveTxnFeeGrp) { // not required
		return nil
	}

	for i := 0; i < len(m.WaiveTxnFeeGrp); i++ {
		if swag.IsZero(m.WaiveTxnFeeGrp[i]) { // not required
			continue
		}

		if m.WaiveTxnFeeGrp[i] != nil {
			if err := m.WaiveTxnFeeGrp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("waiveTxnFeeGrp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveUserFee1(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee1) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee1", "body", string(*m.WaiveUserFee1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee1", "body", string(*m.WaiveUserFee1), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveUserFee2(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee2) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee2", "body", string(*m.WaiveUserFee2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee2", "body", string(*m.WaiveUserFee2), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveUserFee3(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee3) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee3", "body", string(*m.WaiveUserFee3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee3", "body", string(*m.WaiveUserFee3), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveUserFee4(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee4) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee4", "body", string(*m.WaiveUserFee4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee4", "body", string(*m.WaiveUserFee4), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveUserFee5(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee5) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee5", "body", string(*m.WaiveUserFee5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee5", "body", string(*m.WaiveUserFee5), 1); err != nil {
		return err
	}

	return nil
}

func (m *WaiveFeesandInterestUpdateRequest) validateWaiveUserFee6(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee6) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee6", "body", string(*m.WaiveUserFee6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee6", "body", string(*m.WaiveUserFee6), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WaiveFeesandInterestUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WaiveFeesandInterestUpdateRequest) UnmarshalBinary(b []byte) error {
	var res WaiveFeesandInterestUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TravelItineraryUpdateRequest travel itinerary update request
//
// swagger:model TravelItineraryUpdateRequest
type TravelItineraryUpdateRequest struct {

	//  Max length = 3, Base24 Alternate Card Limit Profile for Crown/Flexi Marker.  Must be present in FV Card Limit Profile table.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	AltCrdLmtProf *string `json:"altCrdLmtProf"`

	//  Max length = 17, Maximum amount in monetary units and subunits of retail authorizations allowed for this Embosser record for the frequency defined in the FREQ field.
	// Required: true
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthRtlAmt *string `json:"authRtlAmt"`

	//  Max length = 17, Maximum authorization amount in monetary units and subunits for all transactions allowed for the frequency defined in the FREQ field.  If received value is greater than 0 then value should not be less than LOGO level TOTAL TXN AMT on AZML06
	// Required: true
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthTotalTxnAmt *string `json:"authTotalTxnAmt"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	// EXT VAC CNTRY CODE GRP
	ExtVacCntryCodeGrp []*ExtVacCntryCodeGrpForTravelItineraryUpdate1 `json:"extVacCntryCodeGrp"`

	//  Max length = 2, Fraud Monitor Flag: Indicates whether the card is flagged for fraud monitoring. This user defined field will hold a flag which will be passed into Falcon during the authorization process. Clients will be able to set the flag to a value (edited against valid values set up on the ORG record-AZMO09) and build Falcon strategies which take account of the new flag.  Should be a valid value from the list at ORG level.  Valid values are 'FS', 'CM' and Spaces.
	// Required: true
	// Max Length: 2
	// Min Length: 0
	FraudMonitorFlag *string `json:"fraudMonitorFlag"`

	//  Max length = 1, Update Indicator. Values are: 1. Travel Itinerary 2. Crown/Flexi Marker 3. Both
	// Required: true
	// Max Length: 1
	// Min Length: 0
	UpdInd *string `json:"updInd"`

	// Format: YYYYMMDD. Vacation End Date: date when the customer ends their vacation. This field is used together with the vacation start date to indicate whether the customer is currently on vacation.
	// Required: true
	VacEndDate *string `json:"vacEndDate"`

	// Format: YYYYMMDD. Vacation Start Date: date when the customer starts their vacation. This field is used together with the vacation end date to indicate whether the customer is currently on vacation.
	// Required: true
	VacStartDate *string `json:"vacStartDate"`
}

// Validate validates this travel itinerary update request
func (m *TravelItineraryUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAltCrdLmtProf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthRtlAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTotalTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtVacCntryCodeGrp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudMonitorFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TravelItineraryUpdateRequest) validateAltCrdLmtProf(formats strfmt.Registry) error {

	if err := validate.Required("altCrdLmtProf", "body", m.AltCrdLmtProf); err != nil {
		return err
	}

	if err := validate.MinLength("altCrdLmtProf", "body", string(*m.AltCrdLmtProf), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCrdLmtProf", "body", string(*m.AltCrdLmtProf), 3); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateAuthRtlAmt(formats strfmt.Registry) error {

	if err := validate.Required("authRtlAmt", "body", m.AuthRtlAmt); err != nil {
		return err
	}

	if err := validate.MinLength("authRtlAmt", "body", string(*m.AuthRtlAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authRtlAmt", "body", string(*m.AuthRtlAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("authRtlAmt", "body", string(*m.AuthRtlAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateAuthTotalTxnAmt(formats strfmt.Registry) error {

	if err := validate.Required("authTotalTxnAmt", "body", m.AuthTotalTxnAmt); err != nil {
		return err
	}

	if err := validate.MinLength("authTotalTxnAmt", "body", string(*m.AuthTotalTxnAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authTotalTxnAmt", "body", string(*m.AuthTotalTxnAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("authTotalTxnAmt", "body", string(*m.AuthTotalTxnAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateExtVacCntryCodeGrp(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtVacCntryCodeGrp) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtVacCntryCodeGrp); i++ {
		if swag.IsZero(m.ExtVacCntryCodeGrp[i]) { // not required
			continue
		}

		if m.ExtVacCntryCodeGrp[i] != nil {
			if err := m.ExtVacCntryCodeGrp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extVacCntryCodeGrp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateFraudMonitorFlag(formats strfmt.Registry) error {

	if err := validate.Required("fraudMonitorFlag", "body", m.FraudMonitorFlag); err != nil {
		return err
	}

	if err := validate.MinLength("fraudMonitorFlag", "body", string(*m.FraudMonitorFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fraudMonitorFlag", "body", string(*m.FraudMonitorFlag), 2); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateUpdInd(formats strfmt.Registry) error {

	if err := validate.Required("updInd", "body", m.UpdInd); err != nil {
		return err
	}

	if err := validate.MinLength("updInd", "body", string(*m.UpdInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("updInd", "body", string(*m.UpdInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateVacEndDate(formats strfmt.Registry) error {

	if err := validate.Required("vacEndDate", "body", m.VacEndDate); err != nil {
		return err
	}

	return nil
}

func (m *TravelItineraryUpdateRequest) validateVacStartDate(formats strfmt.Registry) error {

	if err := validate.Required("vacStartDate", "body", m.VacStartDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TravelItineraryUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TravelItineraryUpdateRequest) UnmarshalBinary(b []byte) error {
	var res TravelItineraryUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

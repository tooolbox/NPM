// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardActivationRequest card activation request
//
// swagger:model CardActivationRequest
type CardActivationRequest struct {

	//  Max length = 19, ACCT
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Service type.  Values are: A = Activate all cards S = Activate specific cards
	// Required: true
	// Max Length: 1
	// Min Length: 0
	SvcType *string `json:"svcType"`

	//  Max length = 40, USER DATA
	// Max Length: 40
	// Min Length: 0
	UserData *string `json:"userData,omitempty"`
}

// Validate validates this card activation request
func (m *CardActivationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardActivationRequest) validateAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.Acct) { // not required
		return nil
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardActivationRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardActivationRequest) validateSvcType(formats strfmt.Registry) error {

	if err := validate.Required("svcType", "body", m.SvcType); err != nil {
		return err
	}

	if err := validate.MinLength("svcType", "body", string(*m.SvcType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcType", "body", string(*m.SvcType), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardActivationRequest) validateUserData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if err := validate.MinLength("userData", "body", string(*m.UserData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData", "body", string(*m.UserData), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardActivationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardActivationRequest) UnmarshalBinary(b []byte) error {
	var res CardActivationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

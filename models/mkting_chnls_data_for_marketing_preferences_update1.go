// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MktingChnlsDataForMarketingPreferencesUpdate1 mkting chnls data for marketing preferences update1
//
// swagger:model MktingChnlsDataForMarketingPreferencesUpdate1
type MktingChnlsDataForMarketingPreferencesUpdate1 struct {

	//  Max length = 1, Branch Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Branch *string `json:"branch,omitempty"`

	//  Max length = 1, Cards Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Cards *string `json:"cards,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn1 *string `json:"chnUserDefn1,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn2 *string `json:"chnUserDefn2,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn3 *string `json:"chnUserDefn3,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn4 *string `json:"chnUserDefn4,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn5 *string `json:"chnUserDefn5,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn6 *string `json:"chnUserDefn6,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn7 *string `json:"chnUserDefn7,omitempty"`

	//  Max length = 1, For future use.
	// Max Length: 1
	// Min Length: 0
	ChnUserDefn8 *string `json:"chnUserDefn8,omitempty"`

	//  Max length = 1, Direct Mail Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	DirectMail *string `json:"directMail,omitempty"`

	//  Max length = 1, Email Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Email *string `json:"email,omitempty"`

	//  Max length = 1, IDTV Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Idtv *string `json:"idtv,omitempty"`

	//  Max length = 1, INTERNET EBANK
	// Max Length: 1
	// Min Length: 0
	InternetEbank *string `json:"internetEbank,omitempty"`

	//  Max length = 1, Letter Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Letters *string `json:"letters,omitempty"`

	//  Max length = 1, MOB PHONE EBANK
	// Max Length: 1
	// Min Length: 0
	MobPhoneEbank *string `json:"mobPhoneEbank,omitempty"`

	//  Max length = 1, Outbound Call Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	OutboundCall *string `json:"outboundCall,omitempty"`

	//  Max length = 1, Pin Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Pin *string `json:"pin,omitempty"`

	//  Max length = 1, SMS Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Sms *string `json:"sms,omitempty"`

	//  Max length = 1, Statement Marketing Channel Option. Values are: 1 = Marketing to the customer is permitted via this channel 0 = Marketing to the customer is not permitted via this channel
	// Max Length: 1
	// Min Length: 0
	Stmts *string `json:"stmts,omitempty"`
}

// Validate validates this mkting chnls data for marketing preferences update1
func (m *MktingChnlsDataForMarketingPreferencesUpdate1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChnUserDefn8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdtv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternetEbank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobPhoneEbank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundCall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.Branch) { // not required
		return nil
	}

	if err := validate.MinLength("branch", "body", string(*m.Branch), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("branch", "body", string(*m.Branch), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateCards(formats strfmt.Registry) error {

	if swag.IsZero(m.Cards) { // not required
		return nil
	}

	if err := validate.MinLength("cards", "body", string(*m.Cards), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cards", "body", string(*m.Cards), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn1(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn1) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn1", "body", string(*m.ChnUserDefn1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn1", "body", string(*m.ChnUserDefn1), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn2(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn2) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn2", "body", string(*m.ChnUserDefn2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn2", "body", string(*m.ChnUserDefn2), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn3(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn3) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn3", "body", string(*m.ChnUserDefn3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn3", "body", string(*m.ChnUserDefn3), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn4(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn4) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn4", "body", string(*m.ChnUserDefn4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn4", "body", string(*m.ChnUserDefn4), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn5(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn5) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn5", "body", string(*m.ChnUserDefn5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn5", "body", string(*m.ChnUserDefn5), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn6(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn6) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn6", "body", string(*m.ChnUserDefn6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn6", "body", string(*m.ChnUserDefn6), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn7(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn7) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn7", "body", string(*m.ChnUserDefn7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn7", "body", string(*m.ChnUserDefn7), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateChnUserDefn8(formats strfmt.Registry) error {

	if swag.IsZero(m.ChnUserDefn8) { // not required
		return nil
	}

	if err := validate.MinLength("chnUserDefn8", "body", string(*m.ChnUserDefn8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chnUserDefn8", "body", string(*m.ChnUserDefn8), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateDirectMail(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectMail) { // not required
		return nil
	}

	if err := validate.MinLength("directMail", "body", string(*m.DirectMail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("directMail", "body", string(*m.DirectMail), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(*m.Email), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(*m.Email), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateIdtv(formats strfmt.Registry) error {

	if swag.IsZero(m.Idtv) { // not required
		return nil
	}

	if err := validate.MinLength("idtv", "body", string(*m.Idtv), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("idtv", "body", string(*m.Idtv), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateInternetEbank(formats strfmt.Registry) error {

	if swag.IsZero(m.InternetEbank) { // not required
		return nil
	}

	if err := validate.MinLength("internetEbank", "body", string(*m.InternetEbank), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("internetEbank", "body", string(*m.InternetEbank), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateLetters(formats strfmt.Registry) error {

	if swag.IsZero(m.Letters) { // not required
		return nil
	}

	if err := validate.MinLength("letters", "body", string(*m.Letters), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letters", "body", string(*m.Letters), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateMobPhoneEbank(formats strfmt.Registry) error {

	if swag.IsZero(m.MobPhoneEbank) { // not required
		return nil
	}

	if err := validate.MinLength("mobPhoneEbank", "body", string(*m.MobPhoneEbank), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobPhoneEbank", "body", string(*m.MobPhoneEbank), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateOutboundCall(formats strfmt.Registry) error {

	if swag.IsZero(m.OutboundCall) { // not required
		return nil
	}

	if err := validate.MinLength("outboundCall", "body", string(*m.OutboundCall), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("outboundCall", "body", string(*m.OutboundCall), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validatePin(formats strfmt.Registry) error {

	if swag.IsZero(m.Pin) { // not required
		return nil
	}

	if err := validate.MinLength("pin", "body", string(*m.Pin), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pin", "body", string(*m.Pin), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateSms(formats strfmt.Registry) error {

	if swag.IsZero(m.Sms) { // not required
		return nil
	}

	if err := validate.MinLength("sms", "body", string(*m.Sms), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sms", "body", string(*m.Sms), 1); err != nil {
		return err
	}

	return nil
}

func (m *MktingChnlsDataForMarketingPreferencesUpdate1) validateStmts(formats strfmt.Registry) error {

	if swag.IsZero(m.Stmts) { // not required
		return nil
	}

	if err := validate.MinLength("stmts", "body", string(*m.Stmts), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmts", "body", string(*m.Stmts), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MktingChnlsDataForMarketingPreferencesUpdate1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MktingChnlsDataForMarketingPreferencesUpdate1) UnmarshalBinary(b []byte) error {
	var res MktingChnlsDataForMarketingPreferencesUpdate1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

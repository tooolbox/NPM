// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EppCancelRequest epp cancel request
//
// swagger:model EppCancelRequest
type EppCancelRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	//  Max length = 3, Credit Plan Data Record Number: Sequence number of Credit Plan.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AmpsRecNbr *string `json:"ampsRecNbr,omitempty"`

	//  Max length = 1, CLOSE EPP: 0=EPP Not Closed 3=Close per Customer Request 4=Close Mistakenly Converted
	// Max Length: 1
	// Min Length: 0
	CloseEpp *string `json:"closeEpp,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, EPP CLOSE Reason: 3=Manual closure due to customer request 4=Manual closure due to mistaken conversion
	// Max Length: 1
	// Min Length: 0
	EppCloseReason *string `json:"eppCloseReason,omitempty"`

	//  Max length = 1, WAIVE EPP CLOSE FEE 0=Do not waive fee 1=Waive fee
	// Max Length: 1
	// Min Length: 0
	WaiveEppCloseFeeInd *string `json:"waiveEppCloseFeeInd,omitempty"`
}

// Validate validates this epp cancel request
func (m *EppCancelRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmpsRecNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloseEpp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEppCloseReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveEppCloseFeeInd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EppCancelRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *EppCancelRequest) validateAmpsRecNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AmpsRecNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ampsRecNbr", "body", string(*m.AmpsRecNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ampsRecNbr", "body", string(*m.AmpsRecNbr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("ampsRecNbr", "body", string(*m.AmpsRecNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppCancelRequest) validateCloseEpp(formats strfmt.Registry) error {

	if swag.IsZero(m.CloseEpp) { // not required
		return nil
	}

	if err := validate.MinLength("closeEpp", "body", string(*m.CloseEpp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("closeEpp", "body", string(*m.CloseEpp), 1); err != nil {
		return err
	}

	return nil
}

func (m *EppCancelRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *EppCancelRequest) validateEppCloseReason(formats strfmt.Registry) error {

	if swag.IsZero(m.EppCloseReason) { // not required
		return nil
	}

	if err := validate.MinLength("eppCloseReason", "body", string(*m.EppCloseReason), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("eppCloseReason", "body", string(*m.EppCloseReason), 1); err != nil {
		return err
	}

	return nil
}

func (m *EppCancelRequest) validateWaiveEppCloseFeeInd(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveEppCloseFeeInd) { // not required
		return nil
	}

	if err := validate.MinLength("waiveEppCloseFeeInd", "body", string(*m.WaiveEppCloseFeeInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveEppCloseFeeInd", "body", string(*m.WaiveEppCloseFeeInd), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EppCancelRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EppCancelRequest) UnmarshalBinary(b []byte) error {
	var res EppCancelRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

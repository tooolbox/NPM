// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountPlanlistResponse account planlist response
//
// swagger:model AccountPlanlistResponse
type AccountPlanlistResponse struct {

	//  Max length = 17, Calculated value The eligible balance to transfer into a FPP plan. This should be the sum of all plan balances excluding Cash Plan, Default Fees, BT's, MT's and Existing Fixed Payment Plans.  This field can have value greater than zero only for FUNCTION = 'E' If Function is not 'E' this field will be returned as zero.
	// Required: true
	AcctFppEligBal *string `json:"acctFppEligBal"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	// Required: true
	CurrencyCode *string `json:"currencyCode"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	// Required: true
	CurrencyNod *string `json:"currencyNod"`

	//  Max length = 1, Indicator that displays only if this is a dual currency account. If this is not a dual currency account, the indicator does not display. If this is a dual currency account, a duplicate Account Base Segment record resides in the associated dual currency organization.
	// Required: true
	ForeignUse *string `json:"foreignUse"`

	//  Max length = 1, Account level flag that indicates,  FPP plan set up has been already initiated and is awaiting overnight batch processing.  This will allow Galaxy to prevent a second flexi plan from being set-up until the next processing day. Valid values N = FPP plan has not been setup today Y = FPP plan has been setup and awaiting batch processing.
	// Required: true
	FppPlanAddedSw *string `json:"fppPlanAddedSw"`

	//  Max length = 2, Numbre of Plans. Total number of plans that are returned in the response of the message
	// Required: true
	NbrOfPlans *string `json:"nbrOfPlans"`

	// Occurs NBR_OF_PLANS times. Each occurrence of length 136, with maximum number of occurrence as 99.
	PlanCtdData []*PlanCtdDataForAccountPlanlist1 `json:"planCtdData"`
}

// Validate validates this account planlist response
func (m *AccountPlanlistResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctFppEligBal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyNod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFppPlanAddedSw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrOfPlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanCtdData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountPlanlistResponse) validateAcctFppEligBal(formats strfmt.Registry) error {

	if err := validate.Required("acctFppEligBal", "body", m.AcctFppEligBal); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountPlanlistResponse) validateCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("currencyCode", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistResponse) validateCurrencyNod(formats strfmt.Registry) error {

	if err := validate.Required("currencyNod", "body", m.CurrencyNod); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistResponse) validateForeignUse(formats strfmt.Registry) error {

	if err := validate.Required("foreignUse", "body", m.ForeignUse); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistResponse) validateFppPlanAddedSw(formats strfmt.Registry) error {

	if err := validate.Required("fppPlanAddedSw", "body", m.FppPlanAddedSw); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistResponse) validateNbrOfPlans(formats strfmt.Registry) error {

	if err := validate.Required("nbrOfPlans", "body", m.NbrOfPlans); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistResponse) validatePlanCtdData(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanCtdData) { // not required
		return nil
	}

	for i := 0; i < len(m.PlanCtdData); i++ {
		if swag.IsZero(m.PlanCtdData[i]) { // not required
			continue
		}

		if m.PlanCtdData[i] != nil {
			if err := m.PlanCtdData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("planCtdData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountPlanlistResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountPlanlistResponse) UnmarshalBinary(b []byte) error {
	var res AccountPlanlistResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyDemographicAddRequest loyalty demographic add request
//
// swagger:model LoyaltyDemographicAddRequest
type LoyaltyDemographicAddRequest struct {

	//  Max length = 19, LMS Account Number. If account number is not entered  LMS will auto generate the account number.  The account number should be present in account demographic records if trying to update add pending account.
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account,omitempty"`

	//  Max length = 40, Mailing address line 1 of the accountholder. If  NAME ADDRESS SOURCE FLAG is LMS, ADDRESS 1 can't be spaces.
	// Max Length: 40
	// Min Length: 0
	Addr1 *string `json:"addr1,omitempty"`

	//  Max length = 40, Mailing address line 2 of the accountholder. If  NAME ADDRESS SOURCE FLAG is LMS, ADDRESS 2 can't be spaces.
	// Max Length: 40
	// Min Length: 0
	Addr2 *string `json:"addr2,omitempty"`

	//  Max length = 40, Mailing address line 3 of the accountholder.
	// Max Length: 40
	// Min Length: 0
	Addr3 *string `json:"addr3,omitempty"`

	//  Max length = 40, Mailing address line 4 of the accountholder.
	// Max Length: 40
	// Min Length: 0
	Addr4 *string `json:"addr4,omitempty"`

	//  Max length = 30, City: City portion of the mailing address of the accountholder. If  NAME ADDRESS SOURCE FLAG is LMS, CITY  can't be spaces.
	// Max Length: 30
	// Min Length: 0
	City *string `json:"city,omitempty"`

	//  Max length = 3, Country Code: Country code portion of the mailing address of the accountholder.
	// Max Length: 3
	// Min Length: 0
	CntryCd *string `json:"cntryCd,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 30, County where the accountholder lives.
	// Max Length: 30
	// Min Length: 0
	County *string `json:"county,omitempty"`

	//  Max length = 2, Customer indicator that is assigned to the AccountDemographics record and can be used to waive membership Fees.
	// Max Length: 2
	// Min Length: 0
	CustInd *string `json:"custInd,omitempty"`

	// Format: YYYYMMDD. Customer's date of birth.
	Dob string `json:"dob,omitempty"`

	//  Max length = 60, E-mail address of the accountholder.
	// Max Length: 60
	// Min Length: 0
	Email *string `json:"email,omitempty"`

	//  Max length = 1, Email Flag: code that indicates whether you have permission from the owner to Email. Values are:  0 - Do not send  1 - May be sent.  2 - Prefer to be sent.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmailFlg *string `json:"emailFlg,omitempty"`

	//  Max length = 20, Fax number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	FaxPh *string `json:"faxPh,omitempty"`

	//  Max length = 1, Fax flag: field that indicates whether you have permission from the owner to call at Fax number.   Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FaxPhFlg *string `json:"faxPhFlg,omitempty"`

	//  Max length = 1, Gender code. Values are: 0 - Gender not specified 1 - Male 2 - Female
	// Required: true
	// Max Length: 1
	// Min Length: 0
	GndrCd *string `json:"gndrCd"`

	//  Max length = 20, Home phone number of the account holder.
	// Max Length: 20
	// Min Length: 0
	HomePh *string `json:"homePh,omitempty"`

	//  Max length = 1, Home Phone Flag: Code that specifies whether the customer grants permission to call this number.  Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HomePhFlg *string `json:"homePhFlg,omitempty"`

	//  Max length = 40, House Name.
	// Max Length: 40
	// Min Length: 0
	HseName *string `json:"hseName,omitempty"`

	//  Max length = 20, House Number.
	// Max Length: 20
	// Min Length: 0
	HseNbr *string `json:"hseNbr,omitempty"`

	//  Max length = 3, Language Indicator: User-defined code that indicates the language spoken by the customer.
	// Max Length: 3
	// Min Length: 0
	LangInd *string `json:"langInd,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo1 *string `json:"memo1,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo2 *string `json:"memo2,omitempty"`

	//  Max length = 20, Mobile phone number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	MobPh *string `json:"mobPh,omitempty"`

	//  Max length = 1, Mobile Phone Flag: Code that specifies whether the customer grants permission to  call this number.  Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MobPhFlg *string `json:"mobPhFlg,omitempty"`

	//  Max length = 1, Service Flag: Type of customer for the account demographics record.  Values are:  'B' - Business 'C' - Consolidated 'I' - Individual
	// Required: true
	// Max Length: 1
	// Min Length: 0
	NaSvcFlg *string `json:"naSvcFlg"`

	//  Max length = 40, Account name: Last name if the account holder is an individual, or business name if the account holder is a business.
	// Max Length: 40
	// Min Length: 0
	Name1 *string `json:"name1,omitempty"`

	//  Max length = 40, First name if the account holder is an individual, or business name if the account holder is a business. If  NAME ADDRESS SOURCE FLAG is LMS NAME 2 can't be spaces.
	// Max Length: 40
	// Min Length: 0
	Name2 *string `json:"name2,omitempty"`

	//  Max length = 40, Middle name if the account holder is an individual, or business name if the account holder is a business.
	// Max Length: 40
	// Min Length: 0
	Name3 *string `json:"name3,omitempty"`

	// name addr source flag
	// Max Length: 3
	// Min Length: 0
	NameAddrSourceFlag *string `json:"nameAddrSourceFlag,omitempty"`

	// Format: YYYYMMDD. Open Date: Date on which the Accounts Demographic record was opened. In CCYY-MM-DD format.
	OpDt string `json:"opDt,omitempty"`

	// primary src
	// Max Length: 3
	// Min Length: 0
	PrimarySrc *string `json:"primarySrc,omitempty"`

	//  Max length = 19, Primary Accounts Receivable account associated with this LMS account.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	PrmyCmsAcct *string `json:"prmyCmsAcct"`

	//  Max length = 3, Primary CMS Organization: CMS Organization number associated with the primary CMS account.
	// Max Length: 3
	// Min Length: 0
	PrmyCmsOrg *string `json:"prmyCmsOrg,omitempty"`

	//  Max length = 10, Postal Code: Postal code portion of the mailing address of the accountholder. If  NAME ADDRESS SOURCE FLAG is LMS, POSTAL CODE can't be spaces.
	// Max Length: 10
	// Min Length: 0
	PstlCd *string `json:"pstlCd,omitempty"`

	//  Max length = 20, Suffix for account holder: Field that identifies the suffix of the owner (ex. Jr., Sr.).
	// Max Length: 20
	// Min Length: 0
	Sfx *string `json:"sfx,omitempty"`

	//  Max length = 3, Segment ID: User Defined field, used with the Segment Identifier Group and Points Plan Qualification tables.
	// Max Length: 3
	// Min Length: 0
	SgmtID *string `json:"sgmtId,omitempty"`

	//  Max length = 1, Short Message Service Indicator: Code that indicates whether the account holder has given permission to be contacted on their mobile telephone using SMS (short message service) text messages.  Values are: 0 - No, the account holder has not given permission to be contacted using SMS. 1 - Yes, the account holder has given permission to be contacted using SMS.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SmsFlg *string `json:"smsFlg,omitempty"`

	//  Max length = 3, State: Abbreviation of the state or province portion of the mailing address of the accountholder. If  NAME ADDRESS SOURCE FLAG is LMS, STATE can't be spaces.
	// Max Length: 3
	// Min Length: 0
	State *string `json:"state,omitempty"`

	//  Max length = 20, Professional or honorary title associated with the name.
	// Max Length: 20
	// Min Length: 0
	TTL *string `json:"ttl,omitempty"`

	//  Max length = 1, VIP flag: User-defined code that indicates if this account holder is an important or influential customer.  Values are:  'N' - Not a VIP (default)  'Y' - VIP
	// Required: true
	// Max Length: 1
	// Min Length: 0
	VipFlg *string `json:"vipFlg"`

	//  Max length = 20, Work phone number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	WrkPh *string `json:"wrkPh,omitempty"`

	//  Max length = 6, Work phone extension of the accountholder.
	// Max Length: 6
	// Min Length: 0
	WrkPhExtn *string `json:"wrkPhExtn,omitempty"`

	//  Max length = 1, Work Phone Flag: code that indicates whether you have permission from the owner to call at work number. Values are: 0 = No, do not contact customer on work number 1 = Yes, you can contact customer on work number 2 = Work phone is preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WrkPhFlg *string `json:"wrkPhFlg,omitempty"`
}

// Validate validates this loyalty demographic add request
func (m *LoyaltyDemographicAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddr3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCntryCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxPh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxPhFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGndrCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePhFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHseNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLangInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobPh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobPhFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNaSvcFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameAddrSourceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimarySrc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrmyCmsAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrmyCmsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePstlCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSgmtID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVipFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrkPh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrkPhExtn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrkPhFlg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyDemographicAddRequest) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.Addr1) { // not required
		return nil
	}

	if err := validate.MinLength("addr1", "body", string(*m.Addr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addr1", "body", string(*m.Addr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateAddr2(formats strfmt.Registry) error {

	if swag.IsZero(m.Addr2) { // not required
		return nil
	}

	if err := validate.MinLength("addr2", "body", string(*m.Addr2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addr2", "body", string(*m.Addr2), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateAddr3(formats strfmt.Registry) error {

	if swag.IsZero(m.Addr3) { // not required
		return nil
	}

	if err := validate.MinLength("addr3", "body", string(*m.Addr3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addr3", "body", string(*m.Addr3), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateAddr4(formats strfmt.Registry) error {

	if swag.IsZero(m.Addr4) { // not required
		return nil
	}

	if err := validate.MinLength("addr4", "body", string(*m.Addr4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addr4", "body", string(*m.Addr4), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(*m.City), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(*m.City), 30); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateCntryCd(formats strfmt.Registry) error {

	if swag.IsZero(m.CntryCd) { // not required
		return nil
	}

	if err := validate.MinLength("cntryCd", "body", string(*m.CntryCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cntryCd", "body", string(*m.CntryCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.County) { // not required
		return nil
	}

	if err := validate.MinLength("county", "body", string(*m.County), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("county", "body", string(*m.County), 30); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateCustInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CustInd) { // not required
		return nil
	}

	if err := validate.MinLength("custInd", "body", string(*m.CustInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custInd", "body", string(*m.CustInd), 2); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(*m.Email), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(*m.Email), 60); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateEmailFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailFlg) { // not required
		return nil
	}

	if err := validate.MinLength("emailFlg", "body", string(*m.EmailFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emailFlg", "body", string(*m.EmailFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("emailFlg", "body", string(*m.EmailFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateFaxPh(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxPh) { // not required
		return nil
	}

	if err := validate.MinLength("faxPh", "body", string(*m.FaxPh), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("faxPh", "body", string(*m.FaxPh), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateFaxPhFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxPhFlg) { // not required
		return nil
	}

	if err := validate.MinLength("faxPhFlg", "body", string(*m.FaxPhFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("faxPhFlg", "body", string(*m.FaxPhFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("faxPhFlg", "body", string(*m.FaxPhFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateGndrCd(formats strfmt.Registry) error {

	if err := validate.Required("gndrCd", "body", m.GndrCd); err != nil {
		return err
	}

	if err := validate.MinLength("gndrCd", "body", string(*m.GndrCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("gndrCd", "body", string(*m.GndrCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateHomePh(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePh) { // not required
		return nil
	}

	if err := validate.MinLength("homePh", "body", string(*m.HomePh), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homePh", "body", string(*m.HomePh), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateHomePhFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePhFlg) { // not required
		return nil
	}

	if err := validate.MinLength("homePhFlg", "body", string(*m.HomePhFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homePhFlg", "body", string(*m.HomePhFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("homePhFlg", "body", string(*m.HomePhFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateHseName(formats strfmt.Registry) error {

	if swag.IsZero(m.HseName) { // not required
		return nil
	}

	if err := validate.MinLength("hseName", "body", string(*m.HseName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("hseName", "body", string(*m.HseName), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateHseNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.HseNbr) { // not required
		return nil
	}

	if err := validate.MinLength("hseNbr", "body", string(*m.HseNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("hseNbr", "body", string(*m.HseNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateLangInd(formats strfmt.Registry) error {

	if swag.IsZero(m.LangInd) { // not required
		return nil
	}

	if err := validate.MinLength("langInd", "body", string(*m.LangInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("langInd", "body", string(*m.LangInd), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateMemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo1) { // not required
		return nil
	}

	if err := validate.MinLength("memo1", "body", string(*m.Memo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo1", "body", string(*m.Memo1), 60); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateMemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo2) { // not required
		return nil
	}

	if err := validate.MinLength("memo2", "body", string(*m.Memo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo2", "body", string(*m.Memo2), 60); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateMobPh(formats strfmt.Registry) error {

	if swag.IsZero(m.MobPh) { // not required
		return nil
	}

	if err := validate.MinLength("mobPh", "body", string(*m.MobPh), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobPh", "body", string(*m.MobPh), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateMobPhFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.MobPhFlg) { // not required
		return nil
	}

	if err := validate.MinLength("mobPhFlg", "body", string(*m.MobPhFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobPhFlg", "body", string(*m.MobPhFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mobPhFlg", "body", string(*m.MobPhFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateNaSvcFlg(formats strfmt.Registry) error {

	if err := validate.Required("naSvcFlg", "body", m.NaSvcFlg); err != nil {
		return err
	}

	if err := validate.MinLength("naSvcFlg", "body", string(*m.NaSvcFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("naSvcFlg", "body", string(*m.NaSvcFlg), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateName1(formats strfmt.Registry) error {

	if swag.IsZero(m.Name1) { // not required
		return nil
	}

	if err := validate.MinLength("name1", "body", string(*m.Name1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name1", "body", string(*m.Name1), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateName2(formats strfmt.Registry) error {

	if swag.IsZero(m.Name2) { // not required
		return nil
	}

	if err := validate.MinLength("name2", "body", string(*m.Name2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name2", "body", string(*m.Name2), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateName3(formats strfmt.Registry) error {

	if swag.IsZero(m.Name3) { // not required
		return nil
	}

	if err := validate.MinLength("name3", "body", string(*m.Name3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name3", "body", string(*m.Name3), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateNameAddrSourceFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.NameAddrSourceFlag) { // not required
		return nil
	}

	if err := validate.MinLength("nameAddrSourceFlag", "body", string(*m.NameAddrSourceFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameAddrSourceFlag", "body", string(*m.NameAddrSourceFlag), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validatePrimarySrc(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimarySrc) { // not required
		return nil
	}

	if err := validate.MinLength("primarySrc", "body", string(*m.PrimarySrc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("primarySrc", "body", string(*m.PrimarySrc), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validatePrmyCmsAcct(formats strfmt.Registry) error {

	if err := validate.Required("prmyCmsAcct", "body", m.PrmyCmsAcct); err != nil {
		return err
	}

	if err := validate.MinLength("prmyCmsAcct", "body", string(*m.PrmyCmsAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prmyCmsAcct", "body", string(*m.PrmyCmsAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validatePrmyCmsOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.PrmyCmsOrg) { // not required
		return nil
	}

	if err := validate.MinLength("prmyCmsOrg", "body", string(*m.PrmyCmsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prmyCmsOrg", "body", string(*m.PrmyCmsOrg), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validatePstlCd(formats strfmt.Registry) error {

	if swag.IsZero(m.PstlCd) { // not required
		return nil
	}

	if err := validate.MinLength("pstlCd", "body", string(*m.PstlCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pstlCd", "body", string(*m.PstlCd), 10); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateSfx(formats strfmt.Registry) error {

	if swag.IsZero(m.Sfx) { // not required
		return nil
	}

	if err := validate.MinLength("sfx", "body", string(*m.Sfx), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sfx", "body", string(*m.Sfx), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateSgmtID(formats strfmt.Registry) error {

	if swag.IsZero(m.SgmtID) { // not required
		return nil
	}

	if err := validate.MinLength("sgmtId", "body", string(*m.SgmtID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sgmtId", "body", string(*m.SgmtID), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateSmsFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsFlg) { // not required
		return nil
	}

	if err := validate.MinLength("smsFlg", "body", string(*m.SmsFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("smsFlg", "body", string(*m.SmsFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("smsFlg", "body", string(*m.SmsFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := validate.MinLength("state", "body", string(*m.State), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("state", "body", string(*m.State), 3); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if err := validate.MinLength("ttl", "body", string(*m.TTL), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ttl", "body", string(*m.TTL), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateVipFlg(formats strfmt.Registry) error {

	if err := validate.Required("vipFlg", "body", m.VipFlg); err != nil {
		return err
	}

	if err := validate.MinLength("vipFlg", "body", string(*m.VipFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vipFlg", "body", string(*m.VipFlg), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateWrkPh(formats strfmt.Registry) error {

	if swag.IsZero(m.WrkPh) { // not required
		return nil
	}

	if err := validate.MinLength("wrkPh", "body", string(*m.WrkPh), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wrkPh", "body", string(*m.WrkPh), 20); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateWrkPhExtn(formats strfmt.Registry) error {

	if swag.IsZero(m.WrkPhExtn) { // not required
		return nil
	}

	if err := validate.MinLength("wrkPhExtn", "body", string(*m.WrkPhExtn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wrkPhExtn", "body", string(*m.WrkPhExtn), 6); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyDemographicAddRequest) validateWrkPhFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.WrkPhFlg) { // not required
		return nil
	}

	if err := validate.MinLength("wrkPhFlg", "body", string(*m.WrkPhFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wrkPhFlg", "body", string(*m.WrkPhFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wrkPhFlg", "body", string(*m.WrkPhFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyDemographicAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyDemographicAddRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltyDemographicAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

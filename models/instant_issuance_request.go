// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstantIssuanceRequest instant issuance request
//
// swagger:model InstantIssuanceRequest
type InstantIssuanceRequest struct {

	//  Max length = 1, Account Block Code 1 - Block codes control specific processing options at the account level.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	AcctBc1 *string `json:"acctBc1"`

	//  Max length = 1, Account Block Code 2 - Block codes control specific processing options at the account level.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	AcctBc2 *string `json:"acctBc2"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 1, Account internal status. Must not be in Transfer, Charge-off, Closed or To-be-purged status
	// Required: true
	// Max Length: 1
	// Min Length: 0
	AcctStatus *string `json:"acctStatus"`

	//  Max length = 9, For Card Action '3', '6', 'A' and 'L', this field must contain values.
	// Max Length: 9
	// Min Length: 0
	BranchNbr *string `json:"branchNbr,omitempty"`

	//  Max length = 1, 1.Must be 1 (New) / A (Additional) / L (Lost Stolen) / 3 (Replacement ) / 6 (Emergency replacement)
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CardAction *string `json:"cardAction"`

	//  Max length = 1, Block code at card level. Please note that block code blocking plastic issuance should not be present
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CardBc *string `json:"cardBc"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card.1. Must be numeric and greater than 0 if provided2. Must be between 0 and 99 if smart card3. If not provided, and not a smart card, default to value of 0001
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq,omitempty"`

	//  Max length = 1, This field is the status code. The values are: 0 = Permanent.  1 = Temporary. F = Fraud.  S = Smart card manually reissued due to smart card restriction.  T = Permanent transfer out.  P = Purged.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CardStatus *string `json:"cardStatus"`

	//  Max length = 1, Card Technology. Must be numeric and have values 0 / 1 / 2 / 3
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardTech *string `json:"cardTech"`

	//  Max length = 1, Status of the Chip. Must not be Purged status
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ChipStatus *string `json:"chipStatus"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Customer Level Block code. Block code blocking plastic issuance should not be present
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CustBc *string `json:"custBc"`

	//  Max length = 26, Embossed Name 1: Name to be embossed on the first embossing line of the card. It cant be space and '.' (dot).
	// Required: true
	// Max Length: 26
	// Min Length: 0
	EmbossedName1 *string `json:"embossedName1"`

	//  Max length = 9, For card action 1, A, L this field must have values, at-least when the Branch number is not having values.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FirstIssBranch *string `json:"firstIssBranch,omitempty"`

	//  Max length = 3, Required when Account Number not provided Must be less than 999  Logo number must be on file.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Logo *string `json:"logo"`

	//  Max length = 27, Reissue Flag: Must have valid Reissue flag values for each of the 27 bytes N - Do not reissue Y - Reissue  R - Report no reissue D - Defer reissue
	// Required: true
	// Max Length: 27
	// Min Length: 0
	LogoBcReissue *string `json:"logoBcReissue"`

	//  Max length = 3, Must be equal 001
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrRqstd *string `json:"nbrRqstd"`

	//  Max length = 1, 1. Must be zeroes only.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SdpReq *string `json:"sdpReq"`

	//  Max length = 20, Staff Id
	// Max Length: 20
	// Min Length: 0
	StaffID *string `json:"staffId,omitempty"`
}

// Validate validates this instant issuance request
func (m *InstantIssuanceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctBc1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctBc2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardBc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardTech(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChipStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustBc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossedName1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstIssBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogoBcReissue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrRqstd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSdpReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaffID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantIssuanceRequest) validateAcctBc1(formats strfmt.Registry) error {

	if err := validate.Required("acctBc1", "body", m.AcctBc1); err != nil {
		return err
	}

	if err := validate.MinLength("acctBc1", "body", string(*m.AcctBc1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctBc1", "body", string(*m.AcctBc1), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateAcctBc2(formats strfmt.Registry) error {

	if err := validate.Required("acctBc2", "body", m.AcctBc2); err != nil {
		return err
	}

	if err := validate.MinLength("acctBc2", "body", string(*m.AcctBc2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctBc2", "body", string(*m.AcctBc2), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateAcctStatus(formats strfmt.Registry) error {

	if err := validate.Required("acctStatus", "body", m.AcctStatus); err != nil {
		return err
	}

	if err := validate.MinLength("acctStatus", "body", string(*m.AcctStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctStatus", "body", string(*m.AcctStatus), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateBranchNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.BranchNbr) { // not required
		return nil
	}

	if err := validate.MinLength("branchNbr", "body", string(*m.BranchNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("branchNbr", "body", string(*m.BranchNbr), 9); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCardAction(formats strfmt.Registry) error {

	if err := validate.Required("cardAction", "body", m.CardAction); err != nil {
		return err
	}

	if err := validate.MinLength("cardAction", "body", string(*m.CardAction), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardAction", "body", string(*m.CardAction), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCardBc(formats strfmt.Registry) error {

	if err := validate.Required("cardBc", "body", m.CardBc); err != nil {
		return err
	}

	if err := validate.MinLength("cardBc", "body", string(*m.CardBc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardBc", "body", string(*m.CardBc), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCardStatus(formats strfmt.Registry) error {

	if err := validate.Required("cardStatus", "body", m.CardStatus); err != nil {
		return err
	}

	if err := validate.MinLength("cardStatus", "body", string(*m.CardStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardStatus", "body", string(*m.CardStatus), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCardTech(formats strfmt.Registry) error {

	if err := validate.Required("cardTech", "body", m.CardTech); err != nil {
		return err
	}

	if err := validate.MinLength("cardTech", "body", string(*m.CardTech), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardTech", "body", string(*m.CardTech), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cardTech", "body", string(*m.CardTech), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateChipStatus(formats strfmt.Registry) error {

	if err := validate.Required("chipStatus", "body", m.ChipStatus); err != nil {
		return err
	}

	if err := validate.MinLength("chipStatus", "body", string(*m.ChipStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chipStatus", "body", string(*m.ChipStatus), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *InstantIssuanceRequest) validateCustBc(formats strfmt.Registry) error {

	if err := validate.Required("custBc", "body", m.CustBc); err != nil {
		return err
	}

	if err := validate.MinLength("custBc", "body", string(*m.CustBc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custBc", "body", string(*m.CustBc), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateEmbossedName1(formats strfmt.Registry) error {

	if err := validate.Required("embossedName1", "body", m.EmbossedName1); err != nil {
		return err
	}

	if err := validate.MinLength("embossedName1", "body", string(*m.EmbossedName1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossedName1", "body", string(*m.EmbossedName1), 26); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateFirstIssBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstIssBranch) { // not required
		return nil
	}

	if err := validate.MinLength("firstIssBranch", "body", string(*m.FirstIssBranch), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("firstIssBranch", "body", string(*m.FirstIssBranch), 9); err != nil {
		return err
	}

	if err := validate.Pattern("firstIssBranch", "body", string(*m.FirstIssBranch), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("logo", "body", m.Logo); err != nil {
		return err
	}

	if err := validate.MinLength("logo", "body", string(*m.Logo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("logo", "body", string(*m.Logo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("logo", "body", string(*m.Logo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateLogoBcReissue(formats strfmt.Registry) error {

	if err := validate.Required("logoBcReissue", "body", m.LogoBcReissue); err != nil {
		return err
	}

	if err := validate.MinLength("logoBcReissue", "body", string(*m.LogoBcReissue), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("logoBcReissue", "body", string(*m.LogoBcReissue), 27); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateNbrRqstd(formats strfmt.Registry) error {

	if err := validate.Required("nbrRqstd", "body", m.NbrRqstd); err != nil {
		return err
	}

	if err := validate.MinLength("nbrRqstd", "body", string(*m.NbrRqstd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrRqstd", "body", string(*m.NbrRqstd), 3); err != nil {
		return err
	}

	if err := validate.Pattern("nbrRqstd", "body", string(*m.NbrRqstd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateSdpReq(formats strfmt.Registry) error {

	if err := validate.Required("sdpReq", "body", m.SdpReq); err != nil {
		return err
	}

	if err := validate.MinLength("sdpReq", "body", string(*m.SdpReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sdpReq", "body", string(*m.SdpReq), 1); err != nil {
		return err
	}

	if err := validate.Pattern("sdpReq", "body", string(*m.SdpReq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRequest) validateStaffID(formats strfmt.Registry) error {

	if swag.IsZero(m.StaffID) { // not required
		return nil
	}

	if err := validate.MinLength("staffId", "body", string(*m.StaffID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("staffId", "body", string(*m.StaffID), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstantIssuanceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantIssuanceRequest) UnmarshalBinary(b []byte) error {
	var res InstantIssuanceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionsPromiseToPayAddRequest collections promise to pay add request
//
// swagger:model CollectionsPromiseToPayAddRequest
type CollectionsPromiseToPayAddRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 2, Source application code.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ApplNbr *string `json:"applNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 50, Free-form notation added to this account.
	// Max Length: 50
	// Min Length: 0
	MemoMsg *string `json:"memoMsg,omitempty"`

	//  Max length = 4, Action code valid for use on accounts within the classification.
	// Required: true
	// Max Length: 4
	// Min Length: 0
	PtpActionCd *string `json:"ptpActionCd"`

	//  Max length = 17, Promise-To-Pay Amount: Next payment amount for a promise-to-pay.
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PtpAmt *string `json:"ptpAmt,omitempty"`

	// Format: YYYYMMDD. Promise-To-Pay Date: Next payment date for a promise-to-pay.
	PtpDt string `json:"ptpDt,omitempty"`

	// Format: YYYYMMDD. Review Date: Scheduled date when the collector will next review this account.
	ReviewDt string `json:"reviewDt,omitempty"`

	//  Max length = 4, Review Time: Scheduled time of day when the collector will next review the account.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ReviewTime *string `json:"reviewTime,omitempty"`
}

// Validate validates this collections promise to pay add request
func (m *CollectionsPromiseToPayAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePtpActionCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePtpAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validateApplNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplNbr) { // not required
		return nil
	}

	if err := validate.MinLength("applNbr", "body", string(*m.ApplNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("applNbr", "body", string(*m.ApplNbr), 2); err != nil {
		return err
	}

	if err := validate.Pattern("applNbr", "body", string(*m.ApplNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validateMemoMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoMsg) { // not required
		return nil
	}

	if err := validate.MinLength("memoMsg", "body", string(*m.MemoMsg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoMsg", "body", string(*m.MemoMsg), 50); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validatePtpActionCd(formats strfmt.Registry) error {

	if err := validate.Required("ptpActionCd", "body", m.PtpActionCd); err != nil {
		return err
	}

	if err := validate.MinLength("ptpActionCd", "body", string(*m.PtpActionCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ptpActionCd", "body", string(*m.PtpActionCd), 4); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validatePtpAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.PtpAmt) { // not required
		return nil
	}

	if err := validate.MinLength("ptpAmt", "body", string(*m.PtpAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ptpAmt", "body", string(*m.PtpAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("ptpAmt", "body", string(*m.PtpAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CollectionsPromiseToPayAddRequest) validateReviewTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ReviewTime) { // not required
		return nil
	}

	if err := validate.MinLength("reviewTime", "body", string(*m.ReviewTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reviewTime", "body", string(*m.ReviewTime), 4); err != nil {
		return err
	}

	if err := validate.Pattern("reviewTime", "body", string(*m.ReviewTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionsPromiseToPayAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionsPromiseToPayAddRequest) UnmarshalBinary(b []byte) error {
	var res CollectionsPromiseToPayAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

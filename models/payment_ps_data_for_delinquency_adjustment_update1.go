// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentPsDataForDelinquencyAdjustmentUpdate1 payment ps data for delinquency adjustment update1
//
// swagger:model PaymentPsDataForDelinquencyAdjustmentUpdate1
type PaymentPsDataForDelinquencyAdjustmentUpdate1 struct {

	//  Max length = 17, Current balance: Total current outstanding balance of the plan.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	CurrBal *string `json:"currBal"`

	//  Max length = 5, Credit Plan Number: Identifies the plan number of the Credit Plan Master record associated with the Credit Plan Segment record.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNbr *string `json:"planNbr"`

	//  Max length = 2, Credit Plan Data Record Number: Sequence number of Credit Plan.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecNbr *string `json:"recNbr,omitempty"`

	//  Max length = 17, Total amount due on the Credit Plan Segment record.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	TotDue *string `json:"totDue"`
}

// Validate validates this payment ps data for delinquency adjustment update1
func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrBal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotDue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) validateCurrBal(formats strfmt.Registry) error {

	if err := validate.Required("currBal", "body", m.CurrBal); err != nil {
		return err
	}

	if err := validate.Pattern("currBal", "body", string(*m.CurrBal), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) validatePlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("planNbr", "body", m.PlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("planNbr", "body", string(*m.PlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNbr", "body", string(*m.PlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNbr", "body", string(*m.PlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) validateRecNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RecNbr) { // not required
		return nil
	}

	if err := validate.MinLength("recNbr", "body", string(*m.RecNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recNbr", "body", string(*m.RecNbr), 2); err != nil {
		return err
	}

	if err := validate.Pattern("recNbr", "body", string(*m.RecNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) validateTotDue(formats strfmt.Registry) error {

	if err := validate.Required("totDue", "body", m.TotDue); err != nil {
		return err
	}

	if err := validate.Pattern("totDue", "body", string(*m.TotDue), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentPsDataForDelinquencyAdjustmentUpdate1) UnmarshalBinary(b []byte) error {
	var res PaymentPsDataForDelinquencyAdjustmentUpdate1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

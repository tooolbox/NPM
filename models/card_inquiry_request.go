// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardInquiryRequest card inquiry request
//
// swagger:model CardInquiryRequest
type CardInquiryRequest struct {

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0 When the Organization number is provided on Input, this field is ignored.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	//  Max length = 1, PIN block change audit trail indicator: Value indicates whether to display the PIN block change audit trail or not. The values are: 0 = No Display 1 = Display the PIN block change audit trail.
	// Max Length: 1
	// Min Length: 0
	PinBlockChangeAuditTrailInd *string `json:"pinBlockChangeAuditTrailInd,omitempty"`

	//  Max length = 4, RECSEQ
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Recseq *string `json:"recseq,omitempty"`
}

// Validate validates this card inquiry request
func (m *CardInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinBlockChangeAuditTrailInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecseq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardInquiryRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardInquiryRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardInquiryRequest) validatePinBlockChangeAuditTrailInd(formats strfmt.Registry) error {

	if swag.IsZero(m.PinBlockChangeAuditTrailInd) { // not required
		return nil
	}

	if err := validate.MinLength("pinBlockChangeAuditTrailInd", "body", string(*m.PinBlockChangeAuditTrailInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pinBlockChangeAuditTrailInd", "body", string(*m.PinBlockChangeAuditTrailInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardInquiryRequest) validateRecseq(formats strfmt.Registry) error {

	if swag.IsZero(m.Recseq) { // not required
		return nil
	}

	if err := validate.MinLength("recseq", "body", string(*m.Recseq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recseq", "body", string(*m.Recseq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("recseq", "body", string(*m.Recseq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardInquiryRequest) UnmarshalBinary(b []byte) error {
	var res CardInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

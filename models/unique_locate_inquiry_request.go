// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniqueLocateInquiryRequest unique locate inquiry request
//
// swagger:model UniqueLocateInquiryRequest
type UniqueLocateInquiryRequest struct {

	//  Max length = 48, Complete key for the FIRST AMAX record that was read.
	// Max Length: 48
	// Min Length: 0
	AmaxFk *string `json:"amaxFk,omitempty"`

	//  Max length = 48, Complete key for the last AMAX record that was read.
	// Max Length: 48
	// Min Length: 0
	AmaxLk *string `json:"amaxLk,omitempty"`

	//  Max length = 45, Complete key for the FIRST AMBX record that was read.
	// Max Length: 45
	// Min Length: 0
	AmbxFk *string `json:"ambxFk,omitempty"`

	//  Max length = 45, Complete key for the last AMBX record that was read.
	// Max Length: 45
	// Min Length: 0
	AmbxLk *string `json:"ambxLk,omitempty"`

	//  Max length = 48, Complete key for the FIRST AZCEX record that was read.
	// Max Length: 48
	// Min Length: 0
	AzcexFk *string `json:"azcexFk,omitempty"`

	//  Max length = 48, Complete key for the last AZCEX record that was read.
	// Max Length: 48
	// Min Length: 0
	AzcexLk *string `json:"azcexLk,omitempty"`

	//  Max length = 41, Complete key for the FIRST AZUCX record that was read.
	// Max Length: 41
	// Min Length: 0
	AzucxFk *string `json:"azucxFk,omitempty"`

	//  Max length = 41, Complete key for the last AZUCX  record that was read.
	// Max Length: 41
	// Min Length: 0
	AzucxLk *string `json:"azucxLk,omitempty"`

	//  Max length = 5, 5 digits client ID. E.g.: 01234
	// Max Length: 5
	// Min Length: 0
	ClientID *string `json:"clientId,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Debit Card Detail Include Switch. Valid values are: 0 (default) - Debit card details is displayed for this flag value. 1 - Debit card details is hidden for this flag value.
	// Max Length: 1
	// Min Length: 0
	DebCardIncSw *string `json:"debCardIncSw,omitempty"`

	//  Max length = 1, Function Code. Valid values are: B - Previous 50 records F - Next 50 records T - First50 records E - Last50 records Space ( default ) - Next 50 records
	// Max Length: 1
	// Min Length: 0
	FuncCd *string `json:"funcCd,omitempty"`

	//  Max length = 20, User's sign-on name: User Name as defined in FirstVision.
	// Required: true
	// Max Length: 20
	// Min Length: 0
	Name *string `json:"name"`

	//  Max length = 19, Unique ID field: identifies a customer uniquely. This should be either a valid: UNIQUE ID or  CUSTOMER NUMBER or ACCOUNT NUMBER or  CARD NUMBER
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Nbr *string `json:"nbr"`

	//  Max length = 1, Relationship Type. Values are: Blank - All Relationship types  Zero  - Residential address only
	// Max Length: 1
	// Min Length: 0
	Relationship *string `json:"relationship,omitempty"`

	//  Max length = 1, Search Type. Values are:  'I' - UNIQUE CUSTOMER ID  'C' - CUSTOMER NUMBER 'A' - ACCOUNT NUMBER 'E' - CARD NUMBER
	// Required: true
	// Max Length: 1
	// Min Length: 0
	SearchTyp *string `json:"searchTyp"`

	//  Max length = 1, View Type. Required only if SEARCH TYPE = 'E' Valid values are:  0 (default) - Use the Customer Number stored on the embosser as the driver for the Customer View display 1 - Use the Customer Number stored on the account as the driver of the Customer View display.
	// Max Length: 1
	// Min Length: 0
	ViewTyp *string `json:"viewTyp,omitempty"`
}

// Validate validates this unique locate inquiry request
func (m *UniqueLocateInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmaxFk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmaxLk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmbxFk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmbxLk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzcexFk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzcexLk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzucxFk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzucxLk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebCardIncSw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuncCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewTyp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniqueLocateInquiryRequest) validateAmaxFk(formats strfmt.Registry) error {

	if swag.IsZero(m.AmaxFk) { // not required
		return nil
	}

	if err := validate.MinLength("amaxFk", "body", string(*m.AmaxFk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amaxFk", "body", string(*m.AmaxFk), 48); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAmaxLk(formats strfmt.Registry) error {

	if swag.IsZero(m.AmaxLk) { // not required
		return nil
	}

	if err := validate.MinLength("amaxLk", "body", string(*m.AmaxLk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amaxLk", "body", string(*m.AmaxLk), 48); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAmbxFk(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbxFk) { // not required
		return nil
	}

	if err := validate.MinLength("ambxFk", "body", string(*m.AmbxFk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ambxFk", "body", string(*m.AmbxFk), 45); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAmbxLk(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbxLk) { // not required
		return nil
	}

	if err := validate.MinLength("ambxLk", "body", string(*m.AmbxLk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ambxLk", "body", string(*m.AmbxLk), 45); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAzcexFk(formats strfmt.Registry) error {

	if swag.IsZero(m.AzcexFk) { // not required
		return nil
	}

	if err := validate.MinLength("azcexFk", "body", string(*m.AzcexFk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("azcexFk", "body", string(*m.AzcexFk), 48); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAzcexLk(formats strfmt.Registry) error {

	if swag.IsZero(m.AzcexLk) { // not required
		return nil
	}

	if err := validate.MinLength("azcexLk", "body", string(*m.AzcexLk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("azcexLk", "body", string(*m.AzcexLk), 48); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAzucxFk(formats strfmt.Registry) error {

	if swag.IsZero(m.AzucxFk) { // not required
		return nil
	}

	if err := validate.MinLength("azucxFk", "body", string(*m.AzucxFk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("azucxFk", "body", string(*m.AzucxFk), 41); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateAzucxLk(formats strfmt.Registry) error {

	if swag.IsZero(m.AzucxLk) { // not required
		return nil
	}

	if err := validate.MinLength("azucxLk", "body", string(*m.AzucxLk), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("azucxLk", "body", string(*m.AzucxLk), 41); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.MinLength("clientId", "body", string(*m.ClientID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("clientId", "body", string(*m.ClientID), 5); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateDebCardIncSw(formats strfmt.Registry) error {

	if swag.IsZero(m.DebCardIncSw) { // not required
		return nil
	}

	if err := validate.MinLength("debCardIncSw", "body", string(*m.DebCardIncSw), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("debCardIncSw", "body", string(*m.DebCardIncSw), 1); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateFuncCd(formats strfmt.Registry) error {

	if swag.IsZero(m.FuncCd) { // not required
		return nil
	}

	if err := validate.MinLength("funcCd", "body", string(*m.FuncCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("funcCd", "body", string(*m.FuncCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 20); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateNbr(formats strfmt.Registry) error {

	if err := validate.Required("nbr", "body", m.Nbr); err != nil {
		return err
	}

	if err := validate.MinLength("nbr", "body", string(*m.Nbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbr", "body", string(*m.Nbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateRelationship(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationship) { // not required
		return nil
	}

	if err := validate.MinLength("relationship", "body", string(*m.Relationship), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("relationship", "body", string(*m.Relationship), 1); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateSearchTyp(formats strfmt.Registry) error {

	if err := validate.Required("searchTyp", "body", m.SearchTyp); err != nil {
		return err
	}

	if err := validate.MinLength("searchTyp", "body", string(*m.SearchTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("searchTyp", "body", string(*m.SearchTyp), 1); err != nil {
		return err
	}

	return nil
}

func (m *UniqueLocateInquiryRequest) validateViewTyp(formats strfmt.Registry) error {

	if swag.IsZero(m.ViewTyp) { // not required
		return nil
	}

	if err := validate.MinLength("viewTyp", "body", string(*m.ViewTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("viewTyp", "body", string(*m.ViewTyp), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniqueLocateInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniqueLocateInquiryRequest) UnmarshalBinary(b []byte) error {
	var res UniqueLocateInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StmtInfoTblForStatementReprintUpdate1 stmt info tbl for statement reprint update1
//
// swagger:model StmtInfoTblForStatementReprintUpdate1
type StmtInfoTblForStatementReprintUpdate1 struct {

	//  Max length = 1, Reprint Flag: Code that requests a statement reprint and identifies the address to use for each listed cycle. Requested statements are produced during the next batch processing run.  Values are: C = Reprint statement with current address P = Reprint statement with the address that existed at the time the statement was originally produced.
	ReprintFlg string `json:"reprintFlg,omitempty"`

	// Format: YYYYMMDD. Statement ID Code: Code that puts the statements records into descending date sequence.   Must be numeric. Must be a valid date. The statement date is stored in the Small and Large Statement file in CMS. Date format is CCYY-MM-DD.
	StmtDt string `json:"stmtDt,omitempty"`
}

// Validate validates this stmt info tbl for statement reprint update1
func (m *StmtInfoTblForStatementReprintUpdate1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StmtInfoTblForStatementReprintUpdate1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StmtInfoTblForStatementReprintUpdate1) UnmarshalBinary(b []byte) error {
	var res StmtInfoTblForStatementReprintUpdate1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

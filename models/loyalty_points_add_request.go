// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyPointsAddRequest loyalty points add request
//
// swagger:model LoyaltyPointsAddRequest
type LoyaltyPointsAddRequest struct {

	//  Max length = 19, LMS Account Number. If account number is not entered  LMS will auto generate the account number.  The account number should be present in account demographic records if trying to update add pending account.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AccountNbr *string `json:"accountNbr"`

	//  Max length = 25, Auto Disbursement Account: Account number that identifies the accounts receivable account to which automatic disbursements is disbursed.
	// Max Length: 25
	// Min Length: 0
	AutoDisbAcct *string `json:"autoDisbAcct,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 4, Enrollment Channel: User-defined code that identifies the method by which the account was enrolled or opened.
	// Max Length: 4
	// Min Length: 0
	EnrollmentChannel *string `json:"enrollmentChannel,omitempty"`

	// Format: YYYYMMDD. Next Statement Date: field that specifies the next date on which statement information is produced.
	// Required: true
	NextStmtDate *string `json:"nextStmtDate"`

	//  Max length = 5, Scheme ID that identifies the points scheme record assigned to the points account.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	Scheme *string `json:"scheme"`

	//  Max length = 1, Service Flag: Identifies the type of customer of this Points Account.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ServiceFlag *string `json:"serviceFlag"`

	//  Max length = 2, Statement Day Of Month: field that specifies the day of the month on which statement information is produced, used in conjunction with statement frequency months.
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtDayOfMonth *string `json:"stmtDayOfMonth"`

	//  Max length = 2, Statement Month Frequency: field that specifies the frequency the production of statement information occurs, used in conjunction with statement day of month.
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtMonthFreq *string `json:"stmtMonthFreq"`
}

// Validate validates this loyalty points add request
func (m *LoyaltyPointsAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoDisbAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnrollmentChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextStmtDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtDayOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtMonthFreq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyPointsAddRequest) validateAccountNbr(formats strfmt.Registry) error {

	if err := validate.Required("accountNbr", "body", m.AccountNbr); err != nil {
		return err
	}

	if err := validate.MinLength("accountNbr", "body", string(*m.AccountNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountNbr", "body", string(*m.AccountNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateAutoDisbAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoDisbAcct) { // not required
		return nil
	}

	if err := validate.MinLength("autoDisbAcct", "body", string(*m.AutoDisbAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("autoDisbAcct", "body", string(*m.AutoDisbAcct), 25); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateEnrollmentChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.EnrollmentChannel) { // not required
		return nil
	}

	if err := validate.MinLength("enrollmentChannel", "body", string(*m.EnrollmentChannel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("enrollmentChannel", "body", string(*m.EnrollmentChannel), 4); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateNextStmtDate(formats strfmt.Registry) error {

	if err := validate.Required("nextStmtDate", "body", m.NextStmtDate); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateScheme(formats strfmt.Registry) error {

	if err := validate.Required("scheme", "body", m.Scheme); err != nil {
		return err
	}

	if err := validate.MinLength("scheme", "body", string(*m.Scheme), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("scheme", "body", string(*m.Scheme), 5); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateServiceFlag(formats strfmt.Registry) error {

	if err := validate.Required("serviceFlag", "body", m.ServiceFlag); err != nil {
		return err
	}

	if err := validate.MinLength("serviceFlag", "body", string(*m.ServiceFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("serviceFlag", "body", string(*m.ServiceFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateStmtDayOfMonth(formats strfmt.Registry) error {

	if err := validate.Required("stmtDayOfMonth", "body", m.StmtDayOfMonth); err != nil {
		return err
	}

	if err := validate.MinLength("stmtDayOfMonth", "body", string(*m.StmtDayOfMonth), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtDayOfMonth", "body", string(*m.StmtDayOfMonth), 2); err != nil {
		return err
	}

	if err := validate.Pattern("stmtDayOfMonth", "body", string(*m.StmtDayOfMonth), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAddRequest) validateStmtMonthFreq(formats strfmt.Registry) error {

	if err := validate.Required("stmtMonthFreq", "body", m.StmtMonthFreq); err != nil {
		return err
	}

	if err := validate.MinLength("stmtMonthFreq", "body", string(*m.StmtMonthFreq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtMonthFreq", "body", string(*m.StmtMonthFreq), 2); err != nil {
		return err
	}

	if err := validate.Pattern("stmtMonthFreq", "body", string(*m.StmtMonthFreq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyPointsAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyPointsAddRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltyPointsAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

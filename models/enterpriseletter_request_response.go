// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnterpriseletterRequestResponse enterpriseletter request response
//
// swagger:model EnterpriseletterRequestResponse
type EnterpriseletterRequestResponse struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 60, Email: E-mail address of the cardholder.
	Email string `json:"email,omitempty"`

	//  Max length = 11, ASM case number from input message.
	KiAsmCase string `json:"kiAsmCase,omitempty"`

	//  Max length = 16, CDM Application ON LTAR01
	KiCdmAppl string `json:"kiCdmAppl,omitempty"`

	//  Max length = 1, CDM Association on LTAR01.
	KiCdmAssoc string `json:"kiCdmAssoc,omitempty"`

	//  Max length = 3, CDM Organization on LTAR01.
	KiCdmOrg string `json:"kiCdmOrg,omitempty"`

	//  Max length = 1, CDM Select: Returns value from input messageAPPL on LTAR01.
	KiCdmSelect string `json:"kiCdmSelect,omitempty"`

	//  Max length = 3, CDM Type on LTAR01.
	KiCdmType string `json:"kiCdmType,omitempty"`

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	KiCmsAcct string `json:"kiCmsAcct,omitempty"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card.
	KiCmsCardSeq string `json:"kiCmsCardSeq,omitempty"`

	//  Max length = 3, Foreign Account CMS Organization on ARMB01. A value in this field is returned if the request was for the foreign account.
	KiCmsForeignOrg string `json:"kiCmsForeignOrg,omitempty"`

	//  Max length = 3, Identification number of the logo.
	KiCmsLogo string `json:"kiCmsLogo,omitempty"`

	//  Max length = 3, Local Account CMS Organization on ARMB01. A value in this field is returned if the request was for the local account.
	KiCmsOrg string `json:"kiCmsOrg,omitempty"`

	//  Max length = 1, CMS Select: Returns value from input messageAPPL on LTAR01.
	KiCmsSelect string `json:"kiCmsSelect,omitempty"`

	//  Max length = 1, Foreign Use value received from input.
	KiForeignUse string `json:"kiForeignUse,omitempty"`

	//  Max length = 19, HCS Account Number on HCMN01.
	KiHcsAcct string `json:"kiHcsAcct,omitempty"`

	//  Max length = 2, HCS Level on HCMN00.
	KiHcsLevel string `json:"kiHcsLevel,omitempty"`

	//  Max length = 9, HCS Node on HCMN00.
	KiHcsNode string `json:"kiHcsNode,omitempty"`

	//  Max length = 3, HCS Organization on HCMN01.
	KiHcsOrg string `json:"kiHcsOrg,omitempty"`

	//  Max length = 1, HCS Select: Returns value from input messageAPPL on LTAR01.
	KiHcsSelect string `json:"kiHcsSelect,omitempty"`

	//  Max length = 1, MBS Store Merchant indicator provided in input.
	KiMbsFlag string `json:"kiMbsFlag,omitempty"`

	//  Max length = 9, MBS Merchant Store Number on MBMM01 or MBMS01.
	KiMbsKey string `json:"kiMbsKey,omitempty"`

	//  Max length = 3, MBS Organization on MBMM01 or MBMS01 .
	KiMbsOrg string `json:"kiMbsOrg,omitempty"`

	//  Max length = 1, MBS Select: Returns value from input messageAPPL on LTAR01.
	KiMbsSelect string `json:"kiMbsSelect,omitempty"`

	//  Max length = 3, Letter code of letter defined in LTS/ENTERPRISE. Letter code must be valid for the LETTER ORG provided.
	LtrCd string `json:"ltrCd,omitempty"`

	//  Max length = 1, Letter Destination: Returns value from input message.
	LtrDest string `json:"ltrDest,omitempty"`

	//  Max length = 3, Letter Organization: Three digit Identification number of the organization (as displayed on LTAR1).
	LtrOrg string `json:"ltrOrg,omitempty"`

	//  Max length = 1, Letter Request Status. Values are: 0 = Letter not generated. 1 = Letter generated and returned to requestor in output message 2 = Letter is generated in next batch run 3 = Letter generated, returned to requestor in output message and is generated also in next batch run 4 = Letter generated, sent to CICS Printer, returned to requestor in output message, will also be generated in next batch run.
	LtrSts string `json:"ltrSts,omitempty"`

	// Letter Text Group; Occurs 125 times.
	LtrText []*LtrTextForEnterpriseletterRequest1 `json:"ltrText"`

	//  Max length = 20, Mobile number of the accountholder.
	MobilePhone string `json:"mobilePhone,omitempty"`

	//  Max length = 3, Number of lines of letter text.
	MsgLines string `json:"msgLines,omitempty"`

	//  Max length = 4, Printer ID: Returns value from input message.
	PrinterID string `json:"printerId,omitempty"`

	//  Max length = 1, REQ TYPE
	ReqType string `json:"reqType,omitempty"`
}

// Validate validates this enterpriseletter request response
func (m *EnterpriseletterRequestResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnterpriseletterRequestResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *EnterpriseletterRequestResponse) validateLtrText(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrText) { // not required
		return nil
	}

	for i := 0; i < len(m.LtrText); i++ {
		if swag.IsZero(m.LtrText[i]) { // not required
			continue
		}

		if m.LtrText[i] != nil {
			if err := m.LtrText[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ltrText" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnterpriseletterRequestResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnterpriseletterRequestResponse) UnmarshalBinary(b []byte) error {
	var res EnterpriseletterRequestResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

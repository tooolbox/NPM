// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductBlockCodeListRequest product block code list request
//
// swagger:model ProductBlockCodeListRequest
type ProductBlockCodeListRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Max Length: 19
	// Min Length: 0
	AcctCard *string `json:"acctCard,omitempty"`

	//  Max length = 1, ATOZ PRI ZERO SW
	// Max Length: 1
	// Min Length: 0
	AtozPriZeroSw *string `json:"atozPriZeroSw,omitempty"`

	//  Max length = 1, Exclude Block Code A Switch. Supply ‘1’ to exclude block code A in the response
	// Max Length: 1
	// Min Length: 0
	BcSwA *string `json:"bcSwA,omitempty"`

	//  Max length = 1, Exclude Block Code B Switch. Supply ‘1’ to exclude block code B in the response
	// Max Length: 1
	// Min Length: 0
	BcSwB *string `json:"bcSwB,omitempty"`

	//  Max length = 1, Exclude Block Code C Switch. Supply ‘1’ to exclude block code C in the response
	// Max Length: 1
	// Min Length: 0
	BcSwC *string `json:"bcSwC,omitempty"`

	//  Max length = 1, Exclude Block Code D Switch. Supply ‘1’ to exclude block code D in the response
	// Max Length: 1
	// Min Length: 0
	BcSwD *string `json:"bcSwD,omitempty"`

	//  Max length = 1, Exclude Block Code E Switch. Supply ‘1’ to exclude block code E in the response
	// Max Length: 1
	// Min Length: 0
	BcSwE *string `json:"bcSwE,omitempty"`

	//  Max length = 1, Exclude Block Code F Switch. Supply ‘1’ to exclude block code F in the response
	// Max Length: 1
	// Min Length: 0
	BcSwF *string `json:"bcSwF,omitempty"`

	//  Max length = 1, Exclude Block Code G Switch. Supply ‘1’ to exclude block code G in the response
	// Max Length: 1
	// Min Length: 0
	BcSwG *string `json:"bcSwG,omitempty"`

	//  Max length = 1, Exclude Block Code H Switch. Supply ‘1’ to exclude block code H in the response
	// Max Length: 1
	// Min Length: 0
	BcSwH *string `json:"bcSwH,omitempty"`

	//  Max length = 1, Exclude Block Code I Switch. Supply ‘1’ to exclude block code I in the response
	// Max Length: 1
	// Min Length: 0
	BcSwI *string `json:"bcSwI,omitempty"`

	//  Max length = 1, Exclude Block Code J Switch. Supply ‘1’ to exclude block code J in the response
	// Max Length: 1
	// Min Length: 0
	BcSwJ *string `json:"bcSwJ,omitempty"`

	//  Max length = 1, Exclude Block Code K Switch. Supply ‘1’ to exclude block code K in the response
	// Max Length: 1
	// Min Length: 0
	BcSwK *string `json:"bcSwK,omitempty"`

	//  Max length = 1, Exclude Block Code L Switch. Supply ‘1’ to exclude block code L in the response
	// Max Length: 1
	// Min Length: 0
	BcSwL *string `json:"bcSwL,omitempty"`

	//  Max length = 1, Exclude Block Code M Switch. Supply ‘1’ to exclude block code M in the response
	// Max Length: 1
	// Min Length: 0
	BcSwM *string `json:"bcSwM,omitempty"`

	//  Max length = 1, Exclude Block Code N Switch. Supply ‘1’ to exclude block code N in the response
	// Max Length: 1
	// Min Length: 0
	BcSwN *string `json:"bcSwN,omitempty"`

	//  Max length = 1, Exclude Block Code O Switch. Supply ‘1’ to exclude block code O in the response
	// Max Length: 1
	// Min Length: 0
	BcSwO *string `json:"bcSwO,omitempty"`

	//  Max length = 1, Exclude Block Code P Switch. Supply ‘1’ to exclude block code P in the response
	// Max Length: 1
	// Min Length: 0
	BcSwP *string `json:"bcSwP,omitempty"`

	//  Max length = 1, Exclude Block Code Q Switch. Supply ‘1’ to exclude block code Q in the response
	// Max Length: 1
	// Min Length: 0
	BcSwQ *string `json:"bcSwQ,omitempty"`

	//  Max length = 1, Exclude Block Code R Switch. Supply ‘1’ to exclude block code R in the response
	// Max Length: 1
	// Min Length: 0
	BcSwR *string `json:"bcSwR,omitempty"`

	//  Max length = 1, Exclude Block Code S Switch. Supply ‘1’ to exclude block code S in the response
	// Max Length: 1
	// Min Length: 0
	BcSwS *string `json:"bcSwS,omitempty"`

	//  Max length = 1, Exclude Block Code Space Switch. Supply ‘1’ to exclude block code Space in the response
	// Max Length: 1
	// Min Length: 0
	BcSwSpace *string `json:"bcSwSpace,omitempty"`

	//  Max length = 1, Exclude Block Code T Switch. Supply ‘1’ to exclude block code T in the response
	// Max Length: 1
	// Min Length: 0
	BcSwT *string `json:"bcSwT,omitempty"`

	//  Max length = 1, Exclude Block Code U Switch. Supply ‘1’ to exclude block code U in the response
	// Max Length: 1
	// Min Length: 0
	BcSwU *string `json:"bcSwU,omitempty"`

	//  Max length = 1, Exclude Block Code V Switch. Supply ‘1’ to exclude block code V in the response
	// Max Length: 1
	// Min Length: 0
	BcSwV *string `json:"bcSwV,omitempty"`

	//  Max length = 1, Exclude Block Code W Switch. Supply ‘1’ to exclude block code W in the response
	// Max Length: 1
	// Min Length: 0
	BcSwW *string `json:"bcSwW,omitempty"`

	//  Max length = 1, Exclude Block Code X Switch. Supply ‘1’ to exclude block code X in the response
	// Max Length: 1
	// Min Length: 0
	BcSwX *string `json:"bcSwX,omitempty"`

	//  Max length = 1, Exclude Block Code Y Switch. Supply ‘1’ to exclude block code Y in the response
	// Max Length: 1
	// Min Length: 0
	BcSwY *string `json:"bcSwY,omitempty"`

	//  Max length = 1, Exclude Block Code Z Switch. Supply ‘1’ to exclude block code Z in the response
	// Max Length: 1
	// Min Length: 0
	BcSwZ *string `json:"bcSwZ,omitempty"`

	//  Max length = 1, Code or optional switch to include/exclude empty or blank description block codes for this request. Valid Value: 1 - Include blank description block codes  0, Low Values, space - Exlcude blank description block codes
	// Max Length: 1
	// Min Length: 0
	BlankDescSw *string `json:"blankDescSw,omitempty"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card. 1. Must be numeric and greater than 0 if provided 2. Must be between 0 and 99 if smart card 3. If not provided, and not a smart card, default to value of 0001
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Option swtich to sort the current block codes at the top of the service response. (i.e. in the first few occurences of service response block code table area) Valid Values: 1 - Current BC first 0, Low Values, Spaces - Current BC not first
	// Max Length: 1
	// Min Length: 0
	CurrBcFirstSw *string `json:"currBcFirstSw,omitempty"`

	//  Max length = 1, Option switch to include/exclude current (account blk 1 & 2/card) block codes in the service output. Valid Value: 1 - Exclude current block codes in service response. 0, Low Values, space - Include current block codes in service response.
	// Max Length: 1
	// Min Length: 0
	CurrBcSw *string `json:"currBcSw,omitempty"`

	//  Max length = 1, Code to indicate/request which block code to process. Valid values are: <UL><LI> <em>1 - </EM>Account Block Code 1 </LI><LI> <em>2 - </EM>Account Block Code 2 </LI><LI><em>C - </EM>Card/Embosser Block code</LI></UL>
	// Max Length: 1
	// Min Length: 0
	FuncCode *string `json:"funcCode,omitempty"`
}

// Validate validates this product block code list request
func (m *ProductBlockCodeListRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtozPriZeroSw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwF(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwG(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwJ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwK(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwV(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwW(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcSwZ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlankDescSw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrBcFirstSw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrBcSw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductBlockCodeListRequest) validateAcctCard(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctCard) { // not required
		return nil
	}

	if err := validate.MinLength("acctCard", "body", string(*m.AcctCard), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctCard", "body", string(*m.AcctCard), 19); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateAtozPriZeroSw(formats strfmt.Registry) error {

	if swag.IsZero(m.AtozPriZeroSw) { // not required
		return nil
	}

	if err := validate.MinLength("atozPriZeroSw", "body", string(*m.AtozPriZeroSw), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("atozPriZeroSw", "body", string(*m.AtozPriZeroSw), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwA(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwA) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwA", "body", string(*m.BcSwA), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwA", "body", string(*m.BcSwA), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwB(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwB) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwB", "body", string(*m.BcSwB), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwB", "body", string(*m.BcSwB), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwC(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwC) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwC", "body", string(*m.BcSwC), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwC", "body", string(*m.BcSwC), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwD(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwD) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwD", "body", string(*m.BcSwD), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwD", "body", string(*m.BcSwD), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwE(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwE) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwE", "body", string(*m.BcSwE), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwE", "body", string(*m.BcSwE), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwF(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwF) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwF", "body", string(*m.BcSwF), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwF", "body", string(*m.BcSwF), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwG(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwG) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwG", "body", string(*m.BcSwG), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwG", "body", string(*m.BcSwG), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwH(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwH) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwH", "body", string(*m.BcSwH), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwH", "body", string(*m.BcSwH), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwI(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwI) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwI", "body", string(*m.BcSwI), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwI", "body", string(*m.BcSwI), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwJ(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwJ) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwJ", "body", string(*m.BcSwJ), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwJ", "body", string(*m.BcSwJ), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwK(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwK) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwK", "body", string(*m.BcSwK), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwK", "body", string(*m.BcSwK), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwL(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwL) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwL", "body", string(*m.BcSwL), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwL", "body", string(*m.BcSwL), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwM(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwM) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwM", "body", string(*m.BcSwM), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwM", "body", string(*m.BcSwM), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwN(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwN) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwN", "body", string(*m.BcSwN), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwN", "body", string(*m.BcSwN), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwO(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwO) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwO", "body", string(*m.BcSwO), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwO", "body", string(*m.BcSwO), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwP(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwP) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwP", "body", string(*m.BcSwP), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwP", "body", string(*m.BcSwP), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwQ(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwQ) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwQ", "body", string(*m.BcSwQ), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwQ", "body", string(*m.BcSwQ), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwR(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwR) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwR", "body", string(*m.BcSwR), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwR", "body", string(*m.BcSwR), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwS(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwS) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwS", "body", string(*m.BcSwS), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwS", "body", string(*m.BcSwS), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwSpace(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwSpace) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwSpace", "body", string(*m.BcSwSpace), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwSpace", "body", string(*m.BcSwSpace), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwT(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwT) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwT", "body", string(*m.BcSwT), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwT", "body", string(*m.BcSwT), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwU(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwU) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwU", "body", string(*m.BcSwU), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwU", "body", string(*m.BcSwU), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwV(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwV) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwV", "body", string(*m.BcSwV), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwV", "body", string(*m.BcSwV), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwW(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwW) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwW", "body", string(*m.BcSwW), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwW", "body", string(*m.BcSwW), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwX(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwX) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwX", "body", string(*m.BcSwX), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwX", "body", string(*m.BcSwX), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwY(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwY) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwY", "body", string(*m.BcSwY), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwY", "body", string(*m.BcSwY), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBcSwZ(formats strfmt.Registry) error {

	if swag.IsZero(m.BcSwZ) { // not required
		return nil
	}

	if err := validate.MinLength("bcSwZ", "body", string(*m.BcSwZ), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bcSwZ", "body", string(*m.BcSwZ), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateBlankDescSw(formats strfmt.Registry) error {

	if swag.IsZero(m.BlankDescSw) { // not required
		return nil
	}

	if err := validate.MinLength("blankDescSw", "body", string(*m.BlankDescSw), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blankDescSw", "body", string(*m.BlankDescSw), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateCurrBcFirstSw(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrBcFirstSw) { // not required
		return nil
	}

	if err := validate.MinLength("currBcFirstSw", "body", string(*m.CurrBcFirstSw), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currBcFirstSw", "body", string(*m.CurrBcFirstSw), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateCurrBcSw(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrBcSw) { // not required
		return nil
	}

	if err := validate.MinLength("currBcSw", "body", string(*m.CurrBcSw), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currBcSw", "body", string(*m.CurrBcSw), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductBlockCodeListRequest) validateFuncCode(formats strfmt.Registry) error {

	if swag.IsZero(m.FuncCode) { // not required
		return nil
	}

	if err := validate.MinLength("funcCode", "body", string(*m.FuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("funcCode", "body", string(*m.FuncCode), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductBlockCodeListRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductBlockCodeListRequest) UnmarshalBinary(b []byte) error {
	var res ProductBlockCodeListRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

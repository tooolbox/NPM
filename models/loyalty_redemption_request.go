// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyRedemptionRequest loyalty redemption request
//
// swagger:model LoyaltyRedemptionRequest
type LoyaltyRedemptionRequest struct {

	//  Max length = 19, LMS Account Number: Identification Number of Customer's account. Must be numeric and greater than zero. This should be valid Account number. If Card number has been entered, then account number is not required.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	// Coupon Data Group; Occurs 7 times (within transaction data level)
	CpnData []*CpnDataForLoyaltyRedemption1 `json:"cpnData"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided If not entered, then Account Number and Scheme ID are required.
	// Max Length: 19
	// Min Length: 0
	CrdNbr *string `json:"crdNbr,omitempty"`

	//  Max length = 26, Embossed Name 1: Name embossed on the first embossing line of the card.
	// Max Length: 26
	// Min Length: 0
	Name1 *string `json:"name1,omitempty"`

	//  Max length = 26, Embossed Name 2: Name embossed on the second embossing line of the card.
	// Max Length: 26
	// Min Length: 0
	Name2 *string `json:"name2,omitempty"`

	//  Max length = 19, Prepaid Card Number.
	// Max Length: 19
	// Min Length: 0
	PpdCrdNbr *string `json:"ppdCrdNbr,omitempty"`

	//  Max length = 17, PTS
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Pts *string `json:"pts,omitempty"`

	//  Max length = 2, User-defined reason code for this points transaction.
	// Max Length: 2
	// Min Length: 0
	RsnCd *string `json:"rsnCd,omitempty"`

	//  Max length = 19, Reward item name that identifies the Reward Item record assigned to the transaction.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	RwdItm *string `json:"rwdItm"`

	//  Max length = 5, Scheme ID that identifies the points scheme record assigned to the points account.  If Card number had been entered, then scheme-id should not be required, else scheme-id is required
	// Max Length: 5
	// Min Length: 0
	SchmID *string `json:"schmId,omitempty"`

	//  Max length = 26, User defined data.
	// Max Length: 26
	// Min Length: 0
	UsrData *string `json:"usrData,omitempty"`
}

// Validate validates this loyalty redemption request
func (m *LoyaltyRedemptionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpnData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpdCrdNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsnCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRwdItm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchmID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsrData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyRedemptionRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateCpnData(formats strfmt.Registry) error {

	if swag.IsZero(m.CpnData) { // not required
		return nil
	}

	for i := 0; i < len(m.CpnData); i++ {
		if swag.IsZero(m.CpnData[i]) { // not required
			continue
		}

		if m.CpnData[i] != nil {
			if err := m.CpnData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpnData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateCrdNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdNbr) { // not required
		return nil
	}

	if err := validate.MinLength("crdNbr", "body", string(*m.CrdNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdNbr", "body", string(*m.CrdNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateName1(formats strfmt.Registry) error {

	if swag.IsZero(m.Name1) { // not required
		return nil
	}

	if err := validate.MinLength("name1", "body", string(*m.Name1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name1", "body", string(*m.Name1), 26); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateName2(formats strfmt.Registry) error {

	if swag.IsZero(m.Name2) { // not required
		return nil
	}

	if err := validate.MinLength("name2", "body", string(*m.Name2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name2", "body", string(*m.Name2), 26); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validatePpdCrdNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.PpdCrdNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ppdCrdNbr", "body", string(*m.PpdCrdNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ppdCrdNbr", "body", string(*m.PpdCrdNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validatePts(formats strfmt.Registry) error {

	if swag.IsZero(m.Pts) { // not required
		return nil
	}

	if err := validate.MinLength("pts", "body", string(*m.Pts), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pts", "body", string(*m.Pts), 17); err != nil {
		return err
	}

	if err := validate.Pattern("pts", "body", string(*m.Pts), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateRsnCd(formats strfmt.Registry) error {

	if swag.IsZero(m.RsnCd) { // not required
		return nil
	}

	if err := validate.MinLength("rsnCd", "body", string(*m.RsnCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rsnCd", "body", string(*m.RsnCd), 2); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateRwdItm(formats strfmt.Registry) error {

	if err := validate.Required("rwdItm", "body", m.RwdItm); err != nil {
		return err
	}

	if err := validate.MinLength("rwdItm", "body", string(*m.RwdItm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rwdItm", "body", string(*m.RwdItm), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateSchmID(formats strfmt.Registry) error {

	if swag.IsZero(m.SchmID) { // not required
		return nil
	}

	if err := validate.MinLength("schmId", "body", string(*m.SchmID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("schmId", "body", string(*m.SchmID), 5); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyRedemptionRequest) validateUsrData(formats strfmt.Registry) error {

	if swag.IsZero(m.UsrData) { // not required
		return nil
	}

	if err := validate.MinLength("usrData", "body", string(*m.UsrData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("usrData", "body", string(*m.UsrData), 26); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyRedemptionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyRedemptionRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltyRedemptionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

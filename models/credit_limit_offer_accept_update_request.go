// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditLimitOfferAcceptUpdateRequest credit limit offer accept update request
//
// swagger:model CreditLimitOfferAcceptUpdateRequest
type CreditLimitOfferAcceptUpdateRequest struct {

	//  Max length = 1, Acceptance indicator - Cardholder may want to opt in (value 'A') or opt out (value 'D') of a Credit Limit Offer. Incoming value should be either 'A' or 'D'. Any other value (including space or Low-values) is considered an invalid value.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	AcceptInd *string `json:"acceptInd"`

	//  Max length = 19, Account or Card Number: Number of Customer's account or Card. Must be numeric and greater than zero.  Enter an account number to search for a match on the Account Base Segment record or card number to search for a match on the Embossing Record.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctCard *string `json:"acctCard"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Dual Indicator: Dual Account Flag of account.Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`
}

// Validate validates this credit limit offer accept update request
func (m *CreditLimitOfferAcceptUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditLimitOfferAcceptUpdateRequest) validateAcceptInd(formats strfmt.Registry) error {

	if err := validate.Required("acceptInd", "body", m.AcceptInd); err != nil {
		return err
	}

	if err := validate.MinLength("acceptInd", "body", string(*m.AcceptInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acceptInd", "body", string(*m.AcceptInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitOfferAcceptUpdateRequest) validateAcctCard(formats strfmt.Registry) error {

	if err := validate.Required("acctCard", "body", m.AcctCard); err != nil {
		return err
	}

	if err := validate.MinLength("acctCard", "body", string(*m.AcctCard), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctCard", "body", string(*m.AcctCard), 19); err != nil {
		return err
	}

	return nil
}

func (m *CreditLimitOfferAcceptUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CreditLimitOfferAcceptUpdateRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditLimitOfferAcceptUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditLimitOfferAcceptUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CreditLimitOfferAcceptUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

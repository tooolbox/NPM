// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountUserFieldsUpdateRequest account user fields update request
//
// swagger:model AccountUserFieldsUpdateRequest
type AccountUserFieldsUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 20, Credit application user field 3. User-defined information about the account holder's credit application
	// Max Length: 20
	// Min Length: 0
	ApplUser3 *string `json:"applUser3,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUseFlag *string `json:"foreignUseFlag,omitempty"`

	//  Max length = 30, Miscellaneous user field 1. User-defined miscellaneous information about the account.
	// Max Length: 30
	// Min Length: 0
	MiscUser1 *string `json:"miscUser1,omitempty"`

	//  Max length = 2, Miscellaneous user field 10. User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser10 *string `json:"miscUser10,omitempty"`

	//  Max length = 2, Miscellaneous user field 11. User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser11 *string `json:"miscUser11,omitempty"`

	//  Max length = 2, Miscellaneous user field 12. User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser12 *string `json:"miscUser12,omitempty"`

	//  Max length = 1, Miscellaneous user field 2. User-defined miscellaneous information about the account.
	// Max Length: 1
	// Min Length: 0
	MiscUser2 *string `json:"miscUser2,omitempty"`

	//  Max length = 11, Miscellaneous user field 3. User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser3 *string `json:"miscUser3,omitempty"`

	//  Max length = 11, Miscellaneous user field 4. User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser4 *string `json:"miscUser4,omitempty"`

	//  Max length = 11, Miscellaneous user field 5. User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser5 *string `json:"miscUser5,omitempty"`

	//  Max length = 11, Miscellaneous user field 6. User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser6 *string `json:"miscUser6,omitempty"`

	//  Max length = 11, Miscellaneous user field 7. User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser7 *string `json:"miscUser7,omitempty"`

	//  Max length = 11, Miscellaneous user field 8. User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser8 *string `json:"miscUser8,omitempty"`

	//  Max length = 2, Miscellaneous user field 9. User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser9 *string `json:"miscUser9,omitempty"`

	//  Max length = 17, User Amount 1. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt1 string `json:"userAmt1,omitempty"`

	//  Max length = 17, User Amount 10. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt10 string `json:"userAmt10,omitempty"`

	//  Max length = 17, User Amount 11. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt11 string `json:"userAmt11,omitempty"`

	//  Max length = 17, User Amount 12. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt12 string `json:"userAmt12,omitempty"`

	//  Max length = 17, User Amount 13 User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt13 string `json:"userAmt13,omitempty"`

	//  Max length = 17, User Amount 14. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt14 string `json:"userAmt14,omitempty"`

	//  Max length = 17, User Amount 2. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt2 string `json:"userAmt2,omitempty"`

	//  Max length = 17, User Amount 3. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt3 string `json:"userAmt3,omitempty"`

	//  Max length = 17, User Amount 4. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt4 string `json:"userAmt4,omitempty"`

	//  Max length = 17, User Amount 5. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt5 string `json:"userAmt5,omitempty"`

	//  Max length = 17, User Amount 6. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt6 string `json:"userAmt6,omitempty"`

	//  Max length = 17, User Amount 7. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt7 string `json:"userAmt7,omitempty"`

	//  Max length = 17, User Amount 8. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt8 string `json:"userAmt8,omitempty"`

	//  Max length = 17, User Amount 9. User-defined amounts used for customized information about the account.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt9 string `json:"userAmt9,omitempty"`

	//  Max length = 2, User defined code 1.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode1 *string `json:"userCode1,omitempty"`

	//  Max length = 2, User defined code 10.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode10 *string `json:"userCode10,omitempty"`

	//  Max length = 2, User defined code 11.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode11 *string `json:"userCode11,omitempty"`

	//  Max length = 2, User defined code 12.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode12 *string `json:"userCode12,omitempty"`

	//  Max length = 2, User defined code 13.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode13 *string `json:"userCode13,omitempty"`

	//  Max length = 2, User defined code 14.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode14 *string `json:"userCode14,omitempty"`

	//  Max length = 2, User defined code 2.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode2 *string `json:"userCode2,omitempty"`

	//  Max length = 2, User defined code 3.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode3 *string `json:"userCode3,omitempty"`

	//  Max length = 2, User defined code 4.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode4 *string `json:"userCode4,omitempty"`

	//  Max length = 2, User defined code 5.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode5 *string `json:"userCode5,omitempty"`

	//  Max length = 2, User defined code 6.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode6 *string `json:"userCode6,omitempty"`

	//  Max length = 2, User defined code 7.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode7 *string `json:"userCode7,omitempty"`

	//  Max length = 2, User defined code 8.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode8 *string `json:"userCode8,omitempty"`

	//  Max length = 2, User defined code 9.  User-defined codes used for customized iformation about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode9 *string `json:"userCode9,omitempty"`

	// Format: YYYYDDD. User defined date 1. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate1 *string `json:"userDate1,omitempty"`

	// Format: YYYYDDD. User defined date 10. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate10 *string `json:"userDate10,omitempty"`

	// Format: YYYYDDD. User defined date 11. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate11 *string `json:"userDate11,omitempty"`

	// Format: YYYYDDD. User defined date 12. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate12 *string `json:"userDate12,omitempty"`

	// Format: YYYYDDD. User defined date 13. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate13 *string `json:"userDate13,omitempty"`

	// Format: YYYYDDD. User defined date 14. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate14 *string `json:"userDate14,omitempty"`

	// Format: YYYYDDD. User defined date 2. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate2 *string `json:"userDate2,omitempty"`

	// Format: YYYYDDD. User defined date 3. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate3 *string `json:"userDate3,omitempty"`

	// Format: YYYYDDD. User defined date 4. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate4 *string `json:"userDate4,omitempty"`

	// Format: YYYYDDD. User defined date 5. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate5 *string `json:"userDate5,omitempty"`

	// Format: YYYYDDD. User defined date 6. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate6 *string `json:"userDate6,omitempty"`

	// Format: YYYYDDD. User defined date 7. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate7 *string `json:"userDate7,omitempty"`

	// Format: YYYYDDD. User defined date 8. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate8 *string `json:"userDate8,omitempty"`

	// Format: YYYYDDD. User defined date 9. User-defined dates used for customized information about the account.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserDate9 *string `json:"userDate9,omitempty"`
}

// Validate validates this account user fields update request
func (m *AccountUserFieldsUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUseFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateApplUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplUser3) { // not required
		return nil
	}

	if err := validate.MinLength("applUser3", "body", string(*m.ApplUser3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("applUser3", "body", string(*m.ApplUser3), 20); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateForeignUseFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUseFlag) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUseFlag", "body", string(*m.ForeignUseFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUseFlag", "body", string(*m.ForeignUseFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser1) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser1", "body", string(*m.MiscUser1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser1", "body", string(*m.MiscUser1), 30); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser10(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser10) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser10", "body", string(*m.MiscUser10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser10", "body", string(*m.MiscUser10), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser11(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser11) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser11", "body", string(*m.MiscUser11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser11", "body", string(*m.MiscUser11), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser12(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser12) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser12", "body", string(*m.MiscUser12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser12", "body", string(*m.MiscUser12), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser2) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser2", "body", string(*m.MiscUser2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser2", "body", string(*m.MiscUser2), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser3) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser3", "body", string(*m.MiscUser3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser3", "body", string(*m.MiscUser3), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser4) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser4", "body", string(*m.MiscUser4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser4", "body", string(*m.MiscUser4), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser5) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser5", "body", string(*m.MiscUser5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser5", "body", string(*m.MiscUser5), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser6) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser6", "body", string(*m.MiscUser6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser6", "body", string(*m.MiscUser6), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser7) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser7", "body", string(*m.MiscUser7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser7", "body", string(*m.MiscUser7), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser8) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser8", "body", string(*m.MiscUser8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser8", "body", string(*m.MiscUser8), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateMiscUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser9) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser9", "body", string(*m.MiscUser9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser9", "body", string(*m.MiscUser9), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt1) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt1", "body", string(m.UserAmt1), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt10(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt10) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt10", "body", string(m.UserAmt10), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt11(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt11) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt11", "body", string(m.UserAmt11), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt12(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt12) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt12", "body", string(m.UserAmt12), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt13(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt13) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt13", "body", string(m.UserAmt13), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt14(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt14) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt14", "body", string(m.UserAmt14), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt2) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt2", "body", string(m.UserAmt2), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt3) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt3", "body", string(m.UserAmt3), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt4) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt4", "body", string(m.UserAmt4), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt5) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt5", "body", string(m.UserAmt5), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt6) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt6", "body", string(m.UserAmt6), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt7(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt7) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt7", "body", string(m.UserAmt7), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt8(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt8) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt8", "body", string(m.UserAmt8), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserAmt9(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt9) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt9", "body", string(m.UserAmt9), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode1) { // not required
		return nil
	}

	if err := validate.MinLength("userCode1", "body", string(*m.UserCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode1", "body", string(*m.UserCode1), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode10(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode10) { // not required
		return nil
	}

	if err := validate.MinLength("userCode10", "body", string(*m.UserCode10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode10", "body", string(*m.UserCode10), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode11(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode11) { // not required
		return nil
	}

	if err := validate.MinLength("userCode11", "body", string(*m.UserCode11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode11", "body", string(*m.UserCode11), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode12(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode12) { // not required
		return nil
	}

	if err := validate.MinLength("userCode12", "body", string(*m.UserCode12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode12", "body", string(*m.UserCode12), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode13(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode13) { // not required
		return nil
	}

	if err := validate.MinLength("userCode13", "body", string(*m.UserCode13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode13", "body", string(*m.UserCode13), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode14(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode14) { // not required
		return nil
	}

	if err := validate.MinLength("userCode14", "body", string(*m.UserCode14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode14", "body", string(*m.UserCode14), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode2) { // not required
		return nil
	}

	if err := validate.MinLength("userCode2", "body", string(*m.UserCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode2", "body", string(*m.UserCode2), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode3) { // not required
		return nil
	}

	if err := validate.MinLength("userCode3", "body", string(*m.UserCode3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode3", "body", string(*m.UserCode3), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode4) { // not required
		return nil
	}

	if err := validate.MinLength("userCode4", "body", string(*m.UserCode4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode4", "body", string(*m.UserCode4), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode5) { // not required
		return nil
	}

	if err := validate.MinLength("userCode5", "body", string(*m.UserCode5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode5", "body", string(*m.UserCode5), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode6) { // not required
		return nil
	}

	if err := validate.MinLength("userCode6", "body", string(*m.UserCode6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode6", "body", string(*m.UserCode6), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode7(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode7) { // not required
		return nil
	}

	if err := validate.MinLength("userCode7", "body", string(*m.UserCode7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode7", "body", string(*m.UserCode7), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode8(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode8) { // not required
		return nil
	}

	if err := validate.MinLength("userCode8", "body", string(*m.UserCode8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode8", "body", string(*m.UserCode8), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserCode9(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode9) { // not required
		return nil
	}

	if err := validate.MinLength("userCode9", "body", string(*m.UserCode9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode9", "body", string(*m.UserCode9), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate1) { // not required
		return nil
	}

	if err := validate.MinLength("userDate1", "body", string(*m.UserDate1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate1", "body", string(*m.UserDate1), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate1", "body", string(*m.UserDate1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate10(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate10) { // not required
		return nil
	}

	if err := validate.MinLength("userDate10", "body", string(*m.UserDate10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate10", "body", string(*m.UserDate10), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate10", "body", string(*m.UserDate10), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate11(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate11) { // not required
		return nil
	}

	if err := validate.MinLength("userDate11", "body", string(*m.UserDate11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate11", "body", string(*m.UserDate11), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate11", "body", string(*m.UserDate11), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate12(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate12) { // not required
		return nil
	}

	if err := validate.MinLength("userDate12", "body", string(*m.UserDate12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate12", "body", string(*m.UserDate12), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate12", "body", string(*m.UserDate12), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate13(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate13) { // not required
		return nil
	}

	if err := validate.MinLength("userDate13", "body", string(*m.UserDate13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate13", "body", string(*m.UserDate13), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate13", "body", string(*m.UserDate13), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate14(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate14) { // not required
		return nil
	}

	if err := validate.MinLength("userDate14", "body", string(*m.UserDate14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate14", "body", string(*m.UserDate14), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate14", "body", string(*m.UserDate14), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate2) { // not required
		return nil
	}

	if err := validate.MinLength("userDate2", "body", string(*m.UserDate2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate2", "body", string(*m.UserDate2), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate2", "body", string(*m.UserDate2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate3) { // not required
		return nil
	}

	if err := validate.MinLength("userDate3", "body", string(*m.UserDate3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate3", "body", string(*m.UserDate3), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate3", "body", string(*m.UserDate3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate4) { // not required
		return nil
	}

	if err := validate.MinLength("userDate4", "body", string(*m.UserDate4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate4", "body", string(*m.UserDate4), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate4", "body", string(*m.UserDate4), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate5) { // not required
		return nil
	}

	if err := validate.MinLength("userDate5", "body", string(*m.UserDate5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate5", "body", string(*m.UserDate5), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate5", "body", string(*m.UserDate5), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate6) { // not required
		return nil
	}

	if err := validate.MinLength("userDate6", "body", string(*m.UserDate6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate6", "body", string(*m.UserDate6), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate6", "body", string(*m.UserDate6), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate7(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate7) { // not required
		return nil
	}

	if err := validate.MinLength("userDate7", "body", string(*m.UserDate7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate7", "body", string(*m.UserDate7), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate7", "body", string(*m.UserDate7), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate8(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate8) { // not required
		return nil
	}

	if err := validate.MinLength("userDate8", "body", string(*m.UserDate8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate8", "body", string(*m.UserDate8), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate8", "body", string(*m.UserDate8), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountUserFieldsUpdateRequest) validateUserDate9(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDate9) { // not required
		return nil
	}

	if err := validate.MinLength("userDate9", "body", string(*m.UserDate9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDate9", "body", string(*m.UserDate9), 7); err != nil {
		return err
	}

	if err := validate.Pattern("userDate9", "body", string(*m.UserDate9), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountUserFieldsUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountUserFieldsUpdateRequest) UnmarshalBinary(b []byte) error {
	var res AccountUserFieldsUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

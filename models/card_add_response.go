// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardAddResponse card add response
//
// swagger:model CardAddResponse
type CardAddResponse struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	Acct string `json:"acct,omitempty"`

	//  Max length = 19, Unique Card Number embossed on card plastic.
	CardNbr string `json:"cardNbr,omitempty"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card. Must be greater than zero if Svc Func Code field is not space. Field is used for scrolling. Front-end interface system
	CardSeq string `json:"cardSeq,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, Chip Sequence number. Chip sequence number of the most recently issued card.
	CurrChipSeq string `json:"currChipSeq,omitempty"`

	//  Max length = 3, Dual Indicator: Dual Account Flag of account. Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L
	ForeignOrg string `json:"foreignOrg,omitempty"`

	//  Max length = 3, LOGO: Identification number of the logo
	Logo string `json:"logo,omitempty"`

	//  Max length = 18, UNIQUE ID
	UniqueID string `json:"uniqueId,omitempty"`
}

// Validate validates this card add response
func (m *CardAddResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardAddResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardAddResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardAddResponse) UnmarshalBinary(b []byte) error {
	var res CardAddResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

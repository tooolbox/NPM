// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorisationsInquiryRequest2 authorisations inquiry request2
//
// swagger:model AuthorisationsInquiryRequest2
type AuthorisationsInquiryRequest2 struct {

	//  Max length = 1, This is required for paging logic and can be populated from the response fields AccountLogExtNext (for forward key)  and AccountLogExtPrev (for backward key) after the first call to the service. Must be numeric
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AccountLogExt *string `json:"accountLogExt,omitempty"`

	//  Max length = 9, This is required for paging logic and can be populated from the response fields AccountRbaNext (for forward key)  and AccountRbaPrev (for backward key) after the first call to the service. Must be numeric
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AccountRba *string `json:"accountRba,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number. 1.  Account or card number required 2.  Account/Card Number must be on file 3.  Account or Card must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct"`

	//  Max length = 1, Filter to be applied to extract the auth record based on Approved Declined or Referral transactions. Valid values are :  A = Approved only, D = Decline only, R = Referrals only, Space = All
	// Max Length: 1
	// Min Length: 0
	ActionFilter *string `json:"actionFilter,omitempty"`

	//  Max length = 1, Must be numeric.
	// Max Length: 1
	// Min Length: 0
	AuthDetailFilter *string `json:"authDetailFilter,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	// Format: YYYYMMDD. Effective date of the outstanding auth transactions to be inquired.
	EffDate string `json:"effDate,omitempty"`

	// Format: YYYYMMDD. Transaction date range end date
	EndDate string `json:"endDate,omitempty"`

	//  Max length = 7, Transaction date range end time
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EndTime *string `json:"endTime,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming request is for the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 9, Transaction from specific merchant number to be extracted.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MerNbr *string `json:"merNbr,omitempty"`

	//  Max length = 3, Number of records to be extracted.  001-100
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrOfRecsReq *string `json:"nbrOfRecsReq,omitempty"`

	// Format: YYYYMMDD. Transaction date range start date
	StartDate string `json:"startDate,omitempty"`

	//  Max length = 7, Transaction date range start time
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StartTime *string `json:"startTime,omitempty"`

	//  Max length = 1, Service function code:  Ssearch criteria: If the search is the continuation of existing search. The values are: 'N' = Next, 'P' = Previous, SPACE = New search. This is echoed from the response of previous search.
	// Max Length: 1
	// Min Length: 0
	SvcFuncCode *string `json:"svcFuncCode,omitempty"`

	//  Max length = 4, Transaction from specific terminal id to be extracted.
	// Max Length: 4
	// Min Length: 0
	Termid *string `json:"termid,omitempty"`

	//  Max length = 7, Effective time must be numeric for the transaction done at specific time.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Time *string `json:"time,omitempty"`

	//  Max length = 17, Transaction for a specific amount to be extracted.
	// Pattern: ^(-)?[0-9]{1,17}$
	TxnAmt string `json:"txnAmt,omitempty"`

	//  Max length = 1, This is required for paging logic and can be populated from the response fields TxnRecTypeNext (for forward key)  and TxnRecTypePrev (for backward key) after the first call to the service. Must be numeric
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnRecType *string `json:"txnRecType,omitempty"`
}

// Validate validates this authorisations inquiry request2
func (m *AuthorisationsInquiryRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountLogExt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountRba(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthDetailFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrOfRecsReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRecType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorisationsInquiryRequest2) validateAccountLogExt(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountLogExt) { // not required
		return nil
	}

	if err := validate.MinLength("accountLogExt", "body", string(*m.AccountLogExt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountLogExt", "body", string(*m.AccountLogExt), 1); err != nil {
		return err
	}

	if err := validate.Pattern("accountLogExt", "body", string(*m.AccountLogExt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateAccountRba(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountRba) { // not required
		return nil
	}

	if err := validate.MinLength("accountRba", "body", string(*m.AccountRba), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountRba", "body", string(*m.AccountRba), 9); err != nil {
		return err
	}

	if err := validate.Pattern("accountRba", "body", string(*m.AccountRba), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateAcct(formats strfmt.Registry) error {

	if err := validate.Required("acct", "body", m.Acct); err != nil {
		return err
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateActionFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionFilter) { // not required
		return nil
	}

	if err := validate.MinLength("actionFilter", "body", string(*m.ActionFilter), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actionFilter", "body", string(*m.ActionFilter), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateAuthDetailFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthDetailFilter) { // not required
		return nil
	}

	if err := validate.MinLength("authDetailFilter", "body", string(*m.AuthDetailFilter), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authDetailFilter", "body", string(*m.AuthDetailFilter), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.MinLength("endTime", "body", string(*m.EndTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("endTime", "body", string(*m.EndTime), 7); err != nil {
		return err
	}

	if err := validate.Pattern("endTime", "body", string(*m.EndTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateMerNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MerNbr) { // not required
		return nil
	}

	if err := validate.MinLength("merNbr", "body", string(*m.MerNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("merNbr", "body", string(*m.MerNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("merNbr", "body", string(*m.MerNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateNbrOfRecsReq(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrOfRecsReq) { // not required
		return nil
	}

	if err := validate.MinLength("nbrOfRecsReq", "body", string(*m.NbrOfRecsReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrOfRecsReq", "body", string(*m.NbrOfRecsReq), 3); err != nil {
		return err
	}

	if err := validate.Pattern("nbrOfRecsReq", "body", string(*m.NbrOfRecsReq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.MinLength("startTime", "body", string(*m.StartTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("startTime", "body", string(*m.StartTime), 7); err != nil {
		return err
	}

	if err := validate.Pattern("startTime", "body", string(*m.StartTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateSvcFuncCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCode) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCode", "body", string(*m.SvcFuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCode", "body", string(*m.SvcFuncCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateTermid(formats strfmt.Registry) error {

	if swag.IsZero(m.Termid) { // not required
		return nil
	}

	if err := validate.MinLength("termid", "body", string(*m.Termid), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("termid", "body", string(*m.Termid), 4); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.MinLength("time", "body", string(*m.Time), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("time", "body", string(*m.Time), 7); err != nil {
		return err
	}

	if err := validate.Pattern("time", "body", string(*m.Time), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateTxnAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnAmt) { // not required
		return nil
	}

	if err := validate.Pattern("txnAmt", "body", string(m.TxnAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationsInquiryRequest2) validateTxnRecType(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnRecType) { // not required
		return nil
	}

	if err := validate.MinLength("txnRecType", "body", string(*m.TxnRecType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnRecType", "body", string(*m.TxnRecType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("txnRecType", "body", string(*m.TxnRecType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorisationsInquiryRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorisationsInquiryRequest2) UnmarshalBinary(b []byte) error {
	var res AuthorisationsInquiryRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltySchemeListRequest loyalty scheme list request
//
// swagger:model LoyaltySchemeListRequest
type LoyaltySchemeListRequest struct {

	//  Max length = 19, LMS account number that identifies the Points Account record.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Scrolling feature.  The values are Space = First 20 items N         = Next 20 items P          = Previous 20 items
	// Max Length: 1
	// Min Length: 0
	FuncCd *string `json:"funcCd,omitempty"`

	//  Max length = 2, Total number of items requested
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrItemRqst *string `json:"nbrItemRqst,omitempty"`

	//  Max length = 5, Starting scheme associated with the scroll
	// Max Length: 5
	// Min Length: 0
	StartSchm *string `json:"startSchm,omitempty"`
}

// Validate validates this loyalty scheme list request
func (m *LoyaltySchemeListRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuncCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrItemRqst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartSchm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltySchemeListRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltySchemeListRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltySchemeListRequest) validateFuncCd(formats strfmt.Registry) error {

	if swag.IsZero(m.FuncCd) { // not required
		return nil
	}

	if err := validate.MinLength("funcCd", "body", string(*m.FuncCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("funcCd", "body", string(*m.FuncCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltySchemeListRequest) validateNbrItemRqst(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrItemRqst) { // not required
		return nil
	}

	if err := validate.MinLength("nbrItemRqst", "body", string(*m.NbrItemRqst), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrItemRqst", "body", string(*m.NbrItemRqst), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrItemRqst", "body", string(*m.NbrItemRqst), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltySchemeListRequest) validateStartSchm(formats strfmt.Registry) error {

	if swag.IsZero(m.StartSchm) { // not required
		return nil
	}

	if err := validate.MinLength("startSchm", "body", string(*m.StartSchm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("startSchm", "body", string(*m.StartSchm), 5); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltySchemeListRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltySchemeListRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltySchemeListRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountAddRequest account add request
//
// swagger:model AccountAddRequest
type AccountAddRequest struct {

	//  Max length = 19, Identification number of the customer account in account base segment record. NOTE: When the account number equals low values or spaces, the number generation service will provide the number. Required if Org and Logo not provided. Account number must be valid for the org and logo supplied and should not exist in the system.
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account,omitempty"`

	// ACCOUNT ASSOCIATION
	AccountAssociation []*AccountAssociationForAccountAdd1 `json:"accountAssociation"`

	//  Max length = 1, Code that indicates whether the account being added is a transaction (cardholder), billing, control, or diversion account. The values are: 0 = Account is a transaction account (Default) 1 = Account is a billing account 2 = Account is a control account 3 = Account is a diversion account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AccountType *string `json:"accountType,omitempty"`

	//  Max length = 3, Identification number of the Account Control table used for the account. This table overrides the Account Control table defined by the Processing Control table that is assigned to each account. The table number entered must identify an existing Account Control table established at the organization level.
	// Max Length: 3
	// Min Length: 0
	AcctCtlOvrrd *string `json:"acctCtlOvrrd,omitempty"`

	//  Max length = 1, Alternate Customer Flag: Code that indicates how CMS generates statements and other correspondence when an alt. Customer Name/Address record exists for the account.  Values are:  Space - Disregard Alt. Customer  'A' - Alt. customer active; send stmt and other correspondence to alternate address until exp. date  'B' - Alt. customer active; send stmt and other correspondence to both addresses until exp. date  'C' - Relationship customer active; send stmt and other correspondence to alt. address
	// Max Length: 1
	// Min Length: 0
	AltCust *string `json:"altCust,omitempty"`

	//  Max length = 19, Number that identifies the alternate Customer Name/Address record containing an alternate address for statements. Customer number should already exist in system.
	// Max Length: 19
	// Min Length: 0
	AltCustNbr *string `json:"altCustNbr,omitempty"`

	//  Max length = 1, Code that indicates whether the BIS annual credit card statement is active at the account level. The values are: 0 = Annual statement function is not active 1 = Annual statement function is active.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AnnStmtFlg *string `json:"annStmtFlg,omitempty"`

	//  Max length = 20, Credit application user field. User-defined information about the account holder's credit application
	// Max Length: 20
	// Min Length: 0
	ApplUser1 *string `json:"applUser1,omitempty"`

	//  Max length = 20, Credit application user field. User-defined information about the account holder's credit application
	// Max Length: 20
	// Min Length: 0
	ApplUser2 *string `json:"applUser2,omitempty"`

	//  Max length = 20, Credit application user field. User-defined information about the account holder's credit application
	// Max Length: 20
	// Min Length: 0
	ApplUser3 *string `json:"applUser3,omitempty"`

	//  Max length = 1, Number of occurrences for association related fields.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssNbrOccurs *string `json:"assNbrOccurs,omitempty"`

	//  Max length = 1, Code that determines if CMS charges a fee for each letter sent to an associated party. The values are: 0 = Do not waive the letter fee (Default) 1 = Waive the letter fee.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationLetterFee1 *string `json:"associationLetterFee1,omitempty"`

	//  Max length = 1, Code that determines if CMS charges a fee for each letter sent to an associated party. The values are: 0 = Do not waive the letter fee (Default) 1 = Waive the letter fee.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationLetterFee2 *string `json:"associationLetterFee2,omitempty"`

	//  Max length = 1, Code that determines if CMS charges a fee for each letter sent to an associated party. The values are: 0 = Do not waive the letter fee (Default) 1 = Waive the letter fee.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationLetterFee3 *string `json:"associationLetterFee3,omitempty"`

	//  Max length = 1, Determines whether CMS mails letters to associated parties. This field also determines the type of letter that CMS sends. 0 = Do not send letters to the associated party (Default) 1 = Send only delinquency letters to the associated parties when the account delinquency level (CD on ARIQ05) reaches the value in the statement cycle due code on the Logo record (LTR CD on ARML13) 2 = Send all system-generated letters to the associated party.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationLetterFlag1 *string `json:"associationLetterFlag1,omitempty"`

	//  Max length = 1, Determines whether CMS mails letters to associated parties. This field also determines the type of letter that CMS sends. 0 = Do not send letters to the associated party (Default) 1 = Send only delinquency letters to the associated parties when the account delinquency level (CD on ARIQ05) reaches the value in the statement cycle due code on the Logo record (LTR CD on ARML13) 2 = Send all system-generated letters to the associated party.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationLetterFlag2 *string `json:"associationLetterFlag2,omitempty"`

	//  Max length = 1, Determines whether CMS mails letters to associated parties. This field also determines the type of letter that CMS sends. 0 = Do not send letters to the associated party (Default) 1 = Send only delinquency letters to the associated parties when the account delinquency level (CD on ARIQ05) reaches the value in the statement cycle due code on the Logo record (LTR CD on ARML13) 2 = Send all system-generated letters to the associated party.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationLetterFlag3 *string `json:"associationLetterFlag3,omitempty"`

	//  Max length = 1, Code which indicates that CMS sends statements to each associated party.Determines whether CMS mails statements to associated parties. Values are:  0 = Do not send statements to the associated parties (Default) 1 = Send statements to the associated parties when the account delinquency level (CD on ARIQ05) reaches the value in the statement cycle due code on the Logo record (STMT CD on ARML13) 2 = Always send statements to the associated parties.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationStatementFlag1 *string `json:"associationStatementFlag1,omitempty"`

	//  Max length = 1, Code which indicates that CMS sends statements to each associated party.Determines whether CMS mails statements to associated parties. Values are:  0 = Do not send statements to the associated parties (Default) 1 = Send statements to the associated parties when the account delinquency level (CD on ARIQ05) reaches the value in the statement cycle due code on the Logo record (STMT CD on ARML13) 2 = Always send statements to the associated parties.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationStatementFlag2 *string `json:"associationStatementFlag2,omitempty"`

	//  Max length = 1, Code which indicates that CMS sends statements to each associated party.Determines whether CMS mails statements to associated parties. Values are:  0 = Do not send statements to the associated parties (Default) 1 = Send statements to the associated parties when the account delinquency level (CD on ARIQ05) reaches the value in the statement cycle due code on the Logo record (STMT CD on ARML13) 2 = Always send statements to the associated parties.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AssociationStatementFlag3 *string `json:"associationStatementFlag3,omitempty"`

	//  Max length = 1, ATM PCKG REQ
	// Max Length: 1
	// Min Length: 0
	AtmPckgReq *string `json:"atmPckgReq,omitempty"`

	//  Max length = 3, Identification number of the Authorization Criteria table assigned to the account.  Table id must have been previously defined using ARLM screens.  AUTH CRITERIA value is not numeric, alphabetic, or equal spaces.  NOTE: If the service Input equals low values, the table number in the AUTH CRITERIA field defaults from the AUTH CRITERIA TABLE NUMBER on ARGM02.
	// Max Length: 3
	// Min Length: 0
	AuthCriteria *string `json:"authCriteria,omitempty"`

	//  Max length = 1, Auth EPP Opt Flag. Valid values are:<UL><LI><EM> Y -</EM> Yes, Customer opted for Auth EPP </LI><LI><EM>N -</EM> No, Customer not opted for Auth EPP </LI><LI></UL>
	// Max Length: 1
	// Min Length: 0
	AuthEppOptFlag *string `json:"authEppOptFlag,omitempty"`

	//  Max length = 1, Authorization Limit Override Flag: Flag that indicates whether the parameters on the Embosser record for maximum daily authorisations may be overridden. Values are:  0 - Override not allowed (Default)  1 - Override allowed
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthLimitOverrides *string `json:"authLimitOverrides,omitempty"`

	//  Max length = 1, Authorization message The values are: 0 = Authorization message is not active 1 = Authorization message is active 2 = Authorization message is active on fee.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthMsg *string `json:"authMsg,omitempty"`

	//  Max length = 3, Identification number of the Hierarchy Company System (HCS) Authorization Spending Limit table assigned to the account.
	// Max Length: 3
	// Min Length: 0
	AuthSpendLmt *string `json:"authSpendLmt,omitempty"`

	//  Max length = 9, Authorization Treshold:An authorisation equal to or greater than this amount initiates a text message to the cardholder. Numeric (whole monetary units)
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthThres *string `json:"authThres,omitempty"`

	//  Max length = 1, Code that indicates whether billing occurs for the account at the relationship level or subordinate account level. The values are: 0 = Relationship level 1 = Subordinate account level. (Default)  Billing level of an account in a relationship must equal 0 if the billing level of the relationship equals 0.  Billing level of an account in a relationship must be equal to 1 if the billing level of the relationship equals 1.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	BillingLevel *string `json:"billingLevel,omitempty"`

	//  Max length = 1, Account Block Code 1 - Block codes control specific processing options at the account level.
	// Max Length: 1
	// Min Length: 0
	BlkCode1 *string `json:"blkCode1,omitempty"`

	//  Max length = 1, Account Block Code 2 - Block codes control specific processing options at the account level.
	// Max Length: 1
	// Min Length: 0
	BlkCode2 *string `json:"blkCode2,omitempty"`

	//  Max length = 5, Last credit score received from a credit bureau. The last position contains a minus sign (-) if the score is negative. Field must be numeric.
	// Pattern: ^(-)?[0-9]{1,5}$
	BureauScr string `json:"bureauScr,omitempty"`

	// Format: YYYYMMDD. Date the annual card membership fee is assessed on the account.  Field must be numeric. Field must be a valid Julian date or zeros.
	CardFeeDate string `json:"cardFeeDate,omitempty"`

	//  Max length = 1, Flag that identifies the current card technology used for this account. The values are: 0 = Magnetic-stripe card(s) are on issue 1 = Smart card(s) are on issue. When adding an account, system uses the card technology from the account's logo as the default value. You can override this default if necessary.CARD TECH field is valid when SMART CARD ALLOWED field on ARML38 equals 1. If CRD# SCM equals 2, this field must equal 0. If CARD TECH = 0, logo is not set for smart card processing.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardTech *string `json:"cardTech,omitempty"`

	//  Max length = 1, Code that determines the cash credit limit for the account. The values are: N = No cash credit limit is allowed for this account T = Total credit limit is available for cash Y = Cash credit limit is a fixed amount or a percentage of the credit limit as defined in theAccount Control table associated with the account (CASH LIMIT FLAG and % OR AMT on ARMY02). (Default)
	// Max Length: 1
	// Min Length: 0
	CashLmt *string `json:"cashLmt,omitempty"`

	//  Max length = 1, Code that determines the credit bureau reporting of the account The values are: 0 = Logo-level parameters control the reporting of account (Default) 1 = Do not report account to credit bureau 2 = Always report account to credit bureau.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CbIndicator *string `json:"cbIndicator,omitempty"`

	//  Max length = 2, Credit Bureau Special comment.
	// Max Length: 2
	// Min Length: 0
	CbSpecComment *string `json:"cbSpecComment,omitempty"`

	//  Max length = 1, Defines the preferred electronic correspondence channel. Valid Values 0 = Off 1 = Email 2 = SMS 3 = Email and SMS
	// Max Length: 1
	// Min Length: 0
	ChanInd *string `json:"chanInd,omitempty"`

	//  Max length = 19, Demand deposit account (DDA) number associated with direct debit processing. If the checking routing number is populated, the checking account number is required.
	// Max Length: 19
	// Min Length: 0
	CheckingAccountNumber *string `json:"checkingAccountNumber,omitempty"`

	//  Max length = 9, ABA-assigned routing and transit number that identifies the financial institution at which the checking account is held.  Field must be numeric. If the checking account number field is populated, the checking routing number is required.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CheckingRoutingNumber *string `json:"checkingRoutingNumber,omitempty"`

	//  Max length = 2, Collateral Code: User-defined code that indicates the type of collateral attached to this account.
	// Max Length: 2
	// Min Length: 0
	CollateralCode *string `json:"collateralCode,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Plan Payment Override Flag: Values are: F = Fixed payment X = Fixed payment Rest on Purch P = Credit limit payment Override  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), valid values of F, P, X or space.NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are entered, this field is initialised to a space.
	// Max Length: 1
	// Min Length: 0
	ControllingPlanOverride *string `json:"controllingPlanOverride,omitempty"`

	// Format: YYYYMMDD. Date of the last requested credit bureau report.
	CrBureauDt string `json:"crBureauDt,omitempty"`

	// Format: YYMM. Account level, card expiration date - used as default when adding embosser records to this account. It does not necessarily follow that the  embosser level card expiry date will have the same value as this.  Field must be numeric.  Must be a valid date in YYMM format.  Must be greater than the current processing date.NOTE: this date is converted to a Julian date.  The YYMM date is future dated to end of the month for the month that is specified.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdExpr *string `json:"crdExpr,omitempty"`

	//  Max length = 1, Card numbering scheme that determines the card numbers that are assigned to Embosser records associated with the account. Values are: 0 - non relationship account in which the account number and all card numbers are the same. 1 - relationship account in which the account number and all card numbers are the same 2 - for accounts within a retail logo only. Account and all card numbers are the same, but each card has a unique sequence number. 3 - accounts and all card numbers are unique.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdNbrScm *string `json:"crdNbrScm,omitempty"`

	//  Max length = 1, Credit Limit Alert Opt-in/out Flag: Flag that will indicate account is opted for credit limit proximity alert.  Values are:  0 - Alert Option is not opted  1 - Alert will be sent via SMS  2 - Alert will be sent via cardholder EMAIL  3 - Both Email and SMS alert will be sent      9 - Prefer Product Level/Logo Alert Option
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdtLmtAlert *string `json:"crdtLmtAlert,omitempty"`

	//  Max length = 9, Credit Limit Proximity Amount: Amount after which Credit Limit alert is initiated
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrdtLmtAmt *string `json:"crdtLmtAmt,omitempty"`

	//  Max length = 17, Current credit limit assigned to the account.  For relationship accts, usually you will add the Relationship record and enter the relationship credit limit  before adding subordinate accts. In this case, the available credit limit is reduced as subordinate accts are added to the relationship. if  accts with previously assigned credit limits are assigned to a relationship, the  relationship credit limit must be greater than or equal to the sum of the credit limits of the subordinate accts.
	// Pattern: ^(-)?[0-9]{1,17}$
	CreditLmt string `json:"creditLmt,omitempty"`

	//  Max length = 1, Field determines whether CMS sends letters to the owner only or both the owner and co-owner. The values are: 0 = Do not send letters to the owner or co-owner 1 = Send letters to the owner only (Default) 2 = Send letters to both the owner and co-owner.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CustLetter *string `json:"custLetter,omitempty"`

	//  Max length = 1, Field determines whether CMS sends statements to the owner only or both the owner and co-owner. The values are: 0 = Send statements to the owner only (Default) 1 = Send statements to both the owner and the coowner.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CustStatement *string `json:"custStatement,omitempty"`

	//  Max length = 19, Customer number: Customer number that identifies the Customer Name/Address record to which this account is assigned.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CustomerNbr *string `json:"customerNbr"`

	//  Max length = 2, Billing cycle of the account.  Valid values between zeros and 31.    If the DUE DATE field on ARML14 equals zeros or 99, the CYCLE field must be greater than zeros.If the DUE field on the service Input equals zeros, the CYCLE field must be greater than zeros.  For accounts in a relationship, billing cycle must equal relationship billing cycle.  Billing cycle must be valid for cycles defined at the system level.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Cycle *string `json:"cycle,omitempty"`

	// Format: YYYYMMDD. Effective start date of the alternate customer address.
	DateAltCustExpires string `json:"dateAltCustExpires,omitempty"`

	// Format: YYYYMMDD. Application Date.
	DateAppli string `json:"dateAppli,omitempty"`

	// Format: YYYYMMDD. Date on which the account was opened.  NOTE:  if the service Input field equals low values, the OPNED field will contain the current processing date. Field must be numeric. Field must be a valid Julian date. Date cannot be greater than current processing date. Date cannot be a zero value.
	DateOpened string `json:"dateOpened,omitempty"`

	//  Max length = 17, Direct Credit Processing Debit Account Number: Field that indicates the debit account number participating in direct credit processing payment. Must be numeric
	// Max Length: 17
	// Min Length: 0
	DcAccountNumber *string `json:"dcAccountNumber,omitempty"`

	//  Max length = 1, Direct Credit Processing Debit Type: Field that indicates the type of account participating in direct credit processing. Values are: 'D' - AMBS-DC-DEMAND-DEPOSIT  'S' - AMBS-DC-SAVING-ACCT
	// Max Length: 1
	// Min Length: 0
	DcAccountType *string `json:"dcAccountType,omitempty"`

	//  Max length = 17, Amount of the direct credit. Required if the DC Type Flag equals 0. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	DcAmount string `json:"dcAmount,omitempty"`

	//  Max length = 11, Bank identifier code associated with the direct credit account
	// Max Length: 11
	// Min Length: 0
	DcBic *string `json:"dcBic,omitempty"`

	// Format: YYYYMMDD. Direct Credit Payment Expiry Date: Date on which direct credit processing expires for the account. A value of zeros means the DD does not expire.  Required if DC Type Flag equals 0. Date must be greater than the DC Payment Start Date. Field must be greater than the systems Next Processing Date. Field must be numeric. Must be a valid Julian date or zeros.
	DcExpireDate string `json:"dcExpireDate,omitempty"`

	//  Max length = 34, Direct credit International Banking Number
	// Max Length: 34
	// Min Length: 0
	DcIban *string `json:"dcIban,omitempty"`

	//  Max length = 17, DC NBR
	// Max Length: 17
	// Min Length: 0
	DcNbr *string `json:"dcNbr,omitempty"`

	//  Max length = 5, Direct Credit Plan Number: Plan number that identifies the Credit Plan Master record of a retail credit plan that CMS debits for direct credits to the account. DC TYPE FLAG  must equal 0.  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be numeric. Credit plan number must exist. Plan must be retail plan.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcPlan *string `json:"dcPlan,omitempty"`

	//  Max length = 2, Direct Credit Request Day: Field that indicates the day of the month when CMS generates the direct credit for the account. Required if the DC Type Flag equals 0. If the DC REQUEST DAY IND is 0 this field must be equal to 00 If the DC REQUEST DAY IND is 1 this field must be equal to 00 or 01-31 If the DC REQUEST DAY IND is 2 this field must be equal to 00 If the DC REQUEST DAY IND is 3 this field must be equal to 00 If the DC REQUEST DAY IND is 4 this field must be greater than 0
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcRequestDay *string `json:"dcRequestDay,omitempty"`

	//  Max length = 1, Direct Credit Request Day Indicator: Field that indicates the day of the month when CMS generates the direct credit for the account. Required if the DC Type Flag = 0. Values are:  0 - Direct credit processing is not used  1 - Generate the direct credit on the cycle day or on a specific day each month  2 - Generate the direct credit on the first cycle only  3 - Generate the direct credit at account opening only  4 - Generate the direct credit on a specific number of days after account opening
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcRequestDayIndicator *string `json:"dcRequestDayIndicator,omitempty"`

	//  Max length = 10, DC RT BANKID
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcRtBankid *string `json:"dcRtBankid,omitempty"`

	// Format: YYYYMMDD. Direct Credit Payment Start Date: Date on which direct credit processing starts for the account. Required if the DC Type Flag equals 0. Date must be less than the date in DC Payment Expire Date. Must be a valid Gregorian date or zeros. Field must be greater than the systems Next Processing Date. Field must be numeric
	DcStartDate string `json:"dcStartDate,omitempty"`

	//  Max length = 1, On-demand ACH direct credit type. The values are: D = Direct credit direct debit account S = Direct credit savings.
	// Max Length: 1
	// Min Length: 0
	DcType *string `json:"dcType,omitempty"`

	//  Max length = 17, Direct Debit Bank account number of the account.
	// Max Length: 17
	// Min Length: 0
	DdAchAccountNumber *string `json:"ddAchAccountNumber,omitempty"`

	//  Max length = 1, DD payment Type: Code that indicates the type of account to which the direct debit is sent.  Values are: D = Demand deposit account (checking) S = Savings account.
	// Max Length: 1
	// Min Length: 0
	DdAchType *string `json:"ddAchType,omitempty"`

	//  Max length = 11, Bank identifier code associated with the direct debit account.
	// Max Length: 11
	// Min Length: 0
	DdBic *string `json:"ddBic,omitempty"`

	//  Max length = 1, Direct debit credit balance. Values are: 0 = Direct credits are not generated for accounts with credit balances 1 = Direct credits are generated for accounts with   credit balances
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdCreditBalance *string `json:"ddCreditBalance,omitempty"`

	//  Max length = 1, Direct debit daily frequency. Values are: 0 = Account does not generate direct debits on a daily frequency 1 = Account generates direct debits daily 2 = Account generates direct debits every week 3 = Account generates direct debits biweekly or every 14 days
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdDailyFrequency *string `json:"ddDailyFrequency,omitempty"`

	//  Max length = 1, Direct debit days flag. The values are: 0 = Direct debit days is not active (Default) 1 = Direct debit days is active.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdDaysFctn *string `json:"ddDaysFctn,omitempty"`

	//  Max length = 2, Direct debit number of days
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdDaysNbr *string `json:"ddDaysNbr,omitempty"`

	//  Max length = 34, Direct debit International Banking Number
	// Max Length: 34
	// Min Length: 0
	DdIban *string `json:"ddIban,omitempty"`

	//  Max length = 1, Direct debit interim payments The values are: 0 = Do not apply interim payments 1 = Apply interim payment to the calculated payment prior to generating a direct debit transaction NOTE:  If the service Input equals  low values, the DD INTERIM PAYMENTS field will contain the value fro the DD INTERIM PYMTS field on ARML12.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdInterimPayments *string `json:"ddInterimPayments,omitempty"`

	//  Max length = 17, Direct Debit amount / percentage amount. If the DD NOM AMT/% flag is equal to 0 or 3, the amount field must equal zeros. If the DD NOM AMT/% flag is equal to 1 or 2, the amount field must be greater than zeros. If the DD NOM AMT/% flag equals 2, the amount must be greater than zero and less than 100%.
	// Pattern: ^(-)?[0-9]{1,17}$
	DdNomAmtPct string `json:"ddNomAmtPct,omitempty"`

	//  Max length = 1, Flag that indicates whether the direct debit amount is a fixed amount, the full account balance, a percentage of the account balance, or not used. Values are:  0 - Not used.  1 - Fixed payment amount.  2 - Percentage of account (cycle-ending) balance.  3 - Full account (cycle-ending) balance.  4 - Full Non-BNPL Balance payer.        9 - Percentage of account (cycle-ending) balance, excluding overlimit amount.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdNomAmtPctFlag *string `json:"ddNomAmtPctFlag,omitempty"`

	//  Max length = 1, Direct debit processing(DD) code for account 0 = no DD(Default) 1 = DD active. Min. payment.  Includes past due amounts for projected DD 2 = DD active. Nominated payment. Includes past due amounts for proj. DD 3 = DD expired (system-generated) 4 = DD cancelled. Delinquency (system gen.) 5 = DD cancelled.Reached DD PAYMENT REVERSAL LIMIT(system gen.) 6 = DD active for debit card transactions only(system gen.) 7 = DD active. A customer nominated pay. is in effect. Not including past dues for proj.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdPayment *string `json:"ddPayment,omitempty"`

	// Format: YYYYMMDD. Direct debit processing expiration date. Field must be numeric For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), must be a valid Julian date or zeros. Field must be greater than the DD PAYMENT START DATE. Field must be greater than the system's next processing date.
	DdPaymentExpireDate string `json:"ddPaymentExpireDate,omitempty"`

	// Format: YYYYMMDD. Customer-nominated payment start date. Field must be numeric For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), date must be less than the date in DD PAYMENT EXPIRE DATE. Field is required when the DD PAYMENT field equals 1, 2, or 7.
	DdPaymentStartDate string `json:"ddPaymentStartDate,omitempty"`

	// Format: YYYYMMDD. Direct debit payment change date Field must be numeric. For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), must be a valid Julian date or zeros. Must equal zeros when the DD DAILY FREQUENCY field equals 1, 2, or 3. Must equal zeros when the DD PAYMENT START DATE and DD PAYMENT EXPIRE DATE equals zeros. If the DD PAYMENT EXPIRE DATE is populated, the DD PYMT CHANGE DATE must be greater than the expire date.
	DdPymtChangeDate string `json:"ddPymtChangeDate,omitempty"`

	//  Max length = 2, Direct Debit request days. Number of days prior to the payment due date or the day of the month to request direct debit payments for the account. For non-prepaid accounts, field must be numeric. If the DD PAYMENT FLAG on ARML12 equals P or R, the DD REQUEST DAY must be between 01 and 31. If the DD PAYMENT FLAG on ARML12 equals D or S, the DD REQUEST DAY must equal zeros.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdRequestDay *string `json:"ddRequestDay,omitempty"`

	//  Max length = 10, DD RT BANKID
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdRtBankid *string `json:"ddRtBankid,omitempty"`

	//  Max length = 5, Default cash plan for the transfer-to account.  NOTE: If the service Input equals low values, the DEFAULT CASH PLAN field will contain the value from the CASH PLAN field on ARMY02. Valid for bankcards only (TYPE OF ACCOUNT on ARML01 equals D, X or Y). Field must be numeric. Cash plan number must exist. For prepaid account type, cash plan must not be greater than zeros.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DefaultCashPlan *string `json:"defaultCashPlan,omitempty"`

	//  Max length = 5, Default Money Transfer Plan Number. The value provided from Input service should be numeric and greater than zero If the value provided from Input service is numeric and greater than zero then the plan number should be a valid credit plan master The default value for this field is  set on the Account Control table assigned to the account MT PLAN.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DefaultMtPlanNbr *string `json:"defaultMtPlanNbr,omitempty"`

	//  Max length = 5, Promotional Balance Transfer plan number: Number that identifies a default or 'Phantom' promotional Balance Transfer plan.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DefaultPromoPlan *string `json:"defaultPromoPlan,omitempty"`

	//  Max length = 5, Default retail plan for the transfer-to account. If no value received then default from  the account-control table associated with the PCT id of the new account. If Account control override table is specified then default from that.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DefaultRetailPlan *string `json:"defaultRetailPlan,omitempty"`

	//  Max length = 34, On-demand direct credit International Banking Number
	// Max Length: 34
	// Min Length: 0
	DemandDcIban *string `json:"demandDcIban,omitempty"`

	//  Max length = 1, DISC CYCLE IND
	// Max Length: 1
	// Min Length: 0
	DiscCycleInd *string `json:"discCycleInd,omitempty"`

	//  Max length = 1, Code that indicates whether CMS uses the foreign or local currency to request the minimum payment. The values are: 0 = Dual billing is not active. Bill the foreign account in the foreign currency. Two statements are generated, one in the foreign currency and one in the local currency. 1 = Dual billing is active. Bill the foreign account in the local currency. Two statements are generated in the local currency.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DualBilling *string `json:"dualBilling,omitempty"`

	//  Max length = 2, Customer selection due day: Day of the month the customer has selected as the payment due date. Values are:  0 - Customer-selected payment due date functionality not utilized (Default)  1-31 - Day of the month the customer has chosen as the payment due date.   Field must be numeric.If the DUE DATE field on ARML14 equals zeros, the DUE field must equal zeros. If the CYCLE field equals zeros, the DUE field must be greater than zeros.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Due *string `json:"due,omitempty"`

	// Format: YYYYMMDD. Last date on which the current variances are effective for credit plans. For prepaid accounts, field must equal zeros. Must be a valid Julian date. Date can not be less than the current processing date. Date is valid when the rate variance has been entered.
	Effective string `json:"effective,omitempty"`

	//  Max length = 15, Employee ID
	// Max Length: 15
	// Min Length: 0
	EmpID *string `json:"empId,omitempty"`

	//  Max length = 2, User-defined employee code.
	// Max Length: 2
	// Min Length: 0
	EmployeeCode *string `json:"employeeCode,omitempty"`

	//  Max length = 1, Code that indicates whether to exclude the account when sending account and expiration date updates to the Visa Account Updater service or the MasterCard Automatic Billing Updater service: 0 = Account participates in VAU or ABU; account is included in initial load file and update files (Default) 1 = Exclude; do not include account in initial load or update files to VAU or ABU 2 = Excluded from updates; override for deletion request sent (system-generated value; applies only to MasterCard ABU).
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ExcludeFromVauAbu *string `json:"excludeFromVauAbu,omitempty"`

	// Format: YYYYMMDD. Date on which the special pricing controls expire for the account. The PRICING CTRL field identifies the special pricing controls. Field must be numeric. Field must be a valid Julian date. If PRICING CTRL field is populated, the expiration date must be greater than the start date. Expiration date must not be > 0 when START DATE is not > 0.
	ExpirationDate string `json:"expirationDate,omitempty"`

	//  Max length = 17, Fixed Payment Amount:Fixed payment amount or percentage of the credit limit that CMS uses to calculate the payment amount if the CONTROLLING PLAN OVERRIDE is F, X or P.  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be numeric. This field is valid when the CONTROLLING PLAN OVERRIDE FIELD = F, P, or X.NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are entered, this field is initialised to zeros.
	// Pattern: ^(-)?[0-9]{1,17}$
	FixedPaymentAmount string `json:"fixedPaymentAmount,omitempty"`

	//  Max length = 17, Fixed payment amount of the credit limit that CMS uses to calculate the payment amount if the PLAN PMT OVRD FLAG is  F, X, P, A, B or C.
	// Pattern: ^(-)?[0-9]{1,17}$
	FixedPmtAmt string `json:"fixedPmtAmt,omitempty"`

	//  Max length = 17, Fixed Payment Amount Percentage
	// Pattern: ^(-)?[0-9]{1,17}$
	FixedPmtAmtPerc string `json:"fixedPmtAmtPerc,omitempty"`

	//  Max length = 7, Fixed Payment Amount:Fixed payment amount or percentage of the credit limit that CMS uses to calculate the payment amount if the CONTROLLING PLAN OVERRIDE is F, X or P.  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be numeric. This field is valid when the CONTROLLING PLAN OVERRIDE FIELD = F, P, or X.NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are entered, this field is initialised to zeros.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FixedPmtPct *string `json:"fixedPmtPct,omitempty"`

	//  Max length = 1, Code that indicates if the account is eligible to participate in flexible billing. Values are: Y = Account is eligible to participate in flexible billing N = Account is not eligible to participate in flexible billing. (Default)  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), FLEX BILL MONTHS on ARML14 must be greater than zeros.  Note: For prepaid accounts, N or nulls are the only valid values.  When nulls (nothing) are provided, the field is initialised to a value of N.
	// Max Length: 1
	// Min Length: 0
	FlexBill *string `json:"flexBill,omitempty"`

	//  Max length = 1, Flag that determines whether fraud reporting is active for the account. The values are: N = Do not report potentially fraudulent activity Y = Report potentially fraudulent activity.  NOTE: If the service Input equals low values, the FRAUD REPORT field will contain the value from the FRAUD PROCESSING field on ARML17.
	// Max Length: 1
	// Min Length: 0
	FraudReport *string `json:"fraudReport,omitempty"`

	//  Max length = 2, Statement Frequency: Code that indicates how often CMS generates statements for the account.  Values are: 01 - 12 - Frequency at which to generate a statement, in months.   62 - Generate a statement during the next CMS daily run. If the account is not scheduled to cycle during the next daily run, an interim statement is produced.  99 - Do not generate statements. CMS maintains account activity on the Online Accumulated Transactions file
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Freq *string `json:"freq,omitempty"`

	//  Max length = 1, Flag that indicates whether this account can qualify for the accumulation and/or redemption of frequent shopper points. The values are: Y = Yes, this account can qualify for frequent shopper points (Default) N = No, this account cannot qualify for frequent shopper points. NOTE: If the service Input equals low values, the FREQ SHOP IND will default to a value of Y.
	// Max Length: 1
	// Min Length: 0
	FreqShopInd *string `json:"freqShopInd,omitempty"`

	//  Max length = 1, General banking SMS indicator. The values are: 0 = General banking SMS feature is not used (Default) 1 = General banking SMS feature is active and the SMS is sent daily 2 = General banking SMS feature is active and the SMS is sent weekly (following every Friday night batch run) 3 = General banking SMS feature is active and the SMS is sent monthly 4 = General banking SMS feature is active and the SMS is sent on every cycle day/statement day.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	GenBankInd *string `json:"genBankInd,omitempty"`

	//  Max length = 9, Identification number of the store where the employee account application was made
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HomeStoreNbr *string `json:"homeStoreNbr,omitempty"`

	//  Max length = 3, Merchant organization number of the employee's home store
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HomeStoreOrg *string `json:"homeStoreOrg,omitempty"`

	//  Max length = 2, Code that indicates the default IBS account used by BASE24 for authorizations.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IbsAcctDflt *string `json:"ibsAcctDflt,omitempty"`

	//  Max length = 17, IBS checking account number
	// Max Length: 17
	// Min Length: 0
	IbsDdaAcctNbr *string `json:"ibsDdaAcctNbr,omitempty"`

	//  Max length = 10, IBS (issuer banking system) bank identification code for the checking account
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IbsDdaRtngNbr *string `json:"ibsDdaRtngNbr,omitempty"`

	//  Max length = 17, IBS savings account number
	// Max Length: 17
	// Min Length: 0
	IbsSavAcctNbr *string `json:"ibsSavAcctNbr,omitempty"`

	//  Max length = 10, IBS bank identification code for the savings account
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IbsSavRtngNbr *string `json:"ibsSavRtngNbr,omitempty"`

	//  Max length = 5, Last credit score generated by an in-house system. The last position contains a minus sign (-) if the score is negative.Field must be numeric.
	// Pattern: ^(-)?[0-9]{1,5}$
	InHouseScr string `json:"inHouseScr,omitempty"`

	//  Max length = 17, Income of the account holder in thousands of monetary units. Example: If the currency is U.S. dollars, an income of $100,000 is entered as 100. An income of $28,000 is entered as 28.  Value must be numeric.NOTE: to enter a value of $123,400, the field should be entered as 00000000001234.
	// Pattern: ^(-)?[0-9]{1,17}$
	IncomeTh string `json:"incomeTh,omitempty"`

	//  Max length = 1, Code that indicates the status of Form 1098 to report interest paid on the account. This field applies only if your institution must comply with IRS reporting requirements in the United States. Valid values are 0 to 9.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Indicator1098 *string `json:"indicator1098,omitempty"`

	//  Max length = 16, Instant credit number
	// Max Length: 16
	// Min Length: 0
	// Pattern: ^[0-9]*$
	InstCrCardNbr *string `json:"instCrCardNbr,omitempty"`

	//  Max length = 3, Temporary card security code to be used instead of CVC2 on instant cards.
	// Max Length: 3
	// Min Length: 0
	InstCrFbsc *string `json:"instCrFbsc,omitempty"`

	//  Max length = 8, Instant credit number generation table ID.
	// Max Length: 8
	// Min Length: 0
	InstCrNbrGenID *string `json:"instCrNbrGenId,omitempty"`

	//  Max length = 3, State Of Issue:  If account has a Bankcard Logo (Logo 'Type' value of 'X'), this field identifies the PCT, used for pricing options (interest, fees, account control, insurance).  If account has a non-Bankcard Logo, this code identifies the state, province, or country in which the account was issued.
	// Max Length: 3
	// Min Length: 0
	IssuanceID *string `json:"issuanceId,omitempty"`

	//  Max length = 3, User-defined code that identifies a letter to be generated during the next CMS daily run. CMS clears this field (resets the field to a blank) each CMS daily run.
	// Max Length: 3
	// Min Length: 0
	LetterReq *string `json:"letterReq,omitempty"`

	// Format: YYYYMMDD. Date on which the PCT level override expires. This field is not used if the PCT_OVRD_DMC fields are used.  Must be Numeric. Must be a valid Julian date. Must be greater than the PCT LVL OVERRIDE start date. If the PCT LVL OVERRIDE field is populated, the date must be greater than zeros. PCT LVL EXPIRATION DATE must not be > 0 when PCT START DATE not > 0. PCT LVL EXPIRATION DATE must not be less than PCT START DATE. PCT LVL EXPIRATION DATE must not be > 0 when PCT LEVEL has not been provided.
	LevelExpirationDate string `json:"levelExpirationDate,omitempty"`

	// Format: YYYYMMDD. Date on which the processing control level override starts for the account. The PCT LVL OVERRIDE field identifies the override level in effect. Field must be numeric. Must be a valid Julian date. If the PCT LVL OVERRIDE field is populated, the date field must be greater than zeros. The PCT LVL START DATE must be less than the PCT LVL EXPIRATION DATE. PCT CTRL DATE must not be > 0 when PCT LEVEL has not been provided.
	LevelStartDate string `json:"levelStartDate,omitempty"`

	//  Max length = 1, Code that indicates the type of liability for the account. Valid Values are: 0 = Company liability (CL). 1 = Individual liability (IL). 2 = Individual liability with company indemnity (ILCI).  Valid for accounts in a relationship that support HCS processing (COMMERCIAL FLAG on ARGM01 equals 3).
	// Max Length: 1
	// Min Length: 0
	LiabilityIndicator *string `json:"liabilityIndicator,omitempty"`

	//  Max length = 1, Code which indicates the frequency of the reload allowed on the account. The values are: 0 = Not used (Default) 1 = Daily 2 = At cycle 3 = Yearly.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LoadFrequency *string `json:"loadFrequency,omitempty"`

	//  Max length = 2, Identifies the number of reloads associated with the frequency. The values are 01-99, where 01 indicates that one reload is allowed and 99 indicates that an unlimited number of reloads are allowed. CMS defaults the value in this field from the Logo record (LOAD FREQUENCY on ARML40).
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LoadFrequencyNumber *string `json:"loadFrequencyNumber,omitempty"`

	//  Max length = 1, Code that determines the loan credit limit for the account values are: N = No loan credit limit is allowed for this account T = Total credit limit is available for loans Y = Loan credit limit is a fixed amount or a percentage of the total credit limit as defined in the Account Control table associated with the account (LOAN LIMIT FLAG and % OR AMT on ARMY02). (Default)
	// Max Length: 1
	// Min Length: 0
	LoanLmt *string `json:"loanLmt,omitempty"`

	//  Max length = 3, Required when Account Number not provided Must be less than 999  Logo number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Logo *string `json:"logo,omitempty"`

	//  Max length = 1, Code that indicates whether to hold letters for the account. The values are: Blank = Do not hold (Default) 0-9 = User-defined.
	// Max Length: 1
	// Min Length: 0
	LtrHoldCode *string `json:"ltrHoldCode,omitempty"`

	//  Max length = 1, Marketing opt out options: Code that indicates whether the customer has opted out ofmarketing campaigns.  The values are: 0 = Customer has not opted out of marketing campaigns (Default) 1 = Customer has opted out of marketing campaigns at the joint venture level only 2 = Customer has opted out of marketing campaigns at the group level only 3 = Customer has opted out of marketing campaigns at both the joint venture and group levels.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MarketingOptOut *string `json:"marketingOptOut,omitempty"`

	//  Max length = 17, Total maximum amount (in whole units) accepted for a subsequent load transaction for a particular frequency. CMS defaults the value in this field from the Logo record (MAX LOAD AMOUNT on ARML40).
	// Pattern: ^(-)?[0-9]{1,17}$
	MaximumLoad string `json:"maximumLoad,omitempty"`

	//  Max length = 3, Billing Currency: ISO currency code used to generate converted memo-billing information on statements for this acct.    Field must be numeric  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), the field is valid when the DUAL field on ARML01 equals 1.  If the Dual Billing field equals 1, the memo bill currency must equal zeros on the foreign and local accounts.Note: For prepaid acct, zeros or nulls are the only valid value.  When nulls (nothing) are provided, this field is initialised to zeros.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MemoBillCurrency *string `json:"memoBillCurrency,omitempty"`

	//  Max length = 1, Flags that indicate whether user-defined statement messages (USER MESSAGE 1-3 on ARMW06) print on account statements. The values are: 0 = Do not print message on statements. (Default) 1 = Print message on statements.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MessageIndicator1 *string `json:"messageIndicator1,omitempty"`

	//  Max length = 1, Flags that indicate whether user-defined statement messages (USER MESSAGE 1-3 on ARMW06) print on account statements. The values are: 0 = Do not print message on statements. (Default) 1 = Print message on statements.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MessageIndicator2 *string `json:"messageIndicator2,omitempty"`

	//  Max length = 1, Flags that indicate whether user-defined statement messages (USER MESSAGE 1-3 on ARMW06) print on account statements. The values are: 0 = Do not print message on statements. (Default) 1 = Print message on statements.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MessageIndicator3 *string `json:"messageIndicator3,omitempty"`

	//  Max length = 5, Miscellaneous credit score for the account. The last position contains a minus sign (-) if the score is negative.Field must be numeric.
	// Pattern: ^(-)?[0-9]{1,5}$
	MiscScr string `json:"miscScr,omitempty"`

	//  Max length = 30, Miscellaneous User field 1: User-defined miscellaneous information about the account.
	// Max Length: 30
	// Min Length: 0
	MiscUser1 *string `json:"miscUser1,omitempty"`

	//  Max length = 2, Miscellaneous User field 10: User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser10 *string `json:"miscUser10,omitempty"`

	//  Max length = 2, Miscellaneous User field 11: User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser11 *string `json:"miscUser11,omitempty"`

	//  Max length = 2, Miscellaneous User field 12: User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser12 *string `json:"miscUser12,omitempty"`

	//  Max length = 1, Miscellaneous User field 2: User-defined miscellaneous information about the account.
	// Max Length: 1
	// Min Length: 0
	MiscUser2 *string `json:"miscUser2,omitempty"`

	//  Max length = 11, Miscellaneous User field 3: User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser3 *string `json:"miscUser3,omitempty"`

	//  Max length = 11, Miscellaneous User field 4: User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser4 *string `json:"miscUser4,omitempty"`

	//  Max length = 11, Miscellaneous User field 5: User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser5 *string `json:"miscUser5,omitempty"`

	//  Max length = 11, Miscellaneous User field 6: User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser6 *string `json:"miscUser6,omitempty"`

	//  Max length = 11, Miscellaneous User field 7: User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser7 *string `json:"miscUser7,omitempty"`

	//  Max length = 11, Miscellaneous User field 8: User-defined miscellaneous information about the account.
	// Max Length: 11
	// Min Length: 0
	MiscUser8 *string `json:"miscUser8,omitempty"`

	//  Max length = 2, Miscellaneous User field 9: User-defined miscellaneous information about the account.
	// Max Length: 2
	// Min Length: 0
	MiscUser9 *string `json:"miscUser9,omitempty"`

	//  Max length = 1, Flag that indicates whether mobile payment instruments (PI) are allowed for this account The values are: 0 = Do not allow mobile PIs (Default) 1 = Allow mobile PIs.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MobPiAllowFlag *string `json:"mobPiAllowFlag,omitempty"`

	//  Max length = 10, Money Transfer offer code: Offer code entered must be a valid offer code defined in OMS.
	// Max Length: 10
	// Min Length: 0
	MtOfferCode *string `json:"mtOfferCode,omitempty"`

	//  Max length = 3, Code that identifies the officer responsible for this account.
	// Max Length: 3
	// Min Length: 0
	Officer *string `json:"officer,omitempty"`

	//  Max length = 11, Bank identifier code associated with the on-demand direct credit account.
	// Max Length: 11
	// Min Length: 0
	OnDemDcBic *string `json:"onDemDcBic,omitempty"`

	//  Max length = 10, On-demand ACH routing number
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OnDemandRtNbr *string `json:"onDemandRtNbr,omitempty"`

	//  Max length = 1, Overseas Transactions Message Indicator: Code that indicates whether the functionality to send message alerts for overseas transactions is active. An overseas transaction is an approved authorization for a transaction in which the merchant country code and issuer country code are different.  Values are: 0 = Inactive 1 = Active
	// Max Length: 1
	// Min Length: 0
	OtaSmsInd *string `json:"otaSmsInd,omitempty"`

	//  Max length = 13, Overseas Transactions Treshold: An overseas transaction equal to or greater than this amount initiates a text message to the cardholder.  Valid Values Numeric (whole monetary units)
	// Max Length: 13
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OtaThres *string `json:"otaThres,omitempty"`

	//  Max length = 1, Open-To-Buy Message Indicator: Code that indicates whether the electronic notification feature is inactive (off) or active (on). Defines if the customer receives SMS notifications when the Open-to-Buy has changed on the account. Values are: 0 = Inactive 1 = Active
	// Max Length: 1
	// Min Length: 0
	OtbSmsInd *string `json:"otbSmsInd,omitempty"`

	//  Max length = 11, CMS sends a notification when the account's OTB is less than or equal to this amount. Numeric (whole monetary units)
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OtbThres *string `json:"otbThres,omitempty"`

	//  Max length = 1, Over Limit Alert Opt-in/out Flag: Flag that will indicate account is opted for over limit alert.  Values are:  0 - Alert Option is not opted  1 - Alert will be sent via SMS  2 - Alert will be sent via cardholder EMAIL  3 - Both Email and SMS alert will be sent  9 - Prefer Product/Logo Level Alert Option
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OverLmtAlert *string `json:"overLmtAlert,omitempty"`

	//  Max length = 1, User-defined code that identifies ownership of a business.
	// Max Length: 1
	// Min Length: 0
	Owner *string `json:"owner,omitempty"`

	//  Max length = 1, Code that indicates whether the account is owned by only the owner or by both the owner and co-owner on the Customer Name/Address record. The values are: 0 = Owner only. (Default) 1 = Both owner and co-owner. 2 = Both owner and co-owner, and co-owner is the spouse.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OwnershipFlag *string `json:"ownershipFlag,omitempty"`

	//  Max length = 9, Number of the branch that owns account and location of financial reporting for this account. Number must exist on store file. If the field is left blank, the value will default from the DFAULT BRANCH field on ARML05.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OwningBranch *string `json:"owningBranch,omitempty"`

	//  Max length = 9, Owning Store Number
	// Required: true
	// Pattern: ^(-)?[0-9]{1,9}$
	OwningStoreNbr *string `json:"owningStoreNbr"`

	//  Max length = 1, Code that indicates whether payment hold processing is in effect for the account. The values are: 0 = Payment hold processing is not in effect 1 = Payment hold processing is in effect.  NOTE: If the service Input equals low values, the PAYMENT HOLD  field will contain the value from the PMT  HOLD DEFAULT  field on ARML36. NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are entered, this field is initialised to 0.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PaymentHold *string `json:"paymentHold,omitempty"`

	//  Max length = 1, Payment Remittance Method. Valid values are: <UL><LI> <EM> 0 - </EM> No Remittance Order</LI> <LI><EM> 1 - </EM> Standing Order</LI> <LI><EM> 2 - </EM> Direct Debit</LI></UL>
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PaymentRemitMethod *string `json:"paymentRemitMethod,omitempty"`

	//  Max length = 1, Payment remittance method The values are: 1 = Standing order 2 = Direct debit
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PaymentRemittanceMethod *string `json:"paymentRemittanceMethod,omitempty"`

	//  Max length = 1, Code that indicates if a processing control level override is in effect, and if so, the level for the PCT ID in the PRICING CTRL field. This field enables you to override the processing control level assigned to the account in the Logo record.  Blank = No override in effect (Default) L = Logo O = Organization S = System. The processing control level override is in effect considering START DATE and EXPIRATION DATE. This override is used only for special pricing controls in the PRICING CTRL field
	// Max Length: 1
	// Min Length: 0
	PctLvlOverride *string `json:"pctLvlOverride,omitempty"`

	//  Max length = 5, Plan number for the prepaid account. This field defaults from the PREPAID PLAN field on ARMY02. For prepaid accounts (AMBS-PREPAID-FLAG > 0) and the field is populated with data, field must be numeric.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Plan *string `json:"plan,omitempty"`

	//  Max length = 1, Payment Due Alert opt-in/out Flag: Flag that indicate account is opted for payment due day's alert option.  Values are:  0 - Alert Option is not opted  1 - Alert will be sent via SMS  2 - Alert will be sent via cardholder EMAIL  3 - Both Email and SMS alert will be sent
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtDueAlert *string `json:"pmtDueAlert,omitempty"`

	//  Max length = 2, Payment Due Alert Remainder Days. Values are:  00 -   Payment due remainder days OFF  00 Thru 15  - Payment due remainder days ON  99 -   Payment due remainder days ON only Cycle days
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtDueRemDays *string `json:"pmtDueRemDays,omitempty"`

	// Format: YYYYMMDD. Date on which the preferred interest rebate promotion ends. Field must be numeric For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be a valid Julian date or zeros. NOTE: For prepaid accounts, this field will be initialised to a value of zeros. PREFER END DATE must be greater than PREFER START DATE.NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are provided, this field is initialised to a value of zeros.
	PreferEndDate string `json:"preferEndDate,omitempty"`

	//  Max length = 3, Number of preferential promotional interest rebate days.  For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be numeric. NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are provided, this field is initialised to a value of zeros.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PreferInterestDays *string `json:"preferInterestDays,omitempty"`

	//  Max length = 17, Minimum amount of purchases to qualify for a preferential promotional interest rebate. For non-prepaid accounts (AMBS-PREPAID-FLAG = 0, field must be numeric. NOTE: For prepaid accounts, zeros or nulls are the only valid values. When nulls (nothing) are provided, this field is initialised to a value of zeros.
	// Pattern: ^(-)?[0-9]{1,17}$
	PreferMinimumAmt string `json:"preferMinimumAmt,omitempty"`

	// Format: YYYYMMDD. Date on which to rebate interest for a preferential promotional rebate program. Field must be numeric. For non-prepaid accounts (AMBS-PREPAID-FLAG = 0, field must be a valid Julian date or zeros. NOTE: For prepaid accounts, zeros or nulls are the only valid values.  When nulls (nothing) are entered, this field will be initialised to a value of zeros.
	PreferPromoDate string `json:"preferPromoDate,omitempty"`

	// Format: YYYYMMDD. Date on which the preferred interest rebate promotion starts. Field must be numeric For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be a valid Julian date or zeros.
	PreferStartDate string `json:"preferStartDate,omitempty"`

	//  Max length = 1, Code that indicates whether prepayments are allowed for the account. The values are: 0 = Do not allow prepayments. 1 = Allow prepayments only for transactions associated with logic module 036(prepayment). 2 = Allow prepayments for transactions associated with all payment logic modules (030, 033, 036, and 039). Any overpayment is treated as a prepayment.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PrepmtAllwd *string `json:"prepmtAllwd,omitempty"`

	//  Max length = 2, Number of consecutive months in which the entire computed payment due can be satisfied by a prepaid amount. The default value for this field is set in the Logo record (PRE-PAY MONTHS on ARML14). You can change this value at the account level. This field does not display for debit card accounts.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PrepmtMths *string `json:"prepmtMths,omitempty"`

	//  Max length = 1, Code that determines if the prepaid amount is reset to zero for the account. The default value for this field is set in the Logo record (PREPAY ZERO on ARML14). This field does not display for debit card accounts. The values are: 0 = Set prepaid amount to zero anytime the account has a zero balance or a credit balance. 1 = Set prepaid amount to zero at statement time if the account has a zero balance or a credit balance. 2 = Never set prepaid amount to zero.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PrepmtZero *string `json:"prepmtZero,omitempty"`

	//  Max length = 3, Code that identifies an existing Processing Control Table (PCT ID) used to establish special pricing controls for the account. The PCT ID in this field determines the Account Control table, Service Charge/Fee table, Insurance table, and Interest tables for the account during the period specified by the START DATE and EXPIRATION DATE fields. Validate that the PCT table exists. This field can have a valid value of spaces, numeric or alphabetic characters.
	// Max Length: 3
	// Min Length: 0
	PricingCtrl *string `json:"pricingCtrl,omitempty"`

	//  Max length = 1, Relationship Primary Account Flag: Flag that indicates whether the account is the primary account in the relationship.  Values are:  'P' - Primary Account  space - Not Primary Account
	// Max Length: 1
	// Min Length: 0
	Primary *string `json:"primary,omitempty"`

	//  Max length = 1, Number of occurrence for promotion fields
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PromoNbrOccurs *string `json:"promoNbrOccurs,omitempty"`

	// Current rate variances in effect on the account. For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be numeric.NOTE: For prepaid accounts zeros or nulls are the only valid values.  When nulls (nothing) are provided, field is initialised to zeros.
	RateVariances []*RateVariancesForAccountAdd1 `json:"rateVariances"`

	//  Max length = 19, Identification number of the Relationship record to which this account is assigned. Complete this field only if assigning the account to a relationship. The Relationship record must be established before you can add an account to the relationship.
	// Max Length: 19
	// Min Length: 0
	RelationshipNumber *string `json:"relationshipNumber,omitempty"`

	// Fields provided for an external report-writing program to consolidate and report relationship accounts based on reporting level. Each account to be grouped for consolidated reporting should specify the same reporting level. This feature allows you to group accounts by branches, districts, groups, and other userdefined categories.
	ReportingLevels []string `json:"reportingLevels"`

	//  Max length = 3, For accounts processed by a revolving/  retail product, system uses the residence ID to determine which Processing Control Table identifies the control records that define processing parameters for the account.     NOTE: If the service Input equals low values, the RESIDENCE ID field will contain the value from the RES ID field on ARML13.
	// Max Length: 3
	// Min Length: 0
	ResidenceID *string `json:"residenceId,omitempty"`

	//  Max length = 4, Reward Scheme Identifier
	// Max Length: 4
	// Min Length: 0
	RewardSchemeIdentifier *string `json:"rewardSchemeIdentifier,omitempty"`

	//  Max length = 19, Savings Account Number. If the savings routing number field is populated, the savings account number is required.
	// Max Length: 19
	// Min Length: 0
	SavingsAccountNumber *string `json:"savingsAccountNumber,omitempty"`

	//  Max length = 9, Savings routing number.   Field must be numeric. If the savings account number field is populated, the savings routing number is required.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SavingsRoutingNumber *string `json:"savingsRoutingNumber,omitempty"`

	//  Max length = 20, Short Name of the Account Holder
	// Max Length: 20
	// Min Length: 0
	ShortName *string `json:"shortName,omitempty"`

	//  Max length = 17, Maximum amount (in whole units) that will be accepted for a single subsequent load transaction. CMS defaults the value in this field from the Logo record (SINGLE LOAD MAX AMT on ARML40).
	// Pattern: ^(-)?[0-9]{1,17}$
	SingleLoadMax string `json:"singleLoadMax,omitempty"`

	//  Max length = 17, Minimum amount (in whole units) accepted for a single subsequent load transaction. NOTE: For prepaid accounts, If the service Input equals low values, the SINGLE LOAD MIN field will contain the value from the SINGLE LOAD MIN AMT field on ARML40.
	// Pattern: ^(-)?[0-9]{1,17}$
	SingleLoadMin string `json:"singleLoadMin,omitempty"`

	//  Max length = 1, Payment Skip Flag: Code that indicates whether skip payments are in effect for this account.  Values are: X - Account ineligible for automatic skip payment (logo level) Z - Account eligible for selection if automatic skip payment turned on (Default) A - Automatic skip payment is in effect M - Manual skip payment is in effect V - Override of the automatic skip payment is in effect N - Skip the next cycles payment Y - Insurance skip payment is in effect I - Insurance skip payment is initiate
	// Max Length: 1
	// Min Length: 0
	SkipPayment *string `json:"skipPayment,omitempty"`

	//  Max length = 1, SMS alerts. The values are: 0 = SMS alert is not active 1 = SMS alert is active.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SmsAlerts *string `json:"smsAlerts,omitempty"`

	//  Max length = 20, Code that indicates the source channel. The default value is space The values are: P = Postal S = Store I = Internet T = Telephone.
	// Max Length: 20
	// Min Length: 0
	SourceCode *string `json:"sourceCode,omitempty"`

	//  Max length = 1, CTD Spend Limit Alert Opt-in/out Flag: Flag that will indicate account is opted for spend limit threshold alert.  Values are:  0 - Alert Option is not opted  1 - Alert will be sent via SMS  2 - Alert will be sent via cardholder EMAIL  3 - Both Email and SMS alert will be sent
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpndLmtAlert *string `json:"spndLmtAlert,omitempty"`

	//  Max length = 9, Spend Threshold Amount: Amount after which Spend Limit alert is initiated.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpndLmtAmt *string `json:"spndLmtAmt,omitempty"`

	// Format: YYYYMMDD. Date on which the special pricing controls start for the account. The PRICING CTRL field identifies the special pricing controls. The START DATE must be equal to or greater than the next processing date.  Field must be numeric and a valid Julian date.  If PRICING CTRL field is populated, the start date must be equal to or greater than the org next processing date.
	StartDate string `json:"startDate,omitempty"`

	//  Max length = 1, Statement Flag: Code that indicates how CMS generates a statement for this account.  Values are: Space - Normal (Default) 'C' - Cycle stmt 'I' - Interim statement 'O' - Online/archive-only  'H' - Hold statement 'R' - Returned stmt 'S' - Sign out statement '0' - User-defined statement hold code 10 '1'-'9' - User-defined statement hold code 1 to 9 'U' - Suppress 'Z' - User-defined value that suppresses stmt generation 'T' - Archive  For prepaid accounts, valid values are space, I, O, U, or Z.
	// Max Length: 1
	// Min Length: 0
	StmtFlag *string `json:"stmtFlag,omitempty"`

	//  Max length = 1, Suppress Letter: Code that indicates whether to suppress all letters for the account.   Values are:  0 - Do not suppress letters (Default)  1 - Suppress all letters
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SuppressLtr *string `json:"suppressLtr,omitempty"`

	//  Max length = 19, CMS billing account number to which balances are swept
	// Max Length: 19
	// Min Length: 0
	SweepAccount *string `json:"sweepAccount,omitempty"`

	//  Max length = 1, Code that indicates whether sweep processing is active for this account
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SweepIndicator *string `json:"sweepIndicator,omitempty"`

	//  Max length = 17, Temporary line of credit for the account in whole monetary units. This amount overrides the credit limit assigned to the account . The default is zero. For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), field must be numeric. For non-prepaid accounts, TEMP CREDIT LINE can not equal credit limit. For non-prepaid accounts, TEMP CREDIT LINE provided must not be greater than the logo credit limit ceiling. For non-prepaid accounts in a relationship, TEMP CREDIT LINE is invalid.
	// Pattern: ^(-)?[0-9]{1,17}$
	TempCreditLine string `json:"tempCreditLine,omitempty"`

	// Format: YYYYMMDD. Date on which the temporary line of credit expires. This date must be equal to or greater than today's processing date. This field is required if you enter a temporary line of credit. The default is zero. If this is zeroes there is no temporary limit in effect. Field must be numeric. For non-prepaid accounts (AMBS-PREPAID-FLAG = 0), date must be greater than zeros if the TEMP CREDIT LINE is greater than zeros. Date must be a valid Julian date.
	TempCreditLineExpires string `json:"tempCreditLineExpires,omitempty"`

	//  Max length = 17, Temporary fixed payment amount of the credit limit that CMS uses to calculate the payment amount if the PLAN PMT OVRD FLAG is F, X, A
	// Pattern: ^(-)?[0-9]{1,17}$
	TempFixedPmtAmt string `json:"tempFixedPmtAmt,omitempty"`

	//  Max length = 17, Temporary Fixed payment amount or percentage of the credit limit that CMS uses to calculate the payment amount if the TEMP FIXD PMT MTD/EXP DATE is F, X, P, A, B or C with a valid date.
	// Pattern: ^(-)?[0-9]{1,17}$
	TempFixedPmtAmtPct string `json:"tempFixedPmtAmtPct,omitempty"`

	//  Max length = 1, First part of the field is the Flag that indicates whether CMS overrides the controlling Credit Plan Master record temporarily and assesses a fixed payment or a percentage of credit limit/account balance payment for this account. <P>The values are:<UL><LI>F = A fixed payment is in effect for this account</LI><LI>P = A percentage of credit limit payment is in effect for this account</LI><LI>X = A fixed payment is in effect for this account until purchase activity occurs, either a logic module 001 (purchase) or a logic module 028 (advance check request)</LI><LI>A = A fixed payment is in effect for this account. This option will prorate and distribute the <EM>TEMP FIXD PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>B = A percentage of the account balance is in effect of the account.  This option will prorate and distribute the <EM>TEMP FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>C = A full account balance is in effect of the account.  This option will prorate and distribute the <EM>TEMP FIXED PAYMENT AMOUNT/PERCENT</EM>.</LI><LI>Blank = No override is in effect. (Default)</LI></UL><P>The <EM>TEMP FIXED PAYMENT AMOUNT/PERCENT</EM> field must be greater than zero if this field is F, P, X, A, B or C.Second part of this field indicates the date until which the temporary method will be applicable.This second field must contain a valid date in Gregorian format and is mandatory to provide along with the first part of the field.
	// Max Length: 1
	// Min Length: 0
	TempFixedPmtMthd *string `json:"tempFixedPmtMthd,omitempty"`

	// Format: YYYYMMDD. Temporary fixed payment expiry date.
	TempFixedPmtMthdExp string `json:"tempFixedPmtMthdExp,omitempty"`

	//  Max length = 7, Temporary fixed payment percentage of the credit limit that CMS uses to calculate the payment amount if the PLAN PMT OVRD FLAG is P, B
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TempFixedPmtPct *string `json:"tempFixedPmtPct,omitempty"`

	// Format: YYYYMMDD. User-defined date field that indicates the effective date, expiration date, or other date associated with the special terms and conditions that apply to the account.  Field must be numeric and greater than zeroes if populated. Must be a valid Julian date.
	TermConditionsDate string `json:"termConditionsDate,omitempty"`

	//  Max length = 4, User-defined code that identifies special terms and conditions which currently apply to the account.
	// Max Length: 4
	// Min Length: 0
	TermsConditions *string `json:"termsConditions,omitempty"`

	//  Max length = 19, User-defined account number. This field is required only if the USER ACCOUNT NUMBER is to be encoded into the magnetic stripe of the associated cards.
	// Max Length: 19
	// Min Length: 0
	UserAccountNumber *string `json:"userAccountNumber,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt1 string `json:"userAmt1,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt10 string `json:"userAmt10,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt11 string `json:"userAmt11,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt12 string `json:"userAmt12,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt13 string `json:"userAmt13,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt14 string `json:"userAmt14,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt2 string `json:"userAmt2,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt3 string `json:"userAmt3,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt4 string `json:"userAmt4,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt5 string `json:"userAmt5,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt6 string `json:"userAmt6,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt7 string `json:"userAmt7,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt8 string `json:"userAmt8,omitempty"`

	//  Max length = 17, User Amount. User-defined amounts used for customized information about the account. Must be numeric.
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt9 string `json:"userAmt9,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode1 *string `json:"userCode1,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode10 *string `json:"userCode10,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode11 *string `json:"userCode11,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode12 *string `json:"userCode12,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode13 *string `json:"userCode13,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode14 *string `json:"userCode14,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode2 *string `json:"userCode2,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode3 *string `json:"userCode3,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode4 *string `json:"userCode4,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode5 *string `json:"userCode5,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode6 *string `json:"userCode6,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode7 *string `json:"userCode7,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode8 *string `json:"userCode8,omitempty"`

	//  Max length = 2, User defined code.  User-defined codes used for customized information about the account.
	// Max Length: 2
	// Min Length: 0
	UserCode9 *string `json:"userCode9,omitempty"`

	//  Max length = 19, User Account Number: User-defined account number.
	// Max Length: 19
	// Min Length: 0
	UserData *string `json:"userData,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate1 string `json:"userDate1,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate10 string `json:"userDate10,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate11 string `json:"userDate11,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate12 string `json:"userDate12,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate13 string `json:"userDate13,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate14 string `json:"userDate14,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate2 string `json:"userDate2,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate3 string `json:"userDate3,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate4 string `json:"userDate4,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate5 string `json:"userDate5,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate6 string `json:"userDate6,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate7 string `json:"userDate7,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate8 string `json:"userDate8,omitempty"`

	// Format: YYYYMMDD. User defined date. User-defined dates used for customized information about the account. Field must be a valid Julian date.
	UserDate9 string `json:"userDate9,omitempty"`

	//  Max length = 1, Waive Cash Advance Fee Flag: Flag that indicates whether to waive C/A fees 1 to 5 for the account.  Values are:  0 - Do not waive in A/R but waive in P/L  1 - Waive fee in A/R and P/L   2 - Do not waive fee for accounts in A/R and P/L   3 - Waive fee for accounts in A/R but do not waive this fee in P/L   4 - Waive fee for accounts in A/R and P/L for 1 cycle  5 - Waive fee for accounts in A/R and P/L for 2 cycles  6 - Waive fee for accounts in A/R and P/L for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveCashAdvFee *string `json:"waiveCashAdvFee,omitempty"`

	//  Max length = 1, Cycle spend fee waiver indicator. The values are: 0 = Cycle spend fee is charged 1 = Cycle spend fee is waived.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveCycSpendFee *string `json:"waiveCycSpendFee,omitempty"`

	//  Max length = 1, Waive Interest Charge Flag: Flag that indicates whether to waive interest for the account.  Values are:  0 - Assess interest (Default)  1 - Permanently waive interest charges.  4 - Waive interest charges for 1 cycle  5 - Waive interest charges for 2 cycles  6 - Waive interest charges for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveIntrChg *string `json:"waiveIntrChg,omitempty"`

	//  Max length = 1, Waive Late Charge Flag: Flag that indicates whether to waive late charges for the account.  Values are:  0 - Do not waive late charges (Default)  1 - Permanently Waive late charges.  4 - Waive late charges for 1 cyclewaive  5 - Waive late charges for 2 cycles  6 - Waive late charges for 3 cycles  9 - Waive late charges for cycle 1
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveLateChg *string `json:"waiveLateChg,omitempty"`

	//  Max length = 1, Waive Late Notice Flag: Flag that indicates whether to waive late notices for the account.  Values are:  0 - Do not waive; send late notice (Default)  1  - Permanently waive late notice; do not send.  4 - Waive late notice; do not send for 1 cycle  5 - Waive late notice; do not send for 2 cycles  6 - Waive late notice; do not send for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveLateNotices *string `json:"waiveLateNotices,omitempty"`

	//  Max length = 1, Waive Letter Fee Charge Flag: Flag that indicates whether to waive the letter fee for the account.  Values are:  0 - Do not waive the letter fee (Default)  1 - Permanently waive the letter fee.  4 - Waive letter fee for 1 cycle  5 - Waive letter fee for 2 cycles  6 - Waive letter fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveLtrChg *string `json:"waiveLtrChg,omitempty"`

	//  Max length = 1, Waive Membership Fee Charge Flag:  Flag that indicates whether to waive the annual membership fee for the account. Values are:  0 - Do not waive membership fee (Default)  1 - Permanently waive membership fee.  2 - Waive Initial membership fee  3 - Waive Renewal membership fee  4 - Waive membership fee for 1 cycle  5 - Waive membership fee for 2 cycles  6 - Waive membership fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveMembership *string `json:"waiveMembership,omitempty"`

	//  Max length = 1, Waive NSF Fee indicator: Flag that indicates whether to waive non sufficient funds (NSF) fees for returned checks.  Values are:  0 - Do not waive NSF fees if in accounts/receivable (A/R) and waive if in profit/loss (P/L)  1  - Waive NSF fees in A/R and P/L  2 - Do not waive NSF fees in A/R and P/L  3 - Waive NSF fees in A/R but do not waive in P/L.  4 - Waive NSF fees in A/R and P/L for 1 cycle  5 - Waive NSF fees in A/R and P/L for 2 cycles  6 - Waive NSF fees in A/R and P/L for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveNsfFeeInd *string `json:"waiveNsfFeeInd,omitempty"`

	//  Max length = 1, Waive Over Limit Fee Flag: Flag that indicates whether to waive the overlimit fee.  Values are:  0 - Do not waive the overlimit fee (Default)  1 - Permanently waive overlimit fee  4 - Waive overlimit fee for 1 cycle  5 - Waive overlimit fee for 2 cycles  6 - Waive overlimit fee for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveOverlimitFee *string `json:"waiveOverlimitFee,omitempty"`

	//  Max length = 1, Waive Over Limit Notice Flag: Flag that indicates whether to waive the overlimit notice.  Values are:  0 - Do not waive overlimit notice; send to the account holder (Default)  1  - Permanently waive overlimit notice; do not send.  4 - Waive overlimit notice; do not send for 1 cycle  5 - Waive overlimit notice; do not send for 2 cycles  6 - Waive overlimit notice; do not send for 3 cycles
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveOvlmNotice *string `json:"waiveOvlmNotice,omitempty"`

	//  Max length = 1, Waive Dormancy Fee Flag: Flag that indicates whether to waive dormancy fees for prepaid accounts.  Values are:  0 - Do not waive dormancy fee  1 - Waive dormancy fee    For prepaid accounts (AMBS-PREPAID-FLAG > 0, valid values are 0 or 1. For non-prepaid accounts, the DORMANCY field must equal zeros.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaivePrepaidFeeDormancy *string `json:"waivePrepaidFeeDormancy,omitempty"`

	//  Max length = 1, Waive Refund Fee Flag: Flag that indicates whether to waive refund fees for prepaid accounts.  Values are:  0 - Do not waive refund fee (Default)  1 - Waive refund fee For non-prepaid accounts, the REFUND field must equal zeros.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaivePrepaidFeeRefund *string `json:"waivePrepaidFeeRefund,omitempty"`

	//  Max length = 1, Waive Statement Fee Flag: Flag that indicates whether to waive statement fees for prepaid accounts.  Values are:  0 - Do not waive statement fee (Default)  1 - Waive statement fee
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaivePrepaidFeeStmt *string `json:"waivePrepaidFeeStmt,omitempty"`

	// WAIVE SVC FEES
	WaiveSvcFees []*WaiveSvcFeesForAccountAdd1 `json:"waiveSvcFees"`

	// WAIVE TXN FEE DATA
	WaiveTxnFeeData []*WaiveTxnFeeDataForAccountAdd1 `json:"waiveTxnFeeData"`

	//  Max length = 1, Flag that indicates whether to waive user fees 1 to 6 for the account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveUserFee1 *string `json:"waiveUserFee1,omitempty"`

	//  Max length = 1, Flag that indicates whether to waive user fees 1 to 6 for the account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveUserFee2 *string `json:"waiveUserFee2,omitempty"`

	//  Max length = 1, Flag that indicates whether to waive user fees 1 to 6 for the account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveUserFee3 *string `json:"waiveUserFee3,omitempty"`

	//  Max length = 1, Flag that indicates whether to waive user fees 1 to 6 for the account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveUserFee4 *string `json:"waiveUserFee4,omitempty"`

	//  Max length = 1, Flag that indicates whether to waive user fees 1 to 6 for the account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveUserFee5 *string `json:"waiveUserFee5,omitempty"`

	//  Max length = 1, Flag that indicates whether to waive user fees 1 to 6 for the account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveUserFee6 *string `json:"waiveUserFee6,omitempty"`

	//  Max length = 1, Warning Code: User defined field used by FirstVision authorisations to perform qualifying credit tests.  Values are:  '0' - Normal authorisations (Default)  '1' - Decline  '2' - Decline and pick up  '3' - Decline with fraud code  '4' - Decline with referral  '8' - Decline with a user exit  '9' - VIP account; always approve.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WarningCodes *string `json:"warningCodes,omitempty"`
}

// Validate validates this account add request
func (m *AccountAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountAssociation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctCtlOvrrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltCust(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltCustNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnStmtFlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssNbrOccurs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationLetterFee1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationLetterFee2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationLetterFee3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationLetterFlag1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationLetterFlag2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationLetterFlag3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationStatementFlag1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationStatementFlag2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociationStatementFlag3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtmPckgReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthEppOptFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthLimitOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthSpendLmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthThres(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlkCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlkCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBureauScr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardTech(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashLmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbSpecComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckingAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckingRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollateralCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllingPlanOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdExpr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdNbrScm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdtLmtAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdtLmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditLmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustLetter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustStatement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcRequestDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcRequestDayIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcRtBankid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdAchAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdAchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdCreditBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdDailyFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdDaysFctn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdDaysNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdInterimPayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdNomAmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdNomAmtPctFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdRequestDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdRtBankid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultCashPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultMtPlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPromoPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultRetailPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemandDcIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscCycleInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualBilling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeFromVauAbu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPaymentAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtAmtPerc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexBill(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreqShopInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenBankInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeStoreNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeStoreOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsAcctDflt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsDdaAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsDdaRtngNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsSavAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbsSavRtngNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInHouseScr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncomeTh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndicator1098(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstCrCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstCrFbsc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstCrNbrGenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiabilityIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadFrequencyNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanLmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrHoldCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketingOptOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumLoad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoBillCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageIndicator1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageIndicator2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageIndicator3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscScr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiscUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobPiAllowFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtOfferCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemDcBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemandRtNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtaSmsInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtaThres(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtbSmsInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtbThres(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverLmtAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwningBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwningStoreNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentRemitMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentRemittanceMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctLvlOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtDueAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtDueRemDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferInterestDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferMinimumAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepmtAllwd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepmtMths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepmtZero(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingCtrl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromoNbrOccurs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateVariances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationshipNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardSchemeIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavingsAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavingsRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleLoadMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleLoadMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpndLmtAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpndLmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressLtr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSweepAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSweepIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempCreditLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtAmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtMthd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempFixedPmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCode9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveCashAdvFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveCycSpendFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveIntrChg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveLateChg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveLateNotices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveLtrChg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveMembership(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveNsfFeeInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveOverlimitFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveOvlmNotice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaivePrepaidFeeDormancy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaivePrepaidFeeRefund(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaivePrepaidFeeStmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveSvcFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveTxnFeeData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveUserFee6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarningCodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAddRequest) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAccountAssociation(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountAssociation) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountAssociation); i++ {
		if swag.IsZero(m.AccountAssociation[i]) { // not required
			continue
		}

		if m.AccountAssociation[i] != nil {
			if err := m.AccountAssociation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accountAssociation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountAddRequest) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	if err := validate.MinLength("accountType", "body", string(*m.AccountType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountType", "body", string(*m.AccountType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("accountType", "body", string(*m.AccountType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAcctCtlOvrrd(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctCtlOvrrd) { // not required
		return nil
	}

	if err := validate.MinLength("acctCtlOvrrd", "body", string(*m.AcctCtlOvrrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctCtlOvrrd", "body", string(*m.AcctCtlOvrrd), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAltCust(formats strfmt.Registry) error {

	if swag.IsZero(m.AltCust) { // not required
		return nil
	}

	if err := validate.MinLength("altCust", "body", string(*m.AltCust), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCust", "body", string(*m.AltCust), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAltCustNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AltCustNbr) { // not required
		return nil
	}

	if err := validate.MinLength("altCustNbr", "body", string(*m.AltCustNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCustNbr", "body", string(*m.AltCustNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAnnStmtFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.AnnStmtFlg) { // not required
		return nil
	}

	if err := validate.MinLength("annStmtFlg", "body", string(*m.AnnStmtFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("annStmtFlg", "body", string(*m.AnnStmtFlg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("annStmtFlg", "body", string(*m.AnnStmtFlg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateApplUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplUser1) { // not required
		return nil
	}

	if err := validate.MinLength("applUser1", "body", string(*m.ApplUser1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("applUser1", "body", string(*m.ApplUser1), 20); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateApplUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplUser2) { // not required
		return nil
	}

	if err := validate.MinLength("applUser2", "body", string(*m.ApplUser2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("applUser2", "body", string(*m.ApplUser2), 20); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateApplUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplUser3) { // not required
		return nil
	}

	if err := validate.MinLength("applUser3", "body", string(*m.ApplUser3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("applUser3", "body", string(*m.ApplUser3), 20); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssNbrOccurs(formats strfmt.Registry) error {

	if swag.IsZero(m.AssNbrOccurs) { // not required
		return nil
	}

	if err := validate.MinLength("assNbrOccurs", "body", string(*m.AssNbrOccurs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("assNbrOccurs", "body", string(*m.AssNbrOccurs), 1); err != nil {
		return err
	}

	if err := validate.Pattern("assNbrOccurs", "body", string(*m.AssNbrOccurs), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationLetterFee1(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationLetterFee1) { // not required
		return nil
	}

	if err := validate.MinLength("associationLetterFee1", "body", string(*m.AssociationLetterFee1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationLetterFee1", "body", string(*m.AssociationLetterFee1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationLetterFee1", "body", string(*m.AssociationLetterFee1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationLetterFee2(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationLetterFee2) { // not required
		return nil
	}

	if err := validate.MinLength("associationLetterFee2", "body", string(*m.AssociationLetterFee2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationLetterFee2", "body", string(*m.AssociationLetterFee2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationLetterFee2", "body", string(*m.AssociationLetterFee2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationLetterFee3(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationLetterFee3) { // not required
		return nil
	}

	if err := validate.MinLength("associationLetterFee3", "body", string(*m.AssociationLetterFee3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationLetterFee3", "body", string(*m.AssociationLetterFee3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationLetterFee3", "body", string(*m.AssociationLetterFee3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationLetterFlag1(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationLetterFlag1) { // not required
		return nil
	}

	if err := validate.MinLength("associationLetterFlag1", "body", string(*m.AssociationLetterFlag1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationLetterFlag1", "body", string(*m.AssociationLetterFlag1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationLetterFlag1", "body", string(*m.AssociationLetterFlag1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationLetterFlag2(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationLetterFlag2) { // not required
		return nil
	}

	if err := validate.MinLength("associationLetterFlag2", "body", string(*m.AssociationLetterFlag2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationLetterFlag2", "body", string(*m.AssociationLetterFlag2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationLetterFlag2", "body", string(*m.AssociationLetterFlag2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationLetterFlag3(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationLetterFlag3) { // not required
		return nil
	}

	if err := validate.MinLength("associationLetterFlag3", "body", string(*m.AssociationLetterFlag3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationLetterFlag3", "body", string(*m.AssociationLetterFlag3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationLetterFlag3", "body", string(*m.AssociationLetterFlag3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationStatementFlag1(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationStatementFlag1) { // not required
		return nil
	}

	if err := validate.MinLength("associationStatementFlag1", "body", string(*m.AssociationStatementFlag1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationStatementFlag1", "body", string(*m.AssociationStatementFlag1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationStatementFlag1", "body", string(*m.AssociationStatementFlag1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationStatementFlag2(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationStatementFlag2) { // not required
		return nil
	}

	if err := validate.MinLength("associationStatementFlag2", "body", string(*m.AssociationStatementFlag2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationStatementFlag2", "body", string(*m.AssociationStatementFlag2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationStatementFlag2", "body", string(*m.AssociationStatementFlag2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAssociationStatementFlag3(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociationStatementFlag3) { // not required
		return nil
	}

	if err := validate.MinLength("associationStatementFlag3", "body", string(*m.AssociationStatementFlag3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("associationStatementFlag3", "body", string(*m.AssociationStatementFlag3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("associationStatementFlag3", "body", string(*m.AssociationStatementFlag3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAtmPckgReq(formats strfmt.Registry) error {

	if swag.IsZero(m.AtmPckgReq) { // not required
		return nil
	}

	if err := validate.MinLength("atmPckgReq", "body", string(*m.AtmPckgReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("atmPckgReq", "body", string(*m.AtmPckgReq), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAuthCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthCriteria) { // not required
		return nil
	}

	if err := validate.MinLength("authCriteria", "body", string(*m.AuthCriteria), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authCriteria", "body", string(*m.AuthCriteria), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAuthEppOptFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthEppOptFlag) { // not required
		return nil
	}

	if err := validate.MinLength("authEppOptFlag", "body", string(*m.AuthEppOptFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authEppOptFlag", "body", string(*m.AuthEppOptFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAuthLimitOverrides(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthLimitOverrides) { // not required
		return nil
	}

	if err := validate.MinLength("authLimitOverrides", "body", string(*m.AuthLimitOverrides), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authLimitOverrides", "body", string(*m.AuthLimitOverrides), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authLimitOverrides", "body", string(*m.AuthLimitOverrides), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAuthMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMsg) { // not required
		return nil
	}

	if err := validate.MinLength("authMsg", "body", string(*m.AuthMsg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authMsg", "body", string(*m.AuthMsg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("authMsg", "body", string(*m.AuthMsg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAuthSpendLmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthSpendLmt) { // not required
		return nil
	}

	if err := validate.MinLength("authSpendLmt", "body", string(*m.AuthSpendLmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authSpendLmt", "body", string(*m.AuthSpendLmt), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateAuthThres(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthThres) { // not required
		return nil
	}

	if err := validate.MinLength("authThres", "body", string(*m.AuthThres), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authThres", "body", string(*m.AuthThres), 9); err != nil {
		return err
	}

	if err := validate.Pattern("authThres", "body", string(*m.AuthThres), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateBillingLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingLevel) { // not required
		return nil
	}

	if err := validate.MinLength("billingLevel", "body", string(*m.BillingLevel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billingLevel", "body", string(*m.BillingLevel), 1); err != nil {
		return err
	}

	if err := validate.Pattern("billingLevel", "body", string(*m.BillingLevel), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateBlkCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.BlkCode1) { // not required
		return nil
	}

	if err := validate.MinLength("blkCode1", "body", string(*m.BlkCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blkCode1", "body", string(*m.BlkCode1), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateBlkCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.BlkCode2) { // not required
		return nil
	}

	if err := validate.MinLength("blkCode2", "body", string(*m.BlkCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blkCode2", "body", string(*m.BlkCode2), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateBureauScr(formats strfmt.Registry) error {

	if swag.IsZero(m.BureauScr) { // not required
		return nil
	}

	if err := validate.Pattern("bureauScr", "body", string(m.BureauScr), `^(-)?[0-9]{1,5}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCardTech(formats strfmt.Registry) error {

	if swag.IsZero(m.CardTech) { // not required
		return nil
	}

	if err := validate.MinLength("cardTech", "body", string(*m.CardTech), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardTech", "body", string(*m.CardTech), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cardTech", "body", string(*m.CardTech), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCashLmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CashLmt) { // not required
		return nil
	}

	if err := validate.MinLength("cashLmt", "body", string(*m.CashLmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cashLmt", "body", string(*m.CashLmt), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCbIndicator(formats strfmt.Registry) error {

	if swag.IsZero(m.CbIndicator) { // not required
		return nil
	}

	if err := validate.MinLength("cbIndicator", "body", string(*m.CbIndicator), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cbIndicator", "body", string(*m.CbIndicator), 1); err != nil {
		return err
	}

	if err := validate.Pattern("cbIndicator", "body", string(*m.CbIndicator), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCbSpecComment(formats strfmt.Registry) error {

	if swag.IsZero(m.CbSpecComment) { // not required
		return nil
	}

	if err := validate.MinLength("cbSpecComment", "body", string(*m.CbSpecComment), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cbSpecComment", "body", string(*m.CbSpecComment), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateChanInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ChanInd) { // not required
		return nil
	}

	if err := validate.MinLength("chanInd", "body", string(*m.ChanInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chanInd", "body", string(*m.ChanInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCheckingAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckingAccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("checkingAccountNumber", "body", string(*m.CheckingAccountNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("checkingAccountNumber", "body", string(*m.CheckingAccountNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCheckingRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckingRoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("checkingRoutingNumber", "body", string(*m.CheckingRoutingNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("checkingRoutingNumber", "body", string(*m.CheckingRoutingNumber), 9); err != nil {
		return err
	}

	if err := validate.Pattern("checkingRoutingNumber", "body", string(*m.CheckingRoutingNumber), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCollateralCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CollateralCode) { // not required
		return nil
	}

	if err := validate.MinLength("collateralCode", "body", string(*m.CollateralCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("collateralCode", "body", string(*m.CollateralCode), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAddRequest) validateControllingPlanOverride(formats strfmt.Registry) error {

	if swag.IsZero(m.ControllingPlanOverride) { // not required
		return nil
	}

	if err := validate.MinLength("controllingPlanOverride", "body", string(*m.ControllingPlanOverride), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("controllingPlanOverride", "body", string(*m.ControllingPlanOverride), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCrdExpr(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdExpr) { // not required
		return nil
	}

	if err := validate.MinLength("crdExpr", "body", string(*m.CrdExpr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdExpr", "body", string(*m.CrdExpr), 4); err != nil {
		return err
	}

	if err := validate.Pattern("crdExpr", "body", string(*m.CrdExpr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCrdNbrScm(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdNbrScm) { // not required
		return nil
	}

	if err := validate.MinLength("crdNbrScm", "body", string(*m.CrdNbrScm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdNbrScm", "body", string(*m.CrdNbrScm), 1); err != nil {
		return err
	}

	if err := validate.Pattern("crdNbrScm", "body", string(*m.CrdNbrScm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCrdtLmtAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdtLmtAlert) { // not required
		return nil
	}

	if err := validate.MinLength("crdtLmtAlert", "body", string(*m.CrdtLmtAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdtLmtAlert", "body", string(*m.CrdtLmtAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("crdtLmtAlert", "body", string(*m.CrdtLmtAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCrdtLmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdtLmtAmt) { // not required
		return nil
	}

	if err := validate.MinLength("crdtLmtAmt", "body", string(*m.CrdtLmtAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdtLmtAmt", "body", string(*m.CrdtLmtAmt), 9); err != nil {
		return err
	}

	if err := validate.Pattern("crdtLmtAmt", "body", string(*m.CrdtLmtAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCreditLmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditLmt) { // not required
		return nil
	}

	if err := validate.Pattern("creditLmt", "body", string(m.CreditLmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCustLetter(formats strfmt.Registry) error {

	if swag.IsZero(m.CustLetter) { // not required
		return nil
	}

	if err := validate.MinLength("custLetter", "body", string(*m.CustLetter), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custLetter", "body", string(*m.CustLetter), 1); err != nil {
		return err
	}

	if err := validate.Pattern("custLetter", "body", string(*m.CustLetter), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCustStatement(formats strfmt.Registry) error {

	if swag.IsZero(m.CustStatement) { // not required
		return nil
	}

	if err := validate.MinLength("custStatement", "body", string(*m.CustStatement), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custStatement", "body", string(*m.CustStatement), 1); err != nil {
		return err
	}

	if err := validate.Pattern("custStatement", "body", string(*m.CustStatement), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCustomerNbr(formats strfmt.Registry) error {

	if err := validate.Required("customerNbr", "body", m.CustomerNbr); err != nil {
		return err
	}

	if err := validate.MinLength("customerNbr", "body", string(*m.CustomerNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("customerNbr", "body", string(*m.CustomerNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.Cycle) { // not required
		return nil
	}

	if err := validate.MinLength("cycle", "body", string(*m.Cycle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cycle", "body", string(*m.Cycle), 2); err != nil {
		return err
	}

	if err := validate.Pattern("cycle", "body", string(*m.Cycle), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.DcAccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("dcAccountNumber", "body", string(*m.DcAccountNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAccountNumber", "body", string(*m.DcAccountNumber), 17); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.DcAccountType) { // not required
		return nil
	}

	if err := validate.MinLength("dcAccountType", "body", string(*m.DcAccountType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcAccountType", "body", string(*m.DcAccountType), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.DcAmount) { // not required
		return nil
	}

	if err := validate.Pattern("dcAmount", "body", string(m.DcAmount), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcBic(formats strfmt.Registry) error {

	if swag.IsZero(m.DcBic) { // not required
		return nil
	}

	if err := validate.MinLength("dcBic", "body", string(*m.DcBic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcBic", "body", string(*m.DcBic), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcIban(formats strfmt.Registry) error {

	if swag.IsZero(m.DcIban) { // not required
		return nil
	}

	if err := validate.MinLength("dcIban", "body", string(*m.DcIban), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcIban", "body", string(*m.DcIban), 34); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.DcNbr) { // not required
		return nil
	}

	if err := validate.MinLength("dcNbr", "body", string(*m.DcNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcNbr", "body", string(*m.DcNbr), 17); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.DcPlan) { // not required
		return nil
	}

	if err := validate.MinLength("dcPlan", "body", string(*m.DcPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcPlan", "body", string(*m.DcPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("dcPlan", "body", string(*m.DcPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcRequestDay(formats strfmt.Registry) error {

	if swag.IsZero(m.DcRequestDay) { // not required
		return nil
	}

	if err := validate.MinLength("dcRequestDay", "body", string(*m.DcRequestDay), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcRequestDay", "body", string(*m.DcRequestDay), 2); err != nil {
		return err
	}

	if err := validate.Pattern("dcRequestDay", "body", string(*m.DcRequestDay), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcRequestDayIndicator(formats strfmt.Registry) error {

	if swag.IsZero(m.DcRequestDayIndicator) { // not required
		return nil
	}

	if err := validate.MinLength("dcRequestDayIndicator", "body", string(*m.DcRequestDayIndicator), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcRequestDayIndicator", "body", string(*m.DcRequestDayIndicator), 1); err != nil {
		return err
	}

	if err := validate.Pattern("dcRequestDayIndicator", "body", string(*m.DcRequestDayIndicator), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcRtBankid(formats strfmt.Registry) error {

	if swag.IsZero(m.DcRtBankid) { // not required
		return nil
	}

	if err := validate.MinLength("dcRtBankid", "body", string(*m.DcRtBankid), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcRtBankid", "body", string(*m.DcRtBankid), 10); err != nil {
		return err
	}

	if err := validate.Pattern("dcRtBankid", "body", string(*m.DcRtBankid), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDcType(formats strfmt.Registry) error {

	if swag.IsZero(m.DcType) { // not required
		return nil
	}

	if err := validate.MinLength("dcType", "body", string(*m.DcType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcType", "body", string(*m.DcType), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdAchAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.DdAchAccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("ddAchAccountNumber", "body", string(*m.DdAchAccountNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddAchAccountNumber", "body", string(*m.DdAchAccountNumber), 17); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdAchType(formats strfmt.Registry) error {

	if swag.IsZero(m.DdAchType) { // not required
		return nil
	}

	if err := validate.MinLength("ddAchType", "body", string(*m.DdAchType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddAchType", "body", string(*m.DdAchType), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdBic(formats strfmt.Registry) error {

	if swag.IsZero(m.DdBic) { // not required
		return nil
	}

	if err := validate.MinLength("ddBic", "body", string(*m.DdBic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddBic", "body", string(*m.DdBic), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdCreditBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.DdCreditBalance) { // not required
		return nil
	}

	if err := validate.MinLength("ddCreditBalance", "body", string(*m.DdCreditBalance), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddCreditBalance", "body", string(*m.DdCreditBalance), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddCreditBalance", "body", string(*m.DdCreditBalance), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdDailyFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.DdDailyFrequency) { // not required
		return nil
	}

	if err := validate.MinLength("ddDailyFrequency", "body", string(*m.DdDailyFrequency), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddDailyFrequency", "body", string(*m.DdDailyFrequency), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddDailyFrequency", "body", string(*m.DdDailyFrequency), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdDaysFctn(formats strfmt.Registry) error {

	if swag.IsZero(m.DdDaysFctn) { // not required
		return nil
	}

	if err := validate.MinLength("ddDaysFctn", "body", string(*m.DdDaysFctn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddDaysFctn", "body", string(*m.DdDaysFctn), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddDaysFctn", "body", string(*m.DdDaysFctn), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdDaysNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.DdDaysNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ddDaysNbr", "body", string(*m.DdDaysNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddDaysNbr", "body", string(*m.DdDaysNbr), 2); err != nil {
		return err
	}

	if err := validate.Pattern("ddDaysNbr", "body", string(*m.DdDaysNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdIban(formats strfmt.Registry) error {

	if swag.IsZero(m.DdIban) { // not required
		return nil
	}

	if err := validate.MinLength("ddIban", "body", string(*m.DdIban), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddIban", "body", string(*m.DdIban), 34); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdInterimPayments(formats strfmt.Registry) error {

	if swag.IsZero(m.DdInterimPayments) { // not required
		return nil
	}

	if err := validate.MinLength("ddInterimPayments", "body", string(*m.DdInterimPayments), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddInterimPayments", "body", string(*m.DdInterimPayments), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddInterimPayments", "body", string(*m.DdInterimPayments), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdNomAmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.DdNomAmtPct) { // not required
		return nil
	}

	if err := validate.Pattern("ddNomAmtPct", "body", string(m.DdNomAmtPct), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdNomAmtPctFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.DdNomAmtPctFlag) { // not required
		return nil
	}

	if err := validate.MinLength("ddNomAmtPctFlag", "body", string(*m.DdNomAmtPctFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddNomAmtPctFlag", "body", string(*m.DdNomAmtPctFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddNomAmtPctFlag", "body", string(*m.DdNomAmtPctFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdPayment(formats strfmt.Registry) error {

	if swag.IsZero(m.DdPayment) { // not required
		return nil
	}

	if err := validate.MinLength("ddPayment", "body", string(*m.DdPayment), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddPayment", "body", string(*m.DdPayment), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddPayment", "body", string(*m.DdPayment), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdRequestDay(formats strfmt.Registry) error {

	if swag.IsZero(m.DdRequestDay) { // not required
		return nil
	}

	if err := validate.MinLength("ddRequestDay", "body", string(*m.DdRequestDay), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddRequestDay", "body", string(*m.DdRequestDay), 2); err != nil {
		return err
	}

	if err := validate.Pattern("ddRequestDay", "body", string(*m.DdRequestDay), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDdRtBankid(formats strfmt.Registry) error {

	if swag.IsZero(m.DdRtBankid) { // not required
		return nil
	}

	if err := validate.MinLength("ddRtBankid", "body", string(*m.DdRtBankid), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddRtBankid", "body", string(*m.DdRtBankid), 10); err != nil {
		return err
	}

	if err := validate.Pattern("ddRtBankid", "body", string(*m.DdRtBankid), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDefaultCashPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultCashPlan) { // not required
		return nil
	}

	if err := validate.MinLength("defaultCashPlan", "body", string(*m.DefaultCashPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultCashPlan", "body", string(*m.DefaultCashPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("defaultCashPlan", "body", string(*m.DefaultCashPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDefaultMtPlanNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultMtPlanNbr) { // not required
		return nil
	}

	if err := validate.MinLength("defaultMtPlanNbr", "body", string(*m.DefaultMtPlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultMtPlanNbr", "body", string(*m.DefaultMtPlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("defaultMtPlanNbr", "body", string(*m.DefaultMtPlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDefaultPromoPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPromoPlan) { // not required
		return nil
	}

	if err := validate.MinLength("defaultPromoPlan", "body", string(*m.DefaultPromoPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultPromoPlan", "body", string(*m.DefaultPromoPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("defaultPromoPlan", "body", string(*m.DefaultPromoPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDefaultRetailPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultRetailPlan) { // not required
		return nil
	}

	if err := validate.MinLength("defaultRetailPlan", "body", string(*m.DefaultRetailPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("defaultRetailPlan", "body", string(*m.DefaultRetailPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("defaultRetailPlan", "body", string(*m.DefaultRetailPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDemandDcIban(formats strfmt.Registry) error {

	if swag.IsZero(m.DemandDcIban) { // not required
		return nil
	}

	if err := validate.MinLength("demandDcIban", "body", string(*m.DemandDcIban), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("demandDcIban", "body", string(*m.DemandDcIban), 34); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDiscCycleInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscCycleInd) { // not required
		return nil
	}

	if err := validate.MinLength("discCycleInd", "body", string(*m.DiscCycleInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("discCycleInd", "body", string(*m.DiscCycleInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDualBilling(formats strfmt.Registry) error {

	if swag.IsZero(m.DualBilling) { // not required
		return nil
	}

	if err := validate.MinLength("dualBilling", "body", string(*m.DualBilling), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualBilling", "body", string(*m.DualBilling), 1); err != nil {
		return err
	}

	if err := validate.Pattern("dualBilling", "body", string(*m.DualBilling), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateDue(formats strfmt.Registry) error {

	if swag.IsZero(m.Due) { // not required
		return nil
	}

	if err := validate.MinLength("due", "body", string(*m.Due), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("due", "body", string(*m.Due), 2); err != nil {
		return err
	}

	if err := validate.Pattern("due", "body", string(*m.Due), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateEmpID(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpID) { // not required
		return nil
	}

	if err := validate.MinLength("empId", "body", string(*m.EmpID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empId", "body", string(*m.EmpID), 15); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateEmployeeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeCode) { // not required
		return nil
	}

	if err := validate.MinLength("employeeCode", "body", string(*m.EmployeeCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employeeCode", "body", string(*m.EmployeeCode), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateExcludeFromVauAbu(formats strfmt.Registry) error {

	if swag.IsZero(m.ExcludeFromVauAbu) { // not required
		return nil
	}

	if err := validate.MinLength("excludeFromVauAbu", "body", string(*m.ExcludeFromVauAbu), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("excludeFromVauAbu", "body", string(*m.ExcludeFromVauAbu), 1); err != nil {
		return err
	}

	if err := validate.Pattern("excludeFromVauAbu", "body", string(*m.ExcludeFromVauAbu), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFixedPaymentAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPaymentAmount) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPaymentAmount", "body", string(m.FixedPaymentAmount), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFixedPmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtAmt) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPmtAmt", "body", string(m.FixedPmtAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFixedPmtAmtPerc(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtAmtPerc) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPmtAmtPerc", "body", string(m.FixedPmtAmtPerc), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFixedPmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtPct) { // not required
		return nil
	}

	if err := validate.MinLength("fixedPmtPct", "body", string(*m.FixedPmtPct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fixedPmtPct", "body", string(*m.FixedPmtPct), 7); err != nil {
		return err
	}

	if err := validate.Pattern("fixedPmtPct", "body", string(*m.FixedPmtPct), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFlexBill(formats strfmt.Registry) error {

	if swag.IsZero(m.FlexBill) { // not required
		return nil
	}

	if err := validate.MinLength("flexBill", "body", string(*m.FlexBill), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("flexBill", "body", string(*m.FlexBill), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFraudReport(formats strfmt.Registry) error {

	if swag.IsZero(m.FraudReport) { // not required
		return nil
	}

	if err := validate.MinLength("fraudReport", "body", string(*m.FraudReport), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fraudReport", "body", string(*m.FraudReport), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFreq(formats strfmt.Registry) error {

	if swag.IsZero(m.Freq) { // not required
		return nil
	}

	if err := validate.MinLength("freq", "body", string(*m.Freq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("freq", "body", string(*m.Freq), 2); err != nil {
		return err
	}

	if err := validate.Pattern("freq", "body", string(*m.Freq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateFreqShopInd(formats strfmt.Registry) error {

	if swag.IsZero(m.FreqShopInd) { // not required
		return nil
	}

	if err := validate.MinLength("freqShopInd", "body", string(*m.FreqShopInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("freqShopInd", "body", string(*m.FreqShopInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateGenBankInd(formats strfmt.Registry) error {

	if swag.IsZero(m.GenBankInd) { // not required
		return nil
	}

	if err := validate.MinLength("genBankInd", "body", string(*m.GenBankInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("genBankInd", "body", string(*m.GenBankInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("genBankInd", "body", string(*m.GenBankInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateHomeStoreNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.HomeStoreNbr) { // not required
		return nil
	}

	if err := validate.MinLength("homeStoreNbr", "body", string(*m.HomeStoreNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homeStoreNbr", "body", string(*m.HomeStoreNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("homeStoreNbr", "body", string(*m.HomeStoreNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateHomeStoreOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.HomeStoreOrg) { // not required
		return nil
	}

	if err := validate.MinLength("homeStoreOrg", "body", string(*m.HomeStoreOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homeStoreOrg", "body", string(*m.HomeStoreOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("homeStoreOrg", "body", string(*m.HomeStoreOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIbsAcctDflt(formats strfmt.Registry) error {

	if swag.IsZero(m.IbsAcctDflt) { // not required
		return nil
	}

	if err := validate.MinLength("ibsAcctDflt", "body", string(*m.IbsAcctDflt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsAcctDflt", "body", string(*m.IbsAcctDflt), 2); err != nil {
		return err
	}

	if err := validate.Pattern("ibsAcctDflt", "body", string(*m.IbsAcctDflt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIbsDdaAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.IbsDdaAcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ibsDdaAcctNbr", "body", string(*m.IbsDdaAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsDdaAcctNbr", "body", string(*m.IbsDdaAcctNbr), 17); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIbsDdaRtngNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.IbsDdaRtngNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ibsDdaRtngNbr", "body", string(*m.IbsDdaRtngNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsDdaRtngNbr", "body", string(*m.IbsDdaRtngNbr), 10); err != nil {
		return err
	}

	if err := validate.Pattern("ibsDdaRtngNbr", "body", string(*m.IbsDdaRtngNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIbsSavAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.IbsSavAcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ibsSavAcctNbr", "body", string(*m.IbsSavAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsSavAcctNbr", "body", string(*m.IbsSavAcctNbr), 17); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIbsSavRtngNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.IbsSavRtngNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ibsSavRtngNbr", "body", string(*m.IbsSavRtngNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ibsSavRtngNbr", "body", string(*m.IbsSavRtngNbr), 10); err != nil {
		return err
	}

	if err := validate.Pattern("ibsSavRtngNbr", "body", string(*m.IbsSavRtngNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateInHouseScr(formats strfmt.Registry) error {

	if swag.IsZero(m.InHouseScr) { // not required
		return nil
	}

	if err := validate.Pattern("inHouseScr", "body", string(m.InHouseScr), `^(-)?[0-9]{1,5}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIncomeTh(formats strfmt.Registry) error {

	if swag.IsZero(m.IncomeTh) { // not required
		return nil
	}

	if err := validate.Pattern("incomeTh", "body", string(m.IncomeTh), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIndicator1098(formats strfmt.Registry) error {

	if swag.IsZero(m.Indicator1098) { // not required
		return nil
	}

	if err := validate.MinLength("indicator1098", "body", string(*m.Indicator1098), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("indicator1098", "body", string(*m.Indicator1098), 1); err != nil {
		return err
	}

	if err := validate.Pattern("indicator1098", "body", string(*m.Indicator1098), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateInstCrCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.InstCrCardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("instCrCardNbr", "body", string(*m.InstCrCardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("instCrCardNbr", "body", string(*m.InstCrCardNbr), 16); err != nil {
		return err
	}

	if err := validate.Pattern("instCrCardNbr", "body", string(*m.InstCrCardNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateInstCrFbsc(formats strfmt.Registry) error {

	if swag.IsZero(m.InstCrFbsc) { // not required
		return nil
	}

	if err := validate.MinLength("instCrFbsc", "body", string(*m.InstCrFbsc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("instCrFbsc", "body", string(*m.InstCrFbsc), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateInstCrNbrGenID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstCrNbrGenID) { // not required
		return nil
	}

	if err := validate.MinLength("instCrNbrGenId", "body", string(*m.InstCrNbrGenID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("instCrNbrGenId", "body", string(*m.InstCrNbrGenID), 8); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateIssuanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuanceID) { // not required
		return nil
	}

	if err := validate.MinLength("issuanceId", "body", string(*m.IssuanceID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("issuanceId", "body", string(*m.IssuanceID), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLetterReq(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterReq) { // not required
		return nil
	}

	if err := validate.MinLength("letterReq", "body", string(*m.LetterReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("letterReq", "body", string(*m.LetterReq), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLiabilityIndicator(formats strfmt.Registry) error {

	if swag.IsZero(m.LiabilityIndicator) { // not required
		return nil
	}

	if err := validate.MinLength("liabilityIndicator", "body", string(*m.LiabilityIndicator), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("liabilityIndicator", "body", string(*m.LiabilityIndicator), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLoadFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadFrequency) { // not required
		return nil
	}

	if err := validate.MinLength("loadFrequency", "body", string(*m.LoadFrequency), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("loadFrequency", "body", string(*m.LoadFrequency), 1); err != nil {
		return err
	}

	if err := validate.Pattern("loadFrequency", "body", string(*m.LoadFrequency), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLoadFrequencyNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadFrequencyNumber) { // not required
		return nil
	}

	if err := validate.MinLength("loadFrequencyNumber", "body", string(*m.LoadFrequencyNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("loadFrequencyNumber", "body", string(*m.LoadFrequencyNumber), 2); err != nil {
		return err
	}

	if err := validate.Pattern("loadFrequencyNumber", "body", string(*m.LoadFrequencyNumber), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLoanLmt(formats strfmt.Registry) error {

	if swag.IsZero(m.LoanLmt) { // not required
		return nil
	}

	if err := validate.MinLength("loanLmt", "body", string(*m.LoanLmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("loanLmt", "body", string(*m.LoanLmt), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLogo(formats strfmt.Registry) error {

	if swag.IsZero(m.Logo) { // not required
		return nil
	}

	if err := validate.MinLength("logo", "body", string(*m.Logo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("logo", "body", string(*m.Logo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("logo", "body", string(*m.Logo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateLtrHoldCode(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrHoldCode) { // not required
		return nil
	}

	if err := validate.MinLength("ltrHoldCode", "body", string(*m.LtrHoldCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrHoldCode", "body", string(*m.LtrHoldCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMarketingOptOut(formats strfmt.Registry) error {

	if swag.IsZero(m.MarketingOptOut) { // not required
		return nil
	}

	if err := validate.MinLength("marketingOptOut", "body", string(*m.MarketingOptOut), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("marketingOptOut", "body", string(*m.MarketingOptOut), 1); err != nil {
		return err
	}

	if err := validate.Pattern("marketingOptOut", "body", string(*m.MarketingOptOut), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMaximumLoad(formats strfmt.Registry) error {

	if swag.IsZero(m.MaximumLoad) { // not required
		return nil
	}

	if err := validate.Pattern("maximumLoad", "body", string(m.MaximumLoad), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMemoBillCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoBillCurrency) { // not required
		return nil
	}

	if err := validate.MinLength("memoBillCurrency", "body", string(*m.MemoBillCurrency), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoBillCurrency", "body", string(*m.MemoBillCurrency), 3); err != nil {
		return err
	}

	if err := validate.Pattern("memoBillCurrency", "body", string(*m.MemoBillCurrency), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMessageIndicator1(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageIndicator1) { // not required
		return nil
	}

	if err := validate.MinLength("messageIndicator1", "body", string(*m.MessageIndicator1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("messageIndicator1", "body", string(*m.MessageIndicator1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("messageIndicator1", "body", string(*m.MessageIndicator1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMessageIndicator2(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageIndicator2) { // not required
		return nil
	}

	if err := validate.MinLength("messageIndicator2", "body", string(*m.MessageIndicator2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("messageIndicator2", "body", string(*m.MessageIndicator2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("messageIndicator2", "body", string(*m.MessageIndicator2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMessageIndicator3(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageIndicator3) { // not required
		return nil
	}

	if err := validate.MinLength("messageIndicator3", "body", string(*m.MessageIndicator3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("messageIndicator3", "body", string(*m.MessageIndicator3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("messageIndicator3", "body", string(*m.MessageIndicator3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscScr(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscScr) { // not required
		return nil
	}

	if err := validate.Pattern("miscScr", "body", string(m.MiscScr), `^(-)?[0-9]{1,5}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser1) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser1", "body", string(*m.MiscUser1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser1", "body", string(*m.MiscUser1), 30); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser10(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser10) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser10", "body", string(*m.MiscUser10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser10", "body", string(*m.MiscUser10), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser11(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser11) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser11", "body", string(*m.MiscUser11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser11", "body", string(*m.MiscUser11), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser12(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser12) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser12", "body", string(*m.MiscUser12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser12", "body", string(*m.MiscUser12), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser2) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser2", "body", string(*m.MiscUser2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser2", "body", string(*m.MiscUser2), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser3) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser3", "body", string(*m.MiscUser3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser3", "body", string(*m.MiscUser3), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser4) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser4", "body", string(*m.MiscUser4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser4", "body", string(*m.MiscUser4), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser5) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser5", "body", string(*m.MiscUser5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser5", "body", string(*m.MiscUser5), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser6) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser6", "body", string(*m.MiscUser6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser6", "body", string(*m.MiscUser6), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser7) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser7", "body", string(*m.MiscUser7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser7", "body", string(*m.MiscUser7), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser8) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser8", "body", string(*m.MiscUser8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser8", "body", string(*m.MiscUser8), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMiscUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.MiscUser9) { // not required
		return nil
	}

	if err := validate.MinLength("miscUser9", "body", string(*m.MiscUser9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("miscUser9", "body", string(*m.MiscUser9), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMobPiAllowFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MobPiAllowFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mobPiAllowFlag", "body", string(*m.MobPiAllowFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobPiAllowFlag", "body", string(*m.MobPiAllowFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mobPiAllowFlag", "body", string(*m.MobPiAllowFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateMtOfferCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MtOfferCode) { // not required
		return nil
	}

	if err := validate.MinLength("mtOfferCode", "body", string(*m.MtOfferCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtOfferCode", "body", string(*m.MtOfferCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOfficer(formats strfmt.Registry) error {

	if swag.IsZero(m.Officer) { // not required
		return nil
	}

	if err := validate.MinLength("officer", "body", string(*m.Officer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("officer", "body", string(*m.Officer), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOnDemDcBic(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDemDcBic) { // not required
		return nil
	}

	if err := validate.MinLength("onDemDcBic", "body", string(*m.OnDemDcBic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("onDemDcBic", "body", string(*m.OnDemDcBic), 11); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOnDemandRtNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDemandRtNbr) { // not required
		return nil
	}

	if err := validate.MinLength("onDemandRtNbr", "body", string(*m.OnDemandRtNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("onDemandRtNbr", "body", string(*m.OnDemandRtNbr), 10); err != nil {
		return err
	}

	if err := validate.Pattern("onDemandRtNbr", "body", string(*m.OnDemandRtNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOtaSmsInd(formats strfmt.Registry) error {

	if swag.IsZero(m.OtaSmsInd) { // not required
		return nil
	}

	if err := validate.MinLength("otaSmsInd", "body", string(*m.OtaSmsInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("otaSmsInd", "body", string(*m.OtaSmsInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOtaThres(formats strfmt.Registry) error {

	if swag.IsZero(m.OtaThres) { // not required
		return nil
	}

	if err := validate.MinLength("otaThres", "body", string(*m.OtaThres), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("otaThres", "body", string(*m.OtaThres), 13); err != nil {
		return err
	}

	if err := validate.Pattern("otaThres", "body", string(*m.OtaThres), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOtbSmsInd(formats strfmt.Registry) error {

	if swag.IsZero(m.OtbSmsInd) { // not required
		return nil
	}

	if err := validate.MinLength("otbSmsInd", "body", string(*m.OtbSmsInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("otbSmsInd", "body", string(*m.OtbSmsInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOtbThres(formats strfmt.Registry) error {

	if swag.IsZero(m.OtbThres) { // not required
		return nil
	}

	if err := validate.MinLength("otbThres", "body", string(*m.OtbThres), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("otbThres", "body", string(*m.OtbThres), 11); err != nil {
		return err
	}

	if err := validate.Pattern("otbThres", "body", string(*m.OtbThres), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOverLmtAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.OverLmtAlert) { // not required
		return nil
	}

	if err := validate.MinLength("overLmtAlert", "body", string(*m.OverLmtAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overLmtAlert", "body", string(*m.OverLmtAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("overLmtAlert", "body", string(*m.OverLmtAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if err := validate.MinLength("owner", "body", string(*m.Owner), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("owner", "body", string(*m.Owner), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOwnershipFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnershipFlag) { // not required
		return nil
	}

	if err := validate.MinLength("ownershipFlag", "body", string(*m.OwnershipFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ownershipFlag", "body", string(*m.OwnershipFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ownershipFlag", "body", string(*m.OwnershipFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOwningBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.OwningBranch) { // not required
		return nil
	}

	if err := validate.MinLength("owningBranch", "body", string(*m.OwningBranch), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("owningBranch", "body", string(*m.OwningBranch), 9); err != nil {
		return err
	}

	if err := validate.Pattern("owningBranch", "body", string(*m.OwningBranch), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateOwningStoreNbr(formats strfmt.Registry) error {

	if err := validate.Required("owningStoreNbr", "body", m.OwningStoreNbr); err != nil {
		return err
	}

	if err := validate.Pattern("owningStoreNbr", "body", string(*m.OwningStoreNbr), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePaymentHold(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentHold) { // not required
		return nil
	}

	if err := validate.MinLength("paymentHold", "body", string(*m.PaymentHold), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("paymentHold", "body", string(*m.PaymentHold), 1); err != nil {
		return err
	}

	if err := validate.Pattern("paymentHold", "body", string(*m.PaymentHold), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePaymentRemitMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentRemitMethod) { // not required
		return nil
	}

	if err := validate.MinLength("paymentRemitMethod", "body", string(*m.PaymentRemitMethod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("paymentRemitMethod", "body", string(*m.PaymentRemitMethod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("paymentRemitMethod", "body", string(*m.PaymentRemitMethod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePaymentRemittanceMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentRemittanceMethod) { // not required
		return nil
	}

	if err := validate.MinLength("paymentRemittanceMethod", "body", string(*m.PaymentRemittanceMethod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("paymentRemittanceMethod", "body", string(*m.PaymentRemittanceMethod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("paymentRemittanceMethod", "body", string(*m.PaymentRemittanceMethod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePctLvlOverride(formats strfmt.Registry) error {

	if swag.IsZero(m.PctLvlOverride) { // not required
		return nil
	}

	if err := validate.MinLength("pctLvlOverride", "body", string(*m.PctLvlOverride), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctLvlOverride", "body", string(*m.PctLvlOverride), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if err := validate.MinLength("plan", "body", string(*m.Plan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("plan", "body", string(*m.Plan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("plan", "body", string(*m.Plan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePmtDueAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtDueAlert) { // not required
		return nil
	}

	if err := validate.MinLength("pmtDueAlert", "body", string(*m.PmtDueAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtDueAlert", "body", string(*m.PmtDueAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("pmtDueAlert", "body", string(*m.PmtDueAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePmtDueRemDays(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtDueRemDays) { // not required
		return nil
	}

	if err := validate.MinLength("pmtDueRemDays", "body", string(*m.PmtDueRemDays), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtDueRemDays", "body", string(*m.PmtDueRemDays), 2); err != nil {
		return err
	}

	if err := validate.Pattern("pmtDueRemDays", "body", string(*m.PmtDueRemDays), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePreferInterestDays(formats strfmt.Registry) error {

	if swag.IsZero(m.PreferInterestDays) { // not required
		return nil
	}

	if err := validate.MinLength("preferInterestDays", "body", string(*m.PreferInterestDays), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("preferInterestDays", "body", string(*m.PreferInterestDays), 3); err != nil {
		return err
	}

	if err := validate.Pattern("preferInterestDays", "body", string(*m.PreferInterestDays), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePreferMinimumAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.PreferMinimumAmt) { // not required
		return nil
	}

	if err := validate.Pattern("preferMinimumAmt", "body", string(m.PreferMinimumAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePrepmtAllwd(formats strfmt.Registry) error {

	if swag.IsZero(m.PrepmtAllwd) { // not required
		return nil
	}

	if err := validate.MinLength("prepmtAllwd", "body", string(*m.PrepmtAllwd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prepmtAllwd", "body", string(*m.PrepmtAllwd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("prepmtAllwd", "body", string(*m.PrepmtAllwd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePrepmtMths(formats strfmt.Registry) error {

	if swag.IsZero(m.PrepmtMths) { // not required
		return nil
	}

	if err := validate.MinLength("prepmtMths", "body", string(*m.PrepmtMths), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prepmtMths", "body", string(*m.PrepmtMths), 2); err != nil {
		return err
	}

	if err := validate.Pattern("prepmtMths", "body", string(*m.PrepmtMths), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePrepmtZero(formats strfmt.Registry) error {

	if swag.IsZero(m.PrepmtZero) { // not required
		return nil
	}

	if err := validate.MinLength("prepmtZero", "body", string(*m.PrepmtZero), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prepmtZero", "body", string(*m.PrepmtZero), 1); err != nil {
		return err
	}

	if err := validate.Pattern("prepmtZero", "body", string(*m.PrepmtZero), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePricingCtrl(formats strfmt.Registry) error {

	if swag.IsZero(m.PricingCtrl) { // not required
		return nil
	}

	if err := validate.MinLength("pricingCtrl", "body", string(*m.PricingCtrl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pricingCtrl", "body", string(*m.PricingCtrl), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePrimary(formats strfmt.Registry) error {

	if swag.IsZero(m.Primary) { // not required
		return nil
	}

	if err := validate.MinLength("primary", "body", string(*m.Primary), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("primary", "body", string(*m.Primary), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validatePromoNbrOccurs(formats strfmt.Registry) error {

	if swag.IsZero(m.PromoNbrOccurs) { // not required
		return nil
	}

	if err := validate.MinLength("promoNbrOccurs", "body", string(*m.PromoNbrOccurs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("promoNbrOccurs", "body", string(*m.PromoNbrOccurs), 1); err != nil {
		return err
	}

	if err := validate.Pattern("promoNbrOccurs", "body", string(*m.PromoNbrOccurs), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateRateVariances(formats strfmt.Registry) error {

	if swag.IsZero(m.RateVariances) { // not required
		return nil
	}

	for i := 0; i < len(m.RateVariances); i++ {
		if swag.IsZero(m.RateVariances[i]) { // not required
			continue
		}

		if m.RateVariances[i] != nil {
			if err := m.RateVariances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateVariances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountAddRequest) validateRelationshipNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.RelationshipNumber) { // not required
		return nil
	}

	if err := validate.MinLength("relationshipNumber", "body", string(*m.RelationshipNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("relationshipNumber", "body", string(*m.RelationshipNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateResidenceID(formats strfmt.Registry) error {

	if swag.IsZero(m.ResidenceID) { // not required
		return nil
	}

	if err := validate.MinLength("residenceId", "body", string(*m.ResidenceID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("residenceId", "body", string(*m.ResidenceID), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateRewardSchemeIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.RewardSchemeIdentifier) { // not required
		return nil
	}

	if err := validate.MinLength("rewardSchemeIdentifier", "body", string(*m.RewardSchemeIdentifier), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rewardSchemeIdentifier", "body", string(*m.RewardSchemeIdentifier), 4); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSavingsAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.SavingsAccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("savingsAccountNumber", "body", string(*m.SavingsAccountNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("savingsAccountNumber", "body", string(*m.SavingsAccountNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSavingsRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.SavingsRoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("savingsRoutingNumber", "body", string(*m.SavingsRoutingNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("savingsRoutingNumber", "body", string(*m.SavingsRoutingNumber), 9); err != nil {
		return err
	}

	if err := validate.Pattern("savingsRoutingNumber", "body", string(*m.SavingsRoutingNumber), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateShortName(formats strfmt.Registry) error {

	if swag.IsZero(m.ShortName) { // not required
		return nil
	}

	if err := validate.MinLength("shortName", "body", string(*m.ShortName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("shortName", "body", string(*m.ShortName), 20); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSingleLoadMax(formats strfmt.Registry) error {

	if swag.IsZero(m.SingleLoadMax) { // not required
		return nil
	}

	if err := validate.Pattern("singleLoadMax", "body", string(m.SingleLoadMax), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSingleLoadMin(formats strfmt.Registry) error {

	if swag.IsZero(m.SingleLoadMin) { // not required
		return nil
	}

	if err := validate.Pattern("singleLoadMin", "body", string(m.SingleLoadMin), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSkipPayment(formats strfmt.Registry) error {

	if swag.IsZero(m.SkipPayment) { // not required
		return nil
	}

	if err := validate.MinLength("skipPayment", "body", string(*m.SkipPayment), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("skipPayment", "body", string(*m.SkipPayment), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSmsAlerts(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsAlerts) { // not required
		return nil
	}

	if err := validate.MinLength("smsAlerts", "body", string(*m.SmsAlerts), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("smsAlerts", "body", string(*m.SmsAlerts), 1); err != nil {
		return err
	}

	if err := validate.Pattern("smsAlerts", "body", string(*m.SmsAlerts), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSourceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceCode) { // not required
		return nil
	}

	if err := validate.MinLength("sourceCode", "body", string(*m.SourceCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceCode", "body", string(*m.SourceCode), 20); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSpndLmtAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndLmtAlert) { // not required
		return nil
	}

	if err := validate.MinLength("spndLmtAlert", "body", string(*m.SpndLmtAlert), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spndLmtAlert", "body", string(*m.SpndLmtAlert), 1); err != nil {
		return err
	}

	if err := validate.Pattern("spndLmtAlert", "body", string(*m.SpndLmtAlert), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSpndLmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndLmtAmt) { // not required
		return nil
	}

	if err := validate.MinLength("spndLmtAmt", "body", string(*m.SpndLmtAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spndLmtAmt", "body", string(*m.SpndLmtAmt), 9); err != nil {
		return err
	}

	if err := validate.Pattern("spndLmtAmt", "body", string(*m.SpndLmtAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateStmtFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtFlag) { // not required
		return nil
	}

	if err := validate.MinLength("stmtFlag", "body", string(*m.StmtFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtFlag", "body", string(*m.StmtFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSuppressLtr(formats strfmt.Registry) error {

	if swag.IsZero(m.SuppressLtr) { // not required
		return nil
	}

	if err := validate.MinLength("suppressLtr", "body", string(*m.SuppressLtr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("suppressLtr", "body", string(*m.SuppressLtr), 1); err != nil {
		return err
	}

	if err := validate.Pattern("suppressLtr", "body", string(*m.SuppressLtr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSweepAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.SweepAccount) { // not required
		return nil
	}

	if err := validate.MinLength("sweepAccount", "body", string(*m.SweepAccount), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sweepAccount", "body", string(*m.SweepAccount), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateSweepIndicator(formats strfmt.Registry) error {

	if swag.IsZero(m.SweepIndicator) { // not required
		return nil
	}

	if err := validate.MinLength("sweepIndicator", "body", string(*m.SweepIndicator), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sweepIndicator", "body", string(*m.SweepIndicator), 1); err != nil {
		return err
	}

	if err := validate.Pattern("sweepIndicator", "body", string(*m.SweepIndicator), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateTempCreditLine(formats strfmt.Registry) error {

	if swag.IsZero(m.TempCreditLine) { // not required
		return nil
	}

	if err := validate.Pattern("tempCreditLine", "body", string(m.TempCreditLine), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateTempFixedPmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtAmt) { // not required
		return nil
	}

	if err := validate.Pattern("tempFixedPmtAmt", "body", string(m.TempFixedPmtAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateTempFixedPmtAmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtAmtPct) { // not required
		return nil
	}

	if err := validate.Pattern("tempFixedPmtAmtPct", "body", string(m.TempFixedPmtAmtPct), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateTempFixedPmtMthd(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtMthd) { // not required
		return nil
	}

	if err := validate.MinLength("tempFixedPmtMthd", "body", string(*m.TempFixedPmtMthd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("tempFixedPmtMthd", "body", string(*m.TempFixedPmtMthd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateTempFixedPmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.TempFixedPmtPct) { // not required
		return nil
	}

	if err := validate.MinLength("tempFixedPmtPct", "body", string(*m.TempFixedPmtPct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("tempFixedPmtPct", "body", string(*m.TempFixedPmtPct), 7); err != nil {
		return err
	}

	if err := validate.Pattern("tempFixedPmtPct", "body", string(*m.TempFixedPmtPct), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateTermsConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.TermsConditions) { // not required
		return nil
	}

	if err := validate.MinLength("termsConditions", "body", string(*m.TermsConditions), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("termsConditions", "body", string(*m.TermsConditions), 4); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("userAccountNumber", "body", string(*m.UserAccountNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userAccountNumber", "body", string(*m.UserAccountNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt1) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt1", "body", string(m.UserAmt1), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt10(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt10) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt10", "body", string(m.UserAmt10), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt11(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt11) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt11", "body", string(m.UserAmt11), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt12(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt12) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt12", "body", string(m.UserAmt12), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt13(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt13) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt13", "body", string(m.UserAmt13), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt14(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt14) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt14", "body", string(m.UserAmt14), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt2) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt2", "body", string(m.UserAmt2), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt3) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt3", "body", string(m.UserAmt3), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt4) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt4", "body", string(m.UserAmt4), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt5) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt5", "body", string(m.UserAmt5), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt6) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt6", "body", string(m.UserAmt6), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt7(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt7) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt7", "body", string(m.UserAmt7), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt8(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt8) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt8", "body", string(m.UserAmt8), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserAmt9(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt9) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt9", "body", string(m.UserAmt9), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode1) { // not required
		return nil
	}

	if err := validate.MinLength("userCode1", "body", string(*m.UserCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode1", "body", string(*m.UserCode1), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode10(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode10) { // not required
		return nil
	}

	if err := validate.MinLength("userCode10", "body", string(*m.UserCode10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode10", "body", string(*m.UserCode10), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode11(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode11) { // not required
		return nil
	}

	if err := validate.MinLength("userCode11", "body", string(*m.UserCode11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode11", "body", string(*m.UserCode11), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode12(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode12) { // not required
		return nil
	}

	if err := validate.MinLength("userCode12", "body", string(*m.UserCode12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode12", "body", string(*m.UserCode12), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode13(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode13) { // not required
		return nil
	}

	if err := validate.MinLength("userCode13", "body", string(*m.UserCode13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode13", "body", string(*m.UserCode13), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode14(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode14) { // not required
		return nil
	}

	if err := validate.MinLength("userCode14", "body", string(*m.UserCode14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode14", "body", string(*m.UserCode14), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode2) { // not required
		return nil
	}

	if err := validate.MinLength("userCode2", "body", string(*m.UserCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode2", "body", string(*m.UserCode2), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode3) { // not required
		return nil
	}

	if err := validate.MinLength("userCode3", "body", string(*m.UserCode3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode3", "body", string(*m.UserCode3), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode4) { // not required
		return nil
	}

	if err := validate.MinLength("userCode4", "body", string(*m.UserCode4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode4", "body", string(*m.UserCode4), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode5) { // not required
		return nil
	}

	if err := validate.MinLength("userCode5", "body", string(*m.UserCode5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode5", "body", string(*m.UserCode5), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode6) { // not required
		return nil
	}

	if err := validate.MinLength("userCode6", "body", string(*m.UserCode6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode6", "body", string(*m.UserCode6), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode7(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode7) { // not required
		return nil
	}

	if err := validate.MinLength("userCode7", "body", string(*m.UserCode7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode7", "body", string(*m.UserCode7), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode8(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode8) { // not required
		return nil
	}

	if err := validate.MinLength("userCode8", "body", string(*m.UserCode8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode8", "body", string(*m.UserCode8), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserCode9(formats strfmt.Registry) error {

	if swag.IsZero(m.UserCode9) { // not required
		return nil
	}

	if err := validate.MinLength("userCode9", "body", string(*m.UserCode9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userCode9", "body", string(*m.UserCode9), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateUserData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if err := validate.MinLength("userData", "body", string(*m.UserData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData", "body", string(*m.UserData), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveCashAdvFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveCashAdvFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveCashAdvFee", "body", string(*m.WaiveCashAdvFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveCashAdvFee", "body", string(*m.WaiveCashAdvFee), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveCashAdvFee", "body", string(*m.WaiveCashAdvFee), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveCycSpendFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveCycSpendFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveCycSpendFee", "body", string(*m.WaiveCycSpendFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveCycSpendFee", "body", string(*m.WaiveCycSpendFee), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveCycSpendFee", "body", string(*m.WaiveCycSpendFee), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveIntrChg(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveIntrChg) { // not required
		return nil
	}

	if err := validate.MinLength("waiveIntrChg", "body", string(*m.WaiveIntrChg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveIntrChg", "body", string(*m.WaiveIntrChg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveIntrChg", "body", string(*m.WaiveIntrChg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveLateChg(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveLateChg) { // not required
		return nil
	}

	if err := validate.MinLength("waiveLateChg", "body", string(*m.WaiveLateChg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveLateChg", "body", string(*m.WaiveLateChg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveLateChg", "body", string(*m.WaiveLateChg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveLateNotices(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveLateNotices) { // not required
		return nil
	}

	if err := validate.MinLength("waiveLateNotices", "body", string(*m.WaiveLateNotices), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveLateNotices", "body", string(*m.WaiveLateNotices), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveLateNotices", "body", string(*m.WaiveLateNotices), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveLtrChg(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveLtrChg) { // not required
		return nil
	}

	if err := validate.MinLength("waiveLtrChg", "body", string(*m.WaiveLtrChg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveLtrChg", "body", string(*m.WaiveLtrChg), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveLtrChg", "body", string(*m.WaiveLtrChg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveMembership(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveMembership) { // not required
		return nil
	}

	if err := validate.MinLength("waiveMembership", "body", string(*m.WaiveMembership), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveMembership", "body", string(*m.WaiveMembership), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveMembership", "body", string(*m.WaiveMembership), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveNsfFeeInd(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveNsfFeeInd) { // not required
		return nil
	}

	if err := validate.MinLength("waiveNsfFeeInd", "body", string(*m.WaiveNsfFeeInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveNsfFeeInd", "body", string(*m.WaiveNsfFeeInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveNsfFeeInd", "body", string(*m.WaiveNsfFeeInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveOverlimitFee(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveOverlimitFee) { // not required
		return nil
	}

	if err := validate.MinLength("waiveOverlimitFee", "body", string(*m.WaiveOverlimitFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveOverlimitFee", "body", string(*m.WaiveOverlimitFee), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveOverlimitFee", "body", string(*m.WaiveOverlimitFee), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveOvlmNotice(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveOvlmNotice) { // not required
		return nil
	}

	if err := validate.MinLength("waiveOvlmNotice", "body", string(*m.WaiveOvlmNotice), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveOvlmNotice", "body", string(*m.WaiveOvlmNotice), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveOvlmNotice", "body", string(*m.WaiveOvlmNotice), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaivePrepaidFeeDormancy(formats strfmt.Registry) error {

	if swag.IsZero(m.WaivePrepaidFeeDormancy) { // not required
		return nil
	}

	if err := validate.MinLength("waivePrepaidFeeDormancy", "body", string(*m.WaivePrepaidFeeDormancy), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waivePrepaidFeeDormancy", "body", string(*m.WaivePrepaidFeeDormancy), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waivePrepaidFeeDormancy", "body", string(*m.WaivePrepaidFeeDormancy), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaivePrepaidFeeRefund(formats strfmt.Registry) error {

	if swag.IsZero(m.WaivePrepaidFeeRefund) { // not required
		return nil
	}

	if err := validate.MinLength("waivePrepaidFeeRefund", "body", string(*m.WaivePrepaidFeeRefund), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waivePrepaidFeeRefund", "body", string(*m.WaivePrepaidFeeRefund), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waivePrepaidFeeRefund", "body", string(*m.WaivePrepaidFeeRefund), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaivePrepaidFeeStmt(formats strfmt.Registry) error {

	if swag.IsZero(m.WaivePrepaidFeeStmt) { // not required
		return nil
	}

	if err := validate.MinLength("waivePrepaidFeeStmt", "body", string(*m.WaivePrepaidFeeStmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waivePrepaidFeeStmt", "body", string(*m.WaivePrepaidFeeStmt), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waivePrepaidFeeStmt", "body", string(*m.WaivePrepaidFeeStmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveSvcFees(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveSvcFees) { // not required
		return nil
	}

	for i := 0; i < len(m.WaiveSvcFees); i++ {
		if swag.IsZero(m.WaiveSvcFees[i]) { // not required
			continue
		}

		if m.WaiveSvcFees[i] != nil {
			if err := m.WaiveSvcFees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("waiveSvcFees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountAddRequest) validateWaiveTxnFeeData(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveTxnFeeData) { // not required
		return nil
	}

	for i := 0; i < len(m.WaiveTxnFeeData); i++ {
		if swag.IsZero(m.WaiveTxnFeeData[i]) { // not required
			continue
		}

		if m.WaiveTxnFeeData[i] != nil {
			if err := m.WaiveTxnFeeData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("waiveTxnFeeData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountAddRequest) validateWaiveUserFee1(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee1) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee1", "body", string(*m.WaiveUserFee1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee1", "body", string(*m.WaiveUserFee1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveUserFee1", "body", string(*m.WaiveUserFee1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveUserFee2(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee2) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee2", "body", string(*m.WaiveUserFee2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee2", "body", string(*m.WaiveUserFee2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveUserFee2", "body", string(*m.WaiveUserFee2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveUserFee3(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee3) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee3", "body", string(*m.WaiveUserFee3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee3", "body", string(*m.WaiveUserFee3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveUserFee3", "body", string(*m.WaiveUserFee3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveUserFee4(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee4) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee4", "body", string(*m.WaiveUserFee4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee4", "body", string(*m.WaiveUserFee4), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveUserFee4", "body", string(*m.WaiveUserFee4), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveUserFee5(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee5) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee5", "body", string(*m.WaiveUserFee5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee5", "body", string(*m.WaiveUserFee5), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveUserFee5", "body", string(*m.WaiveUserFee5), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWaiveUserFee6(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveUserFee6) { // not required
		return nil
	}

	if err := validate.MinLength("waiveUserFee6", "body", string(*m.WaiveUserFee6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveUserFee6", "body", string(*m.WaiveUserFee6), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveUserFee6", "body", string(*m.WaiveUserFee6), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAddRequest) validateWarningCodes(formats strfmt.Registry) error {

	if swag.IsZero(m.WarningCodes) { // not required
		return nil
	}

	if err := validate.MinLength("warningCodes", "body", string(*m.WarningCodes), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("warningCodes", "body", string(*m.WarningCodes), 1); err != nil {
		return err
	}

	if err := validate.Pattern("warningCodes", "body", string(*m.WarningCodes), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAddRequest) UnmarshalBinary(b []byte) error {
	var res AccountAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelationshipInquiryRequest2 relationship inquiry request2
//
// swagger:model RelationshipInquiryRequest2
type RelationshipInquiryRequest2 struct {

	//  Max length = 19, Account/Customer/Relationship Number: Number of the Customer's account. Must be numeric and greater than zero. User can input either the account/card number (or) Customer Number (or) Relationship Number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	ActCustRel *string `json:"actCustRel"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse"`

	//  Max length = 1, TYPE:  Value which identifies or denotes the type of number entered in ACT_CUST_REL field. Valid Values are:  0 - Account Number/Embosser Number 1 - Customer Number  2 - Relationship Number
	// Required: true
	// Max Length: 1
	// Min Length: 0
	Type *string `json:"type"`
}

// Validate validates this relationship inquiry request2
func (m *RelationshipInquiryRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActCustRel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelationshipInquiryRequest2) validateActCustRel(formats strfmt.Registry) error {

	if err := validate.Required("actCustRel", "body", m.ActCustRel); err != nil {
		return err
	}

	if err := validate.MinLength("actCustRel", "body", string(*m.ActCustRel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actCustRel", "body", string(*m.ActCustRel), 19); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipInquiryRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipInquiryRequest2) validateForeignUse(formats strfmt.Registry) error {

	if err := validate.Required("foreignUse", "body", m.ForeignUse); err != nil {
		return err
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipInquiryRequest2) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", string(*m.Type), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("type", "body", string(*m.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelationshipInquiryRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelationshipInquiryRequest2) UnmarshalBinary(b []byte) error {
	var res RelationshipInquiryRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

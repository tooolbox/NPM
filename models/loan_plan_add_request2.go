// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoanPlanAddRequest2 loan plan add request2
//
// swagger:model LoanPlanAddRequest2
type LoanPlanAddRequest2 struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.  Must be numeric and greater than zero.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 2, Amortization Data Group; maximum 12 occurrences.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AmortizationData *string `json:"amortizationData,omitempty"`

	//  Max length = 7, CAL-INT-RATE
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CalIntRate *string `json:"calIntRate,omitempty"`

	//  Max length = 17, Amount of first payment for this loan.
	// Pattern: ^(-)?[0-9]{1,17}$
	Cel1stPmt string `json:"cel1stPmt,omitempty"`

	// Format: YYYYMMDD. Date of the first payment.  1.Must be a numeric value. 2.Must be a valid date if entered and cannot be 0. 3.Must be greater than or equal to the  loan date added and greater than or equal to the DATE LAST PROCESSED.
	Cel1stPmtDate string `json:"cel1stPmtDate,omitempty"`

	//  Max length = 7, Acturial Interest Rate for this loan plan.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CelActuarialApr *string `json:"celActuarialApr,omitempty"`

	// Format: YYYYMMDD. Date the loan was initiated.  1.Must be a numeric value.  2 Must be > zeros and a valid Julian date. 3. Agreement date must be > Account Open Date and cannot be > next processing date.      For LOC: If date is not given, then the Today's Julian date is populated.
	// Required: true
	CelAgrmntDate *string `json:"celAgrmntDate"`

	//  Max length = 17, Deposit amount for this loan plan.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelDepositAmt string `json:"celDepositAmt,omitempty"`

	//  Max length = 1, Disbursement Account Indicator: Indicates if the account credited with the loan disbursement is a checking (DDA) or savings account.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CelDisbAcctInd *string `json:"celDisbAcctInd,omitempty"`

	//  Max length = 17, Account number to which the loan disbursement credit transaction is sent.
	// Max Length: 17
	// Min Length: 0
	CelDisbAcctNbr *string `json:"celDisbAcctNbr,omitempty"`

	//  Max length = 10, Bank Identification Number of the account to which the loan disbursement credit transaction is sent.  1.  Must be a numeric value. 2.  When Bank ID  > 0 and org is non ach format, first char must =1. 3.  When  Bank ID > 0 and org is an ACH format, first char can not =1.
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CelDisbBankID *string `json:"celDisbBankId,omitempty"`

	//  Max length = 1, User-defined loan dispersal method.
	// Max Length: 1
	// Min Length: 0
	CelDispersalMethod *string `json:"celDispersalMethod,omitempty"`

	//  Max length = 17, Amount of final payment for this loan.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelFinalPmt string `json:"celFinalPmt,omitempty"`

	// Format: YYYYMMDD. Date of the final payment.  1. Must be a numeric value.  2. Must be a valid  Julian date if entered and cannot be 0. 3. Must be greater than or equal to the loan date added. 4. Must be greater than FIRST PAYMENT DATE.
	CelFinalPmtDate string `json:"celFinalPmtDate,omitempty"`

	//  Max length = 1, Code that indicates whether the initial insurance amount is the max. amount allowed for this loan credit plan. Values are: 0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelInsCapInd *string `json:"celInsCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how insurance is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelInsCciInd *string `json:"celInsCciInd,omitempty"`

	//  Max length = 7, Current Interest Rate this loan plan.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CelIntApr *string `json:"celIntApr,omitempty"`

	//  Max length = 17, Current precomputed fixed interest amount for this loan plan.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelIntFlatAmt string `json:"celIntFlatAmt,omitempty"`

	//  Max length = 7, Fixed interest rate that is currently in effect for the loan plan.
	// Pattern: ^(-)?[0-9]{1,7}$
	CelIntRate string `json:"celIntRate,omitempty"`

	//  Max length = 1, Code that indicates whether the initial interest amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount.  1 - Amount is capped at the initial amount. The final amount charged and consequently, paid may never exceed the initial interest amount.  2 - Amount is capped at the initial amount for a delinquent account for number of days defined in field CAP DELQ DAYS.   space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelInterestCapInd *string `json:"celInterestCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how interest is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  2 - Precomputed flat amount periodically charged for interest only.   3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelInterestCciInd *string `json:"celInterestCciInd,omitempty"`

	// Format: YYYYMMDD. Effective date for the next interest rate.
	CelNextIntEffDt string `json:"celNextIntEffDt,omitempty"`

	//  Max length = 7, Interest rate that will go into effect on the next interest effective date.
	// Pattern: ^(-)?[0-9]{1,7}$
	CelNextIntRate string `json:"celNextIntRate,omitempty"`

	//  Max length = 17, Amount of insurance disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdIns string `json:"celOrigDsclsdIns,omitempty"`

	//  Max length = 17, Amount of interest disclosed on the loan.  1. Must be numeric. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal. For LOC: The interest amount is calculated on the basis of rate of interest and principal amount. If Input is given, it will not be considered, Because the interest may not match with the Input values.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdInt string `json:"celOrigDsclsdInt,omitempty"`

	//  Max length = 17, Amount at which the loan amount was disclosed on the loan  1. Must be a numeric value and not equal to zeros 2. Must equal the sum of Principal, Interest, Insurance and User fees 1-6 (Disclosed) Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal. For LOC: - The loan amount is calculated on the basis of rate of interest using the principal amount. If Input is given, it will not be considered, Because the loan may not match with the Input values.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdLoan *string `json:"celOrigDsclsdLoan"`

	//  Max length = 17, Amount at which the principal was disclosed on the loan.  1. Must be a numeric value and > 0. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdPrin *string `json:"celOrigDsclsdPrin"`

	//  Max length = 17, Amount at which the user-defined fee was disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdUsr1 string `json:"celOrigDsclsdUsr1,omitempty"`

	//  Max length = 17, Amount at which the user-defined fee was disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdUsr2 string `json:"celOrigDsclsdUsr2,omitempty"`

	//  Max length = 17, Amount at which the user-defined fee was disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdUsr3 string `json:"celOrigDsclsdUsr3,omitempty"`

	//  Max length = 17, Amount at which the user-defined fee was disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdUsr4 string `json:"celOrigDsclsdUsr4,omitempty"`

	//  Max length = 17, Amount at which the user-defined fee was disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdUsr5 string `json:"celOrigDsclsdUsr5,omitempty"`

	//  Max length = 17, Amount at which the user-defined fee was disclosed on the loan.  1. Must be a numeric value. Cross Edits: 1.  Compare disclosed amounts against loan amount disclosed, these amounts must be equal.
	// Pattern: ^(-)?[0-9]{1,17}$
	CelOrigDsclsdUsr6 string `json:"celOrigDsclsdUsr6,omitempty"`

	//  Max length = 3, 1. When a value of spaces default this field from Credit Plan Master 2. Must be a numeric value 3.  Must be > 0
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CelOrigTerm *string `json:"celOrigTerm,omitempty"`

	//  Max length = 1, Code that indicates whether the initial user-defined fee amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount included in the loan setup transaction.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelUsr1FeeCapInd *string `json:"celUsr1FeeCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how user-defined fee is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelUsr1FeeCciInd *string `json:"celUsr1FeeCciInd,omitempty"`

	//  Max length = 1, Code that indicates whether the initial user-defined fee amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount included in the loan setup transaction.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelUsr2FeeCapInd *string `json:"celUsr2FeeCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how user-defined fee is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelUsr2FeeCciInd *string `json:"celUsr2FeeCciInd,omitempty"`

	//  Max length = 1, Code that indicates whether the initial user-defined fee amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount included in the loan setup transaction.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelUsr3FeeCapInd *string `json:"celUsr3FeeCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how user-defined fee is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelUsr3FeeCciInd *string `json:"celUsr3FeeCciInd,omitempty"`

	//  Max length = 1, Code that indicates whether the initial user-defined fee amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount included in the loan setup transaction.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelUsr4FeeCapInd *string `json:"celUsr4FeeCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how user-defined fee is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelUsr4FeeCciInd *string `json:"celUsr4FeeCciInd,omitempty"`

	//  Max length = 1, Code that indicates whether the initial user-defined fee amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount included in the loan setup transaction.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelUsr5FeeCapInd *string `json:"celUsr5FeeCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how user-defined fee is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelUsr5FeeCciInd *string `json:"celUsr5FeeCciInd,omitempty"`

	//  Max length = 1, Code that indicates whether the initial user-defined fee amount is the max. amount allowed for this loan credit plan.  Values are:  0 - Amount is not capped at the initial amount. 1 - Amount is capped at the initial amount. The final amount charged and consequently paid may never exceed the initial amount included in the loan setup transaction.    space - take default from the CREDIT PLAN MASTER.
	// Max Length: 1
	// Min Length: 0
	CelUsr6FeeCapInd *string `json:"celUsr6FeeCapInd,omitempty"`

	//  Max length = 1, Component calculation indicator that determines how user-defined fee is loaded or processed for this loan credit plan.  values are:  0 - System calculated. Calculate and bill interest each month. (Default)  1 - Precomputed lump sum.  3 - Billed from loan schedule.  space - take default from the CREDIT PLAN MASTER. Cross Edits: 1.  When PI = 2 CCI must = 1
	// Max Length: 1
	// Min Length: 0
	CelUsr6FeeCciInd *string `json:"celUsr6FeeCciInd,omitempty"`

	//  Max length = 2, COMM-SUBY-Table; 2 occurrences.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CommSubNbrOccurs *string `json:"commSubNbrOccurs,omitempty"`

	// COMM-SUBY-Table Group.
	CommSubyTable []*CommSubyTable2ForLoanPlanAdd2 `json:"commSubyTable"`

	// common
	Common *Header `json:"common,omitempty"`

	// Format: YYYYMMDD. Date on which the payment deferment period ends and payments begin. CMS begins requesting payments on the first cycle date that falls on or after this date.  1.  Must be a numeric value 2.  If BEG-PMT is not zeros, then date must be > plan date 3.  Must be a valid julian date
	DateBegPmt string `json:"dateBegPmt,omitempty"`

	//  Max length = 17, Amount of the fixed payment defined for this Credit Plan Segment record.
	// Pattern: ^(-)?[0-9]{1,17}$
	FixedPmtAmt string `json:"fixedPmtAmt,omitempty"`

	//  Max length = 1, Loan Schedule Flag. If flag is equal to 1, the loan schedule is generated according to the data brought in on Input.
	// Max Length: 1
	// Min Length: 0
	LoanSchedFlag *string `json:"loanSchedFlag,omitempty"`

	//  Max length = 3, Loan Schedule Data Group. Maximum 120 occurrences.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LoanScheduleData *string `json:"loanScheduleData,omitempty"`

	// Format: YYYYMMDD. Plan Date: Date on which the Credit Plan Segment record was opened, or generated, for the account.  1. Must be a numeric value and a valid julian date/Cannot be 0.  2. Cannot be > the next processing date and  cannot be < AMBS open date.  3. Must be a valid date. For ALOP: - if date is not given, Then the Today's Julian date is populated.
	// Required: true
	PlanDate *string `json:"planDate"`

	//  Max length = 40, Credit Plan Description: Description of the Credit Plan. For loan plans, can be description of the transaction that creates the plan segment.
	// Max Length: 40
	// Min Length: 0
	PlanDesc *string `json:"planDesc,omitempty"`

	//  Max length = 5, Credit Plan Number: Identifies the plan number of the Credit Plan Master record associated with the Credit Plan Segment record.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNbr *string `json:"planNbr"`

	//  Max length = 1, Payment Flag Indicates the payment type in effect for the Credit Plan Segment record.  1. When not a space, Input value must  be  a valid payment type  of A,B,C,D,E,F,G,H,I,L,M,P,Q,R,S,T,U,W,X. 2. A value of '_' space, the PAYMENT TYPE is interpreted as instruction to take the default from the Credit Plan Master.
	// Max Length: 1
	// Min Length: 0
	PmtFlag *string `json:"pmtFlag,omitempty"`

	//  Max length = 2, Payment Holiday Month. Values are 00 to 12.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtHdayMth *string `json:"pmtHdayMth,omitempty"`

	//  Max length = 5, User defined code for the individual loan credit plan segment.
	// Max Length: 5
	// Min Length: 0
	ProductCode *string `json:"productCode,omitempty"`

	//  Max length = 7, Date that identifies the second rebate Expiry Date.  1. Field Must be a numeric value. 2. Applies only to CPM that have a Posting Indicator = 2.  3. rebate-init-expr-date must be > plan date. 4.when rebate-per-ind = zeros and rebate init expr date > 0. 5. When rebate-per-ind = 4 and rebate init expr date = 0.  6. When rebate-per-ind = 1,2,3 and rebate init expr date > 0.  7.Must a valid date.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndExprDate *string `json:"rebate2ndExprDate,omitempty"`

	//  Max length = 1, Code that indicates if insurance is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndInsInd *string `json:"rebate2ndInsInd,omitempty"`

	//  Max length = 1, Code that indicates if interest is rebated in the second rebate period. 1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndIntInd *string `json:"rebate2ndIntInd,omitempty"`

	//  Max length = 5, Percent applied to designated rebatable components for the second rebate period.  1. Must be a numeric value.  2. Applies only to Posting Indicator = 2. 3. Must not be > 100%. 4.  Must not be > REBATE PERCENT INITIAL.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndPct *string `json:"rebate2ndPct,omitempty"`

	//  Max length = 3, Second Rebate Period: Code that indicates the second rebate period.  1. Must be a numeric value. 2. Applies only to Credit Plan Master that have a Posting Indicator=2. 3. If REBATE PERIOD  2ND INDICATOR is numeric and REBATE-PER-IND = Zeros and REB-2ND-PER = Zeros or REBATE-PER-IND = 4 and REB-2ND-PER = Zeros or REBATE-PER-IND  = 1,2,3 and  REB-2ND-PER > 0; then this is valid.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndPer *string `json:"rebate2ndPer,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 1 is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndUf1Ind *string `json:"rebate2ndUf1Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 2 is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndUf2Ind *string `json:"rebate2ndUf2Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 3 is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndUf3Ind *string `json:"rebate2ndUf3Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 4 is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndUf4Ind *string `json:"rebate2ndUf4Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 5 is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndUf5Ind *string `json:"rebate2ndUf5Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 6 is rebated in the second rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the second rebate percent if the settlement payment amount is paid before the second rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Rebate2ndUf6Ind *string `json:"rebate2ndUf6Ind,omitempty"`

	// Format: YYYYMMDD. Date that identifies the initial rebate period.  1. Field Must be a numeric value. 2. Applies only to CPM that have a Posting Indicator = 2. 3. Rebate-init-expr-date must be > plan date. 4. When rebate-per-ind = zeros and rebate init expr date > 0. 5. When rebate-per-ind = 4 and rebate init expr date = 0. 6. When rebate-per-ind = 1,2,3 and rebate init expr date > 0. 7. Must be a valid date.
	RebateInitExpDate string `json:"rebateInitExpDate,omitempty"`

	//  Max length = 1, Code that indicates if insurance is rebated in the initial rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitInsInd *string `json:"rebateInitInsInd,omitempty"`

	//  Max length = 1, Code that indicates if interest is rebated in the initial rebate period.  1. Must be a numeric value. 2. When Field is entered > 0, applies only to Posting Indicator = 2. 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitIntInd *string `json:"rebateInitIntInd,omitempty"`

	//  Max length = 5, Percent applied to designated rebatable components for the initial rebate period.  1. Must be a numeric value. 2. Applies only to Posting Indicator = 2. 3. Must not be > 100%. 4. If REBATE PERIOD INDICATOR is 0, this field must be zero.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitPct *string `json:"rebateInitPct,omitempty"`

	//  Max length = 3, Initial Rebate Period: Code that indicates the initial rebate period.  1. Must be a numeric value. 2. Applies only to Credit Plan Master that have a Posting Indicator=2. 3. If REBATE PERIOD INDICATOR is numeric and (REBATE-PER-IND = Zeros and REB-INT-PER = Zeros or REBATE-PER-IND = 4 and REB-INT-PER = Zeros or REBATE-PER-IND  = 1,2,3 and  REB-IND-PER>0)  This is valid.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitPer *string `json:"rebateInitPer,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 1 is rebated in the initial rebate period.  1. Must be a numeric value 2. When Field is entered > 0, applies only to Posting Indicator = 2 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitUf1Ind *string `json:"rebateInitUf1Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 2 is rebated in the initial rebate period.  1. Must be a numeric value 2. When Field is entered > 0, applies only to Posting Indicator = 2 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitUf2Ind *string `json:"rebateInitUf2Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 3 is rebated in the initial rebate period.  1. Must be a numeric value 2. When Field is entered > 0, applies only to Posting Indicator = 2 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitUf3Ind *string `json:"rebateInitUf3Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 4 is rebated in the initial rebate period.  1. Must be a numeric value 2. When Field is entered > 0, applies only to Posting Indicator = 2 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitUf4Ind *string `json:"rebateInitUf4Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 5 is rebated in the initial rebate period.  1. Must be a numeric value 2. When Field is entered > 0, applies only to Posting Indicator = 2 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitUf5Ind *string `json:"rebateInitUf5Ind,omitempty"`

	//  Max length = 1, Code that indicates if user-defined fee 6 is rebated in the initial rebate period.  1. Must be a numeric value 2. When Field is entered > 0, applies only to Posting Indicator = 2 3.  Valid values are:  0 - Use the normal rebate rules, if applicable (Default)  1 - Rebate using the initial rebate percent if the settlement payment amount is paid before the initial rebate expire date.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebateInitUf6Ind *string `json:"rebateInitUf6Ind,omitempty"`

	//  Max length = 1, Rebate Period Indicator: Code that indicates the occurrence of the rebate period and applies to the initial and second rebate periods.  1.  Must be a numeric value. 2.  Applies only to Credit Plan Masters that have a PI=2. 3.  Valid Values = 0,1,2,3,4 (note: 0= default all rebate parameters from Credit Plan Master).
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RebatePerInd *string `json:"rebatePerInd,omitempty"`

	//  Max length = 23, Plan reference number: User-defined reference number assigned to each Credit Plan Segment record. 1.  If this field is not provided on Input, or a space is the value, CMS ARMC10 control record is consulted to determine if and how the reference number is generated.  If no reference number is Input, and the CMS control record REFERENCE NUM = 0 the data is rejected. 2.  If a reference number is provided, the account is consulted to determine that the reference number is unique.
	// Max Length: 23
	// Min Length: 0
	RefNbr *string `json:"refNbr,omitempty"`

	//  Max length = 9, Store identification number: Store number used for transaction posting. This may represent the actual store where the transaction was made( in a retail transaction) or it may be a default value that does not represent a physical store location.   1. Store Org and number Must be a numeric value. 2. For Bankcard accounts both store and org number must be zero. 3. When not bankcard, store org and number must exist on AMSD, and must have an active status.  They cannot be Add Pending.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StoreNbr *string `json:"storeNbr,omitempty"`

	//  Max length = 3, Store organisation number: Organisation number of store used for transaction posting. This may represent the ORG of the actual store where the transaction was made or it may be a default value that does not represent a physical store location.   1. Store Org and number must be a numeric value. 2. For Bankcard accounts both store and org number must be zero. 3. When not bankcard, store org and number must exist on AMSD, and must have an active status.  They cannot be Add Pending.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StoreOrg *string `json:"storeOrg,omitempty"`

	//  Max length = 2, USER INPUT DATA
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	UserInputData *string `json:"userInputData,omitempty"`
}

// Validate validates this loan plan add request2
func (m *LoanPlanAddRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmortizationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalIntRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCel1stPmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelActuarialApr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelAgrmntDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelDepositAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelDisbAcctInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelDisbAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelDisbBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelDispersalMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelFinalPmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelInsCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelInsCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelIntApr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelIntFlatAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelIntRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelInterestCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelInterestCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelNextIntRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdIns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdInt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdLoan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdPrin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdUsr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdUsr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdUsr3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdUsr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdUsr5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigDsclsdUsr6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelOrigTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr1FeeCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr1FeeCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr2FeeCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr2FeeCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr3FeeCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr3FeeCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr4FeeCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr4FeeCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr5FeeCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr5FeeCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr6FeeCapInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCelUsr6FeeCciInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommSubNbrOccurs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommSubyTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanSchedFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanScheduleData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtHdayMth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndExprDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndInsInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndIntInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndPer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndUf1Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndUf2Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndUf3Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndUf4Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndUf5Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebate2ndUf6Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitInsInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitIntInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitPer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitUf1Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitUf2Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitUf3Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitUf4Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitUf5Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebateInitUf6Ind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebatePerInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserInputData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoanPlanAddRequest2) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateAmortizationData(formats strfmt.Registry) error {

	if swag.IsZero(m.AmortizationData) { // not required
		return nil
	}

	if err := validate.MinLength("amortizationData", "body", string(*m.AmortizationData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amortizationData", "body", string(*m.AmortizationData), 2); err != nil {
		return err
	}

	if err := validate.Pattern("amortizationData", "body", string(*m.AmortizationData), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCalIntRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CalIntRate) { // not required
		return nil
	}

	if err := validate.MinLength("calIntRate", "body", string(*m.CalIntRate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("calIntRate", "body", string(*m.CalIntRate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("calIntRate", "body", string(*m.CalIntRate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCel1stPmt(formats strfmt.Registry) error {

	if swag.IsZero(m.Cel1stPmt) { // not required
		return nil
	}

	if err := validate.Pattern("cel1stPmt", "body", string(m.Cel1stPmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelActuarialApr(formats strfmt.Registry) error {

	if swag.IsZero(m.CelActuarialApr) { // not required
		return nil
	}

	if err := validate.MinLength("celActuarialApr", "body", string(*m.CelActuarialApr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celActuarialApr", "body", string(*m.CelActuarialApr), 7); err != nil {
		return err
	}

	if err := validate.Pattern("celActuarialApr", "body", string(*m.CelActuarialApr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelAgrmntDate(formats strfmt.Registry) error {

	if err := validate.Required("celAgrmntDate", "body", m.CelAgrmntDate); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelDepositAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CelDepositAmt) { // not required
		return nil
	}

	if err := validate.Pattern("celDepositAmt", "body", string(m.CelDepositAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelDisbAcctInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelDisbAcctInd) { // not required
		return nil
	}

	if err := validate.MinLength("celDisbAcctInd", "body", string(*m.CelDisbAcctInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celDisbAcctInd", "body", string(*m.CelDisbAcctInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("celDisbAcctInd", "body", string(*m.CelDisbAcctInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelDisbAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CelDisbAcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("celDisbAcctNbr", "body", string(*m.CelDisbAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celDisbAcctNbr", "body", string(*m.CelDisbAcctNbr), 17); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelDisbBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.CelDisbBankID) { // not required
		return nil
	}

	if err := validate.MinLength("celDisbBankId", "body", string(*m.CelDisbBankID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celDisbBankId", "body", string(*m.CelDisbBankID), 10); err != nil {
		return err
	}

	if err := validate.Pattern("celDisbBankId", "body", string(*m.CelDisbBankID), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelDispersalMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.CelDispersalMethod) { // not required
		return nil
	}

	if err := validate.MinLength("celDispersalMethod", "body", string(*m.CelDispersalMethod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celDispersalMethod", "body", string(*m.CelDispersalMethod), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelFinalPmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CelFinalPmt) { // not required
		return nil
	}

	if err := validate.Pattern("celFinalPmt", "body", string(m.CelFinalPmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelInsCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelInsCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celInsCapInd", "body", string(*m.CelInsCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celInsCapInd", "body", string(*m.CelInsCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelInsCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelInsCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celInsCciInd", "body", string(*m.CelInsCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celInsCciInd", "body", string(*m.CelInsCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelIntApr(formats strfmt.Registry) error {

	if swag.IsZero(m.CelIntApr) { // not required
		return nil
	}

	if err := validate.MinLength("celIntApr", "body", string(*m.CelIntApr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celIntApr", "body", string(*m.CelIntApr), 7); err != nil {
		return err
	}

	if err := validate.Pattern("celIntApr", "body", string(*m.CelIntApr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelIntFlatAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.CelIntFlatAmt) { // not required
		return nil
	}

	if err := validate.Pattern("celIntFlatAmt", "body", string(m.CelIntFlatAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelIntRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CelIntRate) { // not required
		return nil
	}

	if err := validate.Pattern("celIntRate", "body", string(m.CelIntRate), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelInterestCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelInterestCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celInterestCapInd", "body", string(*m.CelInterestCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celInterestCapInd", "body", string(*m.CelInterestCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelInterestCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelInterestCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celInterestCciInd", "body", string(*m.CelInterestCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celInterestCciInd", "body", string(*m.CelInterestCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelNextIntRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CelNextIntRate) { // not required
		return nil
	}

	if err := validate.Pattern("celNextIntRate", "body", string(m.CelNextIntRate), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdIns(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdIns) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdIns", "body", string(m.CelOrigDsclsdIns), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdInt(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdInt) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdInt", "body", string(m.CelOrigDsclsdInt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdLoan(formats strfmt.Registry) error {

	if err := validate.Required("celOrigDsclsdLoan", "body", m.CelOrigDsclsdLoan); err != nil {
		return err
	}

	if err := validate.Pattern("celOrigDsclsdLoan", "body", string(*m.CelOrigDsclsdLoan), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdPrin(formats strfmt.Registry) error {

	if err := validate.Required("celOrigDsclsdPrin", "body", m.CelOrigDsclsdPrin); err != nil {
		return err
	}

	if err := validate.Pattern("celOrigDsclsdPrin", "body", string(*m.CelOrigDsclsdPrin), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdUsr1(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdUsr1) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdUsr1", "body", string(m.CelOrigDsclsdUsr1), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdUsr2(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdUsr2) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdUsr2", "body", string(m.CelOrigDsclsdUsr2), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdUsr3(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdUsr3) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdUsr3", "body", string(m.CelOrigDsclsdUsr3), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdUsr4(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdUsr4) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdUsr4", "body", string(m.CelOrigDsclsdUsr4), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdUsr5(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdUsr5) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdUsr5", "body", string(m.CelOrigDsclsdUsr5), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigDsclsdUsr6(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigDsclsdUsr6) { // not required
		return nil
	}

	if err := validate.Pattern("celOrigDsclsdUsr6", "body", string(m.CelOrigDsclsdUsr6), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelOrigTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.CelOrigTerm) { // not required
		return nil
	}

	if err := validate.MinLength("celOrigTerm", "body", string(*m.CelOrigTerm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celOrigTerm", "body", string(*m.CelOrigTerm), 3); err != nil {
		return err
	}

	if err := validate.Pattern("celOrigTerm", "body", string(*m.CelOrigTerm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr1FeeCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr1FeeCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr1FeeCapInd", "body", string(*m.CelUsr1FeeCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr1FeeCapInd", "body", string(*m.CelUsr1FeeCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr1FeeCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr1FeeCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr1FeeCciInd", "body", string(*m.CelUsr1FeeCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr1FeeCciInd", "body", string(*m.CelUsr1FeeCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr2FeeCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr2FeeCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr2FeeCapInd", "body", string(*m.CelUsr2FeeCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr2FeeCapInd", "body", string(*m.CelUsr2FeeCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr2FeeCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr2FeeCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr2FeeCciInd", "body", string(*m.CelUsr2FeeCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr2FeeCciInd", "body", string(*m.CelUsr2FeeCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr3FeeCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr3FeeCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr3FeeCapInd", "body", string(*m.CelUsr3FeeCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr3FeeCapInd", "body", string(*m.CelUsr3FeeCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr3FeeCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr3FeeCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr3FeeCciInd", "body", string(*m.CelUsr3FeeCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr3FeeCciInd", "body", string(*m.CelUsr3FeeCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr4FeeCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr4FeeCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr4FeeCapInd", "body", string(*m.CelUsr4FeeCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr4FeeCapInd", "body", string(*m.CelUsr4FeeCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr4FeeCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr4FeeCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr4FeeCciInd", "body", string(*m.CelUsr4FeeCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr4FeeCciInd", "body", string(*m.CelUsr4FeeCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr5FeeCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr5FeeCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr5FeeCapInd", "body", string(*m.CelUsr5FeeCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr5FeeCapInd", "body", string(*m.CelUsr5FeeCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr5FeeCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr5FeeCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr5FeeCciInd", "body", string(*m.CelUsr5FeeCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr5FeeCciInd", "body", string(*m.CelUsr5FeeCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr6FeeCapInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr6FeeCapInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr6FeeCapInd", "body", string(*m.CelUsr6FeeCapInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr6FeeCapInd", "body", string(*m.CelUsr6FeeCapInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCelUsr6FeeCciInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CelUsr6FeeCciInd) { // not required
		return nil
	}

	if err := validate.MinLength("celUsr6FeeCciInd", "body", string(*m.CelUsr6FeeCciInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("celUsr6FeeCciInd", "body", string(*m.CelUsr6FeeCciInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCommSubNbrOccurs(formats strfmt.Registry) error {

	if swag.IsZero(m.CommSubNbrOccurs) { // not required
		return nil
	}

	if err := validate.MinLength("commSubNbrOccurs", "body", string(*m.CommSubNbrOccurs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("commSubNbrOccurs", "body", string(*m.CommSubNbrOccurs), 2); err != nil {
		return err
	}

	if err := validate.Pattern("commSubNbrOccurs", "body", string(*m.CommSubNbrOccurs), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCommSubyTable(formats strfmt.Registry) error {

	if swag.IsZero(m.CommSubyTable) { // not required
		return nil
	}

	for i := 0; i < len(m.CommSubyTable); i++ {
		if swag.IsZero(m.CommSubyTable[i]) { // not required
			continue
		}

		if m.CommSubyTable[i] != nil {
			if err := m.CommSubyTable[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commSubyTable" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoanPlanAddRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateFixedPmtAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtAmt) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPmtAmt", "body", string(m.FixedPmtAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateLoanSchedFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.LoanSchedFlag) { // not required
		return nil
	}

	if err := validate.MinLength("loanSchedFlag", "body", string(*m.LoanSchedFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("loanSchedFlag", "body", string(*m.LoanSchedFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateLoanScheduleData(formats strfmt.Registry) error {

	if swag.IsZero(m.LoanScheduleData) { // not required
		return nil
	}

	if err := validate.MinLength("loanScheduleData", "body", string(*m.LoanScheduleData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("loanScheduleData", "body", string(*m.LoanScheduleData), 3); err != nil {
		return err
	}

	if err := validate.Pattern("loanScheduleData", "body", string(*m.LoanScheduleData), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validatePlanDate(formats strfmt.Registry) error {

	if err := validate.Required("planDate", "body", m.PlanDate); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validatePlanDesc(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanDesc) { // not required
		return nil
	}

	if err := validate.MinLength("planDesc", "body", string(*m.PlanDesc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planDesc", "body", string(*m.PlanDesc), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validatePlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("planNbr", "body", m.PlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("planNbr", "body", string(*m.PlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNbr", "body", string(*m.PlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNbr", "body", string(*m.PlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validatePmtFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtFlag) { // not required
		return nil
	}

	if err := validate.MinLength("pmtFlag", "body", string(*m.PmtFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtFlag", "body", string(*m.PmtFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validatePmtHdayMth(formats strfmt.Registry) error {

	if swag.IsZero(m.PmtHdayMth) { // not required
		return nil
	}

	if err := validate.MinLength("pmtHdayMth", "body", string(*m.PmtHdayMth), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtHdayMth", "body", string(*m.PmtHdayMth), 2); err != nil {
		return err
	}

	if err := validate.Pattern("pmtHdayMth", "body", string(*m.PmtHdayMth), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateProductCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductCode) { // not required
		return nil
	}

	if err := validate.MinLength("productCode", "body", string(*m.ProductCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productCode", "body", string(*m.ProductCode), 5); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndExprDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndExprDate) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndExprDate", "body", string(*m.Rebate2ndExprDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndExprDate", "body", string(*m.Rebate2ndExprDate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndExprDate", "body", string(*m.Rebate2ndExprDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndInsInd(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndInsInd) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndInsInd", "body", string(*m.Rebate2ndInsInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndInsInd", "body", string(*m.Rebate2ndInsInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndInsInd", "body", string(*m.Rebate2ndInsInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndIntInd(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndIntInd) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndIntInd", "body", string(*m.Rebate2ndIntInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndIntInd", "body", string(*m.Rebate2ndIntInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndIntInd", "body", string(*m.Rebate2ndIntInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndPct(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndPct) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndPct", "body", string(*m.Rebate2ndPct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndPct", "body", string(*m.Rebate2ndPct), 5); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndPct", "body", string(*m.Rebate2ndPct), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndPer(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndPer) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndPer", "body", string(*m.Rebate2ndPer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndPer", "body", string(*m.Rebate2ndPer), 3); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndPer", "body", string(*m.Rebate2ndPer), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndUf1Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndUf1Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndUf1Ind", "body", string(*m.Rebate2ndUf1Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndUf1Ind", "body", string(*m.Rebate2ndUf1Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndUf1Ind", "body", string(*m.Rebate2ndUf1Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndUf2Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndUf2Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndUf2Ind", "body", string(*m.Rebate2ndUf2Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndUf2Ind", "body", string(*m.Rebate2ndUf2Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndUf2Ind", "body", string(*m.Rebate2ndUf2Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndUf3Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndUf3Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndUf3Ind", "body", string(*m.Rebate2ndUf3Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndUf3Ind", "body", string(*m.Rebate2ndUf3Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndUf3Ind", "body", string(*m.Rebate2ndUf3Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndUf4Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndUf4Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndUf4Ind", "body", string(*m.Rebate2ndUf4Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndUf4Ind", "body", string(*m.Rebate2ndUf4Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndUf4Ind", "body", string(*m.Rebate2ndUf4Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndUf5Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndUf5Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndUf5Ind", "body", string(*m.Rebate2ndUf5Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndUf5Ind", "body", string(*m.Rebate2ndUf5Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndUf5Ind", "body", string(*m.Rebate2ndUf5Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebate2ndUf6Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.Rebate2ndUf6Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebate2ndUf6Ind", "body", string(*m.Rebate2ndUf6Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebate2ndUf6Ind", "body", string(*m.Rebate2ndUf6Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebate2ndUf6Ind", "body", string(*m.Rebate2ndUf6Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitInsInd(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitInsInd) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitInsInd", "body", string(*m.RebateInitInsInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitInsInd", "body", string(*m.RebateInitInsInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitInsInd", "body", string(*m.RebateInitInsInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitIntInd(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitIntInd) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitIntInd", "body", string(*m.RebateInitIntInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitIntInd", "body", string(*m.RebateInitIntInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitIntInd", "body", string(*m.RebateInitIntInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitPct(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitPct) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitPct", "body", string(*m.RebateInitPct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitPct", "body", string(*m.RebateInitPct), 5); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitPct", "body", string(*m.RebateInitPct), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitPer(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitPer) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitPer", "body", string(*m.RebateInitPer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitPer", "body", string(*m.RebateInitPer), 3); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitPer", "body", string(*m.RebateInitPer), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitUf1Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitUf1Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitUf1Ind", "body", string(*m.RebateInitUf1Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitUf1Ind", "body", string(*m.RebateInitUf1Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitUf1Ind", "body", string(*m.RebateInitUf1Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitUf2Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitUf2Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitUf2Ind", "body", string(*m.RebateInitUf2Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitUf2Ind", "body", string(*m.RebateInitUf2Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitUf2Ind", "body", string(*m.RebateInitUf2Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitUf3Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitUf3Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitUf3Ind", "body", string(*m.RebateInitUf3Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitUf3Ind", "body", string(*m.RebateInitUf3Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitUf3Ind", "body", string(*m.RebateInitUf3Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitUf4Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitUf4Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitUf4Ind", "body", string(*m.RebateInitUf4Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitUf4Ind", "body", string(*m.RebateInitUf4Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitUf4Ind", "body", string(*m.RebateInitUf4Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitUf5Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitUf5Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitUf5Ind", "body", string(*m.RebateInitUf5Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitUf5Ind", "body", string(*m.RebateInitUf5Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitUf5Ind", "body", string(*m.RebateInitUf5Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebateInitUf6Ind(formats strfmt.Registry) error {

	if swag.IsZero(m.RebateInitUf6Ind) { // not required
		return nil
	}

	if err := validate.MinLength("rebateInitUf6Ind", "body", string(*m.RebateInitUf6Ind), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebateInitUf6Ind", "body", string(*m.RebateInitUf6Ind), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebateInitUf6Ind", "body", string(*m.RebateInitUf6Ind), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRebatePerInd(formats strfmt.Registry) error {

	if swag.IsZero(m.RebatePerInd) { // not required
		return nil
	}

	if err := validate.MinLength("rebatePerInd", "body", string(*m.RebatePerInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rebatePerInd", "body", string(*m.RebatePerInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("rebatePerInd", "body", string(*m.RebatePerInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateRefNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RefNbr) { // not required
		return nil
	}

	if err := validate.MinLength("refNbr", "body", string(*m.RefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("refNbr", "body", string(*m.RefNbr), 23); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateStoreNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreNbr) { // not required
		return nil
	}

	if err := validate.MinLength("storeNbr", "body", string(*m.StoreNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("storeNbr", "body", string(*m.StoreNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("storeNbr", "body", string(*m.StoreNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateStoreOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreOrg) { // not required
		return nil
	}

	if err := validate.MinLength("storeOrg", "body", string(*m.StoreOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("storeOrg", "body", string(*m.StoreOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("storeOrg", "body", string(*m.StoreOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoanPlanAddRequest2) validateUserInputData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserInputData) { // not required
		return nil
	}

	if err := validate.MinLength("userInputData", "body", string(*m.UserInputData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userInputData", "body", string(*m.UserInputData), 2); err != nil {
		return err
	}

	if err := validate.Pattern("userInputData", "body", string(*m.UserInputData), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoanPlanAddRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoanPlanAddRequest2) UnmarshalBinary(b []byte) error {
	var res LoanPlanAddRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

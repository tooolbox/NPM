// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardReplacementResponse card replacement response
//
// swagger:model CardReplacementResponse
type CardReplacementResponse struct {

	//  Max length = 1, Indicates the card action code. The values are: 0 = No action. No cards  requested.  1 = Issue new card(s).  2 = Issue additional card(s). 3 = Issue replacement card(s).  4 = Returned cards.  5 = Produce a new PIN mailer. 6 = Issue emergency replacement card(s).  A = Additional cardholder added. B = Issue replacement card(s) with PIN mailer. L = Lost/stolen.
	Action string `json:"action,omitempty"`

	//  Max length = 19, Card number as received in the input message
	CardNbr string `json:"cardNbr,omitempty"`

	//  Max length = 4, Card sequence as received in the input message
	CardSeq string `json:"cardSeq,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyNod string `json:"currencyNod,omitempty"`

	//  Max length = 1, Dual Indicator: Dual Account Flag of account. Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L
	DualInd string `json:"dualInd,omitempty"`

	//  Max length = 2, Number of cards requested
	NbrReqCards string `json:"nbrReqCards,omitempty"`

	//  Max length = 2, Number of cards returned
	NbrRetCards string `json:"nbrRetCards,omitempty"`
}

// Validate validates this card replacement response
func (m *CardReplacementResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardReplacementResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardReplacementResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardReplacementResponse) UnmarshalBinary(b []byte) error {
	var res CardReplacementResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatementDocumentRequest statement document request
//
// swagger:model StatementDocumentRequest
type StatementDocumentRequest struct {

	// FirstVision Account number of the card holder.
	// Required: true
	// Max Length: 19
	// Min Length: 13
	AccountNumber *string `json:"accountNumber"`

	// common
	Common *Header `json:"common,omitempty"`

	// This is the Month and Year for which the PDF statement is requested in MMYYYY format .
	// Required: true
	// Pattern: (0[1-9]|1[012])\d{4}
	StatementDate *string `json:"statementDate"`

	// Statement Type: 'A' for Annual Statement, 'M' for monthly statement.
	// Pattern: [AM]
	StatementType string `json:"statementType,omitempty"`

	// Flag, if supplied as 'N', only availability is provided. If supplied as 'Y', statement is converted into PDF and downloadable URL of the statement is provided.
	// Required: true
	// Pattern: [YN]
	URLIndicator *string `json:"urlIndicator"`
}

// Validate validates this statement document request
func (m *StatementDocumentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatementDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLIndicator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatementDocumentRequest) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("accountNumber", "body", m.AccountNumber); err != nil {
		return err
	}

	if err := validate.MinLength("accountNumber", "body", string(*m.AccountNumber), 13); err != nil {
		return err
	}

	if err := validate.MaxLength("accountNumber", "body", string(*m.AccountNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *StatementDocumentRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *StatementDocumentRequest) validateStatementDate(formats strfmt.Registry) error {

	if err := validate.Required("statementDate", "body", m.StatementDate); err != nil {
		return err
	}

	if err := validate.Pattern("statementDate", "body", string(*m.StatementDate), `(0[1-9]|1[012])\d{4}`); err != nil {
		return err
	}

	return nil
}

func (m *StatementDocumentRequest) validateStatementType(formats strfmt.Registry) error {

	if swag.IsZero(m.StatementType) { // not required
		return nil
	}

	if err := validate.Pattern("statementType", "body", string(m.StatementType), `[AM]`); err != nil {
		return err
	}

	return nil
}

func (m *StatementDocumentRequest) validateURLIndicator(formats strfmt.Registry) error {

	if err := validate.Required("urlIndicator", "body", m.URLIndicator); err != nil {
		return err
	}

	if err := validate.Pattern("urlIndicator", "body", string(*m.URLIndicator), `[YN]`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatementDocumentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatementDocumentRequest) UnmarshalBinary(b []byte) error {
	var res StatementDocumentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstalmentPlanConversionUpdateRequest instalment plan conversion update request
//
// swagger:model InstalmentPlanConversionUpdateRequest
type InstalmentPlanConversionUpdateRequest struct {

	//  Max length = 19, ACCT NBR
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, FUNC CODE
	// Max Length: 1
	// Min Length: 0
	FuncCode *string `json:"funcCode,omitempty"`

	//  Max length = 5, INST PLAN NBR
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	InstPlanNbr *string `json:"instPlanNbr,omitempty"`

	//  Max length = 1, INST PROC MODE
	// Max Length: 1
	// Min Length: 0
	InstProcMode *string `json:"instProcMode,omitempty"`

	//  Max length = 13, PRIN AMT
	// Pattern: ^(-)?[0-9]{1,13}$
	PrinAmt string `json:"prinAmt,omitempty"`

	//  Max length = 3, REC NBR
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecNbr *string `json:"recNbr,omitempty"`

	//  Max length = 2, REQ TERM
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ReqTerm *string `json:"reqTerm,omitempty"`
}

// Validate validates this instalment plan conversion update request
func (m *InstalmentPlanConversionUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstPlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstProcMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrinAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReqTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateFuncCode(formats strfmt.Registry) error {

	if swag.IsZero(m.FuncCode) { // not required
		return nil
	}

	if err := validate.MinLength("funcCode", "body", string(*m.FuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("funcCode", "body", string(*m.FuncCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateInstPlanNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.InstPlanNbr) { // not required
		return nil
	}

	if err := validate.MinLength("instPlanNbr", "body", string(*m.InstPlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("instPlanNbr", "body", string(*m.InstPlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("instPlanNbr", "body", string(*m.InstPlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateInstProcMode(formats strfmt.Registry) error {

	if swag.IsZero(m.InstProcMode) { // not required
		return nil
	}

	if err := validate.MinLength("instProcMode", "body", string(*m.InstProcMode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("instProcMode", "body", string(*m.InstProcMode), 1); err != nil {
		return err
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validatePrinAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.PrinAmt) { // not required
		return nil
	}

	if err := validate.Pattern("prinAmt", "body", string(m.PrinAmt), `^(-)?[0-9]{1,13}$`); err != nil {
		return err
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateRecNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RecNbr) { // not required
		return nil
	}

	if err := validate.MinLength("recNbr", "body", string(*m.RecNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recNbr", "body", string(*m.RecNbr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("recNbr", "body", string(*m.RecNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstalmentPlanConversionUpdateRequest) validateReqTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.ReqTerm) { // not required
		return nil
	}

	if err := validate.MinLength("reqTerm", "body", string(*m.ReqTerm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reqTerm", "body", string(*m.ReqTerm), 2); err != nil {
		return err
	}

	if err := validate.Pattern("reqTerm", "body", string(*m.ReqTerm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstalmentPlanConversionUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstalmentPlanConversionUpdateRequest) UnmarshalBinary(b []byte) error {
	var res InstalmentPlanConversionUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

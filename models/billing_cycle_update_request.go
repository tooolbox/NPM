// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingCycleUpdateRequest billing cycle update request
//
// swagger:model BillingCycleUpdateRequest
type BillingCycleUpdateRequest struct {

	//  Max length = 19, Account or Card Number: Number of Customer's account or Card. Must be numeric and greater than zero.  Enter an account number to search for a match on the Account Base Segment record or card number to search for a match on the Embossing Record.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	//  Max length = 2, Account level billing cycle: Billing cycle for the account.
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	BillCyc *string `json:"billCyc"`

	// common
	Common *Header `json:"common,omitempty"`
}

// Validate validates this billing cycle update request
func (m *BillingCycleUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillCyc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingCycleUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *BillingCycleUpdateRequest) validateBillCyc(formats strfmt.Registry) error {

	if err := validate.Required("billCyc", "body", m.BillCyc); err != nil {
		return err
	}

	if err := validate.MinLength("billCyc", "body", string(*m.BillCyc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billCyc", "body", string(*m.BillCyc), 2); err != nil {
		return err
	}

	if err := validate.Pattern("billCyc", "body", string(*m.BillCyc), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *BillingCycleUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingCycleUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingCycleUpdateRequest) UnmarshalBinary(b []byte) error {
	var res BillingCycleUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

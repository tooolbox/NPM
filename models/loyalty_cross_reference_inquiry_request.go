// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyCrossReferenceInquiryRequest loyalty cross reference inquiry request
//
// swagger:model LoyaltyCrossReferenceInquiryRequest
type LoyaltyCrossReferenceInquiryRequest struct {

	//  Max length = 19, LMS points account number, CMS account base segment number, or accounts receivable account number assigned to an AR/LMS Account Cross-reference record
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AccountNbr *string `json:"accountNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, Numeric Source code that identifies the system where the account exists. Values are: LMS = Loyalty Management System. Enter this source code if the account number (ACCOUNT field) identifies an LMS Points Account record. CMS = Credit Management System. Enter this source code if the account number (ACCOUNT field) identifies a CMS base segment account number.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	NameAddSrcFlag *string `json:"nameAddSrcFlag"`

	//  Max length = 1, Scrolling feature. Values are: Space = First 20 items N = Next 20 items P = Previous 20 items
	// Max Length: 1
	// Min Length: 0
	SvcFuncCode *string `json:"svcFuncCode,omitempty"`

	//  Max length = 19, Starting item (populated from the previous output message) associated with the scroll.
	// Max Length: 19
	// Min Length: 0
	SvcStartItem *string `json:"svcStartItem,omitempty"`

	//  Max length = 3, Starting organization associated with the scroll.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcStartOrg *string `json:"svcStartOrg,omitempty"`
}

// Validate validates this loyalty cross reference inquiry request
func (m *LoyaltyCrossReferenceInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameAddSrcFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartOrg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyCrossReferenceInquiryRequest) validateAccountNbr(formats strfmt.Registry) error {

	if err := validate.Required("accountNbr", "body", m.AccountNbr); err != nil {
		return err
	}

	if err := validate.MinLength("accountNbr", "body", string(*m.AccountNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountNbr", "body", string(*m.AccountNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyCrossReferenceInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyCrossReferenceInquiryRequest) validateNameAddSrcFlag(formats strfmt.Registry) error {

	if err := validate.Required("nameAddSrcFlag", "body", m.NameAddSrcFlag); err != nil {
		return err
	}

	if err := validate.MinLength("nameAddSrcFlag", "body", string(*m.NameAddSrcFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameAddSrcFlag", "body", string(*m.NameAddSrcFlag), 5); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyCrossReferenceInquiryRequest) validateSvcFuncCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCode) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCode", "body", string(*m.SvcFuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCode", "body", string(*m.SvcFuncCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyCrossReferenceInquiryRequest) validateSvcStartItem(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartItem) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartItem", "body", string(*m.SvcStartItem), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartItem", "body", string(*m.SvcStartItem), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyCrossReferenceInquiryRequest) validateSvcStartOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartOrg) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartOrg", "body", string(*m.SvcStartOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartOrg", "body", string(*m.SvcStartOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("svcStartOrg", "body", string(*m.SvcStartOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyCrossReferenceInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyCrossReferenceInquiryRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltyCrossReferenceInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

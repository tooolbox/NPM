// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardholderDemographicListResponse cardholder demographic list response
//
// swagger:model CardholderDemographicListResponse
type CardholderDemographicListResponse struct {

	//  Max length = 1, Alternate Customer Flag: Code that indicates how CMS generates statements and other correspondence when an alt. Customer Name/Address record exists for the account.  Values are:  Space - Disregard Alt. Customer  'A' - Alt. customer active; send stmt and other correspondence to alternate address until exp. date  'B' - Alt. customer active; send stmt and other correspondence to both addresses until exp. date  'C' - Relationship customer active; send stmt and other correspondence to alt. address
	AcctAltCustFlag string `json:"acctAltCustFlag,omitempty"`

	//  Max length = 19, Alternate Customer Number: Number that identifies the alternate (temporary) Customer Name/Address record containing an alternate address for statements.
	AcctAltCustNbr string `json:"acctAltCustNbr,omitempty"`

	//  Max length = 19, Customer number: Customer number that identifies the Customer Name/Address record to which this account is assigned.
	AcctCustNbr string `json:"acctCustNbr,omitempty"`

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	AcctNbr string `json:"acctNbr,omitempty"`

	// Format: YYYYMMDD. Date when the prior mailer was changed.
	AcctPriorMailDate string `json:"acctPriorMailDate,omitempty"`

	//  Max length = 19, Token card number for next function (For scrolling function).
	CardNbrNext string `json:"cardNbrNext,omitempty"`

	//  Max length = 19, Token card number for previous function (For scrolling function).
	CardNbrPrev string `json:"cardNbrPrev,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization. Token card organization for next function (For scrolling function).
	CardOrgNext string `json:"cardOrgNext,omitempty"`

	//  Max length = 3, Token card organization for previous function (For scrolling function).
	CardOrgPrev string `json:"cardOrgPrev,omitempty"`

	//  Max length = 4, Token card sequence number for next function(For scrolling function).
	CardSeqNext string `json:"cardSeqNext,omitempty"`

	//  Max length = 4, Token card sequence number for previous function (For scrolling function).
	CardSeqPrev string `json:"cardSeqPrev,omitempty"`

	// Number of items returned.
	CardTbl []*CardTblForCardholderDemographicList1 `json:"cardTbl"`

	//  Max length = 4, Number of Blocked Cards
	CciCardsBlocked string `json:"cciCardsBlocked,omitempty"`

	//  Max length = 4, Total Cards associated.
	CciCardsTotal string `json:"cciCardsTotal,omitempty"`

	//  Max length = 4, Number of Unblocked Cards.
	CciCardsUnblocked string `json:"cciCardsUnblocked,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Customer Correspondence Number: Number that identifies the Customer Name/Address record that contains the correspondence customer address for statements and other correspondence, which will be used instead of the Primary customer held in AMBS-CUST-NBR.
	CorresCustNbr string `json:"corresCustNbr,omitempty"`

	//  Max length = 1, Correspondence Customer number flag: Indicates if a correspondence customer number exist and mapped to the account. Values are : 0 - Not present 1 - Present
	CorresCustNbrFlag string `json:"corresCustNbrFlag,omitempty"`

	//  Max length = 3, Customer organization: Three digit Identification number of the organization.
	CustOrg string `json:"custOrg,omitempty"`

	// Format: YYYYMMDD. DATE ALT CUST EXPR
	DateAltCustExpr string `json:"dateAltCustExpr,omitempty"`

	// Format: YYYYMMDD. Effective date of the alternate customer address.
	DateAltCustStrt string `json:"dateAltCustStrt,omitempty"`

	//  Max length = 1, Mode Data Flag: Flag to indicate if there is more data which can be obtained.  Values are: N=No Y=Yes
	MoreDataFlag string `json:"moreDataFlag,omitempty"`

	//  Max length = 2, NBR RTNED ITEMS
	NbrRtnedItems string `json:"nbrRtnedItems,omitempty"`

	// Format: YYYYMMDD. ORG CAL DATE LAST PROC
	OrgCalDateLastProc string `json:"orgCalDateLastProc,omitempty"`

	// Format: YYYYMMDD. ORG CAL DATE NEXT PROC
	OrgCalDateNextProc string `json:"orgCalDateNextProc,omitempty"`

	// Format: YYYYDDD. Processing date from the Org record
	OrgCalTodaysDate string `json:"orgCalTodaysDate,omitempty"`
}

// Validate validates this cardholder demographic list response
func (m *CardholderDemographicListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardTbl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardholderDemographicListResponse) validateCardTbl(formats strfmt.Registry) error {

	if swag.IsZero(m.CardTbl) { // not required
		return nil
	}

	for i := 0; i < len(m.CardTbl); i++ {
		if swag.IsZero(m.CardTbl[i]) { // not required
			continue
		}

		if m.CardTbl[i] != nil {
			if err := m.CardTbl[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cardTbl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CardholderDemographicListResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardholderDemographicListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardholderDemographicListResponse) UnmarshalBinary(b []byte) error {
	var res CardholderDemographicListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AcctRelationDataForUniqueLocateInquiry1 acct relation data for unique locate inquiry1
//
// swagger:model AcctRelationDataForUniqueLocateInquiry1
type AcctRelationDataForUniqueLocateInquiry1 struct {

	//  Max length = 1, ACCT BLK CD 1
	AcctBlkCd1 string `json:"acctBlkCd1,omitempty"`

	//  Max length = 1, ACCT BLK CD 2
	AcctBlkCd2 string `json:"acctBlkCd2,omitempty"`

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	AcctNbr string `json:"acctNbr,omitempty"`

	//  Max length = 1, Account Status: code that identifies the status of the account. A = Active B = Conversion fraud C = Conversion transfer D = Dormant F = Fraud transfer H = Closed/conversion I = Inactive J = Transfer in, migrated from inactive K = Transfer out, migrated from inactive M = Migrated N = New P = To be purged in next reload Q = Transfer in today R = Transfer out today T = Transfer V = Conversion X = Charge-off/conversion Z = Charge-off 8 = Closed 9 = To be purged after reload.
	AcctStat string `json:"acctStat,omitempty"`

	//  Max length = 1, Current First usage flag: Indicates whether card activation needs to occur for the most recently issued card.  Values are:  'Y' - Card activation needs to occur  'N' - No card activation is required or card activation has already occurred   'D' - Card deactivated
	ActivationStatus string `json:"activationStatus,omitempty"`

	//  Max length = 17, Current open-to-buy amount of the account.
	AvailCrlim string `json:"availCrlim,omitempty"`

	//  Max length = 17, Card Credit Limit: Maximum authorization amount in monetary units and subunits for all transactions allowed for the frequency defined in the FREQ field.
	CardCrlim string `json:"cardCrlim,omitempty"`

	//  Max length = 1, Current Card Active Flag.
	CardCurrActvFlag string `json:"cardCurrActvFlag,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CardCurrency string `json:"cardCurrency,omitempty"`

	//  Max length = 3, Identification number of the logo.
	CardLogo string `json:"cardLogo,omitempty"`

	//  Max length = 1, Previous Card Active Flag.
	CardPrevActvFlag string `json:"cardPrevActvFlag,omitempty"`

	//  Max length = 1, Cardholder Flag: Flag that indicates whether the card is issued as a primary or secondary card.  Values are:  '0' - Primary Cardholder  '1' - Additional Cardholder
	CardholderFlg string `json:"cardholderFlg,omitempty"`

	//  Max length = 19, Converted Card Number: converted from old card number. This field holds the original card number for cards during conversion that have been allocated a new plastic number.
	ConvCardNbr string `json:"convCardNbr,omitempty"`

	//  Max length = 1, CRD BLK CD
	CrdBlkCd string `json:"crdBlkCd,omitempty"`

	//  Max length = 10, Block Code Description: description of block code.
	CrdBlkCdDesc string `json:"crdBlkCdDesc,omitempty"`

	//  Max length = 19, Unique Card Number embossed on card plastic.
	CrdNbr string `json:"crdNbr,omitempty"`

	//  Max length = 4, Card sequence number: record number assigned to the card (for card numbering schemes of 0, 1, and 3) and the sequence number assigned to the card (for card numbering schemes of 2). This number is part of the record key.
	CrdSeq string `json:"crdSeq,omitempty"`

	// Format: YYYYMMDD. Current Card Expiry Date.
	CurrCardExpDate string `json:"currCardExpDate,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	CustNbr string `json:"custNbr,omitempty"`

	// Format: YYYYMMDD. Date Last Plastic Issue: Date when the most recently issued card was produced.
	DateLstPlstIssue string `json:"dateLstPlstIssue,omitempty"`

	//  Max length = 26, Embossed Name 1: Name embossed on the first embossing line of the card.
	EmbossedName string `json:"embossedName,omitempty"`

	// Format: YYYYMMDD. Card expiry date: indicates the date on which the most recently issued card expires.
	ExpDate string `json:"expDate,omitempty"`

	//  Max length = 30, Logo Description: Description of the product.
	LogoDesc string `json:"logoDesc,omitempty"`

	//  Max length = 17, Account minimum payment due  amount: amount of last requested payment.
	MinPmtDue string `json:"minPmtDue,omitempty"`

	//  Max length = 17, Account outstanding balance.
	OutstandingBalance string `json:"outstandingBalance,omitempty"`

	//  Max length = 17, Total amount due of the account. This includes the current amount due and any past due amounts.
	PmtDueAmt string `json:"pmtDueAmt,omitempty"`

	// Format: YYYYMMDD. Payment due date: Date when the next payment is due.
	PmtDueDate string `json:"pmtDueDate,omitempty"`

	// Format: YYYYMMDD. Previous Card Expiry Date.
	PrevCardExpDate string `json:"prevCardExpDate,omitempty"`

	//  Max length = 1, Relationship: Code that indicates the relationship the customer name and address record has with the account. Values are: R = Owner/co-owner (residential address) 1 = Guarantor 2 = Cosigner 3 = Authorized signer 4 = Third party insured 5-9 = User-defined. C =  Correspondence address A = Alternate address (space) = No association to an account
	Relationship string `json:"relationship,omitempty"`

	//  Max length = 17, Account spending/credit limit: current credit limit assigned to the account.
	TotCrlim string `json:"totCrlim,omitempty"`
}

// Validate validates this acct relation data for unique locate inquiry1
func (m *AcctRelationDataForUniqueLocateInquiry1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AcctRelationDataForUniqueLocateInquiry1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcctRelationDataForUniqueLocateInquiry1) UnmarshalBinary(b []byte) error {
	var res AcctRelationDataForUniqueLocateInquiry1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardTransferUpdateRequest card transfer update request
//
// swagger:model CardTransferUpdateRequest
type CardTransferUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 1, BLOCK CODE
	// Max Length: 1
	// Min Length: 0
	BlockCode *string `json:"blockCode,omitempty"`

	//  Max length = 19, Card Number to be transferred: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	//  Max length = 4, Sequence number of the card on the Embosser Record.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Identification number of the organization associated with the Embosser Record.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CustOrg *string `json:"custOrg,omitempty"`

	//  Max length = 8, Effective Date of the card transfer.  A value is pre-populated in this field only when the transfer FUNCTION is R (reversal) and the card transfer was generated earlier in the same processing day.
	// Required: true
	// Max Length: 8
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EffDate *string `json:"effDate"`

	//  Max length = 1, Card Action function to be performed.  Values are: T= Transfer R=Reverse a previous card transfer
	// Required: true
	// Max Length: 1
	// Min Length: 0
	FunctionCode *string `json:"functionCode"`

	//  Max length = 3, Identification number of the logo associated with the Embosser Record.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Logo *string `json:"logo"`

	//  Max length = 3, OPERATOR ID
	// Max Length: 3
	// Min Length: 0
	OperatorID *string `json:"operatorId,omitempty"`

	//  Max length = 8, START DATE
	// Max Length: 8
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StartDate *string `json:"startDate,omitempty"`

	//  Max length = 4, TERMINAL ID
	// Max Length: 4
	// Min Length: 0
	TerminalID *string `json:"terminalId,omitempty"`

	//  Max length = 1, Transfer replacement Indicator: Code indicating whether a replacement card is to be issued for the fraudulent card being transferred.  A value is pre-populated in this field only when the Transfer FUNCTION is R (reversal) and the card transfer was generated earlier in the same processing day. Values are: 0 = Replace (Default) 1 = Do not replace
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	XfrRepInd *string `json:"xfrRepInd"`

	//  Max length = 19, Transfer To Fraud Account: Fraud Account number to which the card was or is transferred today.  A value is pre-populated in this field only when the Transfer FUNCTION is R (reversal) and the card transfer was generated earlier in the same processing day.
	// Max Length: 19
	// Min Length: 0
	XfrToAcct *string `json:"xfrToAcct,omitempty"`

	//  Max length = 19, Transfer-to Customer Number: Customer Name/Address Record associated with the Fraud Account number to which the card was or is transferred today.  A value is pre-populated in this field only when the transfer FUNCTION is R (reversal) and the card transfer was generated earlier in the same processing day.
	// Max Length: 19
	// Min Length: 0
	XfrToCust *string `json:"xfrToCust,omitempty"`

	//  Max length = 3, Transfer To LOGO
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	XfrToLogo *string `json:"xfrToLogo,omitempty"`
}

// Validate validates this card transfer update request
func (m *CardTransferUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrRepInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrToAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrToCust(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrToLogo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardTransferUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateBlockCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockCode) { // not required
		return nil
	}

	if err := validate.MinLength("blockCode", "body", string(*m.BlockCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blockCode", "body", string(*m.BlockCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateCustOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.CustOrg) { // not required
		return nil
	}

	if err := validate.MinLength("custOrg", "body", string(*m.CustOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custOrg", "body", string(*m.CustOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("custOrg", "body", string(*m.CustOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateEffDate(formats strfmt.Registry) error {

	if err := validate.Required("effDate", "body", m.EffDate); err != nil {
		return err
	}

	if err := validate.MinLength("effDate", "body", string(*m.EffDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("effDate", "body", string(*m.EffDate), 8); err != nil {
		return err
	}

	if err := validate.Pattern("effDate", "body", string(*m.EffDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateFunctionCode(formats strfmt.Registry) error {

	if err := validate.Required("functionCode", "body", m.FunctionCode); err != nil {
		return err
	}

	if err := validate.MinLength("functionCode", "body", string(*m.FunctionCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("functionCode", "body", string(*m.FunctionCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("logo", "body", m.Logo); err != nil {
		return err
	}

	if err := validate.MinLength("logo", "body", string(*m.Logo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("logo", "body", string(*m.Logo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("logo", "body", string(*m.Logo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateOperatorID(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatorID) { // not required
		return nil
	}

	if err := validate.MinLength("operatorId", "body", string(*m.OperatorID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("operatorId", "body", string(*m.OperatorID), 3); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.MinLength("startDate", "body", string(*m.StartDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("startDate", "body", string(*m.StartDate), 8); err != nil {
		return err
	}

	if err := validate.Pattern("startDate", "body", string(*m.StartDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateTerminalID(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminalID) { // not required
		return nil
	}

	if err := validate.MinLength("terminalId", "body", string(*m.TerminalID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("terminalId", "body", string(*m.TerminalID), 4); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateXfrRepInd(formats strfmt.Registry) error {

	if err := validate.Required("xfrRepInd", "body", m.XfrRepInd); err != nil {
		return err
	}

	if err := validate.MinLength("xfrRepInd", "body", string(*m.XfrRepInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrRepInd", "body", string(*m.XfrRepInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("xfrRepInd", "body", string(*m.XfrRepInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateXfrToAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrToAcct) { // not required
		return nil
	}

	if err := validate.MinLength("xfrToAcct", "body", string(*m.XfrToAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrToAcct", "body", string(*m.XfrToAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateXfrToCust(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrToCust) { // not required
		return nil
	}

	if err := validate.MinLength("xfrToCust", "body", string(*m.XfrToCust), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrToCust", "body", string(*m.XfrToCust), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardTransferUpdateRequest) validateXfrToLogo(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrToLogo) { // not required
		return nil
	}

	if err := validate.MinLength("xfrToLogo", "body", string(*m.XfrToLogo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrToLogo", "body", string(*m.XfrToLogo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("xfrToLogo", "body", string(*m.XfrToLogo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardTransferUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardTransferUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CardTransferUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

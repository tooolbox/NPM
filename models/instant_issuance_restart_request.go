// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstantIssuanceRestartRequest instant issuance restart request
//
// swagger:model InstantIssuanceRestartRequest
type InstantIssuanceRestartRequest struct {

	//  Max length = 9, Indicates the embossing branch for instant issuance.
	// Max Length: 9
	// Min Length: 0
	BranchNbr *string `json:"branchNbr,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 4, Card sequence number: record number assigned to the card (for card numbering schemes of 0, 1, and 3) and the sequence number assigned to the card (for card numbering schemes of 2). This number is part of the record key.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SeqNbr *string `json:"seqNbr,omitempty"`

	//  Max length = 20, Staff Id
	// Max Length: 20
	// Min Length: 0
	StaffID *string `json:"staffId,omitempty"`
}

// Validate validates this instant issuance restart request
func (m *InstantIssuanceRestartRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranchNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeqNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaffID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantIssuanceRestartRequest) validateBranchNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.BranchNbr) { // not required
		return nil
	}

	if err := validate.MinLength("branchNbr", "body", string(*m.BranchNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("branchNbr", "body", string(*m.BranchNbr), 9); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRestartRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRestartRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *InstantIssuanceRestartRequest) validateSeqNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.SeqNbr) { // not required
		return nil
	}

	if err := validate.MinLength("seqNbr", "body", string(*m.SeqNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("seqNbr", "body", string(*m.SeqNbr), 4); err != nil {
		return err
	}

	if err := validate.Pattern("seqNbr", "body", string(*m.SeqNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InstantIssuanceRestartRequest) validateStaffID(formats strfmt.Registry) error {

	if swag.IsZero(m.StaffID) { // not required
		return nil
	}

	if err := validate.MinLength("staffId", "body", string(*m.StaffID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("staffId", "body", string(*m.StaffID), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstantIssuanceRestartRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantIssuanceRestartRequest) UnmarshalBinary(b []byte) error {
	var res InstantIssuanceRestartRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

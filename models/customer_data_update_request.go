// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerDataUpdateRequest customer data update request
//
// swagger:model CustomerDataUpdateRequest
type CustomerDataUpdateRequest struct {

	//  Max length = 5, Block: Specific field for Block section when using Spanish address.
	// Max Length: 5
	// Min Length: 0
	A2Block *string `json:"a2Block,omitempty"`

	//  Max length = 5, Portal: Specific field for Portal section when using Spanish address.
	// Max Length: 5
	// Min Length: 0
	A2Portal *string `json:"a2Portal,omitempty"`

	//  Max length = 5, Stairs: Specific field for stair section when using Spanish address.
	// Max Length: 5
	// Min Length: 0
	A2Stairs *string `json:"a2Stairs,omitempty"`

	//  Max length = 5, Door: Specific field for door section when using Spanish address.
	// Max Length: 5
	// Min Length: 0
	A3Door *string `json:"a3Door,omitempty"`

	//  Max length = 5, Floor: Specific field for floor section when using Spanish address.
	// Max Length: 5
	// Min Length: 0
	A3Floor *string `json:"a3Floor,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 40, Address Line 1 of the customer as defined on the Customer Name/Address record.
	// Max Length: 40
	// Min Length: 0
	Addr1 *string `json:"addr1,omitempty"`

	//  Max length = 40, Address Line 4 of the customer as defined on the Customer Name/Address record.
	// Max Length: 40
	// Min Length: 0
	Addr4 *string `json:"addr4,omitempty"`

	//  Max length = 1, Affordability Data Indicator: Value used to indicate to the service whether the Affordability Values are to be updated. Values are: 0 - Don't Update (Default) 1 - Update Owner 2 - Update Co-owner
	// Required: true
	// Max Length: 1
	// Min Length: 0
	AffordDataInd *string `json:"affordDataInd"`

	//  Max length = 9, Employment Status: Contains the 'Employment Status' affordability value for use in the Affordability Calculation during a Credit Limit Request. Values are: 0 - Initialised Value  1 - Employed Full Time  2 - Employed Part Time  3 - Self Employed  4 - Full Time Education (Student)  5 - Retired  6 - Not Working - Unemployed  7 - Not Working - Independent Means  8 - Homemaker
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordEmploymentStatus *string `json:"affordEmploymentStatus,omitempty"`

	//  Max length = 9, Minimum credit/store card repayments: Contains the 'Minimum credit/store card repayments' affordability value for use in the Affordability Calculation during a Credit Limit Request.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordMinCardRepayments *string `json:"affordMinCardRepayments,omitempty"`

	//  Max length = 9, Monthly loan repayments: Contains the 'Monthly loan repayments' affordability value for use in the Affordability Calculation during a Credit Limit Request.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordMnthLoanRepayments *string `json:"affordMnthLoanRepayments,omitempty"`

	//  Max length = 9, Monthly mortgage/rent payment: Contains the 'Monthly mortgage/rent payment' affordability value for use in the Affordability Calculation during a Credit Limit Request.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordMnthMortgagePmt *string `json:"affordMnthMortgagePmt,omitempty"`

	//  Max length = 9, Monthly spending: Contains the 'Monthly spending' affordability value for use in the Affordability Calculation during a Credit Limit Request.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordMnthSpending *string `json:"affordMnthSpending,omitempty"`

	//  Max length = 9, Net Monthly Income: Contains the 'Net Monthly Income' affordability value for use in the Affordability Calculation during a Credit Limit Request. Field Mandatory if <AFFORD_DATA_IND> is 1 or 2.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordNetMnthIncome *string `json:"affordNetMnthIncome,omitempty"`

	//  Max length = 3, Number of Dependents: Contains the 'Number of Dependents' affordability value for use in the Affordability Calculation during a Credit Limit Request.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordNumDependents *string `json:"affordNumDependents,omitempty"`

	//  Max length = 9, Purpose of the credit limit request: Contains the 'Purpose' affordability value for use in the Affordability Calculation during a Credit Limit Request. 0 Initialised Value  1 Holiday  2 General spending/Cashflow  3 Christmas  4 Medical expenses  5 Vehicle purchase/repair  6 Caravan/boat purchase  7 Home improvements  8 Electrical goods  9 Furnishings  10 Wedding  11 Balance Transfer  12 Money Transfer  13 Uni/school fees  14 Family assistance  15 Miscellaneous
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordPurpose *string `json:"affordPurpose,omitempty"`

	//  Max length = 9, Requested Credit Limit: Contains the 'Requested Credit Limit amount' as used in the Affordability Calculation during a Credit Limit Request.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordRequestedCrlim *string `json:"affordRequestedCrlim,omitempty"`

	//  Max length = 9, Any circumstances affecting sustainability: Contains the 'Any circumstances affecting sustainability' affordability value for use in the Affordability Calculation during a Credit Limit Request. Values are: 0 - Initialised Value  1 - No  2 - Yes   Note:  Value 1 means sustainable  Value 2 means unsustainable
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AffordSustainability *string `json:"affordSustainability,omitempty"`

	//  Max length = 2, Carrier route 1 and 2 code, used for mail sorting purposes.
	// Max Length: 2
	// Min Length: 0
	CarrierRoute12 *string `json:"carrierRoute12,omitempty"`

	//  Max length = 2, Carrier route 3 and 4 code, used for mail sorting purposes.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CarrierRoute34 *string `json:"carrierRoute34,omitempty"`

	//  Max length = 30, City: City portion of the mailing address.
	// Max Length: 30
	// Min Length: 0
	City *string `json:"city,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, Contact Indicator: field used to determine whether customer contact is restricted.  Values are: 00 = No restriction (Default) 01 = Do not telephone 02 = Do not mail 03 = Do not mail or telephone 04-09 = Reserved for future use 10-99 = User-defined by client.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ContactInd *string `json:"contactInd,omitempty"`

	//  Max length = 3, Country portion of the mailing address. The country code must be a valid value as defined in the security subsystem.
	// Max Length: 3
	// Min Length: 0
	CountryCode *string `json:"countryCode,omitempty"`

	//  Max length = 30, County of the Customer.
	// Max Length: 30
	// Min Length: 0
	County *string `json:"county,omitempty"`

	//  Max length = 1, Customer Format Indicator: Indicator to store Address. Values are:  1 - Customer Format 0 - Not Formated
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CustFormat *string `json:"custFormat"`

	// Format: YYYYDDD. Date of death.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DeathDate *string `json:"deathDate,omitempty"`

	// Format: YYYYDDD. Date of notification of death.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DeathDateNotify *string `json:"deathDateNotify,omitempty"`

	//  Max length = 3, Delivery Point Suffix Address.
	// Max Length: 3
	// Min Length: 0
	DelivPointSuffix *string `json:"delivPointSuffix,omitempty"`

	//  Max length = 20, User-defined demographic data or other information for the customer.
	// Max Length: 20
	// Min Length: 0
	Demo1 *string `json:"demo1,omitempty"`

	//  Max length = 20, User-defined demographic data or other information for the customer.
	// Max Length: 20
	// Min Length: 0
	Demo2 *string `json:"demo2,omitempty"`

	//  Max length = 20, User-defined demographic data or other information for the customer.
	// Max Length: 20
	// Min Length: 0
	Demo3 *string `json:"demo3,omitempty"`

	//  Max length = 3, Driver license country of issue.
	// Max Length: 3
	// Min Length: 0
	DlCntry *string `json:"dlCntry,omitempty"`

	//  Max length = 20, Driver license number of the customer.
	// Max Length: 20
	// Min Length: 0
	DlNbr *string `json:"dlNbr,omitempty"`

	//  Max length = 3, State or province of issue of the driver's license.
	// Max Length: 3
	// Min Length: 0
	DlState *string `json:"dlState,omitempty"`

	// Format: YYYYMMDD. Customer's date of birth.
	Dob string `json:"dob,omitempty"`

	//  Max length = 60, Email: E-mail address of the cardholder.
	// Max Length: 60
	// Min Length: 0
	Email *string `json:"email,omitempty"`

	//  Max length = 1, Email Flag: code that indicates whether you have permission from the cardholder to Email. Values are:  0 - Do not send  1 - May be sent.  2 - Prefer to be sent.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmailFlag *string `json:"emailFlag,omitempty"`

	//  Max length = 6, Employee Phone Number Extension.
	// Max Length: 6
	// Min Length: 0
	EmpPhoneExtn *string `json:"empPhoneExtn,omitempty"`

	//  Max length = 2, Employment Status
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmpStatus *string `json:"empStatus,omitempty"`

	//  Max length = 20, Employee phone number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	EmpWorkPhone *string `json:"empWorkPhone,omitempty"`

	//  Max length = 1, Phone Flag: Code that specifies whether the customer grants permission to call this number. The values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmpWorkPhoneFlag *string `json:"empWorkPhoneFlag,omitempty"`

	//  Max length = 40, Employer: Name of the employer of the cardholder.
	// Max Length: 40
	// Min Length: 0
	Employer *string `json:"employer,omitempty"`

	//  Max length = 40, Mailing address of the employer of the customer.
	// Max Length: 40
	// Min Length: 0
	EmployerAddr1 *string `json:"employerAddr1,omitempty"`

	//  Max length = 40, Mailing address of the employer of the customer (cont.)
	// Max Length: 40
	// Min Length: 0
	EmployerAddr2 *string `json:"employerAddr2,omitempty"`

	//  Max length = 20, Fax number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	FaxPhone *string `json:"faxPhone,omitempty"`

	//  Max length = 1, Fax Flag: Code that specifies whether the customer grants permission to use this number. Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FaxPhoneFlag *string `json:"faxPhoneFlag,omitempty"`

	//  Max length = 40, First name: Field that identifies the first name of the cardholder.
	// Max Length: 40
	// Min Length: 0
	FirstName *string `json:"firstName,omitempty"`

	//  Max length = 1, Foreign country indicator: indicator that specifies whether this customer lives in the US or a foreign country. Values are:  Blank - Lives in the U.S. CMS formats the address to the IRS standard.  Other - Lives in a foreign (non-U.S.) country.
	// Max Length: 1
	// Min Length: 0
	ForeignCountryInd1099c *string `json:"foreignCountryInd1099c,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUseFlag *string `json:"foreignUseFlag,omitempty"`

	//  Max length = 1, Gender code. Values are: 0 - Gender not specified 1 - Male 2 - Female
	// Max Length: 1
	// Min Length: 0
	GenderCode *string `json:"genderCode,omitempty"`

	//  Max length = 1, Home Phone Flag: Code that specifies whether the customer grants permission to call this number.  Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	HomePhoneFlag *string `json:"homePhoneFlag,omitempty"`

	//  Max length = 20, Home phone number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	HomePhoneNbr *string `json:"homePhoneNbr,omitempty"`

	//  Max length = 40, House name of the customer.
	// Max Length: 40
	// Min Length: 0
	HouseName *string `json:"houseName,omitempty"`

	//  Max length = 20, House number of the customer.
	// Max Length: 20
	// Min Length: 0
	HouseNumber *string `json:"houseNumber,omitempty"`

	//  Max length = 1, ID Fraud: Value to indicate whether the customer has been the target of identity fraud.  Values are: 0 - Customer has not been the target of identity fraud 1 - Customer has been the target of identity fraud
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IDFraud *string `json:"idFraud,omitempty"`

	//  Max length = 3, Language Indicator: User-defined code that indicates the language spoken by the customer.
	// Max Length: 3
	// Min Length: 0
	LanguageIndic *string `json:"languageIndic,omitempty"`

	//  Max length = 40, Last name: field that identifies the last name of the cardholder.
	// Max Length: 40
	// Min Length: 0
	LastName *string `json:"lastName,omitempty"`

	//  Max length = 1, Indicates the mode in which the customer receive the Letter notifications  0 - NO NOTIFICATION (DEFAULT)   1 - E-MAIL NOTIFICATION         2 - SMS (SHORT MESSAGE SERVICE) 3 - SMS AND E-MAIL NOTIFICATION
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LtrNotifyMod *string `json:"ltrNotifyMod,omitempty"`

	//  Max length = 1, LTR PREF IND
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LtrPrefInd *string `json:"ltrPrefInd,omitempty"`

	//  Max length = 1, Mailing List: User-defined code that indicates whether the customer wants to be on a mailing list. Values are: Y = Yes, the owner wants to be on a mailing list (Default) N = No, the owner does not want to be on a mailing list.
	// Max Length: 1
	// Min Length: 0
	MailingList *string `json:"mailingList,omitempty"`

	//  Max length = 1, Marital Status code: code that indicates the marital and address status of the owner and co-owner. Values are: 0 = Not used (Default) 1 = Married and living at the same address 2 = Married and living at different addresses 3 = Not married and living at the same address 4 = Not married and living at different addresses.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MaritalStatus *string `json:"maritalStatus,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo1 *string `json:"memo1,omitempty"`

	//  Max length = 60, User-defined information.
	// Max Length: 60
	// Min Length: 0
	Memo2 *string `json:"memo2,omitempty"`

	//  Max length = 20, Memorable Word, as selected by the customer.
	// Max Length: 20
	// Min Length: 0
	MemorableWord *string `json:"memorableWord,omitempty"`

	//  Max length = 30, Memorable Word Reminder, used by the customer to remember the memorable word.
	// Max Length: 30
	// Min Length: 0
	MemorableWordReminder *string `json:"memorableWordReminder,omitempty"`

	//  Max length = 40, Middle Name: Field that identifies the middle name of the cardholder.
	// Max Length: 40
	// Min Length: 0
	MiddleName *string `json:"middleName,omitempty"`

	//  Max length = 20, Mobile number of the accountholder.
	// Max Length: 20
	// Min Length: 0
	MobilePhone *string `json:"mobilePhone,omitempty"`

	//  Max length = 1, Mobile Phone Flag: Code that specifies whether the customer grants permission to call this number.  Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MobilePhoneFlag *string `json:"mobilePhoneFlag,omitempty"`

	//  Max length = 40, Name line 1 of the customer as defined on the Customer Name/Address record.
	// Max Length: 40
	// Min Length: 0
	NameLine1 *string `json:"nameLine1,omitempty"`

	//  Max length = 1, Name Type Indicator 1: Indicates the type of name. Values are: 0 = Personal name (Default) 1 = Business name 2 = Store name 3 = Generic name.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NameLine1Typ *string `json:"nameLine1Typ,omitempty"`

	//  Max length = 40, Name line 2 of the customer as defined on the Customer Name/Address record.
	// Max Length: 40
	// Min Length: 0
	NameLine2 *string `json:"nameLine2,omitempty"`

	//  Max length = 1, Name Type Indicator 2: Indicates the type of name. Values are: 0 = Personal name (Default) 1 = Business name 2 = Store name 3 = Generic name.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NameLine2Typ *string `json:"nameLine2Typ,omitempty"`

	//  Max length = 40, Name line 3 of the customer as defined on the Customer Name/Address record.
	// Max Length: 40
	// Min Length: 0
	NameLine3 *string `json:"nameLine3,omitempty"`

	//  Max length = 1, Name Type Indicator 3: Indicates the type of name. Values are: 0 = Personal name (Default) 1 = Business name 2 = Store name 3 = Generic name.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NameLine3Typ *string `json:"nameLine3Typ,omitempty"`

	//  Max length = 20, Nationality of the customer.
	// Max Length: 20
	// Min Length: 0
	Nationality *string `json:"nationality,omitempty"`

	//  Max length = 1, Number Type: value to indicate if number provided is the customer number or account/card number. Values are:  0 or space indicates Account or card Number 1 - Customer Number
	// Max Length: 1
	// Min Length: 0
	NumberType *string `json:"numberType,omitempty"`

	//  Max length = 4, Position: User-defined code to indicate the position or job title of the customer
	// Max Length: 4
	// Min Length: 0
	Position *string `json:"position,omitempty"`

	//  Max length = 10, Postal Code: Postal code portion of the mailing address.
	// Max Length: 10
	// Min Length: 0
	PostalCode *string `json:"postalCode,omitempty"`

	//  Max length = 40, Relative Name: Name of relative of the cardholder.
	// Max Length: 40
	// Min Length: 0
	RelativeName *string `json:"relativeName,omitempty"`

	//  Max length = 1, Own or Rent Residence Flag: Code that identifies whether the customer owns or rents their primary residence.   Values are: 0 - Unknown or not used (Default) 1 - Owns or is buying a home 2 - Rents or leases a home 3 - Neither owns nor rents primary residence
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ResidenceCode *string `json:"residenceCode,omitempty"`

	//  Max length = 60, Road Name.
	// Max Length: 60
	// Min Length: 0
	RoadName *string `json:"roadName,omitempty"`

	//  Max length = 6, Standard Industrial Classification code: code used to identify the industry to which the commercial card customer is associated.
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SicCode *string `json:"sicCode,omitempty"`

	//  Max length = 1, SMS Flag: code that indicates whether you have permission from the owner to SMS.  Values are:  0 - Do not send  1 - May be sent
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SmsFlag *string `json:"smsFlag,omitempty"`

	//  Max length = 2, Special Address Indicator
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpclAddrInd *string `json:"spclAddrInd,omitempty"`

	//  Max length = 3, State: State or province portion of the mailing address.
	// Max Length: 3
	// Min Length: 0
	State *string `json:"state,omitempty"`

	//  Max length = 1, Status: Code that indicates the status of the Customer Name/Address record. The values are: 0 = Active (Default) 1 = Closed 2 = Purge pending.  Value of 2 is not allowed when account records are associated with Customer.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Status *string `json:"status,omitempty"`

	//  Max length = 1, Version number of the Statement Message record to use for the customer . The values are 0-9. The default is 0.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtMsgIndic *string `json:"stmtMsgIndic,omitempty"`

	//  Max length = 1, Statement Notification Indicator: Indicates whether notification is required for Cardholders who have requested e-mail notification when a new statement is available.  Values are:  values are:  0 - Notification not required   1 - Notification required, softcopy only   2 - Notification required, softcopy and hardcopy
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNotifyInd *string `json:"stmtNotifyInd,omitempty"`

	//  Max length = 1, Statement Notification Method: Indicates the method of notification for Cardholders who have requested notification when a new statement is available.  Values are:  0 - Notification not required   1 - Email Notification required  2 - SMS Notification required   3 - Email & SMS Notification required
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNotifyMod *string `json:"stmtNotifyMod,omitempty"`

	//  Max length = 20, Suffix: Field that identifies the suffix of the cardholder (ex. Jr., Sr.).
	// Max Length: 20
	// Min Length: 0
	Suffix *string `json:"suffix,omitempty"`

	//  Max length = 25, Social Security number (national Insurance number): field that identifies the SSN ,tax identification number or another user-defined identification number of the cardholder.
	// Max Length: 25
	// Min Length: 0
	TaxIDNbr *string `json:"taxIdNbr,omitempty"`

	//  Max length = 1, Social Security number (national Insurance number) Flag: code that indicates the type of identification number held in the AMNA-SSAN field.  Values are: 0 - Social Security Number 1 - Tax Id Number 2 - Other ID 3 - National ID 4 - Tabiya ID 5 - Iqama ID 6 - Passport ID 7 - Diplomat ID 8 - National insurance number ID
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TaxIDTyp *string `json:"taxIdTyp,omitempty"`

	//  Max length = 20, Title: Professional or honorary title associated with the cardholder name entered in the NAME LINE 1 field.
	// Max Length: 20
	// Min Length: 0
	Title *string `json:"title,omitempty"`

	//  Max length = 19, Unique ID: It identifies a customer uniquely.
	// Max Length: 19
	// Min Length: 0
	UniqueID *string `json:"uniqueId,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User1 *string `json:"user1,omitempty"`

	//  Max length = 7, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.  Must be numeric and in valid date format
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	User10 *string `json:"user10,omitempty"`

	//  Max length = 7, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.  Must be numeric and in valid date format
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	User11 *string `json:"user11,omitempty"`

	//  Max length = 30, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 30
	// Min Length: 0
	User12 *string `json:"user12,omitempty"`

	//  Max length = 30, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 30
	// Min Length: 0
	User13 *string `json:"user13,omitempty"`

	//  Max length = 20, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 20
	// Min Length: 0
	User14 *string `json:"user14,omitempty"`

	//  Max length = 20, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 20
	// Min Length: 0
	User15 *string `json:"user15,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User2 *string `json:"user2,omitempty"`

	//  Max length = 7, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 7
	// Min Length: 0
	User3 *string `json:"user3,omitempty"`

	//  Max length = 1, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 1
	// Min Length: 0
	User4 *string `json:"user4,omitempty"`

	//  Max length = 1, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 1
	// Min Length: 0
	User5 *string `json:"user5,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User6 *string `json:"user6,omitempty"`

	//  Max length = 2, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 2
	// Min Length: 0
	User7 *string `json:"user7,omitempty"`

	//  Max length = 3, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 3
	// Min Length: 0
	User8 *string `json:"user8,omitempty"`

	//  Max length = 3, User defined field. This field can be defined by each business to store information that is not provided in other fields in the system but still is necessary because of the business processes.
	// Max Length: 3
	// Min Length: 0
	User9 *string `json:"user9,omitempty"`

	//  Max length = 1, User Data Indicator: field to define whether to update or not the owner/co-owner data elements stored in the customer record.  Values are:  0 or space - Do Not Update the Owner/Co-Owner User Data (default) 1 - Update Owner User Data 2 - Update Co-Owner User Data When this field is 0, the USER DATA INDICATOR cannot be 0.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	UserDataInd *string `json:"userDataInd"`

	//  Max length = 40, Vacation Address line 3.
	// Max Length: 40
	// Min Length: 0
	VacAddr3 *string `json:"vacAddr3,omitempty"`

	//  Max length = 3, Vacation Country Code: Used to store the vacation country code when the customer is on vacation.
	// Max Length: 3
	// Min Length: 0
	VacCntryCd *string `json:"vacCntryCd,omitempty"`

	// Format: YYYYDDD. Vacation End Date: date when the customer ends their vacation. This field is used together with the vacation start date to indicate whether the customer is currently on vacation.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VacEndDate *string `json:"vacEndDate,omitempty"`

	//  Max length = 20, Vacation Phone Number: Used to store a contact Phone Number that can be used while the customer is on vacation.
	// Max Length: 20
	// Min Length: 0
	VacPhoneNbr *string `json:"vacPhoneNbr,omitempty"`

	// Format: YYYYDDD. Vacation Start Date: date when the customer starts their vacation. This field is used together with the vacation end date to indicate whether the customer is currently on vacation.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VacStartDate *string `json:"vacStartDate,omitempty"`

	//  Max length = 1, VIP Status: User-defined code that indicates this accountholder is an important or influential customer.  Values are:  0 - Regular Customer  1 - VIP Customer
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VipStatus *string `json:"vipStatus,omitempty"`

	//  Max length = 7, 1099C W9 Date Filed: Date the W-9 was received back from the customer and the TIN updated. This field is updated by the system when the TIN is maintained from zero to non-zeros.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	W9DateFiled1099c *string `json:"w9DateFiled1099c,omitempty"`

	// Format: YYYYDDD. 1099C W9 Date Sent: Date the W-9, requesting TIN information, was sent to the customer.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	W9DateSent1099c *string `json:"w9DateSent1099c,omitempty"`
}

// Validate validates this customer data update request
func (m *CustomerDataUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateA2Block(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateA2Portal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateA2Stairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateA3Door(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateA3Floor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordDataInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordEmploymentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordMinCardRepayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordMnthLoanRepayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordMnthMortgagePmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordMnthSpending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordNetMnthIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordNumDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordPurpose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordRequestedCrlim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordSustainability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierRoute12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierRoute34(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeathDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeathDateNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelivPointSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDemo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlCntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpPhoneExtn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpWorkPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpWorkPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployerAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployerAddr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignCountryInd1099c(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUseFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenderCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomePhoneNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHouseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHouseNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDFraud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageIndic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrNotifyMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrPrefInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailingList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaritalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorableWord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorableWordReminder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine1Typ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine2Typ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameLine3Typ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNationality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidenceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoadName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSicCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpclAddrInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtMsgIndic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNotifyInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNotifyMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIDNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIDTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDataInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacAddr3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacCntryCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacPhoneNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVipStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW9DateFiled1099c(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW9DateSent1099c(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerDataUpdateRequest) validateA2Block(formats strfmt.Registry) error {

	if swag.IsZero(m.A2Block) { // not required
		return nil
	}

	if err := validate.MinLength("a2Block", "body", string(*m.A2Block), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("a2Block", "body", string(*m.A2Block), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateA2Portal(formats strfmt.Registry) error {

	if swag.IsZero(m.A2Portal) { // not required
		return nil
	}

	if err := validate.MinLength("a2Portal", "body", string(*m.A2Portal), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("a2Portal", "body", string(*m.A2Portal), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateA2Stairs(formats strfmt.Registry) error {

	if swag.IsZero(m.A2Stairs) { // not required
		return nil
	}

	if err := validate.MinLength("a2Stairs", "body", string(*m.A2Stairs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("a2Stairs", "body", string(*m.A2Stairs), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateA3Door(formats strfmt.Registry) error {

	if swag.IsZero(m.A3Door) { // not required
		return nil
	}

	if err := validate.MinLength("a3Door", "body", string(*m.A3Door), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("a3Door", "body", string(*m.A3Door), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateA3Floor(formats strfmt.Registry) error {

	if swag.IsZero(m.A3Floor) { // not required
		return nil
	}

	if err := validate.MinLength("a3Floor", "body", string(*m.A3Floor), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("a3Floor", "body", string(*m.A3Floor), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.Addr1) { // not required
		return nil
	}

	if err := validate.MinLength("addr1", "body", string(*m.Addr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addr1", "body", string(*m.Addr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAddr4(formats strfmt.Registry) error {

	if swag.IsZero(m.Addr4) { // not required
		return nil
	}

	if err := validate.MinLength("addr4", "body", string(*m.Addr4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addr4", "body", string(*m.Addr4), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordDataInd(formats strfmt.Registry) error {

	if err := validate.Required("affordDataInd", "body", m.AffordDataInd); err != nil {
		return err
	}

	if err := validate.MinLength("affordDataInd", "body", string(*m.AffordDataInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordDataInd", "body", string(*m.AffordDataInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordEmploymentStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordEmploymentStatus) { // not required
		return nil
	}

	if err := validate.MinLength("affordEmploymentStatus", "body", string(*m.AffordEmploymentStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordEmploymentStatus", "body", string(*m.AffordEmploymentStatus), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordEmploymentStatus", "body", string(*m.AffordEmploymentStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordMinCardRepayments(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordMinCardRepayments) { // not required
		return nil
	}

	if err := validate.MinLength("affordMinCardRepayments", "body", string(*m.AffordMinCardRepayments), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordMinCardRepayments", "body", string(*m.AffordMinCardRepayments), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordMinCardRepayments", "body", string(*m.AffordMinCardRepayments), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordMnthLoanRepayments(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordMnthLoanRepayments) { // not required
		return nil
	}

	if err := validate.MinLength("affordMnthLoanRepayments", "body", string(*m.AffordMnthLoanRepayments), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordMnthLoanRepayments", "body", string(*m.AffordMnthLoanRepayments), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordMnthLoanRepayments", "body", string(*m.AffordMnthLoanRepayments), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordMnthMortgagePmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordMnthMortgagePmt) { // not required
		return nil
	}

	if err := validate.MinLength("affordMnthMortgagePmt", "body", string(*m.AffordMnthMortgagePmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordMnthMortgagePmt", "body", string(*m.AffordMnthMortgagePmt), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordMnthMortgagePmt", "body", string(*m.AffordMnthMortgagePmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordMnthSpending(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordMnthSpending) { // not required
		return nil
	}

	if err := validate.MinLength("affordMnthSpending", "body", string(*m.AffordMnthSpending), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordMnthSpending", "body", string(*m.AffordMnthSpending), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordMnthSpending", "body", string(*m.AffordMnthSpending), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordNetMnthIncome(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordNetMnthIncome) { // not required
		return nil
	}

	if err := validate.MinLength("affordNetMnthIncome", "body", string(*m.AffordNetMnthIncome), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordNetMnthIncome", "body", string(*m.AffordNetMnthIncome), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordNetMnthIncome", "body", string(*m.AffordNetMnthIncome), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordNumDependents(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordNumDependents) { // not required
		return nil
	}

	if err := validate.MinLength("affordNumDependents", "body", string(*m.AffordNumDependents), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordNumDependents", "body", string(*m.AffordNumDependents), 3); err != nil {
		return err
	}

	if err := validate.Pattern("affordNumDependents", "body", string(*m.AffordNumDependents), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordPurpose(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordPurpose) { // not required
		return nil
	}

	if err := validate.MinLength("affordPurpose", "body", string(*m.AffordPurpose), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordPurpose", "body", string(*m.AffordPurpose), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordPurpose", "body", string(*m.AffordPurpose), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordRequestedCrlim(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordRequestedCrlim) { // not required
		return nil
	}

	if err := validate.MinLength("affordRequestedCrlim", "body", string(*m.AffordRequestedCrlim), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordRequestedCrlim", "body", string(*m.AffordRequestedCrlim), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordRequestedCrlim", "body", string(*m.AffordRequestedCrlim), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateAffordSustainability(formats strfmt.Registry) error {

	if swag.IsZero(m.AffordSustainability) { // not required
		return nil
	}

	if err := validate.MinLength("affordSustainability", "body", string(*m.AffordSustainability), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("affordSustainability", "body", string(*m.AffordSustainability), 9); err != nil {
		return err
	}

	if err := validate.Pattern("affordSustainability", "body", string(*m.AffordSustainability), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCarrierRoute12(formats strfmt.Registry) error {

	if swag.IsZero(m.CarrierRoute12) { // not required
		return nil
	}

	if err := validate.MinLength("carrierRoute12", "body", string(*m.CarrierRoute12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("carrierRoute12", "body", string(*m.CarrierRoute12), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCarrierRoute34(formats strfmt.Registry) error {

	if swag.IsZero(m.CarrierRoute34) { // not required
		return nil
	}

	if err := validate.MinLength("carrierRoute34", "body", string(*m.CarrierRoute34), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("carrierRoute34", "body", string(*m.CarrierRoute34), 2); err != nil {
		return err
	}

	if err := validate.Pattern("carrierRoute34", "body", string(*m.CarrierRoute34), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(*m.City), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(*m.City), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateContactInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactInd) { // not required
		return nil
	}

	if err := validate.MinLength("contactInd", "body", string(*m.ContactInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("contactInd", "body", string(*m.ContactInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("contactInd", "body", string(*m.ContactInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MinLength("countryCode", "body", string(*m.CountryCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("countryCode", "body", string(*m.CountryCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.County) { // not required
		return nil
	}

	if err := validate.MinLength("county", "body", string(*m.County), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("county", "body", string(*m.County), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateCustFormat(formats strfmt.Registry) error {

	if err := validate.Required("custFormat", "body", m.CustFormat); err != nil {
		return err
	}

	if err := validate.MinLength("custFormat", "body", string(*m.CustFormat), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custFormat", "body", string(*m.CustFormat), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDeathDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeathDate) { // not required
		return nil
	}

	if err := validate.MinLength("deathDate", "body", string(*m.DeathDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("deathDate", "body", string(*m.DeathDate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("deathDate", "body", string(*m.DeathDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDeathDateNotify(formats strfmt.Registry) error {

	if swag.IsZero(m.DeathDateNotify) { // not required
		return nil
	}

	if err := validate.MinLength("deathDateNotify", "body", string(*m.DeathDateNotify), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("deathDateNotify", "body", string(*m.DeathDateNotify), 7); err != nil {
		return err
	}

	if err := validate.Pattern("deathDateNotify", "body", string(*m.DeathDateNotify), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDelivPointSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.DelivPointSuffix) { // not required
		return nil
	}

	if err := validate.MinLength("delivPointSuffix", "body", string(*m.DelivPointSuffix), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("delivPointSuffix", "body", string(*m.DelivPointSuffix), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.Demo1) { // not required
		return nil
	}

	if err := validate.MinLength("demo1", "body", string(*m.Demo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("demo1", "body", string(*m.Demo1), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.Demo2) { // not required
		return nil
	}

	if err := validate.MinLength("demo2", "body", string(*m.Demo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("demo2", "body", string(*m.Demo2), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDemo3(formats strfmt.Registry) error {

	if swag.IsZero(m.Demo3) { // not required
		return nil
	}

	if err := validate.MinLength("demo3", "body", string(*m.Demo3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("demo3", "body", string(*m.Demo3), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDlCntry(formats strfmt.Registry) error {

	if swag.IsZero(m.DlCntry) { // not required
		return nil
	}

	if err := validate.MinLength("dlCntry", "body", string(*m.DlCntry), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dlCntry", "body", string(*m.DlCntry), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDlNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.DlNbr) { // not required
		return nil
	}

	if err := validate.MinLength("dlNbr", "body", string(*m.DlNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dlNbr", "body", string(*m.DlNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateDlState(formats strfmt.Registry) error {

	if swag.IsZero(m.DlState) { // not required
		return nil
	}

	if err := validate.MinLength("dlState", "body", string(*m.DlState), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dlState", "body", string(*m.DlState), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(*m.Email), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(*m.Email), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmailFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailFlag) { // not required
		return nil
	}

	if err := validate.MinLength("emailFlag", "body", string(*m.EmailFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emailFlag", "body", string(*m.EmailFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("emailFlag", "body", string(*m.EmailFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmpPhoneExtn(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpPhoneExtn) { // not required
		return nil
	}

	if err := validate.MinLength("empPhoneExtn", "body", string(*m.EmpPhoneExtn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empPhoneExtn", "body", string(*m.EmpPhoneExtn), 6); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmpStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpStatus) { // not required
		return nil
	}

	if err := validate.MinLength("empStatus", "body", string(*m.EmpStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empStatus", "body", string(*m.EmpStatus), 2); err != nil {
		return err
	}

	if err := validate.Pattern("empStatus", "body", string(*m.EmpStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmpWorkPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpWorkPhone) { // not required
		return nil
	}

	if err := validate.MinLength("empWorkPhone", "body", string(*m.EmpWorkPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empWorkPhone", "body", string(*m.EmpWorkPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmpWorkPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpWorkPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("empWorkPhoneFlag", "body", string(*m.EmpWorkPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empWorkPhoneFlag", "body", string(*m.EmpWorkPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("empWorkPhoneFlag", "body", string(*m.EmpWorkPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmployer(formats strfmt.Registry) error {

	if swag.IsZero(m.Employer) { // not required
		return nil
	}

	if err := validate.MinLength("employer", "body", string(*m.Employer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employer", "body", string(*m.Employer), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmployerAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployerAddr1) { // not required
		return nil
	}

	if err := validate.MinLength("employerAddr1", "body", string(*m.EmployerAddr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employerAddr1", "body", string(*m.EmployerAddr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateEmployerAddr2(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployerAddr2) { // not required
		return nil
	}

	if err := validate.MinLength("employerAddr2", "body", string(*m.EmployerAddr2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("employerAddr2", "body", string(*m.EmployerAddr2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateFaxPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxPhone) { // not required
		return nil
	}

	if err := validate.MinLength("faxPhone", "body", string(*m.FaxPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("faxPhone", "body", string(*m.FaxPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateFaxPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.FaxPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("faxPhoneFlag", "body", string(*m.FaxPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("faxPhoneFlag", "body", string(*m.FaxPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("faxPhoneFlag", "body", string(*m.FaxPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("firstName", "body", string(*m.FirstName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("firstName", "body", string(*m.FirstName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateForeignCountryInd1099c(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignCountryInd1099c) { // not required
		return nil
	}

	if err := validate.MinLength("foreignCountryInd1099c", "body", string(*m.ForeignCountryInd1099c), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignCountryInd1099c", "body", string(*m.ForeignCountryInd1099c), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateForeignUseFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUseFlag) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUseFlag", "body", string(*m.ForeignUseFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUseFlag", "body", string(*m.ForeignUseFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateGenderCode(formats strfmt.Registry) error {

	if swag.IsZero(m.GenderCode) { // not required
		return nil
	}

	if err := validate.MinLength("genderCode", "body", string(*m.GenderCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("genderCode", "body", string(*m.GenderCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateHomePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("homePhoneFlag", "body", string(*m.HomePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homePhoneFlag", "body", string(*m.HomePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("homePhoneFlag", "body", string(*m.HomePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateHomePhoneNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.HomePhoneNbr) { // not required
		return nil
	}

	if err := validate.MinLength("homePhoneNbr", "body", string(*m.HomePhoneNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homePhoneNbr", "body", string(*m.HomePhoneNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateHouseName(formats strfmt.Registry) error {

	if swag.IsZero(m.HouseName) { // not required
		return nil
	}

	if err := validate.MinLength("houseName", "body", string(*m.HouseName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("houseName", "body", string(*m.HouseName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateHouseNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.HouseNumber) { // not required
		return nil
	}

	if err := validate.MinLength("houseNumber", "body", string(*m.HouseNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("houseNumber", "body", string(*m.HouseNumber), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateIDFraud(formats strfmt.Registry) error {

	if swag.IsZero(m.IDFraud) { // not required
		return nil
	}

	if err := validate.MinLength("idFraud", "body", string(*m.IDFraud), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("idFraud", "body", string(*m.IDFraud), 1); err != nil {
		return err
	}

	if err := validate.Pattern("idFraud", "body", string(*m.IDFraud), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateLanguageIndic(formats strfmt.Registry) error {

	if swag.IsZero(m.LanguageIndic) { // not required
		return nil
	}

	if err := validate.MinLength("languageIndic", "body", string(*m.LanguageIndic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("languageIndic", "body", string(*m.LanguageIndic), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("lastName", "body", string(*m.LastName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lastName", "body", string(*m.LastName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateLtrNotifyMod(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrNotifyMod) { // not required
		return nil
	}

	if err := validate.MinLength("ltrNotifyMod", "body", string(*m.LtrNotifyMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrNotifyMod", "body", string(*m.LtrNotifyMod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ltrNotifyMod", "body", string(*m.LtrNotifyMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateLtrPrefInd(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrPrefInd) { // not required
		return nil
	}

	if err := validate.MinLength("ltrPrefInd", "body", string(*m.LtrPrefInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrPrefInd", "body", string(*m.LtrPrefInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ltrPrefInd", "body", string(*m.LtrPrefInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMailingList(formats strfmt.Registry) error {

	if swag.IsZero(m.MailingList) { // not required
		return nil
	}

	if err := validate.MinLength("mailingList", "body", string(*m.MailingList), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mailingList", "body", string(*m.MailingList), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMaritalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MaritalStatus) { // not required
		return nil
	}

	if err := validate.MinLength("maritalStatus", "body", string(*m.MaritalStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("maritalStatus", "body", string(*m.MaritalStatus), 1); err != nil {
		return err
	}

	if err := validate.Pattern("maritalStatus", "body", string(*m.MaritalStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo1) { // not required
		return nil
	}

	if err := validate.MinLength("memo1", "body", string(*m.Memo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo1", "body", string(*m.Memo1), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.Memo2) { // not required
		return nil
	}

	if err := validate.MinLength("memo2", "body", string(*m.Memo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memo2", "body", string(*m.Memo2), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMemorableWord(formats strfmt.Registry) error {

	if swag.IsZero(m.MemorableWord) { // not required
		return nil
	}

	if err := validate.MinLength("memorableWord", "body", string(*m.MemorableWord), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memorableWord", "body", string(*m.MemorableWord), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMemorableWordReminder(formats strfmt.Registry) error {

	if swag.IsZero(m.MemorableWordReminder) { // not required
		return nil
	}

	if err := validate.MinLength("memorableWordReminder", "body", string(*m.MemorableWordReminder), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memorableWordReminder", "body", string(*m.MemorableWordReminder), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(m.MiddleName) { // not required
		return nil
	}

	if err := validate.MinLength("middleName", "body", string(*m.MiddleName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("middleName", "body", string(*m.MiddleName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMobilePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MobilePhone) { // not required
		return nil
	}

	if err := validate.MinLength("mobilePhone", "body", string(*m.MobilePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobilePhone", "body", string(*m.MobilePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateMobilePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MobilePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mobilePhoneFlag", "body", string(*m.MobilePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobilePhoneFlag", "body", string(*m.MobilePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mobilePhoneFlag", "body", string(*m.MobilePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNameLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine1) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine1", "body", string(*m.NameLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine1", "body", string(*m.NameLine1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNameLine1Typ(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine1Typ) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine1Typ", "body", string(*m.NameLine1Typ), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine1Typ", "body", string(*m.NameLine1Typ), 1); err != nil {
		return err
	}

	if err := validate.Pattern("nameLine1Typ", "body", string(*m.NameLine1Typ), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNameLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine2) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine2", "body", string(*m.NameLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine2", "body", string(*m.NameLine2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNameLine2Typ(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine2Typ) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine2Typ", "body", string(*m.NameLine2Typ), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine2Typ", "body", string(*m.NameLine2Typ), 1); err != nil {
		return err
	}

	if err := validate.Pattern("nameLine2Typ", "body", string(*m.NameLine2Typ), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNameLine3(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine3) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine3", "body", string(*m.NameLine3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine3", "body", string(*m.NameLine3), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNameLine3Typ(formats strfmt.Registry) error {

	if swag.IsZero(m.NameLine3Typ) { // not required
		return nil
	}

	if err := validate.MinLength("nameLine3Typ", "body", string(*m.NameLine3Typ), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nameLine3Typ", "body", string(*m.NameLine3Typ), 1); err != nil {
		return err
	}

	if err := validate.Pattern("nameLine3Typ", "body", string(*m.NameLine3Typ), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNationality(formats strfmt.Registry) error {

	if swag.IsZero(m.Nationality) { // not required
		return nil
	}

	if err := validate.MinLength("nationality", "body", string(*m.Nationality), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nationality", "body", string(*m.Nationality), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateNumberType(formats strfmt.Registry) error {

	if swag.IsZero(m.NumberType) { // not required
		return nil
	}

	if err := validate.MinLength("numberType", "body", string(*m.NumberType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("numberType", "body", string(*m.NumberType), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := validate.MinLength("position", "body", string(*m.Position), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("position", "body", string(*m.Position), 4); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MinLength("postalCode", "body", string(*m.PostalCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("postalCode", "body", string(*m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateRelativeName(formats strfmt.Registry) error {

	if swag.IsZero(m.RelativeName) { // not required
		return nil
	}

	if err := validate.MinLength("relativeName", "body", string(*m.RelativeName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("relativeName", "body", string(*m.RelativeName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateResidenceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ResidenceCode) { // not required
		return nil
	}

	if err := validate.MinLength("residenceCode", "body", string(*m.ResidenceCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("residenceCode", "body", string(*m.ResidenceCode), 1); err != nil {
		return err
	}

	if err := validate.Pattern("residenceCode", "body", string(*m.ResidenceCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateRoadName(formats strfmt.Registry) error {

	if swag.IsZero(m.RoadName) { // not required
		return nil
	}

	if err := validate.MinLength("roadName", "body", string(*m.RoadName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("roadName", "body", string(*m.RoadName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateSicCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SicCode) { // not required
		return nil
	}

	if err := validate.MinLength("sicCode", "body", string(*m.SicCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sicCode", "body", string(*m.SicCode), 6); err != nil {
		return err
	}

	if err := validate.Pattern("sicCode", "body", string(*m.SicCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateSmsFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsFlag) { // not required
		return nil
	}

	if err := validate.MinLength("smsFlag", "body", string(*m.SmsFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("smsFlag", "body", string(*m.SmsFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("smsFlag", "body", string(*m.SmsFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateSpclAddrInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SpclAddrInd) { // not required
		return nil
	}

	if err := validate.MinLength("spclAddrInd", "body", string(*m.SpclAddrInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spclAddrInd", "body", string(*m.SpclAddrInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("spclAddrInd", "body", string(*m.SpclAddrInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := validate.MinLength("state", "body", string(*m.State), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("state", "body", string(*m.State), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinLength("status", "body", string(*m.Status), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", string(*m.Status), 1); err != nil {
		return err
	}

	if err := validate.Pattern("status", "body", string(*m.Status), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateStmtMsgIndic(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtMsgIndic) { // not required
		return nil
	}

	if err := validate.MinLength("stmtMsgIndic", "body", string(*m.StmtMsgIndic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtMsgIndic", "body", string(*m.StmtMsgIndic), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtMsgIndic", "body", string(*m.StmtMsgIndic), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateStmtNotifyInd(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNotifyInd) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNotifyInd", "body", string(*m.StmtNotifyInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNotifyInd", "body", string(*m.StmtNotifyInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNotifyInd", "body", string(*m.StmtNotifyInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateStmtNotifyMod(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNotifyMod) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNotifyMod", "body", string(*m.StmtNotifyMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNotifyMod", "body", string(*m.StmtNotifyMod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNotifyMod", "body", string(*m.StmtNotifyMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if err := validate.MinLength("suffix", "body", string(*m.Suffix), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("suffix", "body", string(*m.Suffix), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateTaxIDNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxIDNbr) { // not required
		return nil
	}

	if err := validate.MinLength("taxIdNbr", "body", string(*m.TaxIDNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("taxIdNbr", "body", string(*m.TaxIDNbr), 25); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateTaxIDTyp(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxIDTyp) { // not required
		return nil
	}

	if err := validate.MinLength("taxIdTyp", "body", string(*m.TaxIDTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("taxIdTyp", "body", string(*m.TaxIDTyp), 1); err != nil {
		return err
	}

	if err := validate.Pattern("taxIdTyp", "body", string(*m.TaxIDTyp), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", string(*m.Title), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", string(*m.Title), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUniqueID(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueID) { // not required
		return nil
	}

	if err := validate.MinLength("uniqueId", "body", string(*m.UniqueID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("uniqueId", "body", string(*m.UniqueID), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.User1) { // not required
		return nil
	}

	if err := validate.MinLength("user1", "body", string(*m.User1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user1", "body", string(*m.User1), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser10(formats strfmt.Registry) error {

	if swag.IsZero(m.User10) { // not required
		return nil
	}

	if err := validate.MinLength("user10", "body", string(*m.User10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user10", "body", string(*m.User10), 7); err != nil {
		return err
	}

	if err := validate.Pattern("user10", "body", string(*m.User10), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser11(formats strfmt.Registry) error {

	if swag.IsZero(m.User11) { // not required
		return nil
	}

	if err := validate.MinLength("user11", "body", string(*m.User11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user11", "body", string(*m.User11), 7); err != nil {
		return err
	}

	if err := validate.Pattern("user11", "body", string(*m.User11), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser12(formats strfmt.Registry) error {

	if swag.IsZero(m.User12) { // not required
		return nil
	}

	if err := validate.MinLength("user12", "body", string(*m.User12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user12", "body", string(*m.User12), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser13(formats strfmt.Registry) error {

	if swag.IsZero(m.User13) { // not required
		return nil
	}

	if err := validate.MinLength("user13", "body", string(*m.User13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user13", "body", string(*m.User13), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser14(formats strfmt.Registry) error {

	if swag.IsZero(m.User14) { // not required
		return nil
	}

	if err := validate.MinLength("user14", "body", string(*m.User14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user14", "body", string(*m.User14), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser15(formats strfmt.Registry) error {

	if swag.IsZero(m.User15) { // not required
		return nil
	}

	if err := validate.MinLength("user15", "body", string(*m.User15), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user15", "body", string(*m.User15), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.User2) { // not required
		return nil
	}

	if err := validate.MinLength("user2", "body", string(*m.User2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user2", "body", string(*m.User2), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.User3) { // not required
		return nil
	}

	if err := validate.MinLength("user3", "body", string(*m.User3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user3", "body", string(*m.User3), 7); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.User4) { // not required
		return nil
	}

	if err := validate.MinLength("user4", "body", string(*m.User4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user4", "body", string(*m.User4), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.User5) { // not required
		return nil
	}

	if err := validate.MinLength("user5", "body", string(*m.User5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user5", "body", string(*m.User5), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.User6) { // not required
		return nil
	}

	if err := validate.MinLength("user6", "body", string(*m.User6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user6", "body", string(*m.User6), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.User7) { // not required
		return nil
	}

	if err := validate.MinLength("user7", "body", string(*m.User7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user7", "body", string(*m.User7), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.User8) { // not required
		return nil
	}

	if err := validate.MinLength("user8", "body", string(*m.User8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user8", "body", string(*m.User8), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.User9) { // not required
		return nil
	}

	if err := validate.MinLength("user9", "body", string(*m.User9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user9", "body", string(*m.User9), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateUserDataInd(formats strfmt.Registry) error {

	if err := validate.Required("userDataInd", "body", m.UserDataInd); err != nil {
		return err
	}

	if err := validate.MinLength("userDataInd", "body", string(*m.UserDataInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userDataInd", "body", string(*m.UserDataInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateVacAddr3(formats strfmt.Registry) error {

	if swag.IsZero(m.VacAddr3) { // not required
		return nil
	}

	if err := validate.MinLength("vacAddr3", "body", string(*m.VacAddr3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vacAddr3", "body", string(*m.VacAddr3), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateVacCntryCd(formats strfmt.Registry) error {

	if swag.IsZero(m.VacCntryCd) { // not required
		return nil
	}

	if err := validate.MinLength("vacCntryCd", "body", string(*m.VacCntryCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vacCntryCd", "body", string(*m.VacCntryCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateVacEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.VacEndDate) { // not required
		return nil
	}

	if err := validate.MinLength("vacEndDate", "body", string(*m.VacEndDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vacEndDate", "body", string(*m.VacEndDate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("vacEndDate", "body", string(*m.VacEndDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateVacPhoneNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.VacPhoneNbr) { // not required
		return nil
	}

	if err := validate.MinLength("vacPhoneNbr", "body", string(*m.VacPhoneNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vacPhoneNbr", "body", string(*m.VacPhoneNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateVacStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.VacStartDate) { // not required
		return nil
	}

	if err := validate.MinLength("vacStartDate", "body", string(*m.VacStartDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vacStartDate", "body", string(*m.VacStartDate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("vacStartDate", "body", string(*m.VacStartDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateVipStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.VipStatus) { // not required
		return nil
	}

	if err := validate.MinLength("vipStatus", "body", string(*m.VipStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vipStatus", "body", string(*m.VipStatus), 1); err != nil {
		return err
	}

	if err := validate.Pattern("vipStatus", "body", string(*m.VipStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateW9DateFiled1099c(formats strfmt.Registry) error {

	if swag.IsZero(m.W9DateFiled1099c) { // not required
		return nil
	}

	if err := validate.MinLength("w9DateFiled1099c", "body", string(*m.W9DateFiled1099c), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("w9DateFiled1099c", "body", string(*m.W9DateFiled1099c), 7); err != nil {
		return err
	}

	if err := validate.Pattern("w9DateFiled1099c", "body", string(*m.W9DateFiled1099c), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerDataUpdateRequest) validateW9DateSent1099c(formats strfmt.Registry) error {

	if swag.IsZero(m.W9DateSent1099c) { // not required
		return nil
	}

	if err := validate.MinLength("w9DateSent1099c", "body", string(*m.W9DateSent1099c), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("w9DateSent1099c", "body", string(*m.W9DateSent1099c), 7); err != nil {
		return err
	}

	if err := validate.Pattern("w9DateSent1099c", "body", string(*m.W9DateSent1099c), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerDataUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerDataUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CustomerDataUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

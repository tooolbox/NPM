// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardholderGrpForAccountTransfer1 cardholder grp for account transfer1
//
// swagger:model CardholderGrpForAccountTransfer1
type CardholderGrpForAccountTransfer1 struct {

	//  Max length = 1, ALT CARD CARRIER
	// Max Length: 1
	// Min Length: 0
	AltCardCarrier *string `json:"altCardCarrier,omitempty"`

	// BTCH XFR DATA
	BtchXfrData []*BtchXfrDataForAccountTransfer1 `json:"btchXfrData"`

	//  Max length = 3, Sub field of group CARDLOGO.  Card logo of the new account whose cards need to be transferred to the new account. Logos of CARDLOGO-ISSUE should be present as valid Multi scheme logo in the transfer-to product.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardlogoIssue *string `json:"cardlogoIssue,omitempty"`

	//  Max length = 3, Sub field of group CARDLOGO. Card logo of the old account whose cards need to be transferred to the new account. The logo must be numeric and must be a valid Multi scheme logo on the old account. It should be allowed in the transfer-to product.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardlogoXfr *string `json:"cardlogoXfr,omitempty"`

	//  Max length = 1, Sub field of group CARDLOGO. SDP (=Same Day Plastic) process type for the new cards.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SdpProcessType *string `json:"sdpProcessType,omitempty"`
}

// Validate validates this cardholder grp for account transfer1
func (m *CardholderGrpForAccountTransfer1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAltCardCarrier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBtchXfrData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardlogoIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardlogoXfr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSdpProcessType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardholderGrpForAccountTransfer1) validateAltCardCarrier(formats strfmt.Registry) error {

	if swag.IsZero(m.AltCardCarrier) { // not required
		return nil
	}

	if err := validate.MinLength("altCardCarrier", "body", string(*m.AltCardCarrier), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCardCarrier", "body", string(*m.AltCardCarrier), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardholderGrpForAccountTransfer1) validateBtchXfrData(formats strfmt.Registry) error {

	if swag.IsZero(m.BtchXfrData) { // not required
		return nil
	}

	for i := 0; i < len(m.BtchXfrData); i++ {
		if swag.IsZero(m.BtchXfrData[i]) { // not required
			continue
		}

		if m.BtchXfrData[i] != nil {
			if err := m.BtchXfrData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("btchXfrData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CardholderGrpForAccountTransfer1) validateCardlogoIssue(formats strfmt.Registry) error {

	if swag.IsZero(m.CardlogoIssue) { // not required
		return nil
	}

	if err := validate.MinLength("cardlogoIssue", "body", string(*m.CardlogoIssue), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardlogoIssue", "body", string(*m.CardlogoIssue), 3); err != nil {
		return err
	}

	if err := validate.Pattern("cardlogoIssue", "body", string(*m.CardlogoIssue), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardholderGrpForAccountTransfer1) validateCardlogoXfr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardlogoXfr) { // not required
		return nil
	}

	if err := validate.MinLength("cardlogoXfr", "body", string(*m.CardlogoXfr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardlogoXfr", "body", string(*m.CardlogoXfr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("cardlogoXfr", "body", string(*m.CardlogoXfr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardholderGrpForAccountTransfer1) validateSdpProcessType(formats strfmt.Registry) error {

	if swag.IsZero(m.SdpProcessType) { // not required
		return nil
	}

	if err := validate.MinLength("sdpProcessType", "body", string(*m.SdpProcessType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sdpProcessType", "body", string(*m.SdpProcessType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("sdpProcessType", "body", string(*m.SdpProcessType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardholderGrpForAccountTransfer1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardholderGrpForAccountTransfer1) UnmarshalBinary(b []byte) error {
	var res CardholderGrpForAccountTransfer1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

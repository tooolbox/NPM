// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAddRequest customer add request
//
// swagger:model CustomerAddRequest
type CustomerAddRequest struct {

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AcctOrg *string `json:"acctOrg,omitempty"`

	//  Max length = 3, Delivery point suffix value from the postal code information file. Optional field and CMS assigns a delivery point suffix from the postal code information file (PIF) based on the customer address to the statement file.
	// Max Length: 3
	// Min Length: 0
	AddrDps *string `json:"addrDps,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	BsAcct *string `json:"bsAcct,omitempty"`

	//  Max length = 1, Co Maker Indicator: Flag indicating the presence of Co-Maker (secondary or additional owner of the account) data within the customer record.  Values are:  1 - Maker  2 - Co-maker
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComakerInd *string `json:"comakerInd"`

	//  Max length = 1, COMKR 1099C FOREIGN IND
	// Max Length: 1
	// Min Length: 0
	Comkr1099cForeignInd *string `json:"comkr1099cForeignInd,omitempty"`

	// Format: YYYYMMDD. COMKR 1099C W9 DATE FILED
	Comkr1099cW9DateFiled string `json:"comkr1099cW9DateFiled,omitempty"`

	//  Max length = 40, COMKR ADDR 1
	// Max Length: 40
	// Min Length: 0
	ComkrAddr1 *string `json:"comkrAddr1,omitempty"`

	//  Max length = 40, COMKR ADDR 4
	// Max Length: 40
	// Min Length: 0
	ComkrAddr4 *string `json:"comkrAddr4,omitempty"`

	//  Max length = 5, COMKR BLOCK
	// Max Length: 5
	// Min Length: 0
	ComkrBlock *string `json:"comkrBlock,omitempty"`

	//  Max length = 30, COMKR CITY
	// Max Length: 30
	// Min Length: 0
	ComkrCity *string `json:"comkrCity,omitempty"`

	//  Max length = 3, COMKR CNTRY CD
	// Max Length: 3
	// Min Length: 0
	ComkrCntryCd *string `json:"comkrCntryCd,omitempty"`

	//  Max length = 2, COMKR CONTACT IND
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrContactInd *string `json:"comkrContactInd,omitempty"`

	//  Max length = 30, COMKR COUNTY
	// Max Length: 30
	// Min Length: 0
	ComkrCounty *string `json:"comkrCounty,omitempty"`

	//  Max length = 2, COMKR CR 1 2
	// Max Length: 2
	// Min Length: 0
	ComkrCr12 *string `json:"comkrCr12,omitempty"`

	//  Max length = 2, COMKR CR 3 4
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrCr34 *string `json:"comkrCr34,omitempty"`

	//  Max length = 3, COMKR DL CNTRY
	// Max Length: 3
	// Min Length: 0
	ComkrDlCntry *string `json:"comkrDlCntry,omitempty"`

	//  Max length = 20, COMKR DL NBR
	// Max Length: 20
	// Min Length: 0
	ComkrDlNbr *string `json:"comkrDlNbr,omitempty"`

	//  Max length = 3, COMKR DL STATE
	// Max Length: 3
	// Min Length: 0
	ComkrDlState *string `json:"comkrDlState,omitempty"`

	// Format: YYYYMMDD. COMKR DOB
	ComkrDob string `json:"comkrDob,omitempty"`

	//  Max length = 5, COMKR DOOR
	// Max Length: 5
	// Min Length: 0
	ComkrDoor *string `json:"comkrDoor,omitempty"`

	//  Max length = 60, COMKR EMAIL
	// Max Length: 60
	// Min Length: 0
	ComkrEmail *string `json:"comkrEmail,omitempty"`

	//  Max length = 1, COMKR EMAIL FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrEmailFlag *string `json:"comkrEmailFlag,omitempty"`

	//  Max length = 20, COMKR EMP PHONE
	// Max Length: 20
	// Min Length: 0
	ComkrEmpPhone *string `json:"comkrEmpPhone,omitempty"`

	//  Max length = 6, COMKR EMP PHONE EXTN
	// Max Length: 6
	// Min Length: 0
	ComkrEmpPhoneExtn *string `json:"comkrEmpPhoneExtn,omitempty"`

	//  Max length = 40, COMKR EMPLOYER
	// Max Length: 40
	// Min Length: 0
	ComkrEmployer *string `json:"comkrEmployer,omitempty"`

	//  Max length = 40, COMKR EMPLOYER ADDR 1
	// Max Length: 40
	// Min Length: 0
	ComkrEmployerAddr1 *string `json:"comkrEmployerAddr1,omitempty"`

	//  Max length = 40, COMKR EMPLOYER ADDR 2
	// Max Length: 40
	// Min Length: 0
	ComkrEmployerAddr2 *string `json:"comkrEmployerAddr2,omitempty"`

	//  Max length = 20, COMKR FAX PHONE
	// Max Length: 20
	// Min Length: 0
	ComkrFaxPhone *string `json:"comkrFaxPhone,omitempty"`

	//  Max length = 1, COMKR FAX PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrFaxPhoneFlag *string `json:"comkrFaxPhoneFlag,omitempty"`

	//  Max length = 40, COMKR FIRST NAME
	// Max Length: 40
	// Min Length: 0
	ComkrFirstName *string `json:"comkrFirstName,omitempty"`

	//  Max length = 5, COMKR FLOOR
	// Max Length: 5
	// Min Length: 0
	ComkrFloor *string `json:"comkrFloor,omitempty"`

	//  Max length = 1, COMKR GENDER CODE
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrGenderCode *string `json:"comkrGenderCode,omitempty"`

	//  Max length = 20, COMKR HOME PHONE
	// Max Length: 20
	// Min Length: 0
	ComkrHomePhone *string `json:"comkrHomePhone,omitempty"`

	//  Max length = 1, COMKR HOME PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrHomePhoneFlag *string `json:"comkrHomePhoneFlag,omitempty"`

	//  Max length = 40, COMKR HOUSE NAME
	// Max Length: 40
	// Min Length: 0
	ComkrHouseName *string `json:"comkrHouseName,omitempty"`

	//  Max length = 20, COMKR HOUSE NUMBER
	// Max Length: 20
	// Min Length: 0
	ComkrHouseNumber *string `json:"comkrHouseNumber,omitempty"`

	//  Max length = 1, COMKR ID FRAUD
	// Max Length: 1
	// Min Length: 0
	ComkrIDFraud *string `json:"comkrIdFraud,omitempty"`

	//  Max length = 3, COMKR LANGUAGE INDIC
	// Max Length: 3
	// Min Length: 0
	ComkrLanguageIndic *string `json:"comkrLanguageIndic,omitempty"`

	//  Max length = 40, COMKR LAST NAME
	// Max Length: 40
	// Min Length: 0
	ComkrLastName *string `json:"comkrLastName,omitempty"`

	//  Max length = 1, COMKR MAILING LIST
	// Max Length: 1
	// Min Length: 0
	ComkrMailingList *string `json:"comkrMailingList,omitempty"`

	//  Max length = 1, COMKR MARITAL STATUS
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrMaritalStatus *string `json:"comkrMaritalStatus,omitempty"`

	//  Max length = 60, COMKR MEMO 1
	// Max Length: 60
	// Min Length: 0
	ComkrMemo1 *string `json:"comkrMemo1,omitempty"`

	//  Max length = 60, COMKR MEMO 2
	// Max Length: 60
	// Min Length: 0
	ComkrMemo2 *string `json:"comkrMemo2,omitempty"`

	//  Max length = 40, COMKR MIDDLE NAME
	// Max Length: 40
	// Min Length: 0
	ComkrMiddleName *string `json:"comkrMiddleName,omitempty"`

	//  Max length = 20, COMKR MOBILE PHONE
	// Max Length: 20
	// Min Length: 0
	ComkrMobilePhone *string `json:"comkrMobilePhone,omitempty"`

	//  Max length = 1, COMKR MOBILE PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrMobilePhoneFlag *string `json:"comkrMobilePhoneFlag,omitempty"`

	//  Max length = 40, COMKR NAME LINE 1
	// Max Length: 40
	// Min Length: 0
	ComkrNameLine1 *string `json:"comkrNameLine1,omitempty"`

	//  Max length = 40, COMKR NAME LINE 2
	// Max Length: 40
	// Min Length: 0
	ComkrNameLine2 *string `json:"comkrNameLine2,omitempty"`

	//  Max length = 40, COMKR NAME LINE 3
	// Max Length: 40
	// Min Length: 0
	ComkrNameLine3 *string `json:"comkrNameLine3,omitempty"`

	//  Max length = 1, COMKR NAME TYPE IND 1
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrNameTypeInd1 *string `json:"comkrNameTypeInd1,omitempty"`

	//  Max length = 1, COMKR NAME TYPE IND 2
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrNameTypeInd2 *string `json:"comkrNameTypeInd2,omitempty"`

	//  Max length = 1, COMKR NAME TYPE IND 3
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrNameTypeInd3 *string `json:"comkrNameTypeInd3,omitempty"`

	//  Max length = 20, COMKR NATIONALITY
	// Max Length: 20
	// Min Length: 0
	ComkrNationality *string `json:"comkrNationality,omitempty"`

	//  Max length = 3, COMKR NBR OF DEPENDENTS
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrNbrOfDependents *string `json:"comkrNbrOfDependents,omitempty"`

	//  Max length = 1, COMKR OWN RENT RESID FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrOwnRentResidFlag *string `json:"comkrOwnRentResidFlag,omitempty"`

	//  Max length = 1, COMKR PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrPhoneFlag *string `json:"comkrPhoneFlag,omitempty"`

	//  Max length = 5, COMKR PORTAL
	// Max Length: 5
	// Min Length: 0
	ComkrPortal *string `json:"comkrPortal,omitempty"`

	//  Max length = 4, COMKR POSITION
	// Max Length: 4
	// Min Length: 0
	ComkrPosition *string `json:"comkrPosition,omitempty"`

	//  Max length = 10, COMKR PSTL CD
	// Max Length: 10
	// Min Length: 0
	ComkrPstlCd *string `json:"comkrPstlCd,omitempty"`

	//  Max length = 40, COMKR RELATIVE NAME
	// Max Length: 40
	// Min Length: 0
	ComkrRelativeName *string `json:"comkrRelativeName,omitempty"`

	//  Max length = 60, COMKR ROAD NAME
	// Max Length: 60
	// Min Length: 0
	ComkrRoadName *string `json:"comkrRoadName,omitempty"`

	//  Max length = 1, COMKR SMS FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrSmsFlag *string `json:"comkrSmsFlag,omitempty"`

	//  Max length = 25, COMKR SSAN
	// Max Length: 25
	// Min Length: 0
	ComkrSsan *string `json:"comkrSsan,omitempty"`

	//  Max length = 1, COMKR SSAN FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrSsanFlag *string `json:"comkrSsanFlag,omitempty"`

	//  Max length = 5, COMKR STAIRS
	// Max Length: 5
	// Min Length: 0
	ComkrStairs *string `json:"comkrStairs,omitempty"`

	//  Max length = 3, COMKR STATE
	// Max Length: 3
	// Min Length: 0
	ComkrState *string `json:"comkrState,omitempty"`

	//  Max length = 1, COMKR STMT MSG INDIC
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrStmtMsgIndic *string `json:"comkrStmtMsgIndic,omitempty"`

	//  Max length = 1, COMKR STMT NOTIFY IND
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrStmtNotifyInd *string `json:"comkrStmtNotifyInd,omitempty"`

	//  Max length = 20, COMKR SUFFIX
	// Max Length: 20
	// Min Length: 0
	ComkrSuffix *string `json:"comkrSuffix,omitempty"`

	//  Max length = 20, COMKR TITLE
	// Max Length: 20
	// Min Length: 0
	ComkrTitle *string `json:"comkrTitle,omitempty"`

	//  Max length = 2, COMKR USER 1
	// Max Length: 2
	// Min Length: 0
	ComkrUser1 *string `json:"comkrUser1,omitempty"`

	//  Max length = 7, COMKR USER 10
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrUser10 *string `json:"comkrUser10,omitempty"`

	//  Max length = 7, COMKR USER 11
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ComkrUser11 *string `json:"comkrUser11,omitempty"`

	//  Max length = 30, COMKR USER 12
	// Max Length: 30
	// Min Length: 0
	ComkrUser12 *string `json:"comkrUser12,omitempty"`

	//  Max length = 30, COMKR USER 13
	// Max Length: 30
	// Min Length: 0
	ComkrUser13 *string `json:"comkrUser13,omitempty"`

	//  Max length = 20, COMKR USER 14
	// Max Length: 20
	// Min Length: 0
	ComkrUser14 *string `json:"comkrUser14,omitempty"`

	//  Max length = 20, COMKR USER 15
	// Max Length: 20
	// Min Length: 0
	ComkrUser15 *string `json:"comkrUser15,omitempty"`

	//  Max length = 2, COMKR USER 2
	// Max Length: 2
	// Min Length: 0
	ComkrUser2 *string `json:"comkrUser2,omitempty"`

	//  Max length = 7, COMKR USER 3
	// Max Length: 7
	// Min Length: 0
	ComkrUser3 *string `json:"comkrUser3,omitempty"`

	//  Max length = 1, COMKR USER 4
	// Max Length: 1
	// Min Length: 0
	ComkrUser4 *string `json:"comkrUser4,omitempty"`

	//  Max length = 1, COMKR USER 5
	// Max Length: 1
	// Min Length: 0
	ComkrUser5 *string `json:"comkrUser5,omitempty"`

	//  Max length = 2, COMKR USER 6
	// Max Length: 2
	// Min Length: 0
	ComkrUser6 *string `json:"comkrUser6,omitempty"`

	//  Max length = 2, COMKR USER 7
	// Max Length: 2
	// Min Length: 0
	ComkrUser7 *string `json:"comkrUser7,omitempty"`

	//  Max length = 3, COMKR USER 8
	// Max Length: 3
	// Min Length: 0
	ComkrUser8 *string `json:"comkrUser8,omitempty"`

	//  Max length = 3, COMKR USER 9
	// Max Length: 3
	// Min Length: 0
	ComkrUser9 *string `json:"comkrUser9,omitempty"`

	//  Max length = 20, COMKR USER DEMO 1
	// Max Length: 20
	// Min Length: 0
	ComkrUserDemo1 *string `json:"comkrUserDemo1,omitempty"`

	//  Max length = 20, COMKR USER DEMO 2
	// Max Length: 20
	// Min Length: 0
	ComkrUserDemo2 *string `json:"comkrUserDemo2,omitempty"`

	//  Max length = 20, COMKR USER DEMO 3
	// Max Length: 20
	// Min Length: 0
	ComkrUserDemo3 *string `json:"comkrUserDemo3,omitempty"`

	//  Max length = 3, COMKR VAC CNTRY CD
	// Max Length: 3
	// Min Length: 0
	ComkrVacCntryCd *string `json:"comkrVacCntryCd,omitempty"`

	// Format: YYYYMMDD. COMKR VAC END DATE
	ComkrVacEndDate string `json:"comkrVacEndDate,omitempty"`

	//  Max length = 20, COMKR VAC PHONE NBR
	// Max Length: 20
	// Min Length: 0
	ComkrVacPhoneNbr *string `json:"comkrVacPhoneNbr,omitempty"`

	// Format: YYYYMMDD. COMKR VAC START DATE
	ComkrVacStartDate string `json:"comkrVacStartDate,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Customer block code.
	// Max Length: 3
	// Min Length: 0
	CustBlkCde *string `json:"custBlkCde,omitempty"`

	//  Max length = 17, Account spending/credit limit: current credit limit assigned to the account.
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CustCrlim *string `json:"custCrlim,omitempty"`

	//  Max length = 1, Customer Format Indicator: Indicator to store Address. Values are:  1 - Customer Format 0 - Not Formated
	// Required: true
	// Max Length: 1
	// Min Length: 0
	CustFormatInd *string `json:"custFormatInd"`

	//  Max length = 19, Customer Number: Customer Name/Address record for the person to which the card is assigned.
	// Max Length: 19
	// Min Length: 0
	CustNbr *string `json:"custNbr,omitempty"`

	//  Max length = 1, Field to indicate whether you want CMS to add a duplicate customer record in the associated organization for dual currency processing. The values are: 0 = Do not duplicate the customer record in the associated organization (Default) 1 = Duplicate the customer record in the associated organization.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	DualFlag *string `json:"dualFlag"`

	//  Max length = 2, Employment status.  Values are:  01 - E/U or U/E Employee unknown    02 - OOW Out of work,   03 - Retired      04 - Bankrupt or B/Rupt     05 - IVA     06 - A/U    07 - DRO    08 - Agency    09 - Deceased    10 - Trust Deed/Deed    11 - Unknown    12 - Income Support    13 - JSA    14 - Would not disclose     15 - Student    16 - Pension    17 - Unemployed    18 - Maternity leave    19 - Army
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmpStatus *string `json:"empStatus,omitempty"`

	//  Max length = 20, Memorable Word, as selected by the customer.
	// Max Length: 20
	// Min Length: 0
	MemWrd *string `json:"memWrd,omitempty"`

	//  Max length = 30, Memorable Word Reminder, used by the customer to remember the memorable word.
	// Max Length: 30
	// Min Length: 0
	MemWrdRem *string `json:"memWrdRem,omitempty"`

	//  Max length = 1, MKR 1099C FOREIGN IND
	// Max Length: 1
	// Min Length: 0
	Mkr1099cForeignInd *string `json:"mkr1099cForeignInd,omitempty"`

	// Format: YYYYMMDD. MKR 1099C W9 DATE FILED
	Mkr1099cW9DateFiled string `json:"mkr1099cW9DateFiled,omitempty"`

	//  Max length = 40, MKR ADDR 1
	// Max Length: 40
	// Min Length: 0
	MkrAddr1 *string `json:"mkrAddr1,omitempty"`

	//  Max length = 40, MKR ADDR 4
	// Max Length: 40
	// Min Length: 0
	MkrAddr4 *string `json:"mkrAddr4,omitempty"`

	//  Max length = 5, MKR BLOCK
	// Max Length: 5
	// Min Length: 0
	MkrBlock *string `json:"mkrBlock,omitempty"`

	//  Max length = 30, MKR CITY
	// Max Length: 30
	// Min Length: 0
	MkrCity *string `json:"mkrCity,omitempty"`

	//  Max length = 3, MKR CNTRY CD
	// Max Length: 3
	// Min Length: 0
	MkrCntryCd *string `json:"mkrCntryCd,omitempty"`

	//  Max length = 2, MKR CONTACT IND
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrContactInd *string `json:"mkrContactInd,omitempty"`

	//  Max length = 30, MKR COUNTY
	// Max Length: 30
	// Min Length: 0
	MkrCounty *string `json:"mkrCounty,omitempty"`

	//  Max length = 2, MKR CR 1 2
	// Max Length: 2
	// Min Length: 0
	MkrCr12 *string `json:"mkrCr12,omitempty"`

	//  Max length = 2, MKR CR 3 4
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrCr34 *string `json:"mkrCr34,omitempty"`

	//  Max length = 3, MKR DL CNTRY
	// Max Length: 3
	// Min Length: 0
	MkrDlCntry *string `json:"mkrDlCntry,omitempty"`

	//  Max length = 20, MKR DL NBR
	// Max Length: 20
	// Min Length: 0
	MkrDlNbr *string `json:"mkrDlNbr,omitempty"`

	//  Max length = 3, MKR DL STATE
	// Max Length: 3
	// Min Length: 0
	MkrDlState *string `json:"mkrDlState,omitempty"`

	// Format: YYYYMMDD. MKR DOB
	MkrDob string `json:"mkrDob,omitempty"`

	//  Max length = 5, MKR DOOR
	// Max Length: 5
	// Min Length: 0
	MkrDoor *string `json:"mkrDoor,omitempty"`

	//  Max length = 60, MKR EMAIL
	// Max Length: 60
	// Min Length: 0
	MkrEmail *string `json:"mkrEmail,omitempty"`

	//  Max length = 1, MKR EMAIL FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrEmailFlag *string `json:"mkrEmailFlag,omitempty"`

	//  Max length = 20, MKR EMP PHONE
	// Max Length: 20
	// Min Length: 0
	MkrEmpPhone *string `json:"mkrEmpPhone,omitempty"`

	//  Max length = 6, MKR EMP PHONE EXTN
	// Max Length: 6
	// Min Length: 0
	MkrEmpPhoneExtn *string `json:"mkrEmpPhoneExtn,omitempty"`

	//  Max length = 40, MKR EMPLOYER
	// Max Length: 40
	// Min Length: 0
	MkrEmployer *string `json:"mkrEmployer,omitempty"`

	//  Max length = 40, MKR EMPLOYER ADDR 1
	// Max Length: 40
	// Min Length: 0
	MkrEmployerAddr1 *string `json:"mkrEmployerAddr1,omitempty"`

	//  Max length = 40, MKR EMPLOYER ADDR 2
	// Max Length: 40
	// Min Length: 0
	MkrEmployerAddr2 *string `json:"mkrEmployerAddr2,omitempty"`

	//  Max length = 20, MKR FAX PHONE
	// Max Length: 20
	// Min Length: 0
	MkrFaxPhone *string `json:"mkrFaxPhone,omitempty"`

	//  Max length = 1, MKR FAX PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrFaxPhoneFlag *string `json:"mkrFaxPhoneFlag,omitempty"`

	//  Max length = 40, MKR FIRST NAME
	// Max Length: 40
	// Min Length: 0
	MkrFirstName *string `json:"mkrFirstName,omitempty"`

	//  Max length = 5, MKR FLOOR
	// Max Length: 5
	// Min Length: 0
	MkrFloor *string `json:"mkrFloor,omitempty"`

	//  Max length = 1, MKR GENDER CODE
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrGenderCode *string `json:"mkrGenderCode,omitempty"`

	//  Max length = 20, MKR HOME PHONE
	// Max Length: 20
	// Min Length: 0
	MkrHomePhone *string `json:"mkrHomePhone,omitempty"`

	//  Max length = 1, MKR HOME PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrHomePhoneFlag *string `json:"mkrHomePhoneFlag,omitempty"`

	//  Max length = 40, MKR HOUSE NAME
	// Max Length: 40
	// Min Length: 0
	MkrHouseName *string `json:"mkrHouseName,omitempty"`

	//  Max length = 20, MKR HOUSE NUMBER
	// Max Length: 20
	// Min Length: 0
	MkrHouseNumber *string `json:"mkrHouseNumber,omitempty"`

	//  Max length = 1, MKR ID FRAUD
	// Max Length: 1
	// Min Length: 0
	MkrIDFraud *string `json:"mkrIdFraud,omitempty"`

	//  Max length = 3, MKR LANGUAGE INDIC
	// Max Length: 3
	// Min Length: 0
	MkrLanguageIndic *string `json:"mkrLanguageIndic,omitempty"`

	//  Max length = 40, MKR LAST NAME
	// Max Length: 40
	// Min Length: 0
	MkrLastName *string `json:"mkrLastName,omitempty"`

	//  Max length = 1, MKR MAILING LIST
	// Max Length: 1
	// Min Length: 0
	MkrMailingList *string `json:"mkrMailingList,omitempty"`

	//  Max length = 1, MKR MARITAL STATUS
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrMaritalStatus *string `json:"mkrMaritalStatus,omitempty"`

	//  Max length = 40, MKR MIDDLE NAME
	// Max Length: 40
	// Min Length: 0
	MkrMiddleName *string `json:"mkrMiddleName,omitempty"`

	//  Max length = 20, MKR MOBILE PHONE
	// Max Length: 20
	// Min Length: 0
	MkrMobilePhone *string `json:"mkrMobilePhone,omitempty"`

	//  Max length = 1, MKR MOBILE PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrMobilePhoneFlag *string `json:"mkrMobilePhoneFlag,omitempty"`

	//  Max length = 40, MKR NAME LINE 1
	// Max Length: 40
	// Min Length: 0
	MkrNameLine1 *string `json:"mkrNameLine1,omitempty"`

	//  Max length = 40, MKR NAME LINE 2
	// Max Length: 40
	// Min Length: 0
	MkrNameLine2 *string `json:"mkrNameLine2,omitempty"`

	//  Max length = 40, MKR NAME LINE 3
	// Max Length: 40
	// Min Length: 0
	MkrNameLine3 *string `json:"mkrNameLine3,omitempty"`

	//  Max length = 1, MKR NAME TYPE IND 1
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrNameTypeInd1 *string `json:"mkrNameTypeInd1,omitempty"`

	//  Max length = 1, MKR NAME TYPE IND 2
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrNameTypeInd2 *string `json:"mkrNameTypeInd2,omitempty"`

	//  Max length = 1, MKR NAME TYPE IND 3
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrNameTypeInd3 *string `json:"mkrNameTypeInd3,omitempty"`

	//  Max length = 20, MKR NATIONALITY
	// Max Length: 20
	// Min Length: 0
	MkrNationality *string `json:"mkrNationality,omitempty"`

	//  Max length = 1, MKR OWN RENT RESID FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrOwnRentResidFlag *string `json:"mkrOwnRentResidFlag,omitempty"`

	//  Max length = 1, MKR PHONE FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrPhoneFlag *string `json:"mkrPhoneFlag,omitempty"`

	//  Max length = 5, MKR PORTAL
	// Max Length: 5
	// Min Length: 0
	MkrPortal *string `json:"mkrPortal,omitempty"`

	//  Max length = 4, MKR POSITION
	// Max Length: 4
	// Min Length: 0
	MkrPosition *string `json:"mkrPosition,omitempty"`

	//  Max length = 10, MKR PSTL CD
	// Max Length: 10
	// Min Length: 0
	MkrPstlCd *string `json:"mkrPstlCd,omitempty"`

	//  Max length = 40, MKR RELATIVE NAME
	// Max Length: 40
	// Min Length: 0
	MkrRelativeName *string `json:"mkrRelativeName,omitempty"`

	//  Max length = 60, MKR ROAD NAME
	// Max Length: 60
	// Min Length: 0
	MkrRoadName *string `json:"mkrRoadName,omitempty"`

	//  Max length = 1, MKR SMS FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrSmsFlag *string `json:"mkrSmsFlag,omitempty"`

	//  Max length = 25, MKR SSAN
	// Max Length: 25
	// Min Length: 0
	MkrSsan *string `json:"mkrSsan,omitempty"`

	//  Max length = 1, MKR SSAN FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrSsanFlag *string `json:"mkrSsanFlag,omitempty"`

	//  Max length = 5, MKR STAIRS
	// Max Length: 5
	// Min Length: 0
	MkrStairs *string `json:"mkrStairs,omitempty"`

	//  Max length = 3, MKR STATE
	// Max Length: 3
	// Min Length: 0
	MkrState *string `json:"mkrState,omitempty"`

	//  Max length = 1, MKR STMT MSG INDIC
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrStmtMsgIndic *string `json:"mkrStmtMsgIndic,omitempty"`

	//  Max length = 1, MKR STMT NOTIFY IND
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrStmtNotifyInd *string `json:"mkrStmtNotifyInd,omitempty"`

	//  Max length = 20, MKR SUFFIX
	// Max Length: 20
	// Min Length: 0
	MkrSuffix *string `json:"mkrSuffix,omitempty"`

	//  Max length = 20, MKR TITLE
	// Max Length: 20
	// Min Length: 0
	MkrTitle *string `json:"mkrTitle,omitempty"`

	//  Max length = 2, MKR USER 1
	// Max Length: 2
	// Min Length: 0
	MkrUser1 *string `json:"mkrUser1,omitempty"`

	//  Max length = 7, MKR USER 10
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrUser10 *string `json:"mkrUser10,omitempty"`

	//  Max length = 7, MKR USER 11
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MkrUser11 *string `json:"mkrUser11,omitempty"`

	//  Max length = 30, MKR USER 12
	// Max Length: 30
	// Min Length: 0
	MkrUser12 *string `json:"mkrUser12,omitempty"`

	//  Max length = 30, MKR USER 13
	// Max Length: 30
	// Min Length: 0
	MkrUser13 *string `json:"mkrUser13,omitempty"`

	//  Max length = 20, MKR USER 14
	// Max Length: 20
	// Min Length: 0
	MkrUser14 *string `json:"mkrUser14,omitempty"`

	//  Max length = 20, MKR USER 15
	// Max Length: 20
	// Min Length: 0
	MkrUser15 *string `json:"mkrUser15,omitempty"`

	//  Max length = 2, MKR USER 2
	// Max Length: 2
	// Min Length: 0
	MkrUser2 *string `json:"mkrUser2,omitempty"`

	//  Max length = 7, MKR USER 3
	// Max Length: 7
	// Min Length: 0
	MkrUser3 *string `json:"mkrUser3,omitempty"`

	//  Max length = 1, MKR USER 4
	// Max Length: 1
	// Min Length: 0
	MkrUser4 *string `json:"mkrUser4,omitempty"`

	//  Max length = 1, MKR USER 5
	// Max Length: 1
	// Min Length: 0
	MkrUser5 *string `json:"mkrUser5,omitempty"`

	//  Max length = 2, MKR USER 6
	// Max Length: 2
	// Min Length: 0
	MkrUser6 *string `json:"mkrUser6,omitempty"`

	//  Max length = 2, MKR USER 7
	// Max Length: 2
	// Min Length: 0
	MkrUser7 *string `json:"mkrUser7,omitempty"`

	//  Max length = 3, MKR USER 8
	// Max Length: 3
	// Min Length: 0
	MkrUser8 *string `json:"mkrUser8,omitempty"`

	//  Max length = 3, MKR USER 9
	// Max Length: 3
	// Min Length: 0
	MkrUser9 *string `json:"mkrUser9,omitempty"`

	//  Max length = 20, MKR USER DEMO 1
	// Max Length: 20
	// Min Length: 0
	MkrUserDemo1 *string `json:"mkrUserDemo1,omitempty"`

	//  Max length = 20, MKR USER DEMO 2
	// Max Length: 20
	// Min Length: 0
	MkrUserDemo2 *string `json:"mkrUserDemo2,omitempty"`

	//  Max length = 20, MKR USER DEMO 3
	// Max Length: 20
	// Min Length: 0
	MkrUserDemo3 *string `json:"mkrUserDemo3,omitempty"`

	//  Max length = 3, MKR VAC CNTRY CD
	// Max Length: 3
	// Min Length: 0
	MkrVacCntryCd *string `json:"mkrVacCntryCd,omitempty"`

	// Format: YYYYMMDD. MKR VAC END DATE
	MkrVacEndDate string `json:"mkrVacEndDate,omitempty"`

	//  Max length = 20, MKR VAC PHONE NBR
	// Max Length: 20
	// Min Length: 0
	MkrVacPhoneNbr *string `json:"mkrVacPhoneNbr,omitempty"`

	// Format: YYYYMMDD. MKR VAC START DATE
	MkrVacStartDate string `json:"mkrVacStartDate,omitempty"`

	//  Max length = 3, Number of Dependents of the Maker.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NumberOfDependents *string `json:"numberOfDependents,omitempty"`

	//  Max length = 1, Co-owner Address Preference: ndicates if the Co-Owner address is the preferred one.
	// Max Length: 1
	// Min Length: 0
	PrefAddrCoOwner *string `json:"prefAddrCoOwner,omitempty"`

	//  Max length = 1, Owner Address Preference: Indicates if a preferred address was entered.
	// Max Length: 1
	// Min Length: 0
	PrefAddrOwner *string `json:"prefAddrOwner,omitempty"`

	//  Max length = 6, Standard Industrial Classification code: code used to identify the industry to which the commercial card customer is associated.
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SicCode *string `json:"sicCode,omitempty"`

	//  Max length = 2, Special address indicator.  Values are:  00 - No Special Address  01 - BFPO - British Forces Postal Address    02 - Deceased - Deceased Customer    03 - Foreign - Account with a foreign address     04 - Gone away - Account marked as Address Unknown    05 - Insolvent - Accounts marked as Insolvent    06 - Ireland - Accounts with an Irish Address    07 - Scotland - Accounts with a Scottish Address  08 - Other Special Address
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpclAddrInd *string `json:"spclAddrInd,omitempty"`

	//  Max length = 1, Status of the customer demographic account/record.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Status *string `json:"status,omitempty"`

	//  Max length = 19, Unique ID: It identifies a customer uniquely.
	// Max Length: 19
	// Min Length: 0
	UniqueID *string `json:"uniqueId,omitempty"`

	//  Max length = 1, VIP Status: User-defined code that indicates this account holder is an important or influential customer.  Values are:  0 - Regular Customer  1 - VIP Customer
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VipStatus *string `json:"vipStatus"`
}

// Validate validates this customer add request
func (m *CustomerAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddrDps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBsAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComakerInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkr1099cForeignInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrAddr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrCntryCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrContactInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrCr12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrCr34(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrDlCntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrDlNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrDlState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmailFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmpPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmpPhoneExtn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmployer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmployerAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrEmployerAddr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrFaxPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrFaxPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrFloor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrGenderCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrHomePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrHomePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrHouseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrHouseNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrIDFraud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrLanguageIndic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMailingList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMaritalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrMobilePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNameLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNameLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNameLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNameTypeInd1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNameTypeInd2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNameTypeInd3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNationality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrNbrOfDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrOwnRentResidFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrPortal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrPstlCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrRelativeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrRoadName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrSmsFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrSsan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrSsanFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrStairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrStmtMsgIndic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrStmtNotifyInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUserDemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUserDemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrUserDemo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrVacCntryCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComkrVacPhoneNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustBlkCde(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustCrlim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustFormatInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmpStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemWrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemWrdRem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkr1099cForeignInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrAddr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrCntryCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrContactInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrCr12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrCr34(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrDlCntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrDlNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrDlState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmailFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmpPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmpPhoneExtn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmployer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmployerAddr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrEmployerAddr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrFaxPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrFaxPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrFloor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrGenderCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrHomePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrHomePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrHouseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrHouseNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrIDFraud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrLanguageIndic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrMailingList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrMaritalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrMobilePhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNameLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNameLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNameLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNameTypeInd1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNameTypeInd2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNameTypeInd3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrNationality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrOwnRentResidFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrPhoneFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrPortal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrPstlCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrRelativeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrRoadName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrSmsFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrSsan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrSsanFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrStairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrStmtMsgIndic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrStmtNotifyInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUserDemo1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUserDemo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrUserDemo3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrVacCntryCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMkrVacPhoneNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefAddrCoOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefAddrOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSicCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpclAddrInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVipStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAddRequest) validateAcctOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctOrg) { // not required
		return nil
	}

	if err := validate.MinLength("acctOrg", "body", string(*m.AcctOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctOrg", "body", string(*m.AcctOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("acctOrg", "body", string(*m.AcctOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateAddrDps(formats strfmt.Registry) error {

	if swag.IsZero(m.AddrDps) { // not required
		return nil
	}

	if err := validate.MinLength("addrDps", "body", string(*m.AddrDps), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addrDps", "body", string(*m.AddrDps), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateBsAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.BsAcct) { // not required
		return nil
	}

	if err := validate.MinLength("bsAcct", "body", string(*m.BsAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bsAcct", "body", string(*m.BsAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComakerInd(formats strfmt.Registry) error {

	if err := validate.Required("comakerInd", "body", m.ComakerInd); err != nil {
		return err
	}

	if err := validate.MinLength("comakerInd", "body", string(*m.ComakerInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comakerInd", "body", string(*m.ComakerInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comakerInd", "body", string(*m.ComakerInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkr1099cForeignInd(formats strfmt.Registry) error {

	if swag.IsZero(m.Comkr1099cForeignInd) { // not required
		return nil
	}

	if err := validate.MinLength("comkr1099cForeignInd", "body", string(*m.Comkr1099cForeignInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkr1099cForeignInd", "body", string(*m.Comkr1099cForeignInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrAddr1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrAddr1", "body", string(*m.ComkrAddr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrAddr1", "body", string(*m.ComkrAddr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrAddr4(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrAddr4) { // not required
		return nil
	}

	if err := validate.MinLength("comkrAddr4", "body", string(*m.ComkrAddr4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrAddr4", "body", string(*m.ComkrAddr4), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrBlock) { // not required
		return nil
	}

	if err := validate.MinLength("comkrBlock", "body", string(*m.ComkrBlock), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrBlock", "body", string(*m.ComkrBlock), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrCity(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrCity) { // not required
		return nil
	}

	if err := validate.MinLength("comkrCity", "body", string(*m.ComkrCity), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrCity", "body", string(*m.ComkrCity), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrCntryCd(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrCntryCd) { // not required
		return nil
	}

	if err := validate.MinLength("comkrCntryCd", "body", string(*m.ComkrCntryCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrCntryCd", "body", string(*m.ComkrCntryCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrContactInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrContactInd) { // not required
		return nil
	}

	if err := validate.MinLength("comkrContactInd", "body", string(*m.ComkrContactInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrContactInd", "body", string(*m.ComkrContactInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("comkrContactInd", "body", string(*m.ComkrContactInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrCounty) { // not required
		return nil
	}

	if err := validate.MinLength("comkrCounty", "body", string(*m.ComkrCounty), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrCounty", "body", string(*m.ComkrCounty), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrCr12(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrCr12) { // not required
		return nil
	}

	if err := validate.MinLength("comkrCr12", "body", string(*m.ComkrCr12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrCr12", "body", string(*m.ComkrCr12), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrCr34(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrCr34) { // not required
		return nil
	}

	if err := validate.MinLength("comkrCr34", "body", string(*m.ComkrCr34), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrCr34", "body", string(*m.ComkrCr34), 2); err != nil {
		return err
	}

	if err := validate.Pattern("comkrCr34", "body", string(*m.ComkrCr34), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrDlCntry(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrDlCntry) { // not required
		return nil
	}

	if err := validate.MinLength("comkrDlCntry", "body", string(*m.ComkrDlCntry), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrDlCntry", "body", string(*m.ComkrDlCntry), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrDlNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrDlNbr) { // not required
		return nil
	}

	if err := validate.MinLength("comkrDlNbr", "body", string(*m.ComkrDlNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrDlNbr", "body", string(*m.ComkrDlNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrDlState(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrDlState) { // not required
		return nil
	}

	if err := validate.MinLength("comkrDlState", "body", string(*m.ComkrDlState), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrDlState", "body", string(*m.ComkrDlState), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrDoor(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrDoor) { // not required
		return nil
	}

	if err := validate.MinLength("comkrDoor", "body", string(*m.ComkrDoor), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrDoor", "body", string(*m.ComkrDoor), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmail) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmail", "body", string(*m.ComkrEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmail", "body", string(*m.ComkrEmail), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmailFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmailFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmailFlag", "body", string(*m.ComkrEmailFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmailFlag", "body", string(*m.ComkrEmailFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrEmailFlag", "body", string(*m.ComkrEmailFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmpPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmpPhone) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmpPhone", "body", string(*m.ComkrEmpPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmpPhone", "body", string(*m.ComkrEmpPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmpPhoneExtn(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmpPhoneExtn) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmpPhoneExtn", "body", string(*m.ComkrEmpPhoneExtn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmpPhoneExtn", "body", string(*m.ComkrEmpPhoneExtn), 6); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmployer(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmployer) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmployer", "body", string(*m.ComkrEmployer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmployer", "body", string(*m.ComkrEmployer), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmployerAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmployerAddr1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmployerAddr1", "body", string(*m.ComkrEmployerAddr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmployerAddr1", "body", string(*m.ComkrEmployerAddr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrEmployerAddr2(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrEmployerAddr2) { // not required
		return nil
	}

	if err := validate.MinLength("comkrEmployerAddr2", "body", string(*m.ComkrEmployerAddr2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrEmployerAddr2", "body", string(*m.ComkrEmployerAddr2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrFaxPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrFaxPhone) { // not required
		return nil
	}

	if err := validate.MinLength("comkrFaxPhone", "body", string(*m.ComkrFaxPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrFaxPhone", "body", string(*m.ComkrFaxPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrFaxPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrFaxPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrFaxPhoneFlag", "body", string(*m.ComkrFaxPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrFaxPhoneFlag", "body", string(*m.ComkrFaxPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrFaxPhoneFlag", "body", string(*m.ComkrFaxPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrFirstName) { // not required
		return nil
	}

	if err := validate.MinLength("comkrFirstName", "body", string(*m.ComkrFirstName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrFirstName", "body", string(*m.ComkrFirstName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrFloor(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrFloor) { // not required
		return nil
	}

	if err := validate.MinLength("comkrFloor", "body", string(*m.ComkrFloor), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrFloor", "body", string(*m.ComkrFloor), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrGenderCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrGenderCode) { // not required
		return nil
	}

	if err := validate.MinLength("comkrGenderCode", "body", string(*m.ComkrGenderCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrGenderCode", "body", string(*m.ComkrGenderCode), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrGenderCode", "body", string(*m.ComkrGenderCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrHomePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrHomePhone) { // not required
		return nil
	}

	if err := validate.MinLength("comkrHomePhone", "body", string(*m.ComkrHomePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrHomePhone", "body", string(*m.ComkrHomePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrHomePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrHomePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrHomePhoneFlag", "body", string(*m.ComkrHomePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrHomePhoneFlag", "body", string(*m.ComkrHomePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrHomePhoneFlag", "body", string(*m.ComkrHomePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrHouseName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrHouseName) { // not required
		return nil
	}

	if err := validate.MinLength("comkrHouseName", "body", string(*m.ComkrHouseName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrHouseName", "body", string(*m.ComkrHouseName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrHouseNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrHouseNumber) { // not required
		return nil
	}

	if err := validate.MinLength("comkrHouseNumber", "body", string(*m.ComkrHouseNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrHouseNumber", "body", string(*m.ComkrHouseNumber), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrIDFraud(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrIDFraud) { // not required
		return nil
	}

	if err := validate.MinLength("comkrIdFraud", "body", string(*m.ComkrIDFraud), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrIdFraud", "body", string(*m.ComkrIDFraud), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrLanguageIndic(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrLanguageIndic) { // not required
		return nil
	}

	if err := validate.MinLength("comkrLanguageIndic", "body", string(*m.ComkrLanguageIndic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrLanguageIndic", "body", string(*m.ComkrLanguageIndic), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrLastName) { // not required
		return nil
	}

	if err := validate.MinLength("comkrLastName", "body", string(*m.ComkrLastName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrLastName", "body", string(*m.ComkrLastName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMailingList(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMailingList) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMailingList", "body", string(*m.ComkrMailingList), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMailingList", "body", string(*m.ComkrMailingList), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMaritalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMaritalStatus) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMaritalStatus", "body", string(*m.ComkrMaritalStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMaritalStatus", "body", string(*m.ComkrMaritalStatus), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrMaritalStatus", "body", string(*m.ComkrMaritalStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMemo1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMemo1", "body", string(*m.ComkrMemo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMemo1", "body", string(*m.ComkrMemo1), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMemo2) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMemo2", "body", string(*m.ComkrMemo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMemo2", "body", string(*m.ComkrMemo2), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMiddleName) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMiddleName", "body", string(*m.ComkrMiddleName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMiddleName", "body", string(*m.ComkrMiddleName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMobilePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMobilePhone) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMobilePhone", "body", string(*m.ComkrMobilePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMobilePhone", "body", string(*m.ComkrMobilePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrMobilePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrMobilePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrMobilePhoneFlag", "body", string(*m.ComkrMobilePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrMobilePhoneFlag", "body", string(*m.ComkrMobilePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrMobilePhoneFlag", "body", string(*m.ComkrMobilePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNameLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNameLine1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNameLine1", "body", string(*m.ComkrNameLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNameLine1", "body", string(*m.ComkrNameLine1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNameLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNameLine2) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNameLine2", "body", string(*m.ComkrNameLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNameLine2", "body", string(*m.ComkrNameLine2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNameLine3(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNameLine3) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNameLine3", "body", string(*m.ComkrNameLine3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNameLine3", "body", string(*m.ComkrNameLine3), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNameTypeInd1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNameTypeInd1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNameTypeInd1", "body", string(*m.ComkrNameTypeInd1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNameTypeInd1", "body", string(*m.ComkrNameTypeInd1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrNameTypeInd1", "body", string(*m.ComkrNameTypeInd1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNameTypeInd2(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNameTypeInd2) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNameTypeInd2", "body", string(*m.ComkrNameTypeInd2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNameTypeInd2", "body", string(*m.ComkrNameTypeInd2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrNameTypeInd2", "body", string(*m.ComkrNameTypeInd2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNameTypeInd3(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNameTypeInd3) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNameTypeInd3", "body", string(*m.ComkrNameTypeInd3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNameTypeInd3", "body", string(*m.ComkrNameTypeInd3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrNameTypeInd3", "body", string(*m.ComkrNameTypeInd3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNationality(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNationality) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNationality", "body", string(*m.ComkrNationality), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNationality", "body", string(*m.ComkrNationality), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrNbrOfDependents(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrNbrOfDependents) { // not required
		return nil
	}

	if err := validate.MinLength("comkrNbrOfDependents", "body", string(*m.ComkrNbrOfDependents), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrNbrOfDependents", "body", string(*m.ComkrNbrOfDependents), 3); err != nil {
		return err
	}

	if err := validate.Pattern("comkrNbrOfDependents", "body", string(*m.ComkrNbrOfDependents), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrOwnRentResidFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrOwnRentResidFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrOwnRentResidFlag", "body", string(*m.ComkrOwnRentResidFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrOwnRentResidFlag", "body", string(*m.ComkrOwnRentResidFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrOwnRentResidFlag", "body", string(*m.ComkrOwnRentResidFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrPhoneFlag", "body", string(*m.ComkrPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrPhoneFlag", "body", string(*m.ComkrPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrPhoneFlag", "body", string(*m.ComkrPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrPortal(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrPortal) { // not required
		return nil
	}

	if err := validate.MinLength("comkrPortal", "body", string(*m.ComkrPortal), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrPortal", "body", string(*m.ComkrPortal), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrPosition) { // not required
		return nil
	}

	if err := validate.MinLength("comkrPosition", "body", string(*m.ComkrPosition), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrPosition", "body", string(*m.ComkrPosition), 4); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrPstlCd(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrPstlCd) { // not required
		return nil
	}

	if err := validate.MinLength("comkrPstlCd", "body", string(*m.ComkrPstlCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrPstlCd", "body", string(*m.ComkrPstlCd), 10); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrRelativeName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrRelativeName) { // not required
		return nil
	}

	if err := validate.MinLength("comkrRelativeName", "body", string(*m.ComkrRelativeName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrRelativeName", "body", string(*m.ComkrRelativeName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrRoadName(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrRoadName) { // not required
		return nil
	}

	if err := validate.MinLength("comkrRoadName", "body", string(*m.ComkrRoadName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrRoadName", "body", string(*m.ComkrRoadName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrSmsFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrSmsFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrSmsFlag", "body", string(*m.ComkrSmsFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrSmsFlag", "body", string(*m.ComkrSmsFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrSmsFlag", "body", string(*m.ComkrSmsFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrSsan(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrSsan) { // not required
		return nil
	}

	if err := validate.MinLength("comkrSsan", "body", string(*m.ComkrSsan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrSsan", "body", string(*m.ComkrSsan), 25); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrSsanFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrSsanFlag) { // not required
		return nil
	}

	if err := validate.MinLength("comkrSsanFlag", "body", string(*m.ComkrSsanFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrSsanFlag", "body", string(*m.ComkrSsanFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrSsanFlag", "body", string(*m.ComkrSsanFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrStairs(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrStairs) { // not required
		return nil
	}

	if err := validate.MinLength("comkrStairs", "body", string(*m.ComkrStairs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrStairs", "body", string(*m.ComkrStairs), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrState(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrState) { // not required
		return nil
	}

	if err := validate.MinLength("comkrState", "body", string(*m.ComkrState), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrState", "body", string(*m.ComkrState), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrStmtMsgIndic(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrStmtMsgIndic) { // not required
		return nil
	}

	if err := validate.MinLength("comkrStmtMsgIndic", "body", string(*m.ComkrStmtMsgIndic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrStmtMsgIndic", "body", string(*m.ComkrStmtMsgIndic), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrStmtMsgIndic", "body", string(*m.ComkrStmtMsgIndic), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrStmtNotifyInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrStmtNotifyInd) { // not required
		return nil
	}

	if err := validate.MinLength("comkrStmtNotifyInd", "body", string(*m.ComkrStmtNotifyInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrStmtNotifyInd", "body", string(*m.ComkrStmtNotifyInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("comkrStmtNotifyInd", "body", string(*m.ComkrStmtNotifyInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrSuffix) { // not required
		return nil
	}

	if err := validate.MinLength("comkrSuffix", "body", string(*m.ComkrSuffix), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrSuffix", "body", string(*m.ComkrSuffix), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrTitle) { // not required
		return nil
	}

	if err := validate.MinLength("comkrTitle", "body", string(*m.ComkrTitle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrTitle", "body", string(*m.ComkrTitle), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser1", "body", string(*m.ComkrUser1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser1", "body", string(*m.ComkrUser1), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser10(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser10) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser10", "body", string(*m.ComkrUser10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser10", "body", string(*m.ComkrUser10), 7); err != nil {
		return err
	}

	if err := validate.Pattern("comkrUser10", "body", string(*m.ComkrUser10), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser11(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser11) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser11", "body", string(*m.ComkrUser11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser11", "body", string(*m.ComkrUser11), 7); err != nil {
		return err
	}

	if err := validate.Pattern("comkrUser11", "body", string(*m.ComkrUser11), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser12(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser12) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser12", "body", string(*m.ComkrUser12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser12", "body", string(*m.ComkrUser12), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser13(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser13) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser13", "body", string(*m.ComkrUser13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser13", "body", string(*m.ComkrUser13), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser14(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser14) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser14", "body", string(*m.ComkrUser14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser14", "body", string(*m.ComkrUser14), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser15(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser15) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser15", "body", string(*m.ComkrUser15), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser15", "body", string(*m.ComkrUser15), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser2) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser2", "body", string(*m.ComkrUser2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser2", "body", string(*m.ComkrUser2), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser3) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser3", "body", string(*m.ComkrUser3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser3", "body", string(*m.ComkrUser3), 7); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser4) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser4", "body", string(*m.ComkrUser4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser4", "body", string(*m.ComkrUser4), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser5) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser5", "body", string(*m.ComkrUser5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser5", "body", string(*m.ComkrUser5), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser6) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser6", "body", string(*m.ComkrUser6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser6", "body", string(*m.ComkrUser6), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser7) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser7", "body", string(*m.ComkrUser7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser7", "body", string(*m.ComkrUser7), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser8) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser8", "body", string(*m.ComkrUser8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser8", "body", string(*m.ComkrUser8), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUser9) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUser9", "body", string(*m.ComkrUser9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUser9", "body", string(*m.ComkrUser9), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUserDemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUserDemo1) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUserDemo1", "body", string(*m.ComkrUserDemo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUserDemo1", "body", string(*m.ComkrUserDemo1), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUserDemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUserDemo2) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUserDemo2", "body", string(*m.ComkrUserDemo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUserDemo2", "body", string(*m.ComkrUserDemo2), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrUserDemo3(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrUserDemo3) { // not required
		return nil
	}

	if err := validate.MinLength("comkrUserDemo3", "body", string(*m.ComkrUserDemo3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrUserDemo3", "body", string(*m.ComkrUserDemo3), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrVacCntryCd(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrVacCntryCd) { // not required
		return nil
	}

	if err := validate.MinLength("comkrVacCntryCd", "body", string(*m.ComkrVacCntryCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrVacCntryCd", "body", string(*m.ComkrVacCntryCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateComkrVacPhoneNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.ComkrVacPhoneNbr) { // not required
		return nil
	}

	if err := validate.MinLength("comkrVacPhoneNbr", "body", string(*m.ComkrVacPhoneNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("comkrVacPhoneNbr", "body", string(*m.ComkrVacPhoneNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerAddRequest) validateCustBlkCde(formats strfmt.Registry) error {

	if swag.IsZero(m.CustBlkCde) { // not required
		return nil
	}

	if err := validate.MinLength("custBlkCde", "body", string(*m.CustBlkCde), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custBlkCde", "body", string(*m.CustBlkCde), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateCustCrlim(formats strfmt.Registry) error {

	if swag.IsZero(m.CustCrlim) { // not required
		return nil
	}

	if err := validate.MinLength("custCrlim", "body", string(*m.CustCrlim), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custCrlim", "body", string(*m.CustCrlim), 17); err != nil {
		return err
	}

	if err := validate.Pattern("custCrlim", "body", string(*m.CustCrlim), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateCustFormatInd(formats strfmt.Registry) error {

	if err := validate.Required("custFormatInd", "body", m.CustFormatInd); err != nil {
		return err
	}

	if err := validate.MinLength("custFormatInd", "body", string(*m.CustFormatInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custFormatInd", "body", string(*m.CustFormatInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateCustNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CustNbr) { // not required
		return nil
	}

	if err := validate.MinLength("custNbr", "body", string(*m.CustNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custNbr", "body", string(*m.CustNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateDualFlag(formats strfmt.Registry) error {

	if err := validate.Required("dualFlag", "body", m.DualFlag); err != nil {
		return err
	}

	if err := validate.MinLength("dualFlag", "body", string(*m.DualFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualFlag", "body", string(*m.DualFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateEmpStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EmpStatus) { // not required
		return nil
	}

	if err := validate.MinLength("empStatus", "body", string(*m.EmpStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("empStatus", "body", string(*m.EmpStatus), 2); err != nil {
		return err
	}

	if err := validate.Pattern("empStatus", "body", string(*m.EmpStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMemWrd(formats strfmt.Registry) error {

	if swag.IsZero(m.MemWrd) { // not required
		return nil
	}

	if err := validate.MinLength("memWrd", "body", string(*m.MemWrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memWrd", "body", string(*m.MemWrd), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMemWrdRem(formats strfmt.Registry) error {

	if swag.IsZero(m.MemWrdRem) { // not required
		return nil
	}

	if err := validate.MinLength("memWrdRem", "body", string(*m.MemWrdRem), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memWrdRem", "body", string(*m.MemWrdRem), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkr1099cForeignInd(formats strfmt.Registry) error {

	if swag.IsZero(m.Mkr1099cForeignInd) { // not required
		return nil
	}

	if err := validate.MinLength("mkr1099cForeignInd", "body", string(*m.Mkr1099cForeignInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkr1099cForeignInd", "body", string(*m.Mkr1099cForeignInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrAddr1) { // not required
		return nil
	}

	if err := validate.MinLength("mkrAddr1", "body", string(*m.MkrAddr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrAddr1", "body", string(*m.MkrAddr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrAddr4(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrAddr4) { // not required
		return nil
	}

	if err := validate.MinLength("mkrAddr4", "body", string(*m.MkrAddr4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrAddr4", "body", string(*m.MkrAddr4), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrBlock) { // not required
		return nil
	}

	if err := validate.MinLength("mkrBlock", "body", string(*m.MkrBlock), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrBlock", "body", string(*m.MkrBlock), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrCity(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrCity) { // not required
		return nil
	}

	if err := validate.MinLength("mkrCity", "body", string(*m.MkrCity), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrCity", "body", string(*m.MkrCity), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrCntryCd(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrCntryCd) { // not required
		return nil
	}

	if err := validate.MinLength("mkrCntryCd", "body", string(*m.MkrCntryCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrCntryCd", "body", string(*m.MkrCntryCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrContactInd(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrContactInd) { // not required
		return nil
	}

	if err := validate.MinLength("mkrContactInd", "body", string(*m.MkrContactInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrContactInd", "body", string(*m.MkrContactInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("mkrContactInd", "body", string(*m.MkrContactInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrCounty(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrCounty) { // not required
		return nil
	}

	if err := validate.MinLength("mkrCounty", "body", string(*m.MkrCounty), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrCounty", "body", string(*m.MkrCounty), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrCr12(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrCr12) { // not required
		return nil
	}

	if err := validate.MinLength("mkrCr12", "body", string(*m.MkrCr12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrCr12", "body", string(*m.MkrCr12), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrCr34(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrCr34) { // not required
		return nil
	}

	if err := validate.MinLength("mkrCr34", "body", string(*m.MkrCr34), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrCr34", "body", string(*m.MkrCr34), 2); err != nil {
		return err
	}

	if err := validate.Pattern("mkrCr34", "body", string(*m.MkrCr34), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrDlCntry(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrDlCntry) { // not required
		return nil
	}

	if err := validate.MinLength("mkrDlCntry", "body", string(*m.MkrDlCntry), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrDlCntry", "body", string(*m.MkrDlCntry), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrDlNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrDlNbr) { // not required
		return nil
	}

	if err := validate.MinLength("mkrDlNbr", "body", string(*m.MkrDlNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrDlNbr", "body", string(*m.MkrDlNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrDlState(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrDlState) { // not required
		return nil
	}

	if err := validate.MinLength("mkrDlState", "body", string(*m.MkrDlState), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrDlState", "body", string(*m.MkrDlState), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrDoor(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrDoor) { // not required
		return nil
	}

	if err := validate.MinLength("mkrDoor", "body", string(*m.MkrDoor), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrDoor", "body", string(*m.MkrDoor), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmail) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmail", "body", string(*m.MkrEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmail", "body", string(*m.MkrEmail), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmailFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmailFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmailFlag", "body", string(*m.MkrEmailFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmailFlag", "body", string(*m.MkrEmailFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrEmailFlag", "body", string(*m.MkrEmailFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmpPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmpPhone) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmpPhone", "body", string(*m.MkrEmpPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmpPhone", "body", string(*m.MkrEmpPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmpPhoneExtn(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmpPhoneExtn) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmpPhoneExtn", "body", string(*m.MkrEmpPhoneExtn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmpPhoneExtn", "body", string(*m.MkrEmpPhoneExtn), 6); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmployer(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmployer) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmployer", "body", string(*m.MkrEmployer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmployer", "body", string(*m.MkrEmployer), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmployerAddr1(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmployerAddr1) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmployerAddr1", "body", string(*m.MkrEmployerAddr1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmployerAddr1", "body", string(*m.MkrEmployerAddr1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrEmployerAddr2(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrEmployerAddr2) { // not required
		return nil
	}

	if err := validate.MinLength("mkrEmployerAddr2", "body", string(*m.MkrEmployerAddr2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrEmployerAddr2", "body", string(*m.MkrEmployerAddr2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrFaxPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrFaxPhone) { // not required
		return nil
	}

	if err := validate.MinLength("mkrFaxPhone", "body", string(*m.MkrFaxPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrFaxPhone", "body", string(*m.MkrFaxPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrFaxPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrFaxPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrFaxPhoneFlag", "body", string(*m.MkrFaxPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrFaxPhoneFlag", "body", string(*m.MkrFaxPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrFaxPhoneFlag", "body", string(*m.MkrFaxPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrFirstName) { // not required
		return nil
	}

	if err := validate.MinLength("mkrFirstName", "body", string(*m.MkrFirstName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrFirstName", "body", string(*m.MkrFirstName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrFloor(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrFloor) { // not required
		return nil
	}

	if err := validate.MinLength("mkrFloor", "body", string(*m.MkrFloor), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrFloor", "body", string(*m.MkrFloor), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrGenderCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrGenderCode) { // not required
		return nil
	}

	if err := validate.MinLength("mkrGenderCode", "body", string(*m.MkrGenderCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrGenderCode", "body", string(*m.MkrGenderCode), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrGenderCode", "body", string(*m.MkrGenderCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrHomePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrHomePhone) { // not required
		return nil
	}

	if err := validate.MinLength("mkrHomePhone", "body", string(*m.MkrHomePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrHomePhone", "body", string(*m.MkrHomePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrHomePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrHomePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrHomePhoneFlag", "body", string(*m.MkrHomePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrHomePhoneFlag", "body", string(*m.MkrHomePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrHomePhoneFlag", "body", string(*m.MkrHomePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrHouseName(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrHouseName) { // not required
		return nil
	}

	if err := validate.MinLength("mkrHouseName", "body", string(*m.MkrHouseName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrHouseName", "body", string(*m.MkrHouseName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrHouseNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrHouseNumber) { // not required
		return nil
	}

	if err := validate.MinLength("mkrHouseNumber", "body", string(*m.MkrHouseNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrHouseNumber", "body", string(*m.MkrHouseNumber), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrIDFraud(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrIDFraud) { // not required
		return nil
	}

	if err := validate.MinLength("mkrIdFraud", "body", string(*m.MkrIDFraud), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrIdFraud", "body", string(*m.MkrIDFraud), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrLanguageIndic(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrLanguageIndic) { // not required
		return nil
	}

	if err := validate.MinLength("mkrLanguageIndic", "body", string(*m.MkrLanguageIndic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrLanguageIndic", "body", string(*m.MkrLanguageIndic), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrLastName) { // not required
		return nil
	}

	if err := validate.MinLength("mkrLastName", "body", string(*m.MkrLastName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrLastName", "body", string(*m.MkrLastName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrMailingList(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrMailingList) { // not required
		return nil
	}

	if err := validate.MinLength("mkrMailingList", "body", string(*m.MkrMailingList), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrMailingList", "body", string(*m.MkrMailingList), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrMaritalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrMaritalStatus) { // not required
		return nil
	}

	if err := validate.MinLength("mkrMaritalStatus", "body", string(*m.MkrMaritalStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrMaritalStatus", "body", string(*m.MkrMaritalStatus), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrMaritalStatus", "body", string(*m.MkrMaritalStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrMiddleName) { // not required
		return nil
	}

	if err := validate.MinLength("mkrMiddleName", "body", string(*m.MkrMiddleName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrMiddleName", "body", string(*m.MkrMiddleName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrMobilePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrMobilePhone) { // not required
		return nil
	}

	if err := validate.MinLength("mkrMobilePhone", "body", string(*m.MkrMobilePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrMobilePhone", "body", string(*m.MkrMobilePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrMobilePhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrMobilePhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrMobilePhoneFlag", "body", string(*m.MkrMobilePhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrMobilePhoneFlag", "body", string(*m.MkrMobilePhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrMobilePhoneFlag", "body", string(*m.MkrMobilePhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNameLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNameLine1) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNameLine1", "body", string(*m.MkrNameLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNameLine1", "body", string(*m.MkrNameLine1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNameLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNameLine2) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNameLine2", "body", string(*m.MkrNameLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNameLine2", "body", string(*m.MkrNameLine2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNameLine3(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNameLine3) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNameLine3", "body", string(*m.MkrNameLine3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNameLine3", "body", string(*m.MkrNameLine3), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNameTypeInd1(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNameTypeInd1) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNameTypeInd1", "body", string(*m.MkrNameTypeInd1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNameTypeInd1", "body", string(*m.MkrNameTypeInd1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrNameTypeInd1", "body", string(*m.MkrNameTypeInd1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNameTypeInd2(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNameTypeInd2) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNameTypeInd2", "body", string(*m.MkrNameTypeInd2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNameTypeInd2", "body", string(*m.MkrNameTypeInd2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrNameTypeInd2", "body", string(*m.MkrNameTypeInd2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNameTypeInd3(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNameTypeInd3) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNameTypeInd3", "body", string(*m.MkrNameTypeInd3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNameTypeInd3", "body", string(*m.MkrNameTypeInd3), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrNameTypeInd3", "body", string(*m.MkrNameTypeInd3), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrNationality(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrNationality) { // not required
		return nil
	}

	if err := validate.MinLength("mkrNationality", "body", string(*m.MkrNationality), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrNationality", "body", string(*m.MkrNationality), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrOwnRentResidFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrOwnRentResidFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrOwnRentResidFlag", "body", string(*m.MkrOwnRentResidFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrOwnRentResidFlag", "body", string(*m.MkrOwnRentResidFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrOwnRentResidFlag", "body", string(*m.MkrOwnRentResidFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrPhoneFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrPhoneFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrPhoneFlag", "body", string(*m.MkrPhoneFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrPhoneFlag", "body", string(*m.MkrPhoneFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrPhoneFlag", "body", string(*m.MkrPhoneFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrPortal(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrPortal) { // not required
		return nil
	}

	if err := validate.MinLength("mkrPortal", "body", string(*m.MkrPortal), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrPortal", "body", string(*m.MkrPortal), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrPosition) { // not required
		return nil
	}

	if err := validate.MinLength("mkrPosition", "body", string(*m.MkrPosition), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrPosition", "body", string(*m.MkrPosition), 4); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrPstlCd(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrPstlCd) { // not required
		return nil
	}

	if err := validate.MinLength("mkrPstlCd", "body", string(*m.MkrPstlCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrPstlCd", "body", string(*m.MkrPstlCd), 10); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrRelativeName(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrRelativeName) { // not required
		return nil
	}

	if err := validate.MinLength("mkrRelativeName", "body", string(*m.MkrRelativeName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrRelativeName", "body", string(*m.MkrRelativeName), 40); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrRoadName(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrRoadName) { // not required
		return nil
	}

	if err := validate.MinLength("mkrRoadName", "body", string(*m.MkrRoadName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrRoadName", "body", string(*m.MkrRoadName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrSmsFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrSmsFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrSmsFlag", "body", string(*m.MkrSmsFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrSmsFlag", "body", string(*m.MkrSmsFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrSmsFlag", "body", string(*m.MkrSmsFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrSsan(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrSsan) { // not required
		return nil
	}

	if err := validate.MinLength("mkrSsan", "body", string(*m.MkrSsan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrSsan", "body", string(*m.MkrSsan), 25); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrSsanFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrSsanFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mkrSsanFlag", "body", string(*m.MkrSsanFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrSsanFlag", "body", string(*m.MkrSsanFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrSsanFlag", "body", string(*m.MkrSsanFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrStairs(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrStairs) { // not required
		return nil
	}

	if err := validate.MinLength("mkrStairs", "body", string(*m.MkrStairs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrStairs", "body", string(*m.MkrStairs), 5); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrState(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrState) { // not required
		return nil
	}

	if err := validate.MinLength("mkrState", "body", string(*m.MkrState), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrState", "body", string(*m.MkrState), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrStmtMsgIndic(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrStmtMsgIndic) { // not required
		return nil
	}

	if err := validate.MinLength("mkrStmtMsgIndic", "body", string(*m.MkrStmtMsgIndic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrStmtMsgIndic", "body", string(*m.MkrStmtMsgIndic), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrStmtMsgIndic", "body", string(*m.MkrStmtMsgIndic), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrStmtNotifyInd(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrStmtNotifyInd) { // not required
		return nil
	}

	if err := validate.MinLength("mkrStmtNotifyInd", "body", string(*m.MkrStmtNotifyInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrStmtNotifyInd", "body", string(*m.MkrStmtNotifyInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mkrStmtNotifyInd", "body", string(*m.MkrStmtNotifyInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrSuffix) { // not required
		return nil
	}

	if err := validate.MinLength("mkrSuffix", "body", string(*m.MkrSuffix), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrSuffix", "body", string(*m.MkrSuffix), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrTitle) { // not required
		return nil
	}

	if err := validate.MinLength("mkrTitle", "body", string(*m.MkrTitle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrTitle", "body", string(*m.MkrTitle), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser1) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser1", "body", string(*m.MkrUser1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser1", "body", string(*m.MkrUser1), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser10(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser10) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser10", "body", string(*m.MkrUser10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser10", "body", string(*m.MkrUser10), 7); err != nil {
		return err
	}

	if err := validate.Pattern("mkrUser10", "body", string(*m.MkrUser10), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser11(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser11) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser11", "body", string(*m.MkrUser11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser11", "body", string(*m.MkrUser11), 7); err != nil {
		return err
	}

	if err := validate.Pattern("mkrUser11", "body", string(*m.MkrUser11), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser12(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser12) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser12", "body", string(*m.MkrUser12), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser12", "body", string(*m.MkrUser12), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser13(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser13) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser13", "body", string(*m.MkrUser13), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser13", "body", string(*m.MkrUser13), 30); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser14(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser14) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser14", "body", string(*m.MkrUser14), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser14", "body", string(*m.MkrUser14), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser15(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser15) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser15", "body", string(*m.MkrUser15), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser15", "body", string(*m.MkrUser15), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser2) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser2", "body", string(*m.MkrUser2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser2", "body", string(*m.MkrUser2), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser3) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser3", "body", string(*m.MkrUser3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser3", "body", string(*m.MkrUser3), 7); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser4) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser4", "body", string(*m.MkrUser4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser4", "body", string(*m.MkrUser4), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser5) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser5", "body", string(*m.MkrUser5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser5", "body", string(*m.MkrUser5), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser6) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser6", "body", string(*m.MkrUser6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser6", "body", string(*m.MkrUser6), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser7) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser7", "body", string(*m.MkrUser7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser7", "body", string(*m.MkrUser7), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser8) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser8", "body", string(*m.MkrUser8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser8", "body", string(*m.MkrUser8), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUser9) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUser9", "body", string(*m.MkrUser9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUser9", "body", string(*m.MkrUser9), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUserDemo1(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUserDemo1) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUserDemo1", "body", string(*m.MkrUserDemo1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUserDemo1", "body", string(*m.MkrUserDemo1), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUserDemo2(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUserDemo2) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUserDemo2", "body", string(*m.MkrUserDemo2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUserDemo2", "body", string(*m.MkrUserDemo2), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrUserDemo3(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrUserDemo3) { // not required
		return nil
	}

	if err := validate.MinLength("mkrUserDemo3", "body", string(*m.MkrUserDemo3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrUserDemo3", "body", string(*m.MkrUserDemo3), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrVacCntryCd(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrVacCntryCd) { // not required
		return nil
	}

	if err := validate.MinLength("mkrVacCntryCd", "body", string(*m.MkrVacCntryCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrVacCntryCd", "body", string(*m.MkrVacCntryCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateMkrVacPhoneNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MkrVacPhoneNbr) { // not required
		return nil
	}

	if err := validate.MinLength("mkrVacPhoneNbr", "body", string(*m.MkrVacPhoneNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mkrVacPhoneNbr", "body", string(*m.MkrVacPhoneNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateNumberOfDependents(formats strfmt.Registry) error {

	if swag.IsZero(m.NumberOfDependents) { // not required
		return nil
	}

	if err := validate.MinLength("numberOfDependents", "body", string(*m.NumberOfDependents), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("numberOfDependents", "body", string(*m.NumberOfDependents), 3); err != nil {
		return err
	}

	if err := validate.Pattern("numberOfDependents", "body", string(*m.NumberOfDependents), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validatePrefAddrCoOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.PrefAddrCoOwner) { // not required
		return nil
	}

	if err := validate.MinLength("prefAddrCoOwner", "body", string(*m.PrefAddrCoOwner), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prefAddrCoOwner", "body", string(*m.PrefAddrCoOwner), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validatePrefAddrOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.PrefAddrOwner) { // not required
		return nil
	}

	if err := validate.MinLength("prefAddrOwner", "body", string(*m.PrefAddrOwner), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("prefAddrOwner", "body", string(*m.PrefAddrOwner), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateSicCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SicCode) { // not required
		return nil
	}

	if err := validate.MinLength("sicCode", "body", string(*m.SicCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sicCode", "body", string(*m.SicCode), 6); err != nil {
		return err
	}

	if err := validate.Pattern("sicCode", "body", string(*m.SicCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateSpclAddrInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SpclAddrInd) { // not required
		return nil
	}

	if err := validate.MinLength("spclAddrInd", "body", string(*m.SpclAddrInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spclAddrInd", "body", string(*m.SpclAddrInd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("spclAddrInd", "body", string(*m.SpclAddrInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinLength("status", "body", string(*m.Status), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", string(*m.Status), 1); err != nil {
		return err
	}

	if err := validate.Pattern("status", "body", string(*m.Status), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateUniqueID(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueID) { // not required
		return nil
	}

	if err := validate.MinLength("uniqueId", "body", string(*m.UniqueID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("uniqueId", "body", string(*m.UniqueID), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddRequest) validateVipStatus(formats strfmt.Registry) error {

	if err := validate.Required("vipStatus", "body", m.VipStatus); err != nil {
		return err
	}

	if err := validate.MinLength("vipStatus", "body", string(*m.VipStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vipStatus", "body", string(*m.VipStatus), 1); err != nil {
		return err
	}

	if err := validate.Pattern("vipStatus", "body", string(*m.VipStatus), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAddRequest) UnmarshalBinary(b []byte) error {
	var res CustomerAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

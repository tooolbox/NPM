// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardAntiReferralUpdateResponse card anti referral update response
//
// swagger:model CardAntiReferralUpdateResponse
type CardAntiReferralUpdateResponse struct {

	//  Max length = 3, Identification number of the logo.
	CardLogo string `json:"cardLogo,omitempty"`

	//  Max length = 19, Unique Card Number embossed on card plastic.
	CardNum string `json:"cardNum,omitempty"`

	//  Max length = 4, Card sequence number: record number assigned to the card (for card numbering schemes of 0, 1, and 3) and the sequence number assigned to the card (for card numbering schemes of 2). This number is part of the record key.
	CardSequence string `json:"cardSequence,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign Use Indicator from input.
	ForeignInd string `json:"foreignInd,omitempty"`

	// Format: YYYYMMDD. Refer Anti-Refer Expiry Date: Indicates the date on which the refer/anti-refer flag is automatically removed from the card. Format: CCYYMMDD. This is a mandatory field if value of Referral/Anti-referral flag is '1' or '2'.
	ReferAntiExpDate string `json:"referAntiExpDate,omitempty"`

	//  Max length = 1, Refer Anti-Refer Flag: Indicates whether the card is flagged to have all authorizations referred or not referred (anti-referred) to a fraud analyst for possible fraudulent activity.  Values are: '0' - No referral/anti-referral assigned  (default)  '1' - Referral  '2' - Anti-referral
	ReferAntiReferFlg string `json:"referAntiReferFlg,omitempty"`
}

// Validate validates this card anti referral update response
func (m *CardAntiReferralUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardAntiReferralUpdateResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardAntiReferralUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardAntiReferralUpdateResponse) UnmarshalBinary(b []byte) error {
	var res CardAntiReferralUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

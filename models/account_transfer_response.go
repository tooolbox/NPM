// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountTransferResponse account transfer response
//
// swagger:model AccountTransferResponse
type AccountTransferResponse struct {

	//  Max length = 19, Transfer To Account Number
	AcctNbr string `json:"acctNbr,omitempty"`

	//  Max length = 2, Billing Cycle
	BillingCycle string `json:"billingCycle,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	// Format: YYYYMMDD. Transfer Effective Date: Date on which the transfer becomes effective.
	EffDate string `json:"effDate,omitempty"`

	//  Max length = 3, Number of Transferred Cards: Number of cards added in the transfer process.
	XfrCardsNbr string `json:"xfrCardsNbr,omitempty"`

	// Array to return newly created card numbers in the transfer process. 100 occurences each of 30-bytes.
	XfrToCards []*XfrToCardsForAccountTransfer1 `json:"xfrToCards"`

	//  Max length = 19, Transfer To Customer Number. If the above field  is blank same account base segments customer number is passed in the response.
	XfrToCust string `json:"xfrToCust,omitempty"`
}

// Validate validates this account transfer response
func (m *AccountTransferResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrToCards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTransferResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountTransferResponse) validateXfrToCards(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrToCards) { // not required
		return nil
	}

	for i := 0; i < len(m.XfrToCards); i++ {
		if swag.IsZero(m.XfrToCards[i]) { // not required
			continue
		}

		if m.XfrToCards[i] != nil {
			if err := m.XfrToCards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("xfrToCards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountTransferResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountTransferResponse) UnmarshalBinary(b []byte) error {
	var res AccountTransferResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

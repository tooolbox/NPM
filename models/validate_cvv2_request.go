// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidateCvv2Request validate cvv2 request
//
// swagger:model ValidateCvv2Request
type ValidateCvv2Request struct {

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 4, Card Verification Number.
	// Max Length: 4
	// Min Length: 0
	CvvNbr *string `json:"cvvNbr,omitempty"`

	// Format: MMYY. Expiry date of the card.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ExpDate *string `json:"expDate,omitempty"`
}

// Validate validates this validate cvv2 request
func (m *ValidateCvv2Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvvNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidateCvv2Request) validateCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *ValidateCvv2Request) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *ValidateCvv2Request) validateCvvNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CvvNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cvvNbr", "body", string(*m.CvvNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cvvNbr", "body", string(*m.CvvNbr), 4); err != nil {
		return err
	}

	return nil
}

func (m *ValidateCvv2Request) validateExpDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpDate) { // not required
		return nil
	}

	if err := validate.MinLength("expDate", "body", string(*m.ExpDate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("expDate", "body", string(*m.ExpDate), 4); err != nil {
		return err
	}

	if err := validate.Pattern("expDate", "body", string(*m.ExpDate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidateCvv2Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidateCvv2Request) UnmarshalBinary(b []byte) error {
	var res ValidateCvv2Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

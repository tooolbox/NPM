// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardAddRequest card add request
//
// swagger:model CardAddRequest
type CardAddRequest struct {

	//  Max length = 40, Address Line 1: First line of the address to which the card and PIN mailer is sent.
	// Max Length: 40
	// Min Length: 0
	AddrLine1 *string `json:"addrLine1,omitempty"`

	//  Max length = 40, Address Line 2: Second line of the address to which the card and PIN mailer is sent.
	// Max Length: 40
	// Min Length: 0
	AddrLine2 *string `json:"addrLine2,omitempty"`

	//  Max length = 9, Branch number that identifies the card mailing location for all  reissued cards when the branch delivery option is used.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AdminBranch *string `json:"adminBranch,omitempty"`

	//  Max length = 3, ADMIN BRANCH DELIV OPTION
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AdminBranchDelivOption *string `json:"adminBranchDelivOption,omitempty"`

	//  Max length = 1, Indicates if alternate card carrier is being used for this request.
	// Max Length: 1
	// Min Length: 0
	AltCardCarrierVal *string `json:"altCardCarrierVal,omitempty"`

	//  Max length = 17, ATM CASH AMT
	// Pattern: ^(-)?[0-9]{1,17}$
	AtmCashAmt string `json:"atmCashAmt,omitempty"`

	//  Max length = 9, ATM CASH NBR
	// Pattern: ^(-)?[0-9]{1,9}$
	AtmCashNbr string `json:"atmCashNbr,omitempty"`

	//  Max length = 17, Maximum authorization amount in monetary units and subunits for ATM transactions allowed daily.
	// Pattern: ^(-)?[0-9]{1,17}$
	AuthAtmDailyAmt string `json:"authAtmDailyAmt,omitempty"`

	//  Max length = 3, AUTH CRITERIA TBL NBR
	// Max Length: 3
	// Min Length: 0
	AuthCriteriaTblNbr *string `json:"authCriteriaTblNbr,omitempty"`

	//  Max length = 17, Maximum amount in monetary units and subunits of QUASI CASH authorizations allowed for the frequency defined in the FREQ field
	// Pattern: ^(-)?[0-9]{1,17}$
	AuthQuasiCashAmt string `json:"authQuasiCashAmt,omitempty"`

	//  Max length = 9, Maximum number of QUASI CASH authorizations allowed for the frequency defined in the FREQ field
	// Pattern: ^(-)?[0-9]{1,9}$
	AuthQuasiCashNbr string `json:"authQuasiCashNbr,omitempty"`

	//  Max length = 3, AUTH SPENT LIMIT TBL
	// Max Length: 3
	// Min Length: 0
	AuthSpentLimitTbl *string `json:"authSpentLimitTbl,omitempty"`

	//  Max length = 17, Maximum authorization amount in monetary units and subunits for all transactions allowed for the frequency defined in the FREQ field. This amount is inclusive of all Retail, ATM, OTC and Quasi authorizations
	// Pattern: ^(-)?[0-9]{1,17}$
	AuthTotalTxnAmt string `json:"authTotalTxnAmt,omitempty"`

	//  Max length = 17, Maximum number of authorizations allowed for the frequency defined in the FREQ field. This number is inclusive of all Retail, ATM, OTC and Quasi authorizations
	// Pattern: ^(-)?[0-9]{1,17}$
	AuthTotalTxnNbr string `json:"authTotalTxnNbr,omitempty"`

	//  Max length = 17, Maximum authorization amount in monetary units and subunits for a single QUASI CASH transaction
	// Pattern: ^(-)?[0-9]{1,17}$
	AuthTxnLimitQuasi string `json:"authTxnLimitQuasi,omitempty"`

	//  Max length = 1, Block code assigned to the Embosser record. Card Block codes control specific processing options at card level. Valid values are A-Z, spaces.
	// Max Length: 1
	// Min Length: 0
	BlockCode *string `json:"blockCode,omitempty"`

	//  Max length = 9, Branch number that identifies the card mailing location for the issue of all new cards when the branch delivery option is used.
	// Max Length: 9
	// Min Length: 0
	BranchNumber *string `json:"branchNumber,omitempty"`

	//  Max length = 1, IndIcates the card issue action code.
	// Max Length: 1
	// Min Length: 0
	CardAction *string `json:"cardAction,omitempty"`

	//  Max length = 1, Card Action Reason: User-defined reason code associated with the current card issue action code. This field can identify specific notations to print in card and PIN mailers.
	// Max Length: 1
	// Min Length: 0
	CardActionReason *string `json:"cardActionReason,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr,omitempty"`

	//  Max length = 1, Cardholder Type: Code that indicates whether the cardholder is  primary or secondary.  The values are: 0 = Additional Cardholder 1 = Primary Cardholder
	// Max Length: 1
	// Min Length: 0
	CardholderType *string `json:"cardholderType,omitempty"`

	//  Max length = 30, City for the mailing address to be used for card and PIN mailer.
	// Max Length: 30
	// Min Length: 0
	City *string `json:"city,omitempty"`

	//  Max length = 5, CLIENT ID
	// Max Length: 5
	// Min Length: 0
	ClientID *string `json:"clientId,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Control for Contactless Opt in and out. Valid Values: <UL><LI><EM>0 - </EM> No, Cardholder has not opted-in (Default)</LI><LI><EM>1 - </EM> Yes, Cardholder has opted-in</LI><UL>
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ControlsOptInOut *string `json:"controlsOptInOut,omitempty"`

	// CRD SP1 ASSIGNED SPND LIMITS
	CrdSp1AssignedSpndLimits []*CrdSp1AssignedSpndLimitsForCardAdd1 `json:"crdSp1AssignedSpndLimits"`

	//  Max length = 1, Current card activation flag. Input field to indicate that the current card should be sent as activated or not. Valid Values: Y : Yes N : No
	// Max Length: 1
	// Min Length: 0
	CurrCrdActn *string `json:"currCrdActn,omitempty"`

	//  Max length = 19, Customer Number: Customer Name/Address record for the person to which the card is assigned.
	// Max Length: 19
	// Min Length: 0
	CustomerNbr *string `json:"customerNbr,omitempty"`

	// Format: YYYYMMDD. Next expiration date of the card.
	DateNextExpr string `json:"dateNextExpr,omitempty"`

	//  Max length = 1, Disability Indicator: used to identify customers (at account level) that have a requirement for correspondence to be sent in a particular format.  Values are:                          Blank = Not used (Default) A = Audio B = Braille C = CD-ROM H = Hard of hearing/Minicom L = Large print P = Plain text E = Elderly (old age) M = Mental difficulties O = Other.
	// Max Length: 1
	// Min Length: 0
	DisabltyInd *string `json:"disabltyInd,omitempty"`

	//  Max length = 1, Cardholder's preferred method of PIN delivery. Valid values are: <UL><LI> <EM>0 </EM> PIN is delivered by paper PIN mailer</LI> <LI><EM>1</EM> PIN is delivered by SMS</LI> <LI><EM>2</EM> Deliver PIN by PIN Now Web</LI> <LI><EM>9</EM> PIN is delivered by SMS Batch</LI></UL>
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmbPinCommPref *string `json:"embPinCommPref,omitempty"`

	//  Max length = 20, EMB PIN MEM WORD
	// Max Length: 20
	// Min Length: 0
	EmbPinMemWord *string `json:"embPinMemWord,omitempty"`

	//  Max length = 20, EMB PIN MOBILE NBR
	// Max Length: 20
	// Min Length: 0
	EmbPinMobileNbr *string `json:"embPinMobileNbr,omitempty"`

	//  Max length = 5, Cardholder's affiliation or affinity group. The values are user-defined.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmblemID *string `json:"emblemId,omitempty"`

	//  Max length = 26, Embossed Name 1: Name embossed on the first embossing line of the card.
	// Max Length: 26
	// Min Length: 0
	EmbossedName1 *string `json:"embossedName1,omitempty"`

	//  Max length = 26, Embossed Name 2: Name embossed on the second embossing line of the card.
	// Max Length: 26
	// Min Length: 0
	EmbossedName2 *string `json:"embossedName2,omitempty"`

	//  Max length = 1, EMBOSSED NAME TYPE 1
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmbossedNameType1 *string `json:"embossedNameType1,omitempty"`

	//  Max length = 1, EMBOSSED NAME TYPE 2
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmbossedNameType2 *string `json:"embossedNameType2,omitempty"`

	//  Max length = 2, EMBOSSING CARD
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmbossingCard *string `json:"embossingCard,omitempty"`

	//  Max length = 2, EMBOSSING MAIL
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmbossingMail *string `json:"embossingMail,omitempty"`

	//  Max length = 2, EMBOSSING REQ
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmbossingReq *string `json:"embossingReq,omitempty"`

	// Format: YYYYMMDD. EXPIRATION DATE
	ExpirationDate string `json:"expirationDate,omitempty"`

	//  Max length = 9, Branch number that identifies the card mailing location for the issue of all new cards when the branch delivery option is used.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FirstIssBranch *string `json:"firstIssBranch,omitempty"`

	//  Max length = 3, FIRST ISSUE DELIV OPTION
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FirstIssueDelivOption *string `json:"firstIssueDelivOption,omitempty"`

	// Format: YYYYMMDD. Indicates the date on which the FRAUD MONITOR FLAG or FRAUD MONITOR: EXP DATE was last updated.
	FraudDateLastMaint string `json:"fraudDateLastMaint,omitempty"`

	// Format: YYYYMMDD. Indicates the date on which the fraud monitor flag is automatically removed from the Embosser record.
	FraudMonitorExpDte string `json:"fraudMonitorExpDte,omitempty"`

	//  Max length = 2, Fraud Monitor Flag: Indicates whether the card is flagged for fraud monitoring. This user defined field will hold a flag which will be passed into Falcon during the authorization process. Clients will be able to set the flag to a value (edited against valid values set up on the ORG record-AZMO09) and build Falcon strategies which take account of the new flag.  Should be a valid value from the list at ORG level.  Valid values are 'FS', 'CM' and Spaces.
	// Max Length: 2
	// Min Length: 0
	FraudMonitorFlag *string `json:"fraudMonitorFlag,omitempty"`

	//  Max length = 1, Gender code. Values are: 0 - Gender not specified 1 - Male 2 - Female
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	GenderCode *string `json:"genderCode,omitempty"`

	//  Max length = 3, LANGUAGE IND
	// Max Length: 3
	// Min Length: 0
	LanguageInd *string `json:"languageInd,omitempty"`

	//  Max length = 3, LOGO
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Logo *string `json:"logo,omitempty"`

	//  Max length = 1, MAXIMUM FREQ
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MaximumFreq *string `json:"maximumFreq,omitempty"`

	//  Max length = 1, Code that indicates whether the embosser is for a mobile payment instrument (PI) and the current provisioning status for the PI. The values are: 0 = Not applicable; not a mobile PI. (Default) 1 = Mobile PI is ready to be provisioned 2 = Mobile PI provisioning is complete 3 = Previous provisioning of the mobile PI wasunsuccessful 4 = Previously provisioned mobile PI is removed and cannot be reprovisioned;
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MobPiRequestInd *string `json:"mobPiRequestInd,omitempty"`

	//  Max length = 20, Identification of a mobile device associated with a mobile.
	// Max Length: 20
	// Min Length: 0
	MobileDeviceID *string `json:"mobileDeviceId,omitempty"`

	//  Max length = 19, MULTI SCHEME CARD SET ID
	// Max Length: 19
	// Min Length: 0
	MultiSchemeCardSetID *string `json:"multiSchemeCardSetId,omitempty"`

	//  Max length = 40, NAME 1
	// Max Length: 40
	// Min Length: 0
	Name1 *string `json:"name1,omitempty"`

	//  Max length = 40, NAME 2
	// Max Length: 40
	// Min Length: 0
	Name2 *string `json:"name2,omitempty"`

	//  Max length = 2, NBR CARDS REQUESTED
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrCardsRequested *string `json:"nbrCardsRequested,omitempty"`

	//  Max length = 1, Offline Pin: Flag that indicates whether the card supports offline PIN processing. Corresponding field is determined by Card Type (MC, Visa, AMEX, etc.) Values are: 0 = No, offline PIN is not supported (Default) - Chip and Signature Card 1 = Yes, offline PIN is supported.- Chip and PIN Card
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OfflinePin *string `json:"offlinePin,omitempty"`

	//  Max length = 17, OTC CASH AMT
	// Pattern: ^(-)?[0-9]{1,17}$
	OtcCashAmt string `json:"otcCashAmt,omitempty"`

	//  Max length = 9, OTC CASH NBR
	// Pattern: ^(-)?[0-9]{1,9}$
	OtcCashNbr string `json:"otcCashNbr,omitempty"`

	//  Max length = 7, PIN OFFSET: Current PIN offset.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PinOffset *string `json:"pinOffset,omitempty"`

	//  Max length = 1, Pin Override: Indicates the override action to be taken at the embosser level.   0 - do not use (Default) 1 - do not generate PIN, do not send PIN mailer 2 - generate new PIN and send PIN mailer 3 - send PIN mailer with existing PIN For Magnetic Stripe Cards, the PIN OVERRIDE is set to 0 and the DELAY DAYS value is set to the values defaulted from the Logo record
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PinOvrd *string `json:"pinOvrd,omitempty"`

	//  Max length = 1, Pin Suppression Indicator. Flag indicating whether the PIN number and PIN mailer are produced. Values are:  0 - Yes, allow personal identification numbers (PINs)  1 - No, suppress PIN generation
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PinSuppression *string `json:"pinSuppression,omitempty"`

	//  Max length = 10, Plastic ID: Identifies the plastic stock used to create a card for this Embosser record.
	// Max Length: 10
	// Min Length: 0
	PlasticID *string `json:"plasticId,omitempty"`

	//  Max length = 3, POS Service Code: Code that indicates the type of point-of-sale service in effect for a card. The values for each digit depend on whether the card is a Visa, MasterCard, Europay, or private label card product.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PosServiceCode *string `json:"posServiceCode,omitempty"`

	//  Max length = 19, Identification number of the Account Base Segment record to which CMS posts transactions that are received for this Embosser record.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	PostToAcct *string `json:"postToAcct"`

	//  Max length = 10, POSTAL CODE
	// Max Length: 10
	// Min Length: 0
	PostalCode *string `json:"postalCode,omitempty"`

	//  Max length = 9, Program ID: Identification number of the smart card program. This value must identify a valid Chip Card Program Definition record for this organization. Following logic is in place: 1. If Program ID > zero, value is validated whether Smart Card Program Definition record is on file. 2. If CARD TECH = 0 (magnetic strip), PROGRAM ID cannot be greater than zero. 3. If Program not > zero, DEFAULT PROGRAM ID field on the logo record (ARML38) is used
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ProgramID *string `json:"programId,omitempty"`

	//  Max length = 4, RECORD NUMBER
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecordNumber *string `json:"recordNumber,omitempty"`

	//  Max length = 17, RETAIL PURCH ATM
	// Pattern: ^(-)?[0-9]{1,17}$
	RetailPurchAtm string `json:"retailPurchAtm,omitempty"`

	//  Max length = 9, RETAIL PURCH NBR
	// Pattern: ^(-)?[0-9]{1,9}$
	RetailPurchNbr string `json:"retailPurchNbr,omitempty"`

	//  Max length = 6, SALES EXEC1
	// Max Length: 6
	// Min Length: 0
	SalesExec1 *string `json:"salesExec1,omitempty"`

	//  Max length = 6, SALES EXEC2
	// Max Length: 6
	// Min Length: 0
	SalesExec2 *string `json:"salesExec2,omitempty"`

	//  Max length = 6, SALES EXEC3
	// Max Length: 6
	// Min Length: 0
	SalesExec3 *string `json:"salesExec3,omitempty"`

	//  Max length = 1, SDP Process Type: Flag that indicates if the request is for normal processing, same day processing or instant issuance. 0 = Normal processing 1 = Same day processing
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SdpProcessType *string `json:"sdpProcessType,omitempty"`

	//  Max length = 1, SECURE CODE ACTIV
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SecureCodeActiv *string `json:"secureCodeActiv,omitempty"`

	//  Max length = 15, User's sign-on name: User ID as defined in FirstVision.
	// Required: true
	// Max Length: 15
	// Min Length: 0
	SignonName *string `json:"signonName"`

	//  Max length = 17, SNGL CSH LMT
	// Pattern: ^(-)?[0-9]{1,17}$
	SnglCshLmt string `json:"snglCshLmt,omitempty"`

	// Format: YYYYMMDD. SNGL DTE LMT
	SnglDteLmt string `json:"snglDteLmt,omitempty"`

	//  Max length = 3, State or province of the mailing address for card and PIN mailer
	// Max Length: 3
	// Min Length: 0
	StPr *string `json:"stPr,omitempty"`

	//  Max length = 1, Supplementary Membership  fee Waiver: Flag that indicates whether to waive all supplemental card membership fees.  Values are:  0 - Do not waive supplemental card membership fees (Default)  1 - Waive supplemental card membership fees.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SuppFeeInd *string `json:"suppFeeInd,omitempty"`

	//  Max length = 17, TXN LIMIT ATM
	// Pattern: ^(-)?[0-9]{1,17}$
	TxnLimitAtm string `json:"txnLimitAtm,omitempty"`

	//  Max length = 17, TXN LIMIT OTC
	// Pattern: ^(-)?[0-9]{1,17}$
	TxnLimitOtc string `json:"txnLimitOtc,omitempty"`

	//  Max length = 17, TXN LIMIT RETAIL
	// Pattern: ^(-)?[0-9]{1,17}$
	TxnLimitRetail string `json:"txnLimitRetail,omitempty"`

	//  Max length = 20, User-defined code or description for this Embosser record.
	// Max Length: 20
	// Min Length: 0
	User1 *string `json:"user1,omitempty"`

	//  Max length = 20, USER 10
	// Max Length: 20
	// Min Length: 0
	User10 *string `json:"user10,omitempty"`

	//  Max length = 21, User 11: Card level user defined information.
	// Max Length: 21
	// Min Length: 0
	User11 *string `json:"user11,omitempty"`

	//  Max length = 20, User-defined code or description for this Embosser record.
	// Max Length: 20
	// Min Length: 0
	User2 *string `json:"user2,omitempty"`

	//  Max length = 19, User-defined code or description for this Embosser record.
	// Max Length: 19
	// Min Length: 0
	User3 *string `json:"user3,omitempty"`

	//  Max length = 4, User-defined code or description for this Embosser record.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	User4 *string `json:"user4,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record.
	// Max Length: 1
	// Min Length: 0
	User5 *string `json:"user5,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record.
	// Max Length: 1
	// Min Length: 0
	User6 *string `json:"user6,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record.
	// Max Length: 1
	// Min Length: 0
	User7 *string `json:"user7,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record.
	// Max Length: 1
	// Min Length: 0
	User8 *string `json:"user8,omitempty"`

	//  Max length = 19, USER 9
	// Max Length: 19
	// Min Length: 0
	User9 *string `json:"user9,omitempty"`

	// Format: YYYYMMDD. User-defined date for this Embosser record. Contains user specified date. Must be numeric and a valid date. Can be zeros.
	UserDate1 string `json:"userDate1,omitempty"`

	// Format: YYYYMMDD. User-defined date for this Embosser record. Contains user specified date. Must be numeric and a valid date. Can be zeros.
	UserDate2 string `json:"userDate2,omitempty"`

	//  Max length = 1, Visa Mini Indicator: Code that indicates the version of Visa Mini card. Values are: 0 = Standard card (Default) 1 = Visa Mini stand-alone card 2 = Visa Mini companion card
	// Max Length: 1
	// Min Length: 0
	VisaMiniInd *string `json:"visaMiniInd,omitempty"`

	//  Max length = 1, Flag that indicates whether the PLUS symbol is displayed on the card.  The values are: 0 = Standard Visa card with no PLUS symbol (Default) 1 = Visa card with PLUS symbol displayed.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VisaPlusInd *string `json:"visaPlusInd,omitempty"`

	//  Max length = 1, WAIVE SUPP MEM FLAG
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WaiveSuppMemFlag *string `json:"waiveSuppMemFlag,omitempty"`

	//  Max length = 7, WM PERCENT
	// Pattern: ^(-)?[0-9]{1,7}$
	WmPercent string `json:"wmPercent,omitempty"`
}

// Validate validates this card add request
func (m *CardAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddrLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddrLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminBranchDelivOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltCardCarrierVal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtmCashAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtmCashNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthAtmDailyAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthCriteriaTblNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthQuasiCashAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthQuasiCashNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthSpentLimitTbl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTotalTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTotalTxnNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTxnLimitQuasi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardActionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardholderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlsOptInOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdSp1AssignedSpndLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrCrdActn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabltyInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbPinCommPref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbPinMemWord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbPinMobileNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmblemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossedName1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossedName2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossedNameType1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossedNameType2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossingCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossingMail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbossingReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstIssBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstIssueDelivOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudMonitorFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenderCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobPiRequestInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiSchemeCardSetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrCardsRequested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflinePin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtcCashAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtcCashNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinOvrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinSuppression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlasticID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosServiceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostToAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetailPurchAtm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetailPurchNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesExec1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesExec2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesExec3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSdpProcessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureCodeActiv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignonName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnglCshLmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStPr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppFeeInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnLimitAtm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnLimitOtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnLimitRetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisaMiniInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisaPlusInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaiveSuppMemFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWmPercent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardAddRequest) validateAddrLine1(formats strfmt.Registry) error {

	if swag.IsZero(m.AddrLine1) { // not required
		return nil
	}

	if err := validate.MinLength("addrLine1", "body", string(*m.AddrLine1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addrLine1", "body", string(*m.AddrLine1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAddrLine2(formats strfmt.Registry) error {

	if swag.IsZero(m.AddrLine2) { // not required
		return nil
	}

	if err := validate.MinLength("addrLine2", "body", string(*m.AddrLine2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addrLine2", "body", string(*m.AddrLine2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAdminBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminBranch) { // not required
		return nil
	}

	if err := validate.MinLength("adminBranch", "body", string(*m.AdminBranch), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("adminBranch", "body", string(*m.AdminBranch), 9); err != nil {
		return err
	}

	if err := validate.Pattern("adminBranch", "body", string(*m.AdminBranch), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAdminBranchDelivOption(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminBranchDelivOption) { // not required
		return nil
	}

	if err := validate.MinLength("adminBranchDelivOption", "body", string(*m.AdminBranchDelivOption), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("adminBranchDelivOption", "body", string(*m.AdminBranchDelivOption), 3); err != nil {
		return err
	}

	if err := validate.Pattern("adminBranchDelivOption", "body", string(*m.AdminBranchDelivOption), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAltCardCarrierVal(formats strfmt.Registry) error {

	if swag.IsZero(m.AltCardCarrierVal) { // not required
		return nil
	}

	if err := validate.MinLength("altCardCarrierVal", "body", string(*m.AltCardCarrierVal), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCardCarrierVal", "body", string(*m.AltCardCarrierVal), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAtmCashAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AtmCashAmt) { // not required
		return nil
	}

	if err := validate.Pattern("atmCashAmt", "body", string(m.AtmCashAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAtmCashNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AtmCashNbr) { // not required
		return nil
	}

	if err := validate.Pattern("atmCashNbr", "body", string(m.AtmCashNbr), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthAtmDailyAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthAtmDailyAmt) { // not required
		return nil
	}

	if err := validate.Pattern("authAtmDailyAmt", "body", string(m.AuthAtmDailyAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthCriteriaTblNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthCriteriaTblNbr) { // not required
		return nil
	}

	if err := validate.MinLength("authCriteriaTblNbr", "body", string(*m.AuthCriteriaTblNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authCriteriaTblNbr", "body", string(*m.AuthCriteriaTblNbr), 3); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthQuasiCashAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthQuasiCashAmt) { // not required
		return nil
	}

	if err := validate.Pattern("authQuasiCashAmt", "body", string(m.AuthQuasiCashAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthQuasiCashNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthQuasiCashNbr) { // not required
		return nil
	}

	if err := validate.Pattern("authQuasiCashNbr", "body", string(m.AuthQuasiCashNbr), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthSpentLimitTbl(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthSpentLimitTbl) { // not required
		return nil
	}

	if err := validate.MinLength("authSpentLimitTbl", "body", string(*m.AuthSpentLimitTbl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authSpentLimitTbl", "body", string(*m.AuthSpentLimitTbl), 3); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthTotalTxnAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTotalTxnAmt) { // not required
		return nil
	}

	if err := validate.Pattern("authTotalTxnAmt", "body", string(m.AuthTotalTxnAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthTotalTxnNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTotalTxnNbr) { // not required
		return nil
	}

	if err := validate.Pattern("authTotalTxnNbr", "body", string(m.AuthTotalTxnNbr), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateAuthTxnLimitQuasi(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthTxnLimitQuasi) { // not required
		return nil
	}

	if err := validate.Pattern("authTxnLimitQuasi", "body", string(m.AuthTxnLimitQuasi), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateBlockCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockCode) { // not required
		return nil
	}

	if err := validate.MinLength("blockCode", "body", string(*m.BlockCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blockCode", "body", string(*m.BlockCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateBranchNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BranchNumber) { // not required
		return nil
	}

	if err := validate.MinLength("branchNumber", "body", string(*m.BranchNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("branchNumber", "body", string(*m.BranchNumber), 9); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCardAction(formats strfmt.Registry) error {

	if swag.IsZero(m.CardAction) { // not required
		return nil
	}

	if err := validate.MinLength("cardAction", "body", string(*m.CardAction), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardAction", "body", string(*m.CardAction), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCardActionReason(formats strfmt.Registry) error {

	if swag.IsZero(m.CardActionReason) { // not required
		return nil
	}

	if err := validate.MinLength("cardActionReason", "body", string(*m.CardActionReason), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardActionReason", "body", string(*m.CardActionReason), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCardholderType(formats strfmt.Registry) error {

	if swag.IsZero(m.CardholderType) { // not required
		return nil
	}

	if err := validate.MinLength("cardholderType", "body", string(*m.CardholderType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardholderType", "body", string(*m.CardholderType), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(*m.City), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(*m.City), 30); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.MinLength("clientId", "body", string(*m.ClientID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("clientId", "body", string(*m.ClientID), 5); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardAddRequest) validateControlsOptInOut(formats strfmt.Registry) error {

	if swag.IsZero(m.ControlsOptInOut) { // not required
		return nil
	}

	if err := validate.MinLength("controlsOptInOut", "body", string(*m.ControlsOptInOut), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("controlsOptInOut", "body", string(*m.ControlsOptInOut), 1); err != nil {
		return err
	}

	if err := validate.Pattern("controlsOptInOut", "body", string(*m.ControlsOptInOut), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCrdSp1AssignedSpndLimits(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdSp1AssignedSpndLimits) { // not required
		return nil
	}

	for i := 0; i < len(m.CrdSp1AssignedSpndLimits); i++ {
		if swag.IsZero(m.CrdSp1AssignedSpndLimits[i]) { // not required
			continue
		}

		if m.CrdSp1AssignedSpndLimits[i] != nil {
			if err := m.CrdSp1AssignedSpndLimits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("crdSp1AssignedSpndLimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CardAddRequest) validateCurrCrdActn(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrCrdActn) { // not required
		return nil
	}

	if err := validate.MinLength("currCrdActn", "body", string(*m.CurrCrdActn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currCrdActn", "body", string(*m.CurrCrdActn), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateCustomerNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerNbr) { // not required
		return nil
	}

	if err := validate.MinLength("customerNbr", "body", string(*m.CustomerNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("customerNbr", "body", string(*m.CustomerNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateDisabltyInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DisabltyInd) { // not required
		return nil
	}

	if err := validate.MinLength("disabltyInd", "body", string(*m.DisabltyInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("disabltyInd", "body", string(*m.DisabltyInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbPinCommPref(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbPinCommPref) { // not required
		return nil
	}

	if err := validate.MinLength("embPinCommPref", "body", string(*m.EmbPinCommPref), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embPinCommPref", "body", string(*m.EmbPinCommPref), 1); err != nil {
		return err
	}

	if err := validate.Pattern("embPinCommPref", "body", string(*m.EmbPinCommPref), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbPinMemWord(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbPinMemWord) { // not required
		return nil
	}

	if err := validate.MinLength("embPinMemWord", "body", string(*m.EmbPinMemWord), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embPinMemWord", "body", string(*m.EmbPinMemWord), 20); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbPinMobileNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbPinMobileNbr) { // not required
		return nil
	}

	if err := validate.MinLength("embPinMobileNbr", "body", string(*m.EmbPinMobileNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embPinMobileNbr", "body", string(*m.EmbPinMobileNbr), 20); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmblemID(formats strfmt.Registry) error {

	if swag.IsZero(m.EmblemID) { // not required
		return nil
	}

	if err := validate.MinLength("emblemId", "body", string(*m.EmblemID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emblemId", "body", string(*m.EmblemID), 5); err != nil {
		return err
	}

	if err := validate.Pattern("emblemId", "body", string(*m.EmblemID), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossedName1(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossedName1) { // not required
		return nil
	}

	if err := validate.MinLength("embossedName1", "body", string(*m.EmbossedName1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossedName1", "body", string(*m.EmbossedName1), 26); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossedName2(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossedName2) { // not required
		return nil
	}

	if err := validate.MinLength("embossedName2", "body", string(*m.EmbossedName2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossedName2", "body", string(*m.EmbossedName2), 26); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossedNameType1(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossedNameType1) { // not required
		return nil
	}

	if err := validate.MinLength("embossedNameType1", "body", string(*m.EmbossedNameType1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossedNameType1", "body", string(*m.EmbossedNameType1), 1); err != nil {
		return err
	}

	if err := validate.Pattern("embossedNameType1", "body", string(*m.EmbossedNameType1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossedNameType2(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossedNameType2) { // not required
		return nil
	}

	if err := validate.MinLength("embossedNameType2", "body", string(*m.EmbossedNameType2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossedNameType2", "body", string(*m.EmbossedNameType2), 1); err != nil {
		return err
	}

	if err := validate.Pattern("embossedNameType2", "body", string(*m.EmbossedNameType2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossingCard(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossingCard) { // not required
		return nil
	}

	if err := validate.MinLength("embossingCard", "body", string(*m.EmbossingCard), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossingCard", "body", string(*m.EmbossingCard), 2); err != nil {
		return err
	}

	if err := validate.Pattern("embossingCard", "body", string(*m.EmbossingCard), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossingMail(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossingMail) { // not required
		return nil
	}

	if err := validate.MinLength("embossingMail", "body", string(*m.EmbossingMail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossingMail", "body", string(*m.EmbossingMail), 2); err != nil {
		return err
	}

	if err := validate.Pattern("embossingMail", "body", string(*m.EmbossingMail), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateEmbossingReq(formats strfmt.Registry) error {

	if swag.IsZero(m.EmbossingReq) { // not required
		return nil
	}

	if err := validate.MinLength("embossingReq", "body", string(*m.EmbossingReq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("embossingReq", "body", string(*m.EmbossingReq), 2); err != nil {
		return err
	}

	if err := validate.Pattern("embossingReq", "body", string(*m.EmbossingReq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateFirstIssBranch(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstIssBranch) { // not required
		return nil
	}

	if err := validate.MinLength("firstIssBranch", "body", string(*m.FirstIssBranch), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("firstIssBranch", "body", string(*m.FirstIssBranch), 9); err != nil {
		return err
	}

	if err := validate.Pattern("firstIssBranch", "body", string(*m.FirstIssBranch), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateFirstIssueDelivOption(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstIssueDelivOption) { // not required
		return nil
	}

	if err := validate.MinLength("firstIssueDelivOption", "body", string(*m.FirstIssueDelivOption), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("firstIssueDelivOption", "body", string(*m.FirstIssueDelivOption), 3); err != nil {
		return err
	}

	if err := validate.Pattern("firstIssueDelivOption", "body", string(*m.FirstIssueDelivOption), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateFraudMonitorFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.FraudMonitorFlag) { // not required
		return nil
	}

	if err := validate.MinLength("fraudMonitorFlag", "body", string(*m.FraudMonitorFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fraudMonitorFlag", "body", string(*m.FraudMonitorFlag), 2); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateGenderCode(formats strfmt.Registry) error {

	if swag.IsZero(m.GenderCode) { // not required
		return nil
	}

	if err := validate.MinLength("genderCode", "body", string(*m.GenderCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("genderCode", "body", string(*m.GenderCode), 1); err != nil {
		return err
	}

	if err := validate.Pattern("genderCode", "body", string(*m.GenderCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateLanguageInd(formats strfmt.Registry) error {

	if swag.IsZero(m.LanguageInd) { // not required
		return nil
	}

	if err := validate.MinLength("languageInd", "body", string(*m.LanguageInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("languageInd", "body", string(*m.LanguageInd), 3); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateLogo(formats strfmt.Registry) error {

	if swag.IsZero(m.Logo) { // not required
		return nil
	}

	if err := validate.MinLength("logo", "body", string(*m.Logo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("logo", "body", string(*m.Logo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("logo", "body", string(*m.Logo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateMaximumFreq(formats strfmt.Registry) error {

	if swag.IsZero(m.MaximumFreq) { // not required
		return nil
	}

	if err := validate.MinLength("maximumFreq", "body", string(*m.MaximumFreq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("maximumFreq", "body", string(*m.MaximumFreq), 1); err != nil {
		return err
	}

	if err := validate.Pattern("maximumFreq", "body", string(*m.MaximumFreq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateMobPiRequestInd(formats strfmt.Registry) error {

	if swag.IsZero(m.MobPiRequestInd) { // not required
		return nil
	}

	if err := validate.MinLength("mobPiRequestInd", "body", string(*m.MobPiRequestInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobPiRequestInd", "body", string(*m.MobPiRequestInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mobPiRequestInd", "body", string(*m.MobPiRequestInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateMobileDeviceID(formats strfmt.Registry) error {

	if swag.IsZero(m.MobileDeviceID) { // not required
		return nil
	}

	if err := validate.MinLength("mobileDeviceId", "body", string(*m.MobileDeviceID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobileDeviceId", "body", string(*m.MobileDeviceID), 20); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateMultiSchemeCardSetID(formats strfmt.Registry) error {

	if swag.IsZero(m.MultiSchemeCardSetID) { // not required
		return nil
	}

	if err := validate.MinLength("multiSchemeCardSetId", "body", string(*m.MultiSchemeCardSetID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("multiSchemeCardSetId", "body", string(*m.MultiSchemeCardSetID), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateName1(formats strfmt.Registry) error {

	if swag.IsZero(m.Name1) { // not required
		return nil
	}

	if err := validate.MinLength("name1", "body", string(*m.Name1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name1", "body", string(*m.Name1), 40); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateName2(formats strfmt.Registry) error {

	if swag.IsZero(m.Name2) { // not required
		return nil
	}

	if err := validate.MinLength("name2", "body", string(*m.Name2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name2", "body", string(*m.Name2), 40); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateNbrCardsRequested(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrCardsRequested) { // not required
		return nil
	}

	if err := validate.MinLength("nbrCardsRequested", "body", string(*m.NbrCardsRequested), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrCardsRequested", "body", string(*m.NbrCardsRequested), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrCardsRequested", "body", string(*m.NbrCardsRequested), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateOfflinePin(formats strfmt.Registry) error {

	if swag.IsZero(m.OfflinePin) { // not required
		return nil
	}

	if err := validate.MinLength("offlinePin", "body", string(*m.OfflinePin), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("offlinePin", "body", string(*m.OfflinePin), 1); err != nil {
		return err
	}

	if err := validate.Pattern("offlinePin", "body", string(*m.OfflinePin), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateOtcCashAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.OtcCashAmt) { // not required
		return nil
	}

	if err := validate.Pattern("otcCashAmt", "body", string(m.OtcCashAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateOtcCashNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.OtcCashNbr) { // not required
		return nil
	}

	if err := validate.Pattern("otcCashNbr", "body", string(m.OtcCashNbr), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePinOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.PinOffset) { // not required
		return nil
	}

	if err := validate.MinLength("pinOffset", "body", string(*m.PinOffset), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pinOffset", "body", string(*m.PinOffset), 7); err != nil {
		return err
	}

	if err := validate.Pattern("pinOffset", "body", string(*m.PinOffset), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePinOvrd(formats strfmt.Registry) error {

	if swag.IsZero(m.PinOvrd) { // not required
		return nil
	}

	if err := validate.MinLength("pinOvrd", "body", string(*m.PinOvrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pinOvrd", "body", string(*m.PinOvrd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("pinOvrd", "body", string(*m.PinOvrd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePinSuppression(formats strfmt.Registry) error {

	if swag.IsZero(m.PinSuppression) { // not required
		return nil
	}

	if err := validate.MinLength("pinSuppression", "body", string(*m.PinSuppression), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pinSuppression", "body", string(*m.PinSuppression), 1); err != nil {
		return err
	}

	if err := validate.Pattern("pinSuppression", "body", string(*m.PinSuppression), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePlasticID(formats strfmt.Registry) error {

	if swag.IsZero(m.PlasticID) { // not required
		return nil
	}

	if err := validate.MinLength("plasticId", "body", string(*m.PlasticID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("plasticId", "body", string(*m.PlasticID), 10); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePosServiceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PosServiceCode) { // not required
		return nil
	}

	if err := validate.MinLength("posServiceCode", "body", string(*m.PosServiceCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("posServiceCode", "body", string(*m.PosServiceCode), 3); err != nil {
		return err
	}

	if err := validate.Pattern("posServiceCode", "body", string(*m.PosServiceCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePostToAcct(formats strfmt.Registry) error {

	if err := validate.Required("postToAcct", "body", m.PostToAcct); err != nil {
		return err
	}

	if err := validate.MinLength("postToAcct", "body", string(*m.PostToAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("postToAcct", "body", string(*m.PostToAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MinLength("postalCode", "body", string(*m.PostalCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("postalCode", "body", string(*m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateProgramID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgramID) { // not required
		return nil
	}

	if err := validate.MinLength("programId", "body", string(*m.ProgramID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("programId", "body", string(*m.ProgramID), 9); err != nil {
		return err
	}

	if err := validate.Pattern("programId", "body", string(*m.ProgramID), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateRecordNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordNumber) { // not required
		return nil
	}

	if err := validate.MinLength("recordNumber", "body", string(*m.RecordNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recordNumber", "body", string(*m.RecordNumber), 4); err != nil {
		return err
	}

	if err := validate.Pattern("recordNumber", "body", string(*m.RecordNumber), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateRetailPurchAtm(formats strfmt.Registry) error {

	if swag.IsZero(m.RetailPurchAtm) { // not required
		return nil
	}

	if err := validate.Pattern("retailPurchAtm", "body", string(m.RetailPurchAtm), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateRetailPurchNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RetailPurchNbr) { // not required
		return nil
	}

	if err := validate.Pattern("retailPurchNbr", "body", string(m.RetailPurchNbr), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSalesExec1(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesExec1) { // not required
		return nil
	}

	if err := validate.MinLength("salesExec1", "body", string(*m.SalesExec1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("salesExec1", "body", string(*m.SalesExec1), 6); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSalesExec2(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesExec2) { // not required
		return nil
	}

	if err := validate.MinLength("salesExec2", "body", string(*m.SalesExec2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("salesExec2", "body", string(*m.SalesExec2), 6); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSalesExec3(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesExec3) { // not required
		return nil
	}

	if err := validate.MinLength("salesExec3", "body", string(*m.SalesExec3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("salesExec3", "body", string(*m.SalesExec3), 6); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSdpProcessType(formats strfmt.Registry) error {

	if swag.IsZero(m.SdpProcessType) { // not required
		return nil
	}

	if err := validate.MinLength("sdpProcessType", "body", string(*m.SdpProcessType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sdpProcessType", "body", string(*m.SdpProcessType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("sdpProcessType", "body", string(*m.SdpProcessType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSecureCodeActiv(formats strfmt.Registry) error {

	if swag.IsZero(m.SecureCodeActiv) { // not required
		return nil
	}

	if err := validate.MinLength("secureCodeActiv", "body", string(*m.SecureCodeActiv), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("secureCodeActiv", "body", string(*m.SecureCodeActiv), 1); err != nil {
		return err
	}

	if err := validate.Pattern("secureCodeActiv", "body", string(*m.SecureCodeActiv), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSignonName(formats strfmt.Registry) error {

	if err := validate.Required("signonName", "body", m.SignonName); err != nil {
		return err
	}

	if err := validate.MinLength("signonName", "body", string(*m.SignonName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("signonName", "body", string(*m.SignonName), 15); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSnglCshLmt(formats strfmt.Registry) error {

	if swag.IsZero(m.SnglCshLmt) { // not required
		return nil
	}

	if err := validate.Pattern("snglCshLmt", "body", string(m.SnglCshLmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateStPr(formats strfmt.Registry) error {

	if swag.IsZero(m.StPr) { // not required
		return nil
	}

	if err := validate.MinLength("stPr", "body", string(*m.StPr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stPr", "body", string(*m.StPr), 3); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateSuppFeeInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SuppFeeInd) { // not required
		return nil
	}

	if err := validate.MinLength("suppFeeInd", "body", string(*m.SuppFeeInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("suppFeeInd", "body", string(*m.SuppFeeInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("suppFeeInd", "body", string(*m.SuppFeeInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateTxnLimitAtm(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnLimitAtm) { // not required
		return nil
	}

	if err := validate.Pattern("txnLimitAtm", "body", string(m.TxnLimitAtm), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateTxnLimitOtc(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnLimitOtc) { // not required
		return nil
	}

	if err := validate.Pattern("txnLimitOtc", "body", string(m.TxnLimitOtc), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateTxnLimitRetail(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnLimitRetail) { // not required
		return nil
	}

	if err := validate.Pattern("txnLimitRetail", "body", string(m.TxnLimitRetail), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.User1) { // not required
		return nil
	}

	if err := validate.MinLength("user1", "body", string(*m.User1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user1", "body", string(*m.User1), 20); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser10(formats strfmt.Registry) error {

	if swag.IsZero(m.User10) { // not required
		return nil
	}

	if err := validate.MinLength("user10", "body", string(*m.User10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user10", "body", string(*m.User10), 20); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser11(formats strfmt.Registry) error {

	if swag.IsZero(m.User11) { // not required
		return nil
	}

	if err := validate.MinLength("user11", "body", string(*m.User11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user11", "body", string(*m.User11), 21); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.User2) { // not required
		return nil
	}

	if err := validate.MinLength("user2", "body", string(*m.User2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user2", "body", string(*m.User2), 20); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser3(formats strfmt.Registry) error {

	if swag.IsZero(m.User3) { // not required
		return nil
	}

	if err := validate.MinLength("user3", "body", string(*m.User3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user3", "body", string(*m.User3), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser4(formats strfmt.Registry) error {

	if swag.IsZero(m.User4) { // not required
		return nil
	}

	if err := validate.MinLength("user4", "body", string(*m.User4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user4", "body", string(*m.User4), 4); err != nil {
		return err
	}

	if err := validate.Pattern("user4", "body", string(*m.User4), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser5(formats strfmt.Registry) error {

	if swag.IsZero(m.User5) { // not required
		return nil
	}

	if err := validate.MinLength("user5", "body", string(*m.User5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user5", "body", string(*m.User5), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser6(formats strfmt.Registry) error {

	if swag.IsZero(m.User6) { // not required
		return nil
	}

	if err := validate.MinLength("user6", "body", string(*m.User6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user6", "body", string(*m.User6), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser7(formats strfmt.Registry) error {

	if swag.IsZero(m.User7) { // not required
		return nil
	}

	if err := validate.MinLength("user7", "body", string(*m.User7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user7", "body", string(*m.User7), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser8(formats strfmt.Registry) error {

	if swag.IsZero(m.User8) { // not required
		return nil
	}

	if err := validate.MinLength("user8", "body", string(*m.User8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user8", "body", string(*m.User8), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateUser9(formats strfmt.Registry) error {

	if swag.IsZero(m.User9) { // not required
		return nil
	}

	if err := validate.MinLength("user9", "body", string(*m.User9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user9", "body", string(*m.User9), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateVisaMiniInd(formats strfmt.Registry) error {

	if swag.IsZero(m.VisaMiniInd) { // not required
		return nil
	}

	if err := validate.MinLength("visaMiniInd", "body", string(*m.VisaMiniInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("visaMiniInd", "body", string(*m.VisaMiniInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateVisaPlusInd(formats strfmt.Registry) error {

	if swag.IsZero(m.VisaPlusInd) { // not required
		return nil
	}

	if err := validate.MinLength("visaPlusInd", "body", string(*m.VisaPlusInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("visaPlusInd", "body", string(*m.VisaPlusInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("visaPlusInd", "body", string(*m.VisaPlusInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateWaiveSuppMemFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.WaiveSuppMemFlag) { // not required
		return nil
	}

	if err := validate.MinLength("waiveSuppMemFlag", "body", string(*m.WaiveSuppMemFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("waiveSuppMemFlag", "body", string(*m.WaiveSuppMemFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("waiveSuppMemFlag", "body", string(*m.WaiveSuppMemFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardAddRequest) validateWmPercent(formats strfmt.Registry) error {

	if swag.IsZero(m.WmPercent) { // not required
		return nil
	}

	if err := validate.Pattern("wmPercent", "body", string(m.WmPercent), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardAddRequest) UnmarshalBinary(b []byte) error {
	var res CardAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

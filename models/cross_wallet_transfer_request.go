// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CrossWalletTransferRequest cross wallet transfer request
//
// swagger:model CrossWalletTransferRequest
type CrossWalletTransferRequest struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account,omitempty"`

	//  Max length = 4, Action Code: Four character code that identifies  the action to be taken.
	// Max Length: 4
	// Min Length: 0
	Action *string `json:"action,omitempty"`

	//  Max length = 11, Case number: number assigned to action item.
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CaseNbr *string `json:"caseNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Cross wallet transfer confirm indicator. Initial value will be spaces.
	// Max Length: 1
	// Min Length: 0
	ConfirmInd *string `json:"confirmInd,omitempty"`

	//  Max length = 9, Reserved. Field not used in the service. Base conversion amount.
	// Pattern: ^(-)?[0-9]{1,9}$
	ConvAmtBse string `json:"convAmtBse,omitempty"`

	//  Max length = 9, Wallet conversion amount. Should be passed as numeric.
	// Pattern: ^(-)?[0-9]{1,9}$
	ConvWalt string `json:"convWalt,omitempty"`

	// Format: YYYYMMDD. Reserved. Field not used in the service.  Effective date of the cross wallet transfer transaction.
	EffDate string `json:"effDate,omitempty"`

	//  Max length = 9, Reserved. Field not used in the service. Conversion fee in base currency.
	// Pattern: ^(-)?[0-9]{1,9}$
	FeeAmtBase string `json:"feeAmtBase,omitempty"`

	//  Max length = 9, Fee amount in wallet currency. Should be passed as numeric.
	// Pattern: ^(-)?[0-9]{1,9}$
	FeeAmtWalt string `json:"feeAmtWalt,omitempty"`

	//  Max length = 60, Free text that is stored against  the account, this can be used to identify to operators why the Action code has been used.
	// Max Length: 60
	// Min Length: 0
	LineData1 *string `json:"lineData1,omitempty"`

	//  Max length = 60, Memo Line 2
	// Max Length: 60
	// Min Length: 0
	LineData2 *string `json:"lineData2,omitempty"`

	//  Max length = 60, Memo Line 3
	// Max Length: 60
	// Min Length: 0
	LineData3 *string `json:"lineData3,omitempty"`

	//  Max length = 60, Memo Line 4
	// Max Length: 60
	// Min Length: 0
	LineData4 *string `json:"lineData4,omitempty"`

	//  Max length = 60, Memo Line 5
	// Max Length: 60
	// Min Length: 0
	LineData5 *string `json:"lineData5,omitempty"`

	//  Max length = 9, Reserved. Field not used in the service.
	// Pattern: ^(-)?[0-9]{1,9}$
	NetConvAmtBse string `json:"netConvAmtBse,omitempty"`

	//  Max length = 9, Wallet net conversion amount. Should be passed as numeric.
	// Pattern: ^(-)?[0-9]{1,9}$
	NetConvWalt string `json:"netConvWalt,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Org *string `json:"org,omitempty"`

	//  Max length = 8, Reserved. Field not used in the service.
	// Max Length: 8
	// Min Length: 0
	Rate *string `json:"rate,omitempty"`

	//  Max length = 3, Account Service Management  representative number
	// Max Length: 3
	// Min Length: 0
	Rep *string `json:"rep,omitempty"`

	//  Max length = 1, Input source. Values are: 0 = ASM online 1 = CMS load/reload 2 = External source
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SourceFlag *string `json:"sourceFlag,omitempty"`

	//  Max length = 9, Store: Store number associated with the transaction.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Store *string `json:"store,omitempty"`

	//  Max length = 9, Transfer Amount: Fund transfer amount from one wallet to another.
	// Pattern: ^(-)?[0-9]{1,9}$
	XfrAmount string `json:"xfrAmount,omitempty"`

	//  Max length = 3, Transfer from Wallet: Transfer FROM Wallet associated with the cross wallet transfer.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	XfrFrmWalt *string `json:"xfrFrmWalt,omitempty"`

	//  Max length = 1, Transfer Indicator. Valid values are: F - Full balance transfer P - Partial Default value is 'F'
	// Max Length: 1
	// Min Length: 0
	XfrInd *string `json:"xfrInd,omitempty"`

	//  Max length = 3, Transfer to Wallet: Transfer TO Wallet associated with the cross wallet transfer.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	XfrToWalt *string `json:"xfrToWalt,omitempty"`
}

// Validate validates this cross wallet transfer request
func (m *CrossWalletTransferRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaseNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConvAmtBse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConvWalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmtBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmtWalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineData1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineData2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineData3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineData4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineData5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetConvAmtBse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetConvWalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrFrmWalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrToWalt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrossWalletTransferRequest) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := validate.MinLength("action", "body", string(*m.Action), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("action", "body", string(*m.Action), 4); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateCaseNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CaseNbr) { // not required
		return nil
	}

	if err := validate.MinLength("caseNbr", "body", string(*m.CaseNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("caseNbr", "body", string(*m.CaseNbr), 11); err != nil {
		return err
	}

	if err := validate.Pattern("caseNbr", "body", string(*m.CaseNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateConfirmInd(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfirmInd) { // not required
		return nil
	}

	if err := validate.MinLength("confirmInd", "body", string(*m.ConfirmInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("confirmInd", "body", string(*m.ConfirmInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateConvAmtBse(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvAmtBse) { // not required
		return nil
	}

	if err := validate.Pattern("convAmtBse", "body", string(m.ConvAmtBse), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateConvWalt(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvWalt) { // not required
		return nil
	}

	if err := validate.Pattern("convWalt", "body", string(m.ConvWalt), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateFeeAmtBase(formats strfmt.Registry) error {

	if swag.IsZero(m.FeeAmtBase) { // not required
		return nil
	}

	if err := validate.Pattern("feeAmtBase", "body", string(m.FeeAmtBase), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateFeeAmtWalt(formats strfmt.Registry) error {

	if swag.IsZero(m.FeeAmtWalt) { // not required
		return nil
	}

	if err := validate.Pattern("feeAmtWalt", "body", string(m.FeeAmtWalt), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateLineData1(formats strfmt.Registry) error {

	if swag.IsZero(m.LineData1) { // not required
		return nil
	}

	if err := validate.MinLength("lineData1", "body", string(*m.LineData1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lineData1", "body", string(*m.LineData1), 60); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateLineData2(formats strfmt.Registry) error {

	if swag.IsZero(m.LineData2) { // not required
		return nil
	}

	if err := validate.MinLength("lineData2", "body", string(*m.LineData2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lineData2", "body", string(*m.LineData2), 60); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateLineData3(formats strfmt.Registry) error {

	if swag.IsZero(m.LineData3) { // not required
		return nil
	}

	if err := validate.MinLength("lineData3", "body", string(*m.LineData3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lineData3", "body", string(*m.LineData3), 60); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateLineData4(formats strfmt.Registry) error {

	if swag.IsZero(m.LineData4) { // not required
		return nil
	}

	if err := validate.MinLength("lineData4", "body", string(*m.LineData4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lineData4", "body", string(*m.LineData4), 60); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateLineData5(formats strfmt.Registry) error {

	if swag.IsZero(m.LineData5) { // not required
		return nil
	}

	if err := validate.MinLength("lineData5", "body", string(*m.LineData5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lineData5", "body", string(*m.LineData5), 60); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateNetConvAmtBse(formats strfmt.Registry) error {

	if swag.IsZero(m.NetConvAmtBse) { // not required
		return nil
	}

	if err := validate.Pattern("netConvAmtBse", "body", string(m.NetConvAmtBse), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateNetConvWalt(formats strfmt.Registry) error {

	if swag.IsZero(m.NetConvWalt) { // not required
		return nil
	}

	if err := validate.Pattern("netConvWalt", "body", string(m.NetConvWalt), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if err := validate.MinLength("org", "body", string(*m.Org), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("org", "body", string(*m.Org), 3); err != nil {
		return err
	}

	if err := validate.Pattern("org", "body", string(*m.Org), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateRate(formats strfmt.Registry) error {

	if swag.IsZero(m.Rate) { // not required
		return nil
	}

	if err := validate.MinLength("rate", "body", string(*m.Rate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rate", "body", string(*m.Rate), 8); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateRep(formats strfmt.Registry) error {

	if swag.IsZero(m.Rep) { // not required
		return nil
	}

	if err := validate.MinLength("rep", "body", string(*m.Rep), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rep", "body", string(*m.Rep), 3); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateSourceFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceFlag) { // not required
		return nil
	}

	if err := validate.MinLength("sourceFlag", "body", string(*m.SourceFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceFlag", "body", string(*m.SourceFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("sourceFlag", "body", string(*m.SourceFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateStore(formats strfmt.Registry) error {

	if swag.IsZero(m.Store) { // not required
		return nil
	}

	if err := validate.MinLength("store", "body", string(*m.Store), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("store", "body", string(*m.Store), 9); err != nil {
		return err
	}

	if err := validate.Pattern("store", "body", string(*m.Store), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateXfrAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrAmount) { // not required
		return nil
	}

	if err := validate.Pattern("xfrAmount", "body", string(m.XfrAmount), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateXfrFrmWalt(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrFrmWalt) { // not required
		return nil
	}

	if err := validate.MinLength("xfrFrmWalt", "body", string(*m.XfrFrmWalt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrFrmWalt", "body", string(*m.XfrFrmWalt), 3); err != nil {
		return err
	}

	if err := validate.Pattern("xfrFrmWalt", "body", string(*m.XfrFrmWalt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateXfrInd(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrInd) { // not required
		return nil
	}

	if err := validate.MinLength("xfrInd", "body", string(*m.XfrInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrInd", "body", string(*m.XfrInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CrossWalletTransferRequest) validateXfrToWalt(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrToWalt) { // not required
		return nil
	}

	if err := validate.MinLength("xfrToWalt", "body", string(*m.XfrToWalt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrToWalt", "body", string(*m.XfrToWalt), 3); err != nil {
		return err
	}

	if err := validate.Pattern("xfrToWalt", "body", string(*m.XfrToWalt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrossWalletTransferRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrossWalletTransferRequest) UnmarshalBinary(b []byte) error {
	var res CrossWalletTransferRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

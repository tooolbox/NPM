// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountAddResponse account add response
//
// swagger:model AccountAddResponse
type AccountAddResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	Account string `json:"account,omitempty"`

	//  Max length = 10, Log file key value of a local account
	Aml1Key string `json:"aml1Key,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Foreign organization number. This field is populated only if the account is in dual processing environment.
	ForeignOrg string `json:"foreignOrg,omitempty"`

	//  Max length = 10, Log file key value of a foreign account
	FornAml1 string `json:"fornAml1,omitempty"`

	//  Max length = 16, Instant Credit Number: number that is used to authorize transactions during the instant credit period, which is between account boarding and card activation.
	InstCrCardNbr string `json:"instCrCardNbr,omitempty"`

	//  Max length = 1, Instant Credit Flag: Indicates credit status of the account during the instant credit period.  Values are: 0 - Instant Credit not active 1  - Expire Temp Credit Limit  on Card Activation 2 or 3  - Temp Credit Limit Expired 4 - Temp Credit Limit Expired before card activation 9 Instant Credit Number Lost or Stolen
	InstantCreditFlag string `json:"instantCreditFlag,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`
}

// Validate validates this account add response
func (m *AccountAddResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAddResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAddResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAddResponse) UnmarshalBinary(b []byte) error {
	var res AccountAddResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

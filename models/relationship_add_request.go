// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelationshipAddRequest relationship add request
//
// swagger:model RelationshipAddRequest
type RelationshipAddRequest struct {

	//  Max length = 3, Identification number of the Account Control Table used by subordinate accounts in the relationship
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AcctCtlTblOverrd *string `json:"acctCtlTblOverrd,omitempty"`

	//  Max length = 3, Identification number of the Commercial Card Authorization Criteria table assigned to the account
	// Max Length: 3
	// Min Length: 0
	AuthCriteriaTbl *string `json:"authCriteriaTbl,omitempty"`

	//  Max length = 3, Billing Currency: ISO currency code used to generate converted memo-billing information on statements for this account.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	BillingCurrency *string `json:"billingCurrency,omitempty"`

	//  Max length = 2, Billing cycle for the relationship
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	BillingCycle *string `json:"billingCycle"`

	//  Max length = 1, Billing level for the relationship The values are: 0 = Bill at relationship level 1 = Bill at subordinate level 2 = Combined billing either at relationship orsubordinate level
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	BillingLvl *string `json:"billingLvl,omitempty"`

	//  Max length = 1, Code that indicates whether you can modify the billing level at the subordinate account level or only at the relationship level The values are: 0 = Modification at the subordinate account level is allowed 1= Modification at the subordinate account level is not allowed
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	BillingLvlMdfy *string `json:"billingLvlMdfy,omitempty"`

	//  Max length = 1, Block code associated with the relationship
	// Max Length: 1
	// Min Length: 0
	BlockCode *string `json:"blockCode,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Flag that indicates whether this is a commercial card relationship The values are: 0 = Not a commercial card relationship (Default) 1 = Visa corporate card relationship 2 = Visa purchasing card relationship 3 = HCS commercial card relationship, which can include Visa corporate cards, Visa purchasing cards, and/or MasterCard purchasing cards
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CommrclFlag *string `json:"commrclFlag,omitempty"`

	//  Max length = 30, Name of the primary contact for the commercial relationship
	// Max Length: 30
	// Min Length: 0
	ContactName *string `json:"contactName,omitempty"`

	//  Max length = 20, Telephone number of the primary contact
	// Max Length: 20
	// Min Length: 0
	ContactPhone *string `json:"contactPhone,omitempty"`

	//  Max length = 19, Customer Group Code: Code that identifies all Relationship records, Account Base Segment records, and Embosser records belonging to the same customer or company.
	// Max Length: 19
	// Min Length: 0
	CorpCustNbr *string `json:"corpCustNbr,omitempty"`

	//  Max length = 10, Number used to associate relationships and hierarchies for corporate commercial card customers
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CorpIDNbr *string `json:"corpIdNbr,omitempty"`

	//  Max length = 16, Number used to associate cardholder-initiated transactions to the relationship
	// Max Length: 16
	// Min Length: 0
	CostCntrRpt *string `json:"costCntrRpt,omitempty"`

	//  Max length = 17, Code that indicates whether you can modify the credit limit at the subordinate account level The values are: 0 = Modification is allowed 1= Modification is not allowed
	// Pattern: ^(-)?[0-9]{1,17}$
	CrLimitDflt string `json:"crLimitDflt,omitempty"`

	//  Max length = 1, Identification number of the Customer Name/Address record for the corporation to which the purchasing card is assigned
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrLimitMdfy *string `json:"crLimitMdfy,omitempty"`

	//  Max length = 17, Credit limit for the relationship
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	CreditLimit *string `json:"creditLimit"`

	//  Max length = 6, Month and year the contract expires for the commercial card customer
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CurrExpDte *string `json:"currExpDte,omitempty"`

	//  Max length = 3, Code used to identify relationships by group code (applicable only for Commercial Cards)
	// Max Length: 3
	// Min Length: 0
	CustGrpCde *string `json:"custGrpCde,omitempty"`

	//  Max length = 19, relationshipt Customer Number. Identification number of the customer record associated with this relationship. This customer number must identify an existing customer record previously added into the system.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CustomerNbr *string `json:"customerNbr"`

	//  Max length = 1, Flag to indicate whether an extract is produced to interface with the D.Cal product. Valid values: 0 = D.Cal interface extract is not produced 1 = D.Cal interface extract is produced. If the field is left blank, default value 0 is populated.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DcalFlag *string `json:"dcalFlag,omitempty"`

	//  Max length = 1, Flag that defines how system authorizes cash transactions for a subordinate account in this relationship. Values: 0 = Authorize subordinate accounts at the account level only. (Default) 1 = Authorize subordinate accounts at the relationship level when sufficient funds are not available at the account level. 2 = Authorize subordinate accounts at both account level and relationship level.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DefCashAuth *string `json:"defCashAuth,omitempty"`

	//  Max length = 1, Flag that defines how system authorizes purchase transactions for a subordinate account in this relationship. Values: 0 = Authorize subordinate accounts at the account level only. (Default) 1 = Authorize subordinate accounts at the relationship level when sufficient funds are not available at the account level. 2 = Authorize subordinate accounts at both account level and relationship level.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DefPurAuth *string `json:"defPurAuth,omitempty"`

	//  Max length = 2, Code that defines when an extract file is produced for external reporting. Valid Values are: 00 = Not produced  01-31 = Day of month 41-47 = Day of week (where 41 is Monday, 42 is Tuesday, etc.) 70 = Billing cycle 99 = Daily. If the field is left blank, default value 0 is populated.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ExtRptFreq *string `json:"extRptFreq,omitempty"`

	//  Max length = 2, Month in which the fiscal year ends for the commercial card customer
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FiscalYrEnd *string `json:"fiscalYrEnd,omitempty"`

	//  Max length = 1, Address to use to send the card and PIN mailer when no address is entered on the Embosser record The values are: 0 = Address assigned to the Customer Name/Address record that is associated with the Account Base Segment record 1= Address assigned to the Customer Name/Address record that is associated with the Relationship record
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MailCode *string `json:"mailCode,omitempty"`

	//  Max length = 1, Flag that indicates the MasterCard products offered by the company for which external reporting is supported. Valid Values: 0 = Not used (Default) 1 = Corporate products only 2 = Purchasing products only 3 = Both products. If the field is left blank, default value 0 is populated.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	McFlag *string `json:"mcFlag,omitempty"`

	//  Max length = 1, Flag that indicates whether the relationship is updated with the current balance, cash balance, memo debits, memo credits, and outstanding cash authorizations from the subordinate accounts. The values are: 0 = Do not update the relationship from the subordinate accounts. Do not calculate a memo balance and memo cash balance for the relationship 1= Update the relationship from the subordinate accounts. Calculate a memo balance and a memo cash balance for the relationship
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MemoBalInd *string `json:"memoBalInd,omitempty"`

	//  Max length = 4, Code that identifies the credit transaction for the relationship payment
	// Required: true
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MemoPmtTransCr *string `json:"memoPmtTransCr"`

	//  Max length = 4, Code that identifies the debit transaction for the relationship payment
	// Required: true
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MemoPmtTransDb *string `json:"memoPmtTransDb"`

	//  Max length = 30, Name of the officer at the financial institution responsible for the commercial relationship
	// Max Length: 30
	// Min Length: 0
	OfficerName *string `json:"officerName,omitempty"`

	//  Max length = 26, Relationship name. Identification Name of the Relationship record
	// Max Length: 26
	// Min Length: 0
	RelName *string `json:"relName,omitempty"`

	//  Max length = 19, Relationship number. Identification number of the Relationship record
	// Max Length: 19
	// Min Length: 0
	RelNbr *string `json:"relNbr,omitempty"`

	//  Max length = 17, Reserve amount or percentage
	// Pattern: ^(-)?[0-9]{1,17}$
	ResvAmtPct string `json:"resvAmtPct,omitempty"`

	//  Max length = 1, Flag that indicates whether the value entered in RESV_AMT_PCT is an amount or a percentage The values are: 0 = Amount 1= Percentage
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ResvAmtPctFlag *string `json:"resvAmtPctFlag,omitempty"`

	//  Max length = 1, Flag to indicate whether an extract is produced for Smart Data Online (SDOL) external reporting. Valid values: 0 = SDOL extract is not produced  1 = SDOL extract is produced. If the field is left blank, default value 0 is populated.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SdolFlag *string `json:"sdolFlag,omitempty"`

	//  Max length = 10, User-defined source code assigned to the commercial card customer
	// Max Length: 10
	// Min Length: 0
	SourceCode *string `json:"sourceCode,omitempty"`

	//  Max length = 1, Detail level at which statements is produced.  The values are:  0 = Produce a relationship statement with summary subordinate account statements 1= Produce a relationship statement with detailed subordinate account statements
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtType *string `json:"stmtType,omitempty"`

	//  Max length = 17, User-defined amount 1 field for the relationship
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt1 string `json:"userAmt1,omitempty"`

	//  Max length = 17, User-defined amount 2 field for the relationship
	// Pattern: ^(-)?[0-9]{1,17}$
	UserAmt2 string `json:"userAmt2,omitempty"`

	// Format: YYYYMMDD. User-defined date 1 field for the relationship
	UserDt1 string `json:"userDt1,omitempty"`

	// Format: YYYYMMDD. User-defined date 2 field for the relationship
	UserDt2 string `json:"userDt2,omitempty"`

	//  Max length = 15, User-defined field for any information about the relationship
	// Max Length: 15
	// Min Length: 0
	UserFld5 *string `json:"userFld5,omitempty"`

	//  Max length = 15, User-defined field for any information about the relationship
	// Max Length: 15
	// Min Length: 0
	UserFld6 *string `json:"userFld6,omitempty"`

	//  Max length = 1, Flag to indicate whether an extract is produced for Visa Global Invoice Specification (VGIS) external reporting. Valid values: 0 = VGIS extract is not produced  1 = VGIS extract is produced. If the field is left blank, default value 0 is populated.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VgisFlag *string `json:"vgisFlag,omitempty"`

	//  Max length = 1, Flag to indicate whether an extract is produced for Visa Information Management (VIM) external reporting. Valid Values: 0 - VIM extract is not produced 1 - VIM extract is produced If the field is left blank, default value 0 is populated.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VimFlag *string `json:"vimFlag,omitempty"`

	//  Max length = 1, Flag that indicates the Visa products offered by the company for which external reporting is supported.Valid Values: 0 = Not used (Default) 1 = Corporate products only 2 = Purchasing products only 3 = Both products. If the field is left blank, default value 0 is populated.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VisaFlag *string `json:"visaFlag,omitempty"`

	//  Max length = 1, Code that indicates the level at which to charge late fees for the relationship The values are: 0 = Subordinate account level 1= Primary account level 2= Do not charge late fees
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WvLateChgLvl *string `json:"wvLateChgLvl,omitempty"`

	//  Max length = 1, Code that indicates whether you can modify the waive latecharges flag assigned to the subordinate accounts within therelationship The values are: 0 = Modification is allowed 1= Modification is not allowed
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WvLateChgMdfy *string `json:"wvLateChgMdfy,omitempty"`

	//  Max length = 1, Code that indicates the level at which to charge the annual fee for the relationship The values are: 0 = Subordinate account level 1= Primary account level 2= Do not charge annual fee
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WvMembLvl *string `json:"wvMembLvl,omitempty"`

	//  Max length = 1, Code that indicates whether you can modify the waive annual fee flag at the subordinate account level The values are: 0 = Modification is allowed 1= Modification is not allowed
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WvMembModify *string `json:"wvMembModify,omitempty"`

	//  Max length = 1, Code that indicates the level at which to charge NSF fees for the relationship The values are: 0 = Subordinate account level 1= Primary account level 2= Do not charge NSF fees
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WvNsfFeeLvl *string `json:"wvNsfFeeLvl,omitempty"`

	//  Max length = 1, Code that indicates whether you can modify the waive NSF fee flag at the subordinate account level The values are: 0 = Modification is allowed 1= Modification is not allowed
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	WvNsfFeeMdfy *string `json:"wvNsfFeeMdfy,omitempty"`
}

// Validate validates this relationship add request
func (m *RelationshipAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctCtlTblOverrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthCriteriaTbl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingLvl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingLvlMdfy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommrclFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorpCustNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorpIDNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostCntrRpt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrLimitDflt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrLimitMdfy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrExpDte(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustGrpCde(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcalFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefCashAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefPurAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtRptFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiscalYrEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMcFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoBalInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoPmtTransCr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoPmtTransDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvAmtPctFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSdolFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAmt2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFld5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFld6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVgisFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVimFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisaFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWvLateChgLvl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWvLateChgMdfy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWvMembLvl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWvMembModify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWvNsfFeeLvl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWvNsfFeeMdfy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelationshipAddRequest) validateAcctCtlTblOverrd(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctCtlTblOverrd) { // not required
		return nil
	}

	if err := validate.MinLength("acctCtlTblOverrd", "body", string(*m.AcctCtlTblOverrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctCtlTblOverrd", "body", string(*m.AcctCtlTblOverrd), 3); err != nil {
		return err
	}

	if err := validate.Pattern("acctCtlTblOverrd", "body", string(*m.AcctCtlTblOverrd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateAuthCriteriaTbl(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthCriteriaTbl) { // not required
		return nil
	}

	if err := validate.MinLength("authCriteriaTbl", "body", string(*m.AuthCriteriaTbl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authCriteriaTbl", "body", string(*m.AuthCriteriaTbl), 3); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateBillingCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingCurrency) { // not required
		return nil
	}

	if err := validate.MinLength("billingCurrency", "body", string(*m.BillingCurrency), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billingCurrency", "body", string(*m.BillingCurrency), 3); err != nil {
		return err
	}

	if err := validate.Pattern("billingCurrency", "body", string(*m.BillingCurrency), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateBillingCycle(formats strfmt.Registry) error {

	if err := validate.Required("billingCycle", "body", m.BillingCycle); err != nil {
		return err
	}

	if err := validate.MinLength("billingCycle", "body", string(*m.BillingCycle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billingCycle", "body", string(*m.BillingCycle), 2); err != nil {
		return err
	}

	if err := validate.Pattern("billingCycle", "body", string(*m.BillingCycle), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateBillingLvl(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingLvl) { // not required
		return nil
	}

	if err := validate.MinLength("billingLvl", "body", string(*m.BillingLvl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billingLvl", "body", string(*m.BillingLvl), 1); err != nil {
		return err
	}

	if err := validate.Pattern("billingLvl", "body", string(*m.BillingLvl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateBillingLvlMdfy(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingLvlMdfy) { // not required
		return nil
	}

	if err := validate.MinLength("billingLvlMdfy", "body", string(*m.BillingLvlMdfy), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billingLvlMdfy", "body", string(*m.BillingLvlMdfy), 1); err != nil {
		return err
	}

	if err := validate.Pattern("billingLvlMdfy", "body", string(*m.BillingLvlMdfy), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateBlockCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BlockCode) { // not required
		return nil
	}

	if err := validate.MinLength("blockCode", "body", string(*m.BlockCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blockCode", "body", string(*m.BlockCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipAddRequest) validateCommrclFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.CommrclFlag) { // not required
		return nil
	}

	if err := validate.MinLength("commrclFlag", "body", string(*m.CommrclFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("commrclFlag", "body", string(*m.CommrclFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("commrclFlag", "body", string(*m.CommrclFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateContactName(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactName) { // not required
		return nil
	}

	if err := validate.MinLength("contactName", "body", string(*m.ContactName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("contactName", "body", string(*m.ContactName), 30); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateContactPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactPhone) { // not required
		return nil
	}

	if err := validate.MinLength("contactPhone", "body", string(*m.ContactPhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("contactPhone", "body", string(*m.ContactPhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCorpCustNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CorpCustNbr) { // not required
		return nil
	}

	if err := validate.MinLength("corpCustNbr", "body", string(*m.CorpCustNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("corpCustNbr", "body", string(*m.CorpCustNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCorpIDNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CorpIDNbr) { // not required
		return nil
	}

	if err := validate.MinLength("corpIdNbr", "body", string(*m.CorpIDNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("corpIdNbr", "body", string(*m.CorpIDNbr), 10); err != nil {
		return err
	}

	if err := validate.Pattern("corpIdNbr", "body", string(*m.CorpIDNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCostCntrRpt(formats strfmt.Registry) error {

	if swag.IsZero(m.CostCntrRpt) { // not required
		return nil
	}

	if err := validate.MinLength("costCntrRpt", "body", string(*m.CostCntrRpt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("costCntrRpt", "body", string(*m.CostCntrRpt), 16); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCrLimitDflt(formats strfmt.Registry) error {

	if swag.IsZero(m.CrLimitDflt) { // not required
		return nil
	}

	if err := validate.Pattern("crLimitDflt", "body", string(m.CrLimitDflt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCrLimitMdfy(formats strfmt.Registry) error {

	if swag.IsZero(m.CrLimitMdfy) { // not required
		return nil
	}

	if err := validate.MinLength("crLimitMdfy", "body", string(*m.CrLimitMdfy), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crLimitMdfy", "body", string(*m.CrLimitMdfy), 1); err != nil {
		return err
	}

	if err := validate.Pattern("crLimitMdfy", "body", string(*m.CrLimitMdfy), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCreditLimit(formats strfmt.Registry) error {

	if err := validate.Required("creditLimit", "body", m.CreditLimit); err != nil {
		return err
	}

	if err := validate.Pattern("creditLimit", "body", string(*m.CreditLimit), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCurrExpDte(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrExpDte) { // not required
		return nil
	}

	if err := validate.MinLength("currExpDte", "body", string(*m.CurrExpDte), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currExpDte", "body", string(*m.CurrExpDte), 6); err != nil {
		return err
	}

	if err := validate.Pattern("currExpDte", "body", string(*m.CurrExpDte), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCustGrpCde(formats strfmt.Registry) error {

	if swag.IsZero(m.CustGrpCde) { // not required
		return nil
	}

	if err := validate.MinLength("custGrpCde", "body", string(*m.CustGrpCde), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custGrpCde", "body", string(*m.CustGrpCde), 3); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateCustomerNbr(formats strfmt.Registry) error {

	if err := validate.Required("customerNbr", "body", m.CustomerNbr); err != nil {
		return err
	}

	if err := validate.MinLength("customerNbr", "body", string(*m.CustomerNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("customerNbr", "body", string(*m.CustomerNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateDcalFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.DcalFlag) { // not required
		return nil
	}

	if err := validate.MinLength("dcalFlag", "body", string(*m.DcalFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dcalFlag", "body", string(*m.DcalFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("dcalFlag", "body", string(*m.DcalFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateDefCashAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.DefCashAuth) { // not required
		return nil
	}

	if err := validate.MinLength("defCashAuth", "body", string(*m.DefCashAuth), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("defCashAuth", "body", string(*m.DefCashAuth), 1); err != nil {
		return err
	}

	if err := validate.Pattern("defCashAuth", "body", string(*m.DefCashAuth), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateDefPurAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.DefPurAuth) { // not required
		return nil
	}

	if err := validate.MinLength("defPurAuth", "body", string(*m.DefPurAuth), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("defPurAuth", "body", string(*m.DefPurAuth), 1); err != nil {
		return err
	}

	if err := validate.Pattern("defPurAuth", "body", string(*m.DefPurAuth), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateExtRptFreq(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtRptFreq) { // not required
		return nil
	}

	if err := validate.MinLength("extRptFreq", "body", string(*m.ExtRptFreq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("extRptFreq", "body", string(*m.ExtRptFreq), 2); err != nil {
		return err
	}

	if err := validate.Pattern("extRptFreq", "body", string(*m.ExtRptFreq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateFiscalYrEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.FiscalYrEnd) { // not required
		return nil
	}

	if err := validate.MinLength("fiscalYrEnd", "body", string(*m.FiscalYrEnd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fiscalYrEnd", "body", string(*m.FiscalYrEnd), 2); err != nil {
		return err
	}

	if err := validate.Pattern("fiscalYrEnd", "body", string(*m.FiscalYrEnd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateMailCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MailCode) { // not required
		return nil
	}

	if err := validate.MinLength("mailCode", "body", string(*m.MailCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mailCode", "body", string(*m.MailCode), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mailCode", "body", string(*m.MailCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateMcFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.McFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mcFlag", "body", string(*m.McFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mcFlag", "body", string(*m.McFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mcFlag", "body", string(*m.McFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateMemoBalInd(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoBalInd) { // not required
		return nil
	}

	if err := validate.MinLength("memoBalInd", "body", string(*m.MemoBalInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoBalInd", "body", string(*m.MemoBalInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("memoBalInd", "body", string(*m.MemoBalInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateMemoPmtTransCr(formats strfmt.Registry) error {

	if err := validate.Required("memoPmtTransCr", "body", m.MemoPmtTransCr); err != nil {
		return err
	}

	if err := validate.MinLength("memoPmtTransCr", "body", string(*m.MemoPmtTransCr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoPmtTransCr", "body", string(*m.MemoPmtTransCr), 4); err != nil {
		return err
	}

	if err := validate.Pattern("memoPmtTransCr", "body", string(*m.MemoPmtTransCr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateMemoPmtTransDb(formats strfmt.Registry) error {

	if err := validate.Required("memoPmtTransDb", "body", m.MemoPmtTransDb); err != nil {
		return err
	}

	if err := validate.MinLength("memoPmtTransDb", "body", string(*m.MemoPmtTransDb), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoPmtTransDb", "body", string(*m.MemoPmtTransDb), 4); err != nil {
		return err
	}

	if err := validate.Pattern("memoPmtTransDb", "body", string(*m.MemoPmtTransDb), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateOfficerName(formats strfmt.Registry) error {

	if swag.IsZero(m.OfficerName) { // not required
		return nil
	}

	if err := validate.MinLength("officerName", "body", string(*m.OfficerName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("officerName", "body", string(*m.OfficerName), 30); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateRelName(formats strfmt.Registry) error {

	if swag.IsZero(m.RelName) { // not required
		return nil
	}

	if err := validate.MinLength("relName", "body", string(*m.RelName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("relName", "body", string(*m.RelName), 26); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateRelNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RelNbr) { // not required
		return nil
	}

	if err := validate.MinLength("relNbr", "body", string(*m.RelNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("relNbr", "body", string(*m.RelNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateResvAmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmtPct) { // not required
		return nil
	}

	if err := validate.Pattern("resvAmtPct", "body", string(m.ResvAmtPct), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateResvAmtPctFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvAmtPctFlag) { // not required
		return nil
	}

	if err := validate.MinLength("resvAmtPctFlag", "body", string(*m.ResvAmtPctFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvAmtPctFlag", "body", string(*m.ResvAmtPctFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("resvAmtPctFlag", "body", string(*m.ResvAmtPctFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateSdolFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.SdolFlag) { // not required
		return nil
	}

	if err := validate.MinLength("sdolFlag", "body", string(*m.SdolFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sdolFlag", "body", string(*m.SdolFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("sdolFlag", "body", string(*m.SdolFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateSourceCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceCode) { // not required
		return nil
	}

	if err := validate.MinLength("sourceCode", "body", string(*m.SourceCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceCode", "body", string(*m.SourceCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateStmtType(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtType) { // not required
		return nil
	}

	if err := validate.MinLength("stmtType", "body", string(*m.StmtType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtType", "body", string(*m.StmtType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtType", "body", string(*m.StmtType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateUserAmt1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt1) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt1", "body", string(m.UserAmt1), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateUserAmt2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserAmt2) { // not required
		return nil
	}

	if err := validate.Pattern("userAmt2", "body", string(m.UserAmt2), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateUserFld5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserFld5) { // not required
		return nil
	}

	if err := validate.MinLength("userFld5", "body", string(*m.UserFld5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userFld5", "body", string(*m.UserFld5), 15); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateUserFld6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserFld6) { // not required
		return nil
	}

	if err := validate.MinLength("userFld6", "body", string(*m.UserFld6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userFld6", "body", string(*m.UserFld6), 15); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateVgisFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.VgisFlag) { // not required
		return nil
	}

	if err := validate.MinLength("vgisFlag", "body", string(*m.VgisFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vgisFlag", "body", string(*m.VgisFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("vgisFlag", "body", string(*m.VgisFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateVimFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.VimFlag) { // not required
		return nil
	}

	if err := validate.MinLength("vimFlag", "body", string(*m.VimFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("vimFlag", "body", string(*m.VimFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("vimFlag", "body", string(*m.VimFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateVisaFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.VisaFlag) { // not required
		return nil
	}

	if err := validate.MinLength("visaFlag", "body", string(*m.VisaFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("visaFlag", "body", string(*m.VisaFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("visaFlag", "body", string(*m.VisaFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateWvLateChgLvl(formats strfmt.Registry) error {

	if swag.IsZero(m.WvLateChgLvl) { // not required
		return nil
	}

	if err := validate.MinLength("wvLateChgLvl", "body", string(*m.WvLateChgLvl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wvLateChgLvl", "body", string(*m.WvLateChgLvl), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wvLateChgLvl", "body", string(*m.WvLateChgLvl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateWvLateChgMdfy(formats strfmt.Registry) error {

	if swag.IsZero(m.WvLateChgMdfy) { // not required
		return nil
	}

	if err := validate.MinLength("wvLateChgMdfy", "body", string(*m.WvLateChgMdfy), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wvLateChgMdfy", "body", string(*m.WvLateChgMdfy), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wvLateChgMdfy", "body", string(*m.WvLateChgMdfy), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateWvMembLvl(formats strfmt.Registry) error {

	if swag.IsZero(m.WvMembLvl) { // not required
		return nil
	}

	if err := validate.MinLength("wvMembLvl", "body", string(*m.WvMembLvl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wvMembLvl", "body", string(*m.WvMembLvl), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wvMembLvl", "body", string(*m.WvMembLvl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateWvMembModify(formats strfmt.Registry) error {

	if swag.IsZero(m.WvMembModify) { // not required
		return nil
	}

	if err := validate.MinLength("wvMembModify", "body", string(*m.WvMembModify), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wvMembModify", "body", string(*m.WvMembModify), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wvMembModify", "body", string(*m.WvMembModify), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateWvNsfFeeLvl(formats strfmt.Registry) error {

	if swag.IsZero(m.WvNsfFeeLvl) { // not required
		return nil
	}

	if err := validate.MinLength("wvNsfFeeLvl", "body", string(*m.WvNsfFeeLvl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wvNsfFeeLvl", "body", string(*m.WvNsfFeeLvl), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wvNsfFeeLvl", "body", string(*m.WvNsfFeeLvl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipAddRequest) validateWvNsfFeeMdfy(formats strfmt.Registry) error {

	if swag.IsZero(m.WvNsfFeeMdfy) { // not required
		return nil
	}

	if err := validate.MinLength("wvNsfFeeMdfy", "body", string(*m.WvNsfFeeMdfy), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("wvNsfFeeMdfy", "body", string(*m.WvNsfFeeMdfy), 1); err != nil {
		return err
	}

	if err := validate.Pattern("wvNsfFeeMdfy", "body", string(*m.WvNsfFeeMdfy), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelationshipAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelationshipAddRequest) UnmarshalBinary(b []byte) error {
	var res RelationshipAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

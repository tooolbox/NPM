// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MarketingPreferencesUpdateResponse marketing preferences update response
//
// swagger:model MarketingPreferencesUpdateResponse
type MarketingPreferencesUpdateResponse struct {

	//  Max length = 10, AML1 Key. As part of this service request, a maintenance will be performed on the ZMMW record and this field will contain the log file key of the related maintenance.
	Aml1Key string `json:"aml1Key,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrencyCde string `json:"currencyCde,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyNod string `json:"currencyNod,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	CustNbr string `json:"custNbr,omitempty"`

	//  Max length = 1, Dual Account Indicator: Value received from Input.  Values are: L = Local account F = Foreign account
	DualInd string `json:"dualInd,omitempty"`
}

// Validate validates this marketing preferences update response
func (m *MarketingPreferencesUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketingPreferencesUpdateResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketingPreferencesUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketingPreferencesUpdateResponse) UnmarshalBinary(b []byte) error {
	var res MarketingPreferencesUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProcessPaymentResponse process payment response
//
// swagger:model processPaymentResponse
type ProcessPaymentResponse struct {

	// The payment amount. This figure includes a decimal point (numeric), e.g. 120.99.
	Amount string `json:"amount,omitempty"`

	// Payment authorisation code.
	AuthCode string `json:"authCode,omitempty"`

	// The last 4 digits of the card used for the payment.
	CardNumberLastFour string `json:"cardNumberLastFour,omitempty"`

	// This URL will to be passed back to the front-end if 3d Secure authentication is required. After authentication the ProcessPayment message is called for a second time to validate the authentication and to proceeed to authorisation.
	PaEnrollAcsURL string `json:"paEnrollAcsUrl,omitempty"`

	// This indicates the Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages.
	PaEnrollAuthenticationTransactionID string `json:"paEnrollAuthenticationTransactionId,omitempty"`

	// Payment authentication request. If request needs to validate due to 3D Secure this field will included by the front-end website in the post to the URL in the paEnrollACSURL.
	PaEnrollPareq string `json:"paEnrollPareq,omitempty"`

	// Unique payment transaction identifier
	ReturnCode string `json:"returnCode,omitempty"`

	// This indicates the result of storing a payment card if this was requested in the ProcessPayment message.
	StoreCardResult string `json:"storeCardResult,omitempty"`

	// Populated with True or False to indicate whether 3D secure is required.
	ThreeDSecureRequired string `json:"threeDSecureRequired,omitempty"`
}

// Validate validates this process payment response
func (m *ProcessPaymentResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProcessPaymentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessPaymentResponse) UnmarshalBinary(b []byte) error {
	var res ProcessPaymentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

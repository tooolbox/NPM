// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OfferEnrolmentInquiryResponse offer enrolment inquiry response
//
// swagger:model OfferEnrolmentInquiryResponse
type OfferEnrolmentInquiryResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	AccountNbr string `json:"accountNbr,omitempty"`

	//  Max length = 2, Add-on product ID for add-on product offer types.
	AddOnProduct string `json:"addOnProduct,omitempty"`

	//  Max length = 10, Campaign code from the offer definition record
	CampaignCode string `json:"campaignCode,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, User-defined communication channel: field that indicates the communication method used when presenting offer.
	CommunicationChannel string `json:"communicationChannel,omitempty"`

	//  Max length = 20, Customer Service Representative ID: Identification of the customer service representative who added or updated the Offer enrollment record.
	CsrID string `json:"csrId,omitempty"`

	//  Max length = 2, Number of CSR Instruction fields
	CsrInsNbrOccurs string `json:"csrInsNbrOccurs,omitempty"`

	// CSR Instruction field (Group) Occurs 4 times
	CsrInstructions []*CsrInstructionsForOfferEnrolmentInquiry1 `json:"csrInstructions"`

	// Format: YYYYMMDD. Date when offer was added. Date format is CCYYMMDD
	DateAdded string `json:"dateAdded,omitempty"`

	//  Max length = 40, Description of the offer
	Description string `json:"description,omitempty"`

	// Format: YYYYMMDD. Effective date of the add-on product. This date can be a date in the future. CMS assesses the first premium in the cycle that this date occurs.
	EffDate string `json:"effDate,omitempty"`

	// Format: YYYYMMDD. enrollment Maintenance Date: Date of last change to enrol action. Date format is CCYYMMDD.
	EnrollMaintDate string `json:"enrollMaintDate,omitempty"`

	//  Max length = 1, enrollment status of the offer associated with the account. Values are: 0 = Automatic enrollment 1 = Manual enrollment.
	EnrollStatus string `json:"enrollStatus,omitempty"`

	//  Max length = 1, enrollment Action: The action taken on the enrolled offer. Values are: 0 - No action required Offers which are active without the customer needing to do anything, e.g. a transaction based pricing offer for all gold card holders for April 1 - Waiting for customer enrollment: Offers which require customers to accept them - e.g. PPI 2 - Customer accepted the offer 3 - Customer rejected the offer 4 - Offer cancelled by customer service representative
	EnrollmentAction string `json:"enrollmentAction,omitempty"`

	// Format: YYYYMMDD. Offer Expiry Date: Date When Offer will expire.  Date format is CCYYMMDD.
	ExpireDate string `json:"expireDate,omitempty"`

	//  Max length = 1, Extend Code: Code that indicates whether the START DATE and EXPIRY DATE can be modified to extend the offer period on the Offer enrollment record. Values are: 0 = Do not enable maintenance 1 = Enable maintenance to extend the offer period.
	Extend string `json:"extend,omitempty"`

	// Format: YYYYMMDD. LAST MAINT DATE
	LastMaintDate string `json:"lastMaintDate,omitempty"`

	//  Max length = 3, LAST MAINT OPER
	LastMaintOper string `json:"lastMaintOper,omitempty"`

	//  Max length = 10, Offer number assigned to the account for which the inquiry is made.
	OfferID string `json:"offerId,omitempty"`

	// Format: YYYYMMDD. Offer Status Maintenance Date: Date of last change to offer status. Date format is CCYYMMDD.
	OfferStatMaintDate string `json:"offerStatMaintDate,omitempty"`

	//  Max length = 1, Status of the offer . Values are: 0 - Pending (= Offer has not reached its start date.) 1 - Active  2 - Expired 3 - Suspended (= Offer was rejected by the customer, or offer has been suspended in batch processing.) 4 - Cancelled (= Offer has been permanently cancelled.) 8 - To Be Purged 9 - Purged
	OfferStatus string `json:"offerStatus,omitempty"`

	//  Max length = 5, Offer Priority: Priority associated with the offer. The values are 00001-99999. The value 00001 indicates the highest priority.
	Priority string `json:"priority,omitempty"`

	//  Max length = 2, Reject Reason: field to identify the reason for which the offer was rejected. A value greater than 00 may be entered when the enroll action field is set to a value of 3 - reject. Valid values is 00 - No reason ( Default)  01 - Not interested 02 - Too expensive 03 to 99 - User defined
	RejectReason string `json:"rejectReason,omitempty"`

	//  Max length = 2, Response Channel: User-defined response as to how the offer was communicated.
	ResponseChannel string `json:"responseChannel,omitempty"`

	// Format: YYYYMMDD. Offer Start Date: Date when offer will start. Date format is CCYYMMDD.
	StartDate string `json:"startDate,omitempty"`

	//  Max length = 5, Trans Base Pricing Priority:  field that indicates the method of communication  of response to the offer
	TbpPriority string `json:"tbpPriority,omitempty"`

	// Text Detail field (Group) Occurs 6 times
	TextDetails []*TextDetailsForOfferEnrolmentInquiry1 `json:"textDetails"`

	//  Max length = 2, Number of TEXT fields
	TextNbrOccurs string `json:"textNbrOccurs,omitempty"`

	//  Max length = 2, Offer Type. Values are:00 = Text offer 01 = Transaction-based pricing offer 02 = Balance transfer 03 = Add-on product 04 = Retention offer 05 = Transaction-based discount offer 06 = New account offer 07 = Account transfer/trade 08 = Additional card. 09 = Money Transfer 11 = Forex Fee Waive 12 = Annual Fee Refund 13 = Cash Gift Offer 14 =  Cash back Offer
	Type string `json:"type,omitempty"`

	// User field (Group) Occurs 4 times
	UserFields []*UserFieldsForOfferEnrolmentInquiry1 `json:"userFields"`

	//  Max length = 2, Number of user fields
	UserNbrOccurs string `json:"userNbrOccurs,omitempty"`
}

// Validate validates this offer enrolment inquiry response
func (m *OfferEnrolmentInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsrInstructions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OfferEnrolmentInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *OfferEnrolmentInquiryResponse) validateCsrInstructions(formats strfmt.Registry) error {

	if swag.IsZero(m.CsrInstructions) { // not required
		return nil
	}

	for i := 0; i < len(m.CsrInstructions); i++ {
		if swag.IsZero(m.CsrInstructions[i]) { // not required
			continue
		}

		if m.CsrInstructions[i] != nil {
			if err := m.CsrInstructions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("csrInstructions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OfferEnrolmentInquiryResponse) validateTextDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.TextDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.TextDetails); i++ {
		if swag.IsZero(m.TextDetails[i]) { // not required
			continue
		}

		if m.TextDetails[i] != nil {
			if err := m.TextDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("textDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OfferEnrolmentInquiryResponse) validateUserFields(formats strfmt.Registry) error {

	if swag.IsZero(m.UserFields) { // not required
		return nil
	}

	for i := 0; i < len(m.UserFields); i++ {
		if swag.IsZero(m.UserFields[i]) { // not required
			continue
		}

		if m.UserFields[i] != nil {
			if err := m.UserFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OfferEnrolmentInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OfferEnrolmentInquiryResponse) UnmarshalBinary(b []byte) error {
	var res OfferEnrolmentInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

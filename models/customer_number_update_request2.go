// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerNumberUpdateRequest2 customer number update request2
//
// swagger:model CustomerNumberUpdateRequest2
type CustomerNumberUpdateRequest2 struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	//  Max length = 7, Date on which the alternate customer address expires for statements. If this date is earlier than today's processing date, statements use the address of the primary Customer Name/ Address record, not the alternate Customer Name/Address record.
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AltCustExpir *string `json:"altCustExpir,omitempty"`

	// Format: YYYYMMDD. Effective date of the alternate customer address.
	AltCustStart string `json:"altCustStart,omitempty"`

	//  Max length = 1, Alternate Customer Status. Indicates if alternate customer is active and the statement should be sent to the alternate address. Required if customer type indicator is 1. The values are: A = Alternate customer active; send statement to alternate address until expiration date B = Alternate customer active; send statement to both addresses until expiration date C = Relationship customer active; send statement to alternate address Blank = No action; disregard alternate customer. (Default)
	// Max Length: 1
	// Min Length: 0
	AltCustStat *string `json:"altCustStat,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Customer number: Customer number that identifies the Customer Name/Address record to which this account is assigned.
	// Max Length: 19
	// Min Length: 0
	CustNbr *string `json:"custNbr,omitempty"`

	//  Max length = 1, Customer Type Indicator: The values are: 0 = Update customer number 1 = Update alternate customer number
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CustTypeInd *string `json:"custTypeInd,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Org *string `json:"org,omitempty"`
}

// Validate validates this customer number update request2
func (m *CustomerNumberUpdateRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltCustExpir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAltCustStat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustTypeInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerNumberUpdateRequest2) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateAltCustExpir(formats strfmt.Registry) error {

	if swag.IsZero(m.AltCustExpir) { // not required
		return nil
	}

	if err := validate.MinLength("altCustExpir", "body", string(*m.AltCustExpir), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCustExpir", "body", string(*m.AltCustExpir), 7); err != nil {
		return err
	}

	if err := validate.Pattern("altCustExpir", "body", string(*m.AltCustExpir), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateAltCustStat(formats strfmt.Registry) error {

	if swag.IsZero(m.AltCustStat) { // not required
		return nil
	}

	if err := validate.MinLength("altCustStat", "body", string(*m.AltCustStat), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("altCustStat", "body", string(*m.AltCustStat), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateCustNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CustNbr) { // not required
		return nil
	}

	if err := validate.MinLength("custNbr", "body", string(*m.CustNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custNbr", "body", string(*m.CustNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateCustTypeInd(formats strfmt.Registry) error {

	if swag.IsZero(m.CustTypeInd) { // not required
		return nil
	}

	if err := validate.MinLength("custTypeInd", "body", string(*m.CustTypeInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custTypeInd", "body", string(*m.CustTypeInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("custTypeInd", "body", string(*m.CustTypeInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	if err := validate.Pattern("foreignUse", "body", string(*m.ForeignUse), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerNumberUpdateRequest2) validateOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if err := validate.MinLength("org", "body", string(*m.Org), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("org", "body", string(*m.Org), 3); err != nil {
		return err
	}

	if err := validate.Pattern("org", "body", string(*m.Org), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerNumberUpdateRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerNumberUpdateRequest2) UnmarshalBinary(b []byte) error {
	var res CustomerNumberUpdateRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

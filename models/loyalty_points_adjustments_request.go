// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyPointsAdjustmentsRequest loyalty points adjustments request
//
// swagger:model LoyaltyPointsAdjustmentsRequest
type LoyaltyPointsAdjustmentsRequest struct {

	//  Max length = 19, LMS account number that identifies the Points Account record
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	//  Max length = 17, Actual monetary value of the points.
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	ActVal *string `json:"actVal,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, LMS card number that identifies the Points Account record
	// Max Length: 19
	// Min Length: 0
	CrdNbr *string `json:"crdNbr,omitempty"`

	//  Max length = 40, Description of the points transaction.
	// Max Length: 40
	// Min Length: 0
	Desc *string `json:"desc,omitempty"`

	//  Max length = 5, Group code that identifies an existing Promotional Group record for this points transaction
	// Max Length: 5
	// Min Length: 0
	GrpCd *string `json:"grpCd,omitempty"`

	//  Max length = 18, User-defined reference number for this points transaction.
	// Max Length: 18
	// Min Length: 0
	RefNbr *string `json:"refNbr,omitempty"`

	//  Max length = 2, User-defined reason code for this points transaction.
	// Max Length: 2
	// Min Length: 0
	RsnCd *string `json:"rsnCd,omitempty"`

	//  Max length = 5, Scheme ID that identifies the points scheme record assigned to the points account.
	// Max Length: 5
	// Min Length: 0
	SchmID *string `json:"schmId,omitempty"`

	//  Max length = 9, Store number that identifies an existing Store record for this points transaction.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StoreNbr *string `json:"storeNbr,omitempty"`

	//  Max length = 2, Plan priority that together with plan type identifies an existing Points Plan record for this points transaction. The values are 00-99.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TblPri *string `json:"tblPri,omitempty"`

	//  Max length = 1, Plan type that together with plan priority identifies an existing Points Plan record for this points transaction. The values are: B = Base O = Override S = Supplementary X = Extra points on cycle.
	// Max Length: 1
	// Min Length: 0
	TblTyp *string `json:"tblTyp,omitempty"`

	//  Max length = 17, Number of loyalty points for this points transaction.
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnAmt *string `json:"txnAmt,omitempty"`

	//  Max length = 3, Default LMS transaction code that populates the POINTS TXN CODE field of each points transaction in the batch if you do not enter a transaction code. The values are: Earned points transactions 050 = Points credit 070 = Points debit Bonus points transactions 052 = Points credit 072 = Points debit Adjusted points transactions 054 = Points credit 074 = Points debit Bought points transactions 056 = Points credit 076 = Points debit. Grace expiration points transactions 077 = Points credit.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnCd *string `json:"txnCd,omitempty"`
}

// Validate validates this loyalty points adjustments request
func (m *LoyaltyPointsAdjustmentsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActVal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrdNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrpCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsnCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchmID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTblPri(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTblTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnCd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateActVal(formats strfmt.Registry) error {

	if swag.IsZero(m.ActVal) { // not required
		return nil
	}

	if err := validate.MinLength("actVal", "body", string(*m.ActVal), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actVal", "body", string(*m.ActVal), 17); err != nil {
		return err
	}

	if err := validate.Pattern("actVal", "body", string(*m.ActVal), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateCrdNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CrdNbr) { // not required
		return nil
	}

	if err := validate.MinLength("crdNbr", "body", string(*m.CrdNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crdNbr", "body", string(*m.CrdNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateDesc(formats strfmt.Registry) error {

	if swag.IsZero(m.Desc) { // not required
		return nil
	}

	if err := validate.MinLength("desc", "body", string(*m.Desc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("desc", "body", string(*m.Desc), 40); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateGrpCd(formats strfmt.Registry) error {

	if swag.IsZero(m.GrpCd) { // not required
		return nil
	}

	if err := validate.MinLength("grpCd", "body", string(*m.GrpCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("grpCd", "body", string(*m.GrpCd), 5); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateRefNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RefNbr) { // not required
		return nil
	}

	if err := validate.MinLength("refNbr", "body", string(*m.RefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("refNbr", "body", string(*m.RefNbr), 18); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateRsnCd(formats strfmt.Registry) error {

	if swag.IsZero(m.RsnCd) { // not required
		return nil
	}

	if err := validate.MinLength("rsnCd", "body", string(*m.RsnCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rsnCd", "body", string(*m.RsnCd), 2); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateSchmID(formats strfmt.Registry) error {

	if swag.IsZero(m.SchmID) { // not required
		return nil
	}

	if err := validate.MinLength("schmId", "body", string(*m.SchmID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("schmId", "body", string(*m.SchmID), 5); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateStoreNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreNbr) { // not required
		return nil
	}

	if err := validate.MinLength("storeNbr", "body", string(*m.StoreNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("storeNbr", "body", string(*m.StoreNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("storeNbr", "body", string(*m.StoreNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateTblPri(formats strfmt.Registry) error {

	if swag.IsZero(m.TblPri) { // not required
		return nil
	}

	if err := validate.MinLength("tblPri", "body", string(*m.TblPri), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("tblPri", "body", string(*m.TblPri), 2); err != nil {
		return err
	}

	if err := validate.Pattern("tblPri", "body", string(*m.TblPri), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateTblTyp(formats strfmt.Registry) error {

	if swag.IsZero(m.TblTyp) { // not required
		return nil
	}

	if err := validate.MinLength("tblTyp", "body", string(*m.TblTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("tblTyp", "body", string(*m.TblTyp), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateTxnAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnAmt) { // not required
		return nil
	}

	if err := validate.MinLength("txnAmt", "body", string(*m.TxnAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnAmt", "body", string(*m.TxnAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("txnAmt", "body", string(*m.TxnAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyPointsAdjustmentsRequest) validateTxnCd(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnCd) { // not required
		return nil
	}

	if err := validate.MinLength("txnCd", "body", string(*m.TxnCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnCd", "body", string(*m.TxnCd), 3); err != nil {
		return err
	}

	if err := validate.Pattern("txnCd", "body", string(*m.TxnCd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyPointsAdjustmentsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyPointsAdjustmentsRequest) UnmarshalBinary(b []byte) error {
	var res LoyaltyPointsAdjustmentsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

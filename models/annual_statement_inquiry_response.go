// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AnnualStatementInquiryResponse annual statement inquiry response
//
// swagger:model AnnualStatementInquiryResponse
type AnnualStatementInquiryResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	Acct string `json:"acct,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign Use value received from input.
	ForeignUse string `json:"foreignUse,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`

	// Plan Table; 6  Occurrences: (1) = Retail (2) = Cash (3) = Balance Transfer (4) = Access Check (5) = Loans (6) = Others
	PlanTable []*PlanTableForAnnualStatementInquiry1 `json:"planTable"`

	//  Max length = 20, Short name: Short name of the accountholder.
	ShrtName string `json:"shrtName,omitempty"`

	// Format: YYYYDDD. Annual statement period start date from ACCS summary record.
	StartDate string `json:"startDate,omitempty"`

	//  Max length = 1, Status: Code that identifies the status of  ACCS account record. Values are: 0 - Active 1 - Inactive 9 - Pending Purge
	Status string `json:"status,omitempty"`

	// Statement Data Group; 2 Occurrences of statement data: (1) = Total of Initial Transactions (2) = Total of Reversal Transactions
	StmtData []*StmtDataForAnnualStatementInquiry1 `json:"stmtData"`

	// Year-to-date Plan Table; 6 occurrences: (1) = Retail (2) = Cash (3) = Balance Transfer (4) = Access Check (5) = Loans (6) = Others
	YtdPlanTable []*YtdPlanTableForAnnualStatementInquiry1 `json:"ytdPlanTable"`

	// Year-to-date statement data; 2 occurrences: (1) = Total of Initial Transactions (2) = Total of Reversal Transactions
	YtdStmtData []*YtdStmtDataForAnnualStatementInquiry1 `json:"ytdStmtData"`
}

// Validate validates this annual statement inquiry response
func (m *AnnualStatementInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYtdPlanTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYtdStmtData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnnualStatementInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AnnualStatementInquiryResponse) validatePlanTable(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanTable) { // not required
		return nil
	}

	for i := 0; i < len(m.PlanTable); i++ {
		if swag.IsZero(m.PlanTable[i]) { // not required
			continue
		}

		if m.PlanTable[i] != nil {
			if err := m.PlanTable[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("planTable" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnnualStatementInquiryResponse) validateStmtData(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtData) { // not required
		return nil
	}

	for i := 0; i < len(m.StmtData); i++ {
		if swag.IsZero(m.StmtData[i]) { // not required
			continue
		}

		if m.StmtData[i] != nil {
			if err := m.StmtData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stmtData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnnualStatementInquiryResponse) validateYtdPlanTable(formats strfmt.Registry) error {

	if swag.IsZero(m.YtdPlanTable) { // not required
		return nil
	}

	for i := 0; i < len(m.YtdPlanTable); i++ {
		if swag.IsZero(m.YtdPlanTable[i]) { // not required
			continue
		}

		if m.YtdPlanTable[i] != nil {
			if err := m.YtdPlanTable[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ytdPlanTable" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnnualStatementInquiryResponse) validateYtdStmtData(formats strfmt.Registry) error {

	if swag.IsZero(m.YtdStmtData) { // not required
		return nil
	}

	for i := 0; i < len(m.YtdStmtData); i++ {
		if swag.IsZero(m.YtdStmtData[i]) { // not required
			continue
		}

		if m.YtdStmtData[i] != nil {
			if err := m.YtdStmtData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ytdStmtData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnnualStatementInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnnualStatementInquiryResponse) UnmarshalBinary(b []byte) error {
	var res AnnualStatementInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountCloseRequest account close request
//
// swagger:model AccountCloseRequest
type AccountCloseRequest struct {

	//  Max length = 19, Account or Card Number: Number of Customer's account or Card. Must be numeric and greater than zero.  Enter an account number to search for a match on the Account Base Segment record or card number to search for a match on the Embossing Record.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 2, Charge Off Reason: System defined portion of the charge off reason code. Values are: 'C' - Credit loss  'B' - Bankruptcy  'F' - Fraud loss  'T' - Counterfeit
	// Max Length: 2
	// Min Length: 0
	ChgoffReason *string `json:"chgoffReason,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 1, Function Code Indicator: Determines if function is to account close, manual charge off, a reason code initiated charge off or charge off blocked. Values are: <UL><LI> <EM>0 </EM> account close. If edits pass, service will set account status to 8.</LI> <LI><EM>1</EM> account manual charge off. If edits pass, service will set charge off status to 3.</LI> <LI><EM>2</EM> reason code as defined on Logo Charge Off Reason field. For this option, chgoffReason must be provided. If edits pass, service will set charge off reason, block code and days as defined on Logo.</LI> <LI><EM>3</EM> block a charge off.</LI> </UL>
	// Required: true
	// Max Length: 1
	// Min Length: 0
	FunctionCode *string `json:"functionCode"`
}

// Validate validates this account close request
func (m *AccountCloseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChgoffReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountCloseRequest) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountCloseRequest) validateChgoffReason(formats strfmt.Registry) error {

	if swag.IsZero(m.ChgoffReason) { // not required
		return nil
	}

	if err := validate.MinLength("chgoffReason", "body", string(*m.ChgoffReason), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chgoffReason", "body", string(*m.ChgoffReason), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountCloseRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountCloseRequest) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountCloseRequest) validateFunctionCode(formats strfmt.Registry) error {

	if err := validate.Required("functionCode", "body", m.FunctionCode); err != nil {
		return err
	}

	if err := validate.MinLength("functionCode", "body", string(*m.FunctionCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("functionCode", "body", string(*m.FunctionCode), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountCloseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountCloseRequest) UnmarshalBinary(b []byte) error {
	var res AccountCloseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

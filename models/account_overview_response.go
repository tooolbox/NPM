// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountOverviewResponse account overview response
//
// swagger:model AccountOverviewResponse
type AccountOverviewResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	Account string `json:"account,omitempty"`

	//  Max length = 1, This field is a code that indicates whether the direct debit amount is a fixed amount, the full account balance, a percentage of the account balance, or not used.  The values are: 0 - Not used.  1 - Fixed payment amount.  2 - Percentage of account (cycle-ending) balance.  3 - Full account (cycle-ending) balance.  4 - Full Non-BNPL Balance payer.        9 - Percentage of account (cycle-ending) balance, excluding overlimit amount
	AchAmtPctFlg string `json:"achAmtPctFlg,omitempty"`

	//  Max length = 9, Payment Amount/Percentage. Field that indicates the amount of the direct debit  respect to the flag AMBS-NOM-ACH-AMT-PCT-FLAG.
	AchPctAmt string `json:"achPctAmt,omitempty"`

	//  Max length = 17, Amount of cycle-to-date cash.  This field is used by authorisation process to decline prevent fraud
	AmtCtdCash string `json:"amtCtdCash,omitempty"`

	//  Max length = 1, Code that indicates whether direct debit processing is active for this account and the payment option in effect.  The values are:  0 = Does not participate in direct debit processing. (Default) 1 =A minimum payment is in effect. This option includes past due amounts for the projected DD. 2 =  A customernominated payment is in effect. This option includes past due amounts for the projected DD. 7 =A customer nominatedpaymen. This option does not include past due amounts for the projected DD
	AutoPayFlg string `json:"autoPayFlg,omitempty"`

	//  Max length = 17, Total current open-to-buy amount of all accounts that have an owner/co-owner association with the Customer Name/Address record
	AvailCr string `json:"availCr,omitempty"`

	//  Max length = 1, Account Block Code 1 - Block codes control specific processing options at the account level.
	BlkCd1 string `json:"blkCd1,omitempty"`

	//  Max length = 1, Account Block Code 2 - Block codes control specific processing options at the account level.
	BlkCd2 string `json:"blkCd2,omitempty"`

	//  Max length = 1, DD payment Type: Code that indicates the type of account to which the direct debit is sent.  The values are: D = Demand deposit account (checking) S = Savings account.
	BnkAcctType string `json:"bnkAcctType,omitempty"`

	//  Max length = 2, Chargeoff Reason. Code that identifies the charge-off reason for the account. The first position is system-defined and identifies the charge-off reason. The values are: 'C'  - Credit loss 'B' -  Bankruptcy 'F' - Fraud loss 'T' - Counterfeit The second position is user-defined and further describes the charge-off reason. Examples: C1 could indicate credit loss due to death. C2 could indicate credit loss due to another reason.
	ChgoffReason string `json:"chgoffReason,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Current credit limit assigned to the account in whole monetary units
	Crlim string `json:"crlim,omitempty"`

	//  Max length = 17, Current balance of the account.
	CurrBal string `json:"currBal,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrCode string `json:"currCode,omitempty"`

	//  Max length = 3, Current Collector. Code or initials that identify the collector currently assigned to the account
	CurrColl string `json:"currColl,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrNod string `json:"currNod,omitempty"`

	// Format: YYYYMMDD. Account level, card expiration date - used as default when adding embosser records to this account. It does not necessarily follow that the  embosser level card expiry date will have the same value as this.
	DtCardExp string `json:"dtCardExp,omitempty"`

	// Format: YYYYMMDD. Credit Limit Date.The date on which the credit limit was modified
	DtCrlim string `json:"dtCrlim,omitempty"`

	// Format: YYYYMMDD. Date of last payment
	DtLtPmt string `json:"dtLtPmt,omitempty"`

	// Format: YYYYMMDD. Last Statement Date.The date when the last statement was generated
	DtLtStmt string `json:"dtLtStmt,omitempty"`

	// Format: YYYYMMDD. Next statement date. Date on which the next statement is due to be generated for the account. This date is system-generated; you cannot change it.
	DtNextStmt string `json:"dtNextStmt,omitempty"`

	// Format: YYYYMMDD. Open Date. Date on which the account was opened.
	DtOpen string `json:"dtOpen,omitempty"`

	// Format: YYYYMMDD. Payment due date. Date when the next payment is due
	DtPmtDue string `json:"dtPmtDue,omitempty"`

	// Format: YYYYMMDD. Temporary credit limit date. Date on which the temporary line of credit expires
	DtTempCrlimExp string `json:"dtTempCrlimExp,omitempty"`

	//  Max length = 1, Multischeme flag. Flag that indicates whether multi-scheme is active or not. Valid values are 0 - Multi-scheme not active 1 - Multi-scheme active
	DualFlg string `json:"dualFlg,omitempty"`

	//  Max length = 1, Dual currency indicator. 0, L, SPACE = Local account 1, F = Foreign account If dual currency is not being used or the field is blank, the value is L
	DualInd string `json:"dualInd,omitempty"`

	//  Max length = 1, Block code assigned to the Embosser record. Card Block codes control specific processing options at card level.
	EdCrdBlkCod string `json:"edCrdBlkCod,omitempty"`

	//  Max length = 1, Cardholer Type.  Code that indicates whether the cardholder is the primary cardholder or an additional cardholder associated with the account. The valid values are 0 = Additional cardholder 1 = Primary cardholder
	EdCrldTyp string `json:"edCrldTyp,omitempty"`

	// Format: YYYYMMDD. The effective date of the block code. Date the block code was added or modified on the card.
	EdDteBlk string `json:"edDteBlk,omitempty"`

	//  Max length = 4, The FI delinquency scenario of the account provided by TRIAD
	FiDelqSce1 string `json:"fiDelqSce1,omitempty"`

	// FI SCRS
	FiScrs []*FiScrsForAccountOverview1 `json:"fiScrs"`

	//  Max length = 17, Fixed payment amount or percentage of the credit limit that system uses to calculate the payment amount if the CONTROLLING PLAN OVERRIDE is F, X or P.  fixed payment amount will be presented in monetary units and subunits.  Percentage will be returned using the format defined by the PERCENTAGE NOD
	FixPmtAmt string `json:"fixPmtAmt,omitempty"`

	// ins details
	InsDetails []*InsDetailsForAccountOverview1 `json:"insDetails"`

	//  Max length = 1, Code that identifies the status of the account. A = Active B = Conversion fraud C = Conversion transfer D = Dormant F = Fraud transfer H = Closed/conversion I = Inactive J = Transfer in, migrated from inactive K = Transfer out, migrated from inactive M = Migrated N = New P = To be purged in next reload Q = Transfer in today R = Transfer out today T = Transfer V = Conversion X = Charge-off/conversion Z = Charge-off 8 = Closed 9 = To be purged after reload.
	IntSta string `json:"intSta,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`

	// Format: YYYYMMDD. Last maintenance Date. Date of the last maintenance on this Customer Name/Address record.  This field identifies the date on which any non-monetary maintenance was performed
	LstMaintDte string `json:"lstMaintDte,omitempty"`

	//  Max length = 17, Beginning balance of the Credit Plan Segment record for the current billing cycle. This will match the Last Statement balance.
	LtStmtBal string `json:"ltStmtBal,omitempty"`

	// Format: YYYYMMDD. Customer's date of birth
	MakerDob string `json:"makerDob,omitempty"`

	//  Max length = 40, First name of the owner. Name of the customer as defined on the Customer Name/Address record
	NaFrstNme string `json:"naFrstNme,omitempty"`

	//  Max length = 40, Last name of the owner. LastName of the customer as defined on the Customer Name/Address record
	NaLstNme string `json:"naLstNme,omitempty"`

	//  Max length = 40, Middle name of the owner. Middle Name of the customer as defined on the Customer Name/Address record
	NaMidNme string `json:"naMidNme,omitempty"`

	//  Max length = 20, Title. Professional or honorary title associated with the owner name
	NaTitle string `json:"naTitle,omitempty"`

	//  Max length = 2, Number of Insurance products. The total number of insurance products enrolled on the account. If there are no insurance products enrolled on the account, then this value is zero.
	NbrInsPrd string `json:"nbrInsPrd,omitempty"`

	//  Max length = 5, Number of unblocked outstanding cards (plastic) for this account. The value in this field is system-generated; you cannot change it.
	NbrUnblkCrds string `json:"nbrUnblkCrds,omitempty"`

	//  Max length = 3, Number of overlimit cycles on the account life-to-date
	OvlmNbrCyc string `json:"ovlmNbrCyc,omitempty"`

	//  Max length = 17, Total payment amount due including any delinquent amounts
	PmtAmtDue string `json:"pmtAmtDue,omitempty"`

	//  Max length = 17, Amount of payment currently due (not including delinquent amounts).
	PmtCurrDue string `json:"pmtCurrDue,omitempty"`

	//  Max length = 1, Delinquency Level. Level of contractual delinquency valid values are '0' thru '9'
	PmtCycDue string `json:"pmtCycDue,omitempty"`

	//  Max length = 17, Last payment amount received
	PmtLtAmt string `json:"pmtLtAmt,omitempty"`

	//  Max length = 17, Amount of payment past due.
	PmtPastDue string `json:"pmtPastDue,omitempty"`

	//  Max length = 4, Authorisation digit group identifier returned by TRIAD
	RdmDigGrp string `json:"rdmDigGrp,omitempty"`

	//  Max length = 1, Source Channel. User defined field that contains the channel through which the account was boarded. For example, the different possible values may be I  - Internet  P - Post T - Telephone S - Store Etc.
	SourceChannel string `json:"sourceChannel,omitempty"`

	//  Max length = 1, statement flag. Code that indicates how CMS generates a statement for this account.   Space - Normal statement (Default)  'C' - Cycle statement  'I' - Interim statement  'O' - Online/archive-only statement  'H' - Hold statement  'R' - Returned statement  'S' - Sign out statement  '0' - User-defined statement hold code   '1'-'9' - User-defined statement hold code   'U' - Suppress statement; do not generate  'Z' - User-defined value that suppresses statement generation  'T' - Archive statement
	StmtFlg string `json:"stmtFlg,omitempty"`

	//  Max length = 2, Sub status of the account. User Defined Sub-Status.  Works in conjunction with Block Code 1 to identify reason for Block code being set.  Variable Decision Key used in TRIAD.  User defined values
	SubSta string `json:"subSta,omitempty"`

	//  Max length = 17, Temporary line of credit for the account in whole monetary units. This amount overrides the credit limit assigned to the account . The default is zero
	TempCrlim string `json:"tempCrlim,omitempty"`

	//  Max length = 19, Account Number of the transferred account.
	XfrAcct string `json:"xfrAcct,omitempty"`

	//  Max length = 3, Logo number of the transfer account
	XfrLogo string `json:"xfrLogo,omitempty"`

	//  Max length = 3, Organization number of the transfer account
	XfrOrg string `json:"xfrOrg,omitempty"`
}

// Validate validates this account overview response
func (m *AccountOverviewResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiScrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountOverviewResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountOverviewResponse) validateFiScrs(formats strfmt.Registry) error {

	if swag.IsZero(m.FiScrs) { // not required
		return nil
	}

	for i := 0; i < len(m.FiScrs); i++ {
		if swag.IsZero(m.FiScrs[i]) { // not required
			continue
		}

		if m.FiScrs[i] != nil {
			if err := m.FiScrs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiScrs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountOverviewResponse) validateInsDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.InsDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.InsDetails); i++ {
		if swag.IsZero(m.InsDetails[i]) { // not required
			continue
		}

		if m.InsDetails[i] != nil {
			if err := m.InsDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("insDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountOverviewResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountOverviewResponse) UnmarshalBinary(b []byte) error {
	var res AccountOverviewResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

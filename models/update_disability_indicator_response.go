// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateDisabilityIndicatorResponse update disability indicator response
//
// swagger:model UpdateDisabilityIndicatorResponse
type UpdateDisabilityIndicatorResponse struct {

	//  Max length = 19, Embosser/Card number of the updated record.
	CardNbr string `json:"cardNbr,omitempty"`

	//  Max length = 4, Identification number assigned to an Embosser record to distinguish between multiple cards issued with the same card
	CardSeq string `json:"cardSeq,omitempty"`

	//  Max length = 1, Field that indicates the type of cardholder whether additional or primary. Valid Values are :                                                                                            Primary - 1 Additional - 0
	CardType string `json:"cardType,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, The disability indicator is used to identify customers that have a requirement for correspondence to be sent in a particular format. The valid values are :                          AUDIO - 'A' BRAILLE - 'B'.  HARD-OF-HERING - 'H'.  LARGE-PRINT - 'L'.  CDROM - 'C'.  PLAIN-PRINT - 'P'.
	DisabilityInd string `json:"disabilityInd,omitempty"`
}

// Validate validates this update disability indicator response
func (m *UpdateDisabilityIndicatorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDisabilityIndicatorResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDisabilityIndicatorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDisabilityIndicatorResponse) UnmarshalBinary(b []byte) error {
	var res UpdateDisabilityIndicatorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardUpdateResponse card update response
//
// swagger:model CardUpdateResponse
type CardUpdateResponse struct {

	//  Max length = 40, Address Line 1: First line of the address to which the card and PIN mailer is sent.
	AddrLine1 string `json:"addrLine1,omitempty"`

	//  Max length = 40, Address Line 2: Second line of the address to which the card and PIN mailer is sent.
	AddrLine2 string `json:"addrLine2,omitempty"`

	//  Max length = 17, ATM DAILY AMT
	AtmDailyAmt string `json:"atmDailyAmt,omitempty"`

	//  Max length = 17, AUTH ATM CASH AMT
	AuthAtmCashAmt string `json:"authAtmCashAmt,omitempty"`

	//  Max length = 9, AUTH-ATM-CASH-NBR
	AuthAtmCashNbr string `json:"authAtmCashNbr,omitempty"`

	//  Max length = 17, AUTH ATM CASH SNGL TXN
	AuthAtmCashSnglTxn string `json:"authAtmCashSnglTxn,omitempty"`

	//  Max length = 1, AUTH ATM OTC RTL FREQ
	AuthAtmOtcRtlFreq string `json:"authAtmOtcRtlFreq,omitempty"`

	//  Max length = 17, AUTH OTC CASH AMT
	AuthOtcCashAmt string `json:"authOtcCashAmt,omitempty"`

	//  Max length = 9, AUTH OTC CASH NBR
	AuthOtcCashNbr string `json:"authOtcCashNbr,omitempty"`

	//  Max length = 17, AUTH OTC CASH SNGL TXN
	AuthOtcCashSnglTxn string `json:"authOtcCashSnglTxn,omitempty"`

	//  Max length = 17, AUTH RTL AMT
	AuthRtlAmt string `json:"authRtlAmt,omitempty"`

	//  Max length = 9, AUTH RTL NBR
	AuthRtlNbr string `json:"authRtlNbr,omitempty"`

	//  Max length = 17, AUTH RTL SNGL TXN
	AuthRtlSnglTxn string `json:"authRtlSnglTxn,omitempty"`

	//  Max length = 17, AUTH TOTAL TXN AMT
	AuthTotalTxnAmt string `json:"authTotalTxnAmt,omitempty"`

	//  Max length = 9, AUTH TOTAL TXN NBR
	AuthTotalTxnNbr string `json:"authTotalTxnNbr,omitempty"`

	//  Max length = 1, Extended Card Controls Opt in flag. Valid Values: <UL><LI><EM>0 - </EM> No, Cardholder has not opted-in for ECCA card control features (Default)</LI><LI><EM>1 - </EM> Yes, Cardholder has opted-in for ECCA card control features</LI><UL>
	CardControlFlagEcca string `json:"cardControlFlagEcca,omitempty"`

	//  Max length = 19, Unique Card Number embossed on card plastic.
	CardNbr string `json:"cardNbr,omitempty"`

	//  Max length = 4, Card Sequence Number: Record number assigned to the card.
	CardSeq string `json:"cardSeq,omitempty"`

	//  Max length = 1, Cardholder Flag: Flag that indicates whether the card is issued as a primary or secondary card.  Values are:  '0' - Primary Cardholder  '1' - Additional Cardholder
	CardholderFlag string `json:"cardholderFlag,omitempty"`

	//  Max length = 30, City for the mailing address to be used for card and PIN mailer.
	City string `json:"city,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Card Limit Profile: Code that identifies the BASE24 card limit profile for this Embosser record.
	CrdLmtProf string `json:"crdLmtProf,omitempty"`

	//  Max length = 19, Customer Number: Customer Name/Address record for the person to which the card is assigned.
	CustomerNbr string `json:"customerNbr,omitempty"`

	//  Max length = 17, ECOM AMT
	EcomAmt string `json:"ecomAmt,omitempty"`

	//  Max length = 17, ECOM AMT ACCUM
	EcomAmtAccum string `json:"ecomAmtAccum,omitempty"`

	//  Max length = 1, This represents the E-COMMERCE Marker Indicator which is used to identify if the E-commerce transaction is allowed for the Card. The maximum length of the field is '1'. The valid values are '0' and  '1'. The value '0' indicates the E COM Marker is not active. The value '1' indicates the E COM Marker is active.
	EcomMarker string `json:"ecomMarker,omitempty"`

	// Format: YYYYMMDD. This represents the E-COMMERCE Marker Expiry Date. The format of the field is YYYYMMDD.
	EcomMarkerExpDate string `json:"ecomMarkerExpDate,omitempty"`

	//  Max length = 4, This represents the E-COMMERCE Marker Expiry Time. The maximum length of the field is 4.
	EcomMarkerExpTime string `json:"ecomMarkerExpTime,omitempty"`

	//  Max length = 9, ECOM NBR
	EcomNbr string `json:"ecomNbr,omitempty"`

	//  Max length = 9, ECOM NBR ACCUM
	EcomNbrAccum string `json:"ecomNbrAccum,omitempty"`

	//  Max length = 5, EMBLM ID
	EmblmID string `json:"emblmId,omitempty"`

	//  Max length = 26, Embossed Name 1: Name embossed on the first embossing line of the card.
	EmbossedName1 string `json:"embossedName1,omitempty"`

	//  Max length = 26, Embossed Name 2: Name embossed on the second embossing line of the card.
	EmbossedName2 string `json:"embossedName2,omitempty"`

	//  Max length = 40, Embosser Name 1: Name field 1 of the Cardholder, used for mailing card and PIN mailers.
	EmbrName1 string `json:"embrName1,omitempty"`

	//  Max length = 40, Embosser Name 2: Name field 2 of the cardholder, used for mailing card and PIN mailers.
	EmbrName2 string `json:"embrName2,omitempty"`

	//  Max length = 1, Foreign Use Indicator. Field that indicates whether the incoming action is applied to the local or foreign account.
	ForeignUse string `json:"foreignUse,omitempty"`

	//  Max length = 3, Issue Delivery Option.
	IssueDeliveryOption string `json:"issueDeliveryOption,omitempty"`

	//  Max length = 3, Language Code: User-defined code to indicate the language spoken by the cardholder.
	LangCode string `json:"langCode,omitempty"`

	//  Max length = 3, LOGO
	Logo string `json:"logo,omitempty"`

	//  Max length = 20, Mobile Device ID: Identification of a mobile device associated with a mobile payment instrument (PI) embosser.
	MobDeviceID string `json:"mobDeviceId,omitempty"`

	//  Max length = 1, Mobile Provision Status: Code that indicates whether the embosser is for a mobile payment instrument (PI) and the current provisioning status for the PI.
	MobProvisionStatus string `json:"mobProvisionStatus,omitempty"`

	//  Max length = 10, PLASTIC ID
	PlasticID string `json:"plasticId,omitempty"`

	//  Max length = 1, Post Code Restriction:  Field that indicates whether a smart card contactless issuance is restricted for the embosser based on the customer's postal code.
	PostCdRestr string `json:"postCdRestr,omitempty"`

	//  Max length = 10, Postal code or zip code of the mailing address for card and PIN mailer.
	PstlCd string `json:"pstlCd,omitempty"`

	//  Max length = 17, QUASI CASH AMT
	QuasiCashAmt string `json:"quasiCashAmt,omitempty"`

	//  Max length = 17, QUASI CASH LIMIT
	QuasiCashLimit string `json:"quasiCashLimit,omitempty"`

	//  Max length = 9, QUASI CASH NBR
	QuasiCashNbr string `json:"quasiCashNbr,omitempty"`

	//  Max length = 3, Reissue Delivery Option.
	ReissueDeliveryOption string `json:"reissueDeliveryOption,omitempty"`

	//  Max length = 2, RQTD CARD TYPE
	RqtdCardType string `json:"rqtdCardType,omitempty"`

	//  Max length = 3, State or province of the mailing address for card and PIN mailer
	StProvince string `json:"stProvince,omitempty"`

	//  Max length = 17, TXN LIMIT ECOM
	TxnLimitEcom string `json:"txnLimitEcom,omitempty"`

	//  Max length = 2, TYPE CARD MAILER
	TypeCardMailer string `json:"typeCardMailer,omitempty"`

	//  Max length = 2, TYPE OF CARD
	TypeOfCard string `json:"typeOfCard,omitempty"`

	//  Max length = 20, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User1 string `json:"user1,omitempty"`

	//  Max length = 20, USER 10
	User10 string `json:"user10,omitempty"`

	//  Max length = 21, User 11 field.
	User11 string `json:"user11,omitempty"`

	//  Max length = 20, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User2 string `json:"user2,omitempty"`

	//  Max length = 19, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User3 string `json:"user3,omitempty"`

	//  Max length = 4, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User4 string `json:"user4,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User5 string `json:"user5,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User6 string `json:"user6,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User7 string `json:"user7,omitempty"`

	//  Max length = 1, User-defined code or description for this Embosser record. Used for Relationship of Primary and Supplemental Cardholders.
	User8 string `json:"user8,omitempty"`

	//  Max length = 19, USER 9
	User9 string `json:"user9,omitempty"`

	// Format: YYYYMMDD. User-defined date for this Embosser record.
	UserDate1 string `json:"userDate1,omitempty"`

	// Format: YYYYMMDD. User-defined date for this Embosser record.
	UserDate2 string `json:"userDate2,omitempty"`

	//  Max length = 17, USR AMT LIM
	UsrAmtLim string `json:"usrAmtLim,omitempty"`

	// Format: YYYYMMDD. USR EXP DATE
	UsrExpDate string `json:"usrExpDate,omitempty"`
}

// Validate validates this card update response
func (m *CardUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardUpdateResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardUpdateResponse) UnmarshalBinary(b []byte) error {
	var res CardUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

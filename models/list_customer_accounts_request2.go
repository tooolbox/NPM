// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListCustomerAccountsRequest2 list customer accounts request2
//
// swagger:model ListCustomerAccountsRequest2
type ListCustomerAccountsRequest2 struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	//  Max length = 1, Account Number Type: Required when the NUMBER is the customer account number; the value must be 1. 0 or space indicates Account or Embosser Number 1 - CUSTOMER NBR
	// Max Length: 1
	// Min Length: 0
	AcctNbrType *string `json:"acctNbrType,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0 This field is ignored when the Organization is provided.
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 19, Start Account Number: It is used to read account number based on SVC-FUNC-CODE. If SVC-FUNC-Code value is 'P' or 'N', it is mandatory.
	// Max Length: 19
	// Min Length: 0
	StrtAcctNbr *string `json:"strtAcctNbr,omitempty"`

	//  Max length = 3, Start Account Organization: Three digit Identification number of the organization. It is used to read account number based on SVC-FUNC-CODE. If SVC-FUNC-Code value is 'P' or 'N', it is mandatory.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StrtAcctOrg *string `json:"strtAcctOrg,omitempty"`

	//  Max length = 1, Service Function Code. Values are: 'P' - Service Function Previous 'N' - Service Function Next Space - Service Function None
	// Max Length: 1
	// Min Length: 0
	SvcFuncCode *string `json:"svcFuncCode,omitempty"`
}

// Validate validates this list customer accounts request2
func (m *ListCustomerAccountsRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcctNbrType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrtAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrtAcctOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCustomerAccountsRequest2) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *ListCustomerAccountsRequest2) validateAcctNbrType(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbrType) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbrType", "body", string(*m.AcctNbrType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbrType", "body", string(*m.AcctNbrType), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListCustomerAccountsRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *ListCustomerAccountsRequest2) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *ListCustomerAccountsRequest2) validateStrtAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.StrtAcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("strtAcctNbr", "body", string(*m.StrtAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strtAcctNbr", "body", string(*m.StrtAcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *ListCustomerAccountsRequest2) validateStrtAcctOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.StrtAcctOrg) { // not required
		return nil
	}

	if err := validate.MinLength("strtAcctOrg", "body", string(*m.StrtAcctOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strtAcctOrg", "body", string(*m.StrtAcctOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("strtAcctOrg", "body", string(*m.StrtAcctOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ListCustomerAccountsRequest2) validateSvcFuncCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCode) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCode", "body", string(*m.SvcFuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCode", "body", string(*m.SvcFuncCode), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListCustomerAccountsRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListCustomerAccountsRequest2) UnmarshalBinary(b []byte) error {
	var res ListCustomerAccountsRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

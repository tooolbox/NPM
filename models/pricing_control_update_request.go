// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PricingControlUpdateRequest pricing control update request
//
// swagger:model PricingControlUpdateRequest
type PricingControlUpdateRequest struct {

	//  Max length = 19, Account or Card Number: Number of Customer's account or Card. Must be numeric and greater than zero.  Enter an account number to search for a match on the Account Base Segment record or card number to search for a match on the Embossing Record.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Dual Indicator: Dual Account Flag of account.Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	//  Max length = 17, Fixed Payment Amount:Fixed payment amount or percentage of the credit limit that CMS uses to calculate the payment amount if the CONTROLLING PLAN OVERRIDE is F, X or P.
	// Pattern: ^(-)?[0-9]{1,17}$
	FixedPmtAmtPct string `json:"fixedPmtAmtPct,omitempty"`

	//  Max length = 3, PCT Control Indicator: Temporary Processing Control Table identification override controlled on the base segment.
	// Max Length: 3
	// Min Length: 0
	PctCtlID *string `json:"pctCtlId,omitempty"`

	// Format: YYYYMMDD. PCT Expiry Date: Date on which the special pricing controls expire for the account.
	PctExpireDate string `json:"pctExpireDate,omitempty"`

	//  Max length = 1, PCT Level: Code that specifies the Processing Control Table level for the pricing control indicator. The logo in which accounts reside initially determines the level at which all accounts will process.  Values are: Space - Is not used  'S' - System Level  'O' - ORG Level  'L' - LOGO level
	// Max Length: 1
	// Min Length: 0
	PctLevel *string `json:"pctLevel,omitempty"`

	// Format: YYYYMMDD. PCT Level Expiry Date: Date when PCT-LEVEL expires.
	PctLevelExpirDate string `json:"pctLevelExpirDate,omitempty"`

	// Format: YYYYMMDD. PCT Level Start Date: Date when PCT-LEVEL is effective. Temporary override at the base segment level.
	PctLevelStartDate string `json:"pctLevelStartDate,omitempty"`

	// Format: YYYYMMDD. PCT Start Date: Date on which the special pricing controls start for the account.
	PctStartDate string `json:"pctStartDate,omitempty"`

	//  Max length = 1, Plan Payment Override Flag: Values are: F = Fixed payment X = Fixed payment Rest on Purch P = Credit limit payment Override
	// Max Length: 1
	// Min Length: 0
	PlanPmtOvrdFlag *string `json:"planPmtOvrdFlag,omitempty"`

	//  Max length = 3, State Of Issue:  If account has a Bankcard Logo (Logo 'Type' value of 'X'), this field identifies the PCT, used for pricing options (interest, fees, account control, insurance).  If account has a non-Bankcard Logo, this code identifies the state, province, or country in which the account was issued.
	// Max Length: 3
	// Min Length: 0
	StateOfIssue *string `json:"stateOfIssue,omitempty"`

	//  Max length = 3, State of Residence: Residence ID that identifies the state, province, or country where the accountholder resides.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	StateOfResid *string `json:"stateOfResid"`
}

// Validate validates this pricing control update request
func (m *PricingControlUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPmtAmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctCtlID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanPmtOvrdFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOfIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOfResid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PricingControlUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *PricingControlUpdateRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validateFixedPmtAmtPct(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedPmtAmtPct) { // not required
		return nil
	}

	if err := validate.Pattern("fixedPmtAmtPct", "body", string(m.FixedPmtAmtPct), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validatePctCtlID(formats strfmt.Registry) error {

	if swag.IsZero(m.PctCtlID) { // not required
		return nil
	}

	if err := validate.MinLength("pctCtlId", "body", string(*m.PctCtlID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctCtlId", "body", string(*m.PctCtlID), 3); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validatePctLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.PctLevel) { // not required
		return nil
	}

	if err := validate.MinLength("pctLevel", "body", string(*m.PctLevel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctLevel", "body", string(*m.PctLevel), 1); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validatePlanPmtOvrdFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanPmtOvrdFlag) { // not required
		return nil
	}

	if err := validate.MinLength("planPmtOvrdFlag", "body", string(*m.PlanPmtOvrdFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planPmtOvrdFlag", "body", string(*m.PlanPmtOvrdFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validateStateOfIssue(formats strfmt.Registry) error {

	if swag.IsZero(m.StateOfIssue) { // not required
		return nil
	}

	if err := validate.MinLength("stateOfIssue", "body", string(*m.StateOfIssue), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stateOfIssue", "body", string(*m.StateOfIssue), 3); err != nil {
		return err
	}

	return nil
}

func (m *PricingControlUpdateRequest) validateStateOfResid(formats strfmt.Registry) error {

	if err := validate.Required("stateOfResid", "body", m.StateOfResid); err != nil {
		return err
	}

	if err := validate.MinLength("stateOfResid", "body", string(*m.StateOfResid), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stateOfResid", "body", string(*m.StateOfResid), 3); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PricingControlUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PricingControlUpdateRequest) UnmarshalBinary(b []byte) error {
	var res PricingControlUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

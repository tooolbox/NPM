// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettlementQuoteUpdateRequest settlement quote update request
//
// swagger:model SettlementQuoteUpdateRequest
type SettlementQuoteUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Flag to specifiy whether a letter needs to be generated or not. Valid values are :  0 - Default letter 1 - No Default letter 2 - No Letter
	// Max Length: 1
	// Min Length: 0
	DfltLtr *string `json:"dfltLtr,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Required: true
	// Max Length: 1
	// Min Length: 0
	FrgnUse *string `json:"frgnUse"`

	//  Max length = 3, Letter id of the letter to be generated
	// Max Length: 3
	// Min Length: 0
	LtrID *string `json:"ltrId,omitempty"`

	//  Max length = 300, Memo notes for the quote.
	// Max Length: 300
	// Min Length: 0
	MemoNotes *string `json:"memoNotes,omitempty"`

	//  Max length = 2, Number of plans level details to provide on the output return.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NbrPlanLvlRq *string `json:"nbrPlanLvlRq,omitempty"`

	// Format: YYYYMMDD. Pay-off date/loan settlement date used for the account level generation quote.
	// Required: true
	PayoffDt *string `json:"payoffDt"`

	//  Max length = 1, Selection field used to choose individual credit plan segments for which you want to calculate a payoff quote, display an existing quote, or cancel a user-generated quote.  Valid values are:  'P'- Requests the generation of an account level quote including penalties and termination fees,  'W'- Requests the generation of an account level quote in which penalties and termination fees are waived,  'C' - Cancels the existing account level manuallyrequested quote
	// Required: true
	// Max Length: 1
	// Min Length: 0
	SttlQtTyp *string `json:"sttlQtTyp"`

	//  Max length = 1, Scrolling feature. Values are: Space = First 20 items (Default) N = Next 20 items P = Previous 20 items
	// Max Length: 1
	// Min Length: 0
	SvcFuncCd *string `json:"svcFuncCd,omitempty"`

	//  Max length = 3, Starting Plan sequence number associated with the scroll.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcStartPlanSeq *string `json:"svcStartPlanSeq,omitempty"`
}

// Validate validates this settlement quote update request
func (m *SettlementQuoteUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfltLtr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrgnUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrPlanLvlRq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoffDt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSttlQtTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartPlanSeq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettlementQuoteUpdateRequest) validateAcct(formats strfmt.Registry) error {

	if err := validate.Required("acct", "body", m.Acct); err != nil {
		return err
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateDfltLtr(formats strfmt.Registry) error {

	if swag.IsZero(m.DfltLtr) { // not required
		return nil
	}

	if err := validate.MinLength("dfltLtr", "body", string(*m.DfltLtr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dfltLtr", "body", string(*m.DfltLtr), 1); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateFrgnUse(formats strfmt.Registry) error {

	if err := validate.Required("frgnUse", "body", m.FrgnUse); err != nil {
		return err
	}

	if err := validate.MinLength("frgnUse", "body", string(*m.FrgnUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("frgnUse", "body", string(*m.FrgnUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateLtrID(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrID) { // not required
		return nil
	}

	if err := validate.MinLength("ltrId", "body", string(*m.LtrID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrId", "body", string(*m.LtrID), 3); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateMemoNotes(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoNotes) { // not required
		return nil
	}

	if err := validate.MinLength("memoNotes", "body", string(*m.MemoNotes), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoNotes", "body", string(*m.MemoNotes), 300); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateNbrPlanLvlRq(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrPlanLvlRq) { // not required
		return nil
	}

	if err := validate.MinLength("nbrPlanLvlRq", "body", string(*m.NbrPlanLvlRq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrPlanLvlRq", "body", string(*m.NbrPlanLvlRq), 2); err != nil {
		return err
	}

	if err := validate.Pattern("nbrPlanLvlRq", "body", string(*m.NbrPlanLvlRq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validatePayoffDt(formats strfmt.Registry) error {

	if err := validate.Required("payoffDt", "body", m.PayoffDt); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateSttlQtTyp(formats strfmt.Registry) error {

	if err := validate.Required("sttlQtTyp", "body", m.SttlQtTyp); err != nil {
		return err
	}

	if err := validate.MinLength("sttlQtTyp", "body", string(*m.SttlQtTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sttlQtTyp", "body", string(*m.SttlQtTyp), 1); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateSvcFuncCd(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCd) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCd", "body", string(*m.SvcFuncCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCd", "body", string(*m.SvcFuncCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteUpdateRequest) validateSvcStartPlanSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartPlanSeq) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartPlanSeq", "body", string(*m.SvcStartPlanSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartPlanSeq", "body", string(*m.SvcStartPlanSeq), 3); err != nil {
		return err
	}

	if err := validate.Pattern("svcStartPlanSeq", "body", string(*m.SvcStartPlanSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettlementQuoteUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettlementQuoteUpdateRequest) UnmarshalBinary(b []byte) error {
	var res SettlementQuoteUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorisationReversalandRequestRequest authorisation reversaland request request
//
// swagger:model AuthorisationReversalandRequestRequest
type AuthorisationReversalandRequestRequest struct {

	//  Max length = 1, FAS Log File Extend. This field is used when the serviceFlag is set to 'R' i.e. if Reversal is being triggered for a transaction. Must be numeric.  FAS log file extend, if they are segmented.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AccountLogExt *string `json:"accountLogExt,omitempty"`

	//  Max length = 9, Record Byte Address:  Record byte address of transaction present on FAS log file. This field is used when the serviceFlag is set to 'R' i.e. if Reversal is being triggered for a transaction.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AccountRba *string `json:"accountRba,omitempty"`

	//  Max length = 19, Account Number of the account holder.  This field is used when the serviceFlag is set to 'R' i.e. if Reversal is being triggered for a transaction.  Must be valid Account number.
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct,omitempty"`

	//  Max length = 4, Action Code for Authorization Clearing or Reversal.
	// Required: true
	// Max Length: 4
	// Min Length: 0
	ActionCode *string `json:"actionCode"`

	//  Max length = 14, Amount for Authorization. This field is used when the serviceFlag is set to 'A' i.e. if Authorization is being triggered.
	// Max Length: 14
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Amt *string `json:"amt,omitempty"`

	//  Max length = 1, Bill Payment Indicator: Code used by the merchant to indicate a bill payment transaction. This field is used when the serviceFlag is set to 'A' i.e. if Authorization is being triggered. If entered it must be as below: Y - Transaction is of Bill Payment N - Transaction is not of Bill Payment
	// Max Length: 1
	// Min Length: 0
	BillPymtInd *string `json:"billPymtInd,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card, used for this request. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided This field is used when the serviceFlag is set to 'A' i.e. if Reversal is being triggered for a transaction.
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, DATE EXPIRE MM
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DateExpireMm *string `json:"dateExpireMm,omitempty"`

	//  Max length = 2, DATE EXPIRE YY
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DateExpireYy *string `json:"dateExpireYy,omitempty"`

	// Format: YYYYMMDD. Date. This field is used when the serviceFlag is set to 'R' i.e. if Reversal is being triggered for a transaction. Must be numeric/Julian date of transaction
	EffDate string `json:"effDate,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 300, Action Memo note.
	// Max Length: 300
	// Min Length: 0
	MemoNotes *string `json:"memoNotes,omitempty"`

	//  Max length = 5, Plan Number for Authorization. This field is used when the serviceFlag is set to 'A' i.e. if Authorization is being triggered.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Plan *string `json:"plan,omitempty"`

	//  Max length = 1, Recurring Payment Indicator: Code used by the merchant to indicate a bill payment transaction. This field is used when the serviceFlag is set to 'A' i.e. if Authorization is being triggered. This is applicable for Master Card transaction only.  If entered it must be as below: Y - Transaction is Recurring transaction N - Transaction is not Recurring transaction
	// Max Length: 1
	// Min Length: 0
	RecurPymtInd *string `json:"recurPymtInd,omitempty"`

	//  Max length = 3, CVV2 / CVC2 value: Card Verification Value 2 (CVV2), Card Validation Code 2 (CVC2), or Card Authentication Value (CAV2) imprinted on the signature panel of Visa, MasterCard, and JCB bankcards. This field is used when the serviceFlag is set to 'A' i.e. if Authorization is being triggered.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SecCode *string `json:"secCode,omitempty"`

	//  Max length = 1, CVV Presence Indicator: Code the merchant uses to indicate that the CVV2 value is on the card. This field is used when the serviceFlag is set to 'A' i.e. if Authorization is being triggered. If entered it must be as below: 0 - Security code bypassed 1 - Security Code is present 2 - Security Code is illegible  9 - Security Code not imprinted
	// Max Length: 1
	// Min Length: 0
	SecPresInd *string `json:"secPresInd,omitempty"`

	//  Max length = 1, Service Flag: field to indicate the Authorization service.  Valid values are: Authorization request -A Authorization reversal -R
	// Required: true
	// Max Length: 1
	// Min Length: 0
	ServiceFlag *string `json:"serviceFlag"`

	//  Max length = 9, Merchant Store Number: Identification number of the Mechant Store. This field is used when the serviceFlag is set to 'A' i.e. if Reversal is being triggered for a transaction.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StoreNbr *string `json:"storeNbr,omitempty"`

	//  Max length = 3, Merchant Organization Number: Three digit Identification number of the organization. Valid values are 001 - 998. This field is used when the serviceFlag is set to 'A' i.e. if Reversal is being triggered for a transaction.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StoreOrg *string `json:"storeOrg,omitempty"`

	//  Max length = 7, Time. This field is used when the serviceFlag is set to 'R' i.e. if Reversal is being triggered for a transaction. Must be numeric/Time of transaction
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Time *string `json:"time,omitempty"`
}

// Validate validates this authorisation reversaland request request
func (m *AuthorisationReversalandRequestRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountLogExt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountRba(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillPymtInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateExpireMm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateExpireYy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurPymtInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecPresInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateAccountLogExt(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountLogExt) { // not required
		return nil
	}

	if err := validate.MinLength("accountLogExt", "body", string(*m.AccountLogExt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountLogExt", "body", string(*m.AccountLogExt), 1); err != nil {
		return err
	}

	if err := validate.Pattern("accountLogExt", "body", string(*m.AccountLogExt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateAccountRba(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountRba) { // not required
		return nil
	}

	if err := validate.MinLength("accountRba", "body", string(*m.AccountRba), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("accountRba", "body", string(*m.AccountRba), 9); err != nil {
		return err
	}

	if err := validate.Pattern("accountRba", "body", string(*m.AccountRba), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.Acct) { // not required
		return nil
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateActionCode(formats strfmt.Registry) error {

	if err := validate.Required("actionCode", "body", m.ActionCode); err != nil {
		return err
	}

	if err := validate.MinLength("actionCode", "body", string(*m.ActionCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("actionCode", "body", string(*m.ActionCode), 4); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.Amt) { // not required
		return nil
	}

	if err := validate.MinLength("amt", "body", string(*m.Amt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amt", "body", string(*m.Amt), 14); err != nil {
		return err
	}

	if err := validate.Pattern("amt", "body", string(*m.Amt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateBillPymtInd(formats strfmt.Registry) error {

	if swag.IsZero(m.BillPymtInd) { // not required
		return nil
	}

	if err := validate.MinLength("billPymtInd", "body", string(*m.BillPymtInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("billPymtInd", "body", string(*m.BillPymtInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateDateExpireMm(formats strfmt.Registry) error {

	if swag.IsZero(m.DateExpireMm) { // not required
		return nil
	}

	if err := validate.MinLength("dateExpireMm", "body", string(*m.DateExpireMm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dateExpireMm", "body", string(*m.DateExpireMm), 2); err != nil {
		return err
	}

	if err := validate.Pattern("dateExpireMm", "body", string(*m.DateExpireMm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateDateExpireYy(formats strfmt.Registry) error {

	if swag.IsZero(m.DateExpireYy) { // not required
		return nil
	}

	if err := validate.MinLength("dateExpireYy", "body", string(*m.DateExpireYy), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dateExpireYy", "body", string(*m.DateExpireYy), 2); err != nil {
		return err
	}

	if err := validate.Pattern("dateExpireYy", "body", string(*m.DateExpireYy), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateMemoNotes(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoNotes) { // not required
		return nil
	}

	if err := validate.MinLength("memoNotes", "body", string(*m.MemoNotes), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("memoNotes", "body", string(*m.MemoNotes), 300); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if err := validate.MinLength("plan", "body", string(*m.Plan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("plan", "body", string(*m.Plan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("plan", "body", string(*m.Plan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateRecurPymtInd(formats strfmt.Registry) error {

	if swag.IsZero(m.RecurPymtInd) { // not required
		return nil
	}

	if err := validate.MinLength("recurPymtInd", "body", string(*m.RecurPymtInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recurPymtInd", "body", string(*m.RecurPymtInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateSecCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SecCode) { // not required
		return nil
	}

	if err := validate.MinLength("secCode", "body", string(*m.SecCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("secCode", "body", string(*m.SecCode), 3); err != nil {
		return err
	}

	if err := validate.Pattern("secCode", "body", string(*m.SecCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateSecPresInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SecPresInd) { // not required
		return nil
	}

	if err := validate.MinLength("secPresInd", "body", string(*m.SecPresInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("secPresInd", "body", string(*m.SecPresInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateServiceFlag(formats strfmt.Registry) error {

	if err := validate.Required("serviceFlag", "body", m.ServiceFlag); err != nil {
		return err
	}

	if err := validate.MinLength("serviceFlag", "body", string(*m.ServiceFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("serviceFlag", "body", string(*m.ServiceFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateStoreNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreNbr) { // not required
		return nil
	}

	if err := validate.MinLength("storeNbr", "body", string(*m.StoreNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("storeNbr", "body", string(*m.StoreNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("storeNbr", "body", string(*m.StoreNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateStoreOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreOrg) { // not required
		return nil
	}

	if err := validate.MinLength("storeOrg", "body", string(*m.StoreOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("storeOrg", "body", string(*m.StoreOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("storeOrg", "body", string(*m.StoreOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthorisationReversalandRequestRequest) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.MinLength("time", "body", string(*m.Time), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("time", "body", string(*m.Time), 7); err != nil {
		return err
	}

	if err := validate.Pattern("time", "body", string(*m.Time), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorisationReversalandRequestRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorisationReversalandRequestRequest) UnmarshalBinary(b []byte) error {
	var res AuthorisationReversalandRequestRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountsListByRelationshipResponse accounts list by relationship response
//
// swagger:model AccountsListByRelationshipResponse
type AccountsListByRelationshipResponse struct {

	//  Max length = 2, Billing Cycle: Cycle code that indicates the day of the month that CMS Performs cycle processing for the account. Values are: 01-31.
	AcctBillingCycle string `json:"acctBillingCycle,omitempty"`

	//  Max length = 1, Billing level for the relationship. Value in this field defines the default billing level for each sub-ordinate account added to the relationship. Values are: 0 - Bill at relationship level 1 - Bill at sub-ordinate level (Default) 2 - Combined billing either at relationship or subordinate level.
	AcctBillingLevel string `json:"acctBillingLevel,omitempty"`

	//  Max length = 3, Default authorisation criteria table assigned to the Relationship
	AuthCriteriaTbl string `json:"authCriteriaTbl,omitempty"`

	//  Max length = 2, Billing cycle of the relationship and it defaults to all the sub-ordinate accounts. Valid values are from 01 to 31.
	BillingCycle string `json:"billingCycle,omitempty"`

	//  Max length = 1, Billing level for the relationship. Value in this field defines the default billing level for each sub-ordinate account added to the relationship. Values are: 0 - Bill at relationship level 1 - Bill at sub-ordinate level (Default) 2 - Combined billing either at relationship or subordinate level
	BillingLvl string `json:"billingLvl,omitempty"`

	//  Max length = 1, Relationship Block Code. Block code assigned to the relationship account and it controls the specific processing options at relationship level.
	BlockCode string `json:"blockCode,omitempty"`

	//  Max length = 17, Amount of cash credit limit for the Relationship.
	CashLimit string `json:"cashLimit,omitempty"`

	//  Max length = 1, Cash Limit Flag: P=Percentage of Credit Limt. A=Amount of Credit Limit
	CashLimitFlag string `json:"cashLimitFlag,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Flag that indicates whether this is a commercial card relationship. The values are: 0 = Not a commercial card relationship (Default) 1 = Visa corporate card relationship 2 = Visa purchasing card relationship 3 = HCS commercial card relationship, which can include Visa corporate cards, Visa purchasing cards, and/or MasterCard purchasing cards 4 = Non-HCS commercial card.
	CommrclFlag string `json:"commrclFlag,omitempty"`

	//  Max length = 19, Identification number of the Customer Name/Address record for the corporation to which the purchasing card is assigned.
	CorpCustNbr string `json:"corpCustNbr,omitempty"`

	//  Max length = 10, Number used to associate relationships and hierarchies for corporate commercial card customers. The value entered in this field defaults to all subordinate accounts in the relationship.
	CorpIDNbr string `json:"corpIdNbr,omitempty"`

	//  Max length = 16, Number used to associate cardholder-initiated transactions to the relationship.
	CostCntrRpt string `json:"costCntrRpt,omitempty"`

	//  Max length = 17, Credit Limit in whole monetary units which defaults to each sub-ordinate account in the Relationship.
	CrLimitDflt string `json:"crLimitDflt,omitempty"`

	//  Max length = 17, Relationship Credit Available: The available limit remaining on the relationship account in monetary units.
	CreditAvail string `json:"creditAvail,omitempty"`

	//  Max length = 17, Total Credit Limit for the relationship.
	CreditLimit string `json:"creditLimit,omitempty"`

	//  Max length = 17, Relationship Credit Limit: Credit limit assigned for the relationship account in monetary units.
	Crlim string `json:"crlim,omitempty"`

	// Format: YYYYMMDD. Month and year the contract expires for the commercial card customer. System uses this field to determine card issue and re-issue dates.
	CurrExpDte string `json:"currExpDte,omitempty"`

	//  Max length = 3, Currency Code: ISO currency code that identifies the unit of currency for this account.
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyNod string `json:"currencyNod,omitempty"`

	//  Max length = 1, Dual currency indicator. 0, L, SPACE = Local account 1, F = Foreign account If dual currency is not being used or the field is blank, the value is L
	DualCurrInd string `json:"dualCurrInd,omitempty"`

	//  Max length = 3, Foreign Org Number: Organisation of the Customer's foreign/international currency account.
	ForeignOrg string `json:"foreignOrg,omitempty"`

	//  Max length = 1, Foreign Use Indicator. Field that indicates whether the account is a local or international account. Populates the value which is sent in input request.
	ForeignUse string `json:"foreignUse,omitempty"`

	//  Max length = 17, Total Loan Limit for the relationship.
	LoanLimit string `json:"loanLimit,omitempty"`

	//  Max length = 1, Flag that indicates the MasterCard products offered by the company for which external reporting is supported. The values are: 0 = Not used (Default) 1 = MasterCard corporate products only 2 = MasterCard purchasing products only 3 = Both MasterCard corporate and purchasing products.
	McFlag string `json:"mcFlag,omitempty"`

	//  Max length = 17, Memo Balance: The current Relationship outstanding balance including any authorisations
	MemoBal string `json:"memoBal,omitempty"`

	//  Max length = 17, Memo Cash Balance: The current Relationship outstanding cash balance including any cash authorisations
	MemoCash string `json:"memoCash,omitempty"`

	//  Max length = 5, Number of Cycle-To-Date NSF Fees on the Relationship
	NbrNsfFeeCtd string `json:"nbrNsfFeeCtd,omitempty"`

	//  Max length = 5, Number of Life-To-Date NSF Fees on the Relationship
	NbrNsfFeeLtd string `json:"nbrNsfFeeLtd,omitempty"`

	//  Max length = 5, Number of Year-To-Date NSF Fees on the Relationship
	NbrNsfFeeYtd string `json:"nbrNsfFeeYtd,omitempty"`

	//  Max length = 5, The total number of subordinate accounts that belongs to this Relationship.
	NbrSubAccts string `json:"nbrSubAccts,omitempty"`

	//  Max length = 17, Net payment due amount for the relationship. Calculated field and is the difference between the relationship’s total payment due less the relationship’s cycle-to-date payments.
	NetPmtDue string `json:"netPmtDue,omitempty"`

	//  Max length = 17, Amount of cash credit limit available for cash transaction authorizations for the Relationship.
	OtbCashAvail string `json:"otbCashAvail,omitempty"`

	//  Max length = 17, Current outstanding amount of cash portion of the Relationship current balance.
	OtbCashBalance string `json:"otbCashBalance,omitempty"`

	//  Max length = 17, Sum of current balances for all sub-ordinate accounts in the Relationship.
	OtbCurrentBalance string `json:"otbCurrentBalance,omitempty"`

	//  Max length = 17, Total loan balance of all accounts in this Relationship.
	OtbLoanBalance string `json:"otbLoanBalance,omitempty"`

	//  Max length = 19, Relationship Account Number: The primary Account number that is linked to the Relationship.
	RelAcctNbr string `json:"relAcctNbr,omitempty"`

	//  Max length = 19, Relationship Customer Number: The Customer number that is linked to the Relationship.
	RelCustNbr string `json:"relCustNbr,omitempty"`

	//  Max length = 26, Relationship Name: The name for the Relationship.
	RelName string `json:"relName,omitempty"`

	//  Max length = 19, Relationship Number: Identifcation number to which the account and customer number of the cardholder are linked to.
	RelNbr string `json:"relNbr,omitempty"`

	//  Max length = 2, The number of subordinate accounts returned for this request.
	RelNumberOccurs string `json:"relNumberOccurs,omitempty"`

	//  Max length = 1, Code that indicates if more records are on file. The valid values are: Y - Yes N - No.
	RrMoreInd string `json:"rrMoreInd,omitempty"`

	//  Max length = 1, Status of the Relationship. 00-49 Add Pending 99-Completed
	Status string `json:"status,omitempty"`

	//  Max length = 17, Balance of the relationship at the beginning of the last billing cycle, which is the sum of the beginning balances of all consolidated subordinate accounts within the relationship.
	StmtBegBal string `json:"stmtBegBal,omitempty"`

	//  Max length = 17, Amount of credits in the last billing cycle for the relationship. This field displays the sum of the credits for all consolidated subordinate accounts within the relationship.
	StmtCr string `json:"stmtCr,omitempty"`

	// Format: YYYYMMDD. Current statement date of the relationship.
	StmtCurrDte string `json:"stmtCurrDte,omitempty"`

	//  Max length = 17, Amount of debits in the last billing cycle for the relationship. This field displays the sum of the debits for all consolidated subordinate accounts within the relationship.
	StmtDb string `json:"stmtDb,omitempty"`

	//  Max length = 17, Statement ending balance, which is the sum of the ending balances of all consolidated subordinate accounts within the relationship.
	StmtEndBal string `json:"stmtEndBal,omitempty"`

	//  Max length = 17, Current payment due for the relationship, which is the sum of the current payment due of all consolidated subordinate accounts within the relationship.
	StmtPmtDue string `json:"stmtPmtDue,omitempty"`

	// Format: YYYYMMDD. Date the payment is due for the relationship.
	StmtPmtDueDate string `json:"stmtPmtDueDate,omitempty"`

	//  Max length = 17, Total amount past due for the relationship, which is the sum of the total past due of all consolidated subordinate accounts within the relationship.
	StmtTotPastDue string `json:"stmtTotPastDue,omitempty"`

	//  Max length = 17, Sum of the total payment amount due for all consolidated subordinate accounts in the relationship, including the current payment due and the total past due.
	StmtTotPmtDue string `json:"stmtTotPmtDue,omitempty"`

	//  Max length = 1, Code that determines the detail level at which statements will be produced. The values are: 0 = Produce a relationship statement with summary subordinate account statements (Default) 1 = Produce a relationship statement and detailed subordinate account statements.
	StmtType string `json:"stmtType,omitempty"`

	// sub acct data
	SubAcctData []*SubAcctDataForAccountsListByRelationship1 `json:"subAcctData"`

	//  Max length = 19, Starting account number: The next available account number tied to the relationship account.
	SvcStartAcctNbr string `json:"svcStartAcctNbr,omitempty"`

	//  Max length = 17, Total Credit Limit: The total of Credit Limit across all accounts in the relationship in monetary units.
	TotalCrLmt string `json:"totalCrLmt,omitempty"`

	//  Max length = 19, User Field 7
	UserFld7 string `json:"userFld7,omitempty"`

	//  Max length = 1, Flag that indicates the Visa products offered by the company for which external reporting is supported. The values are: 0 = Not used (Default) 1 = Visa corporate products only 2 = Visa purchasing products only 3 = Both Visa corporate and purchasing products.
	VisaFlag string `json:"visaFlag,omitempty"`
}

// Validate validates this accounts list by relationship response
func (m *AccountsListByRelationshipResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubAcctData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountsListByRelationshipResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountsListByRelationshipResponse) validateSubAcctData(formats strfmt.Registry) error {

	if swag.IsZero(m.SubAcctData) { // not required
		return nil
	}

	for i := 0; i < len(m.SubAcctData); i++ {
		if swag.IsZero(m.SubAcctData[i]) { // not required
			continue
		}

		if m.SubAcctData[i] != nil {
			if err := m.SubAcctData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subAcctData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountsListByRelationshipResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountsListByRelationshipResponse) UnmarshalBinary(b []byte) error {
	var res AccountsListByRelationshipResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerAccountCardAddResponse customer account card add response
//
// swagger:model CustomerAccountCardAddResponse
type CustomerAccountCardAddResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	AccountNumber string `json:"accountNumber,omitempty"`

	//  Max length = 3, Account Organization: Three digit Identification number of the organization.
	AccountOrganisation string `json:"accountOrganisation,omitempty"`

	//  Max length = 3, Account Foreign Organization: Three digit Identification number of the organization.
	AcctForeignOrg string `json:"acctForeignOrg,omitempty"`

	// Card Data Group. For Multi Scheme accounts, these are the embosser records added for the CARD LOGO fields provided.  For non-Multi-Scheme accounts, only one embosser is generated and one card number is returned.
	CardData []*CardDataForCustomerAccountCardAdd1 `json:"cardData"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Customer Foreign Organization: Three digit Identification number of the organization.
	CustomerForeignOrganisation string `json:"customerForeignOrganisation,omitempty"`

	//  Max length = 19, Customer number: Customer number that identifies the Customer Name/Address record to which this account is assigned.
	CustomerNumber string `json:"customerNumber,omitempty"`

	//  Max length = 3, Customer Organization: Three digit Identification number of the organization.
	CustomerOrganisation string `json:"customerOrganisation,omitempty"`

	//  Max length = 60, Customer email id: email id of the customer.
	EmailID string `json:"emailId,omitempty"`

	// Insurance Data Group; occurs 6 times.
	InsrData []*InsrDataForCustomerAccountCardAdd1 `json:"insrData"`

	//  Max length = 16, Instant Credit Number: number that is used to authorize transactions during the instant credit period, which is between account boarding and card activation.
	InstCrCardNbr string `json:"instCrCardNbr,omitempty"`

	//  Max length = 1, Instant Credit Flag: Indicates credit status of the account during the instant credit period.  Values are: 0 - Instant Credit not active 1  - Expire Temp Credit Limit  on Card Activation 2 or 3  - Temp Credit Limit Expired 4 - Temp Credit Limit Expired before card activation 9 Instant Credit Number Lost or Stolen
	InstantCreditFlag string `json:"instantCreditFlag,omitempty"`

	//  Max length = 3, Identification number of the Logo for the account
	Logo string `json:"logo,omitempty"`

	//  Max length = 20, Customer mobile phone: mobile number of the customer.
	MobilePhone string `json:"mobilePhone,omitempty"`

	//  Max length = 17, TEMP CRLIM
	TempCrlim string `json:"tempCrlim,omitempty"`

	// Format: YYYYMMDD. TEMP CRLIM EXP
	TempCrlimExp string `json:"tempCrlimExp,omitempty"`
}

// Validate validates this customer account card add response
func (m *CustomerAccountCardAddResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsrData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAccountCardAddResponse) validateCardData(formats strfmt.Registry) error {

	if swag.IsZero(m.CardData) { // not required
		return nil
	}

	for i := 0; i < len(m.CardData); i++ {
		if swag.IsZero(m.CardData[i]) { // not required
			continue
		}

		if m.CardData[i] != nil {
			if err := m.CardData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cardData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerAccountCardAddResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerAccountCardAddResponse) validateInsrData(formats strfmt.Registry) error {

	if swag.IsZero(m.InsrData) { // not required
		return nil
	}

	for i := 0; i < len(m.InsrData); i++ {
		if swag.IsZero(m.InsrData[i]) { // not required
			continue
		}

		if m.InsrData[i] != nil {
			if err := m.InsrData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("insrData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAccountCardAddResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAccountCardAddResponse) UnmarshalBinary(b []byte) error {
	var res CustomerAccountCardAddResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransactionInquiryResponse transaction inquiry response
//
// swagger:model TransactionInquiryResponse
type TransactionInquiryResponse struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrNod string `json:"currNod,omitempty"`

	//  Max length = 3, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 3, Number of transaction records.
	NumTxns string `json:"numTxns,omitempty"`

	// TRANSACTION DETAILS
	TransactionDetails []*TransactionDetailsForTransactionInquiry1 `json:"transactionDetails"`

	//  Max length = 1, Next transaction type associate with the page scroll and to be populated in the input token area for next page scroll. Values are: C - Current Statement L - Large Statement S - Small Statement
	TxnFileType string `json:"txnFileType,omitempty"`

	// Format: YYYYDDD. Next transaction start date associate with the page scroll and to be populated in the input token area for next page scroll.
	TxnStartDate string `json:"txnStartDate,omitempty"`

	//  Max length = 5, Next transaction sequence number associate with the page scroll and to be populated in the input token area for next page scroll.
	TxnStartNum string `json:"txnStartNum,omitempty"`
}

// Validate validates this transaction inquiry response
func (m *TransactionInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionInquiryResponse) validateTransactionDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.TransactionDetails); i++ {
		if swag.IsZero(m.TransactionDetails[i]) { // not required
			continue
		}

		if m.TransactionDetails[i] != nil {
			if err := m.TransactionDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactionDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionInquiryResponse) UnmarshalBinary(b []byte) error {
	var res TransactionInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnterpriseletterRequestRequest enterpriseletter request request
//
// swagger:model EnterpriseletterRequestRequest
type EnterpriseletterRequestRequest struct {

	//  Max length = 1, Charge Letter Fee Flag. Values are: Space = Charge fee as defined on the Letter Record (default) 0 = No fee.
	// Max Length: 1
	// Min Length: 0
	ChgLtrFee *string `json:"chgLtrFee,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Hold Flag: Flag indicating a letter should be held from/after printing  Space = Do not hold this letter unless specified at another record level, such as account or letter record (Default).  H = Print and hold this letter C = Do not print this Coupon Book request (send) D = Do not print this Coupon Book request (hold) T = Do not print this Special Letter request (hold) S = Do not print this Special Letter request (send) X = Payoff Letter mailing (system-generated only) 0-9 = User-defined.
	// Max Length: 1
	// Min Length: 0
	Hold *string `json:"hold,omitempty"`

	//  Max length = 11, ASM case number.
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiAsmCase *string `json:"kiAsmCase,omitempty"`

	//  Max length = 16, CDM Application Number, Required when application is CDM. Must be a valid CDM application present in the file.
	// Max Length: 16
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCdmAppl *string `json:"kiCdmAppl,omitempty"`

	//  Max length = 1, CDM Application Association: Required when application is CDM. Values are: A = Applicant C = Co-applicant G = Guarantor
	// Max Length: 1
	// Min Length: 0
	KiCdmAssoc *string `json:"kiCdmAssoc,omitempty"`

	//  Max length = 3, CDM Organization Number: Must be numeric and less than 999. CDM Org number must be on file. CDM Org is required when application is CDM
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCdmOrg *string `json:"kiCdmOrg,omitempty"`

	//  Max length = 1, CDM Select: Indicates that CDM files is used for the letter. A value X is required in one of the four 'select' fields per request. Also, only one of the four 'select' fields can be selected per request. Values are: X =Select CDM space = Do not select CDM. (Default)
	// Max Length: 1
	// Min Length: 0
	KiCdmSelect *string `json:"kiCdmSelect,omitempty"`

	//  Max length = 3, CDM Type Number. Must be numeric and less than 999. Type number must be on file. Type number is required when application is CDM.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCdmType *string `json:"kiCdmType,omitempty"`

	//  Max length = 19, CMS Account / Card Number. Required when application is CMS.Must be a valid CMS account present in the file.
	// Max Length: 19
	// Min Length: 0
	KiCmsAcct *string `json:"kiCmsAcct,omitempty"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card. 1. Must be numeric and greater than 0 if provided 2. Must be between 0 and 99 if smart card 3. If not provided, and not a smart card, default to value of 0001
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCmsCardSeq *string `json:"kiCmsCardSeq,omitempty"`

	//  Max length = 3, CMS Account Organization Number: If the letter request is for CMS/CTA/ASM and the Organization is not provided, the CMS Org lookup routine will determine the Organization from the account number.  Must be numeric and less than 999 Org number must be on file.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCmsOrg *string `json:"kiCmsOrg"`

	//  Max length = 2, Secured/Collateral Record Number. Required when account is Secured (AMBS-SEC = 1) or Collateral (AMBS-CLLTRL = 1-20). Valid only for CMS/CTA/ASM.  Values are: 0 = Secured account 1-20 = Collateral number.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiCmsSc *string `json:"kiCmsSc,omitempty"`

	//  Max length = 1, CMS Select: Indicates that CMS files is used for the letter. (CMS should be selected when letter is for CMS, ASM, or CTA). A value X is required in one of the four 'select' fields per request. Also, only one of the four 'select' fields can be selected per request.  Values are: X =Select CMS space = Do not select CMS (Default).
	// Max Length: 1
	// Min Length: 0
	KiCmsSelect *string `json:"kiCmsSelect,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	KiForeignUse *string `json:"kiForeignUse,omitempty"`

	//  Max length = 19, HCS Account Number.  Required when application is HCS.Must be a valid HCS account present in the file.
	// Max Length: 19
	// Min Length: 0
	KiHcsAcct *string `json:"kiHcsAcct,omitempty"`

	//  Max length = 2, HCS Level. Required when application is HCS.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiHcsLevel *string `json:"kiHcsLevel,omitempty"`

	//  Max length = 9, HCS Node. Required when application is HCS.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiHcsNode *string `json:"kiHcsNode,omitempty"`

	//  Max length = 3, HCS Organization Number. Required when Application is HCS.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiHcsOrg *string `json:"kiHcsOrg,omitempty"`

	//  Max length = 1, HCS Select: Indicates that HCS files is used for the letter. A value X is required in one of the four 'select' fields per request. Also only one of the four 'select' fields can be selected per request.  Values are: X =Select HCS space = Do not select HCS (Default).
	// Max Length: 1
	// Min Length: 0
	KiHcsSelect *string `json:"kiHcsSelect,omitempty"`

	//  Max length = 1, MBS Flag. Values are: S (Store) M (Merchant) Required if Application is MBS.
	// Max Length: 1
	// Min Length: 0
	KiMbsFlag *string `json:"kiMbsFlag,omitempty"`

	//  Max length = 9, MBS Merchant Store: Required when application is MBS. Must be a valid MBS merchant or store on file.
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiMbsKey *string `json:"kiMbsKey,omitempty"`

	//  Max length = 3, MBS Organization Number. Required when application is MBS.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	KiMbsOrg *string `json:"kiMbsOrg,omitempty"`

	//  Max length = 1, MBS Select: Indicates that MBS files is used for the letter.  A value X is required in one of the four 'select' fields per request. Also only one of the four 'select' fields can be selected per request. Values are: X =Select MBS space = Do not select MBS.
	// Max Length: 1
	// Min Length: 0
	KiMbsSelect *string `json:"kiMbsSelect,omitempty"`

	//  Max length = 3, Letter code of letter defined in LTS/ENTERPRISE. Letter code must be valid for the LETTER ORG provided.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	LtrCd *string `json:"ltrCd"`

	//  Max length = 1, Letter Destination: Value indicating the intended letter destination media (such as LTS Printer, local printer, or e-mail) of the letter text . Values are: Space= LTS Printer defined in PRINTER ID field of this message (Default) 1 = Printer external to LTS 2 = SMS (Short message server such as mobile phone message) 3 = E-mail 4 = Other media external to LTS  The service uses this field only when REQUEST TYPE = 2 (Both online and batch).
	// Max Length: 1
	// Min Length: 0
	LtrDest *string `json:"ltrDest,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Values are 001 - 998. Organization number must be on file.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	LtrOrg *string `json:"ltrOrg"`

	//  Max length = 5, Credit plan number. Values are 0-99998. Default is zeros.  If plan number is provided, the plan segment letter variables can be used.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNo *string `json:"planNo,omitempty"`

	//  Max length = 4, Printer ID: Identifier of printer defined to LTS.  Defaults to spaces. This field is used only when REQUEST TYPE = 0 (Online) or 2 (Both online and batch) and LETTER DESTINATION = Space. When LETTER DESTINATION = Spaces, this PRINTER ID must be defined on LTS Organization Record (LMOC-ONLINE-PRINTER) for the LETTER ORG provided. If a value is present in this field and the REQUEST TYPE = 1 (Batch only), the service will return an error message.
	// Max Length: 4
	// Min Length: 0
	PrinterID *string `json:"printerId,omitempty"`

	//  Max length = 3, Record Number: Plan Segment Sequence Number. Required if PLAN NUMBER is provided. Values are 00-99.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecNo *string `json:"recNo,omitempty"`

	//  Max length = 23, Plan Reference Number: Required if PLAN NUMBER is provided and the Credit Plan is for a front-loaded loan (AMPS-POSTING-IND = 1 or 2).
	// Max Length: 23
	// Min Length: 0
	RefNbr *string `json:"refNbr,omitempty"`

	//  Max length = 1, Letter Request Type: Indicates letter request action.  Values are:  0=Online only - Generate letter immediately and return to requestor in response message 1=Batch only - Generate letter in next batch 2=Both Online & Batch - Generate letter online and in next batch run; if LETTER DESTINATION field = Space and PRINTER ID field contains valid printer ID, then letter is also sent to CICS printer.  Always '1' for Enterprise Requests. There is no 'same day' option for Enterprise letters.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RequestType *string `json:"requestType"`

	//  Max length = 1, Letter Sort Code. If not provided, defaults to the sort code on the letter record (LTML01).
	// Max Length: 1
	// Min Length: 0
	Sort *string `json:"sort,omitempty"`

	//  Max length = 6, User defined variable.
	// Max Length: 6
	// Min Length: 0
	UserVar1 *string `json:"userVar1,omitempty"`

	//  Max length = 40, User defined variable.
	// Max Length: 40
	// Min Length: 0
	UserVar10 *string `json:"userVar10,omitempty"`

	//  Max length = 8, User defined variable.
	// Max Length: 8
	// Min Length: 0
	UserVar2 *string `json:"userVar2,omitempty"`

	//  Max length = 12, User defined variable.
	// Max Length: 12
	// Min Length: 0
	UserVar3 *string `json:"userVar3,omitempty"`

	//  Max length = 16, User defined variable.
	// Max Length: 16
	// Min Length: 0
	UserVar4 *string `json:"userVar4,omitempty"`

	//  Max length = 20, User defined variable.
	// Max Length: 20
	// Min Length: 0
	UserVar5 *string `json:"userVar5,omitempty"`

	//  Max length = 40, User defined variable.
	// Max Length: 40
	// Min Length: 0
	UserVar6 *string `json:"userVar6,omitempty"`

	//  Max length = 40, User defined variable.
	// Max Length: 40
	// Min Length: 0
	UserVar7 *string `json:"userVar7,omitempty"`

	//  Max length = 40, User defined variable.
	// Max Length: 40
	// Min Length: 0
	UserVar8 *string `json:"userVar8,omitempty"`

	//  Max length = 40, User defined variable.
	// Max Length: 40
	// Min Length: 0
	UserVar9 *string `json:"userVar9,omitempty"`
}

// Validate validates this enterpriseletter request request
func (m *EnterpriseletterRequestRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChgLtrFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiAsmCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmAppl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmAssoc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCdmType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsSc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiCmsSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiHcsSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKiMbsSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrDest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLtrOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrinterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVar9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnterpriseletterRequestRequest) validateChgLtrFee(formats strfmt.Registry) error {

	if swag.IsZero(m.ChgLtrFee) { // not required
		return nil
	}

	if err := validate.MinLength("chgLtrFee", "body", string(*m.ChgLtrFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("chgLtrFee", "body", string(*m.ChgLtrFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateHold(formats strfmt.Registry) error {

	if swag.IsZero(m.Hold) { // not required
		return nil
	}

	if err := validate.MinLength("hold", "body", string(*m.Hold), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("hold", "body", string(*m.Hold), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiAsmCase(formats strfmt.Registry) error {

	if swag.IsZero(m.KiAsmCase) { // not required
		return nil
	}

	if err := validate.MinLength("kiAsmCase", "body", string(*m.KiAsmCase), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiAsmCase", "body", string(*m.KiAsmCase), 11); err != nil {
		return err
	}

	if err := validate.Pattern("kiAsmCase", "body", string(*m.KiAsmCase), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCdmAppl(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmAppl) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmAppl", "body", string(*m.KiCdmAppl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmAppl", "body", string(*m.KiCdmAppl), 16); err != nil {
		return err
	}

	if err := validate.Pattern("kiCdmAppl", "body", string(*m.KiCdmAppl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCdmAssoc(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmAssoc) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmAssoc", "body", string(*m.KiCdmAssoc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmAssoc", "body", string(*m.KiCdmAssoc), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCdmOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmOrg", "body", string(*m.KiCdmOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmOrg", "body", string(*m.KiCdmOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiCdmOrg", "body", string(*m.KiCdmOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCdmSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmSelect", "body", string(*m.KiCdmSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmSelect", "body", string(*m.KiCdmSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCdmType(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCdmType) { // not required
		return nil
	}

	if err := validate.MinLength("kiCdmType", "body", string(*m.KiCdmType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCdmType", "body", string(*m.KiCdmType), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiCdmType", "body", string(*m.KiCdmType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCmsAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsAcct) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsAcct", "body", string(*m.KiCmsAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsAcct", "body", string(*m.KiCmsAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCmsCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsCardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsCardSeq", "body", string(*m.KiCmsCardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsCardSeq", "body", string(*m.KiCmsCardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("kiCmsCardSeq", "body", string(*m.KiCmsCardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCmsOrg(formats strfmt.Registry) error {

	if err := validate.Required("kiCmsOrg", "body", m.KiCmsOrg); err != nil {
		return err
	}

	if err := validate.MinLength("kiCmsOrg", "body", string(*m.KiCmsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsOrg", "body", string(*m.KiCmsOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiCmsOrg", "body", string(*m.KiCmsOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCmsSc(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsSc) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsSc", "body", string(*m.KiCmsSc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsSc", "body", string(*m.KiCmsSc), 2); err != nil {
		return err
	}

	if err := validate.Pattern("kiCmsSc", "body", string(*m.KiCmsSc), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiCmsSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiCmsSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiCmsSelect", "body", string(*m.KiCmsSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiCmsSelect", "body", string(*m.KiCmsSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.KiForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("kiForeignUse", "body", string(*m.KiForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiForeignUse", "body", string(*m.KiForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiHcsAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsAcct) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsAcct", "body", string(*m.KiHcsAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsAcct", "body", string(*m.KiHcsAcct), 19); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiHcsLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsLevel) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsLevel", "body", string(*m.KiHcsLevel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsLevel", "body", string(*m.KiHcsLevel), 2); err != nil {
		return err
	}

	if err := validate.Pattern("kiHcsLevel", "body", string(*m.KiHcsLevel), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiHcsNode(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsNode) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsNode", "body", string(*m.KiHcsNode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsNode", "body", string(*m.KiHcsNode), 9); err != nil {
		return err
	}

	if err := validate.Pattern("kiHcsNode", "body", string(*m.KiHcsNode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiHcsOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsOrg", "body", string(*m.KiHcsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsOrg", "body", string(*m.KiHcsOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiHcsOrg", "body", string(*m.KiHcsOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiHcsSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiHcsSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiHcsSelect", "body", string(*m.KiHcsSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiHcsSelect", "body", string(*m.KiHcsSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiMbsFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsFlag) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsFlag", "body", string(*m.KiMbsFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsFlag", "body", string(*m.KiMbsFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiMbsKey(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsKey) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsKey", "body", string(*m.KiMbsKey), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsKey", "body", string(*m.KiMbsKey), 9); err != nil {
		return err
	}

	if err := validate.Pattern("kiMbsKey", "body", string(*m.KiMbsKey), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiMbsOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsOrg) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsOrg", "body", string(*m.KiMbsOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsOrg", "body", string(*m.KiMbsOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("kiMbsOrg", "body", string(*m.KiMbsOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateKiMbsSelect(formats strfmt.Registry) error {

	if swag.IsZero(m.KiMbsSelect) { // not required
		return nil
	}

	if err := validate.MinLength("kiMbsSelect", "body", string(*m.KiMbsSelect), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("kiMbsSelect", "body", string(*m.KiMbsSelect), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateLtrCd(formats strfmt.Registry) error {

	if err := validate.Required("ltrCd", "body", m.LtrCd); err != nil {
		return err
	}

	if err := validate.MinLength("ltrCd", "body", string(*m.LtrCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrCd", "body", string(*m.LtrCd), 3); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateLtrDest(formats strfmt.Registry) error {

	if swag.IsZero(m.LtrDest) { // not required
		return nil
	}

	if err := validate.MinLength("ltrDest", "body", string(*m.LtrDest), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrDest", "body", string(*m.LtrDest), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateLtrOrg(formats strfmt.Registry) error {

	if err := validate.Required("ltrOrg", "body", m.LtrOrg); err != nil {
		return err
	}

	if err := validate.MinLength("ltrOrg", "body", string(*m.LtrOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ltrOrg", "body", string(*m.LtrOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("ltrOrg", "body", string(*m.LtrOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validatePlanNo(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanNo) { // not required
		return nil
	}

	if err := validate.MinLength("planNo", "body", string(*m.PlanNo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNo", "body", string(*m.PlanNo), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNo", "body", string(*m.PlanNo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validatePrinterID(formats strfmt.Registry) error {

	if swag.IsZero(m.PrinterID) { // not required
		return nil
	}

	if err := validate.MinLength("printerId", "body", string(*m.PrinterID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("printerId", "body", string(*m.PrinterID), 4); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateRecNo(formats strfmt.Registry) error {

	if swag.IsZero(m.RecNo) { // not required
		return nil
	}

	if err := validate.MinLength("recNo", "body", string(*m.RecNo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recNo", "body", string(*m.RecNo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("recNo", "body", string(*m.RecNo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateRefNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.RefNbr) { // not required
		return nil
	}

	if err := validate.MinLength("refNbr", "body", string(*m.RefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("refNbr", "body", string(*m.RefNbr), 23); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateRequestType(formats strfmt.Registry) error {

	if err := validate.Required("requestType", "body", m.RequestType); err != nil {
		return err
	}

	if err := validate.MinLength("requestType", "body", string(*m.RequestType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("requestType", "body", string(*m.RequestType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("requestType", "body", string(*m.RequestType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateSort(formats strfmt.Registry) error {

	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if err := validate.MinLength("sort", "body", string(*m.Sort), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sort", "body", string(*m.Sort), 1); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar1) { // not required
		return nil
	}

	if err := validate.MinLength("userVar1", "body", string(*m.UserVar1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar1", "body", string(*m.UserVar1), 6); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar10(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar10) { // not required
		return nil
	}

	if err := validate.MinLength("userVar10", "body", string(*m.UserVar10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar10", "body", string(*m.UserVar10), 40); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar2) { // not required
		return nil
	}

	if err := validate.MinLength("userVar2", "body", string(*m.UserVar2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar2", "body", string(*m.UserVar2), 8); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar3) { // not required
		return nil
	}

	if err := validate.MinLength("userVar3", "body", string(*m.UserVar3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar3", "body", string(*m.UserVar3), 12); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar4) { // not required
		return nil
	}

	if err := validate.MinLength("userVar4", "body", string(*m.UserVar4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar4", "body", string(*m.UserVar4), 16); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar5(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar5) { // not required
		return nil
	}

	if err := validate.MinLength("userVar5", "body", string(*m.UserVar5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar5", "body", string(*m.UserVar5), 20); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar6(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar6) { // not required
		return nil
	}

	if err := validate.MinLength("userVar6", "body", string(*m.UserVar6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar6", "body", string(*m.UserVar6), 40); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar7(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar7) { // not required
		return nil
	}

	if err := validate.MinLength("userVar7", "body", string(*m.UserVar7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar7", "body", string(*m.UserVar7), 40); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar8(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar8) { // not required
		return nil
	}

	if err := validate.MinLength("userVar8", "body", string(*m.UserVar8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar8", "body", string(*m.UserVar8), 40); err != nil {
		return err
	}

	return nil
}

func (m *EnterpriseletterRequestRequest) validateUserVar9(formats strfmt.Registry) error {

	if swag.IsZero(m.UserVar9) { // not required
		return nil
	}

	if err := validate.MinLength("userVar9", "body", string(*m.UserVar9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userVar9", "body", string(*m.UserVar9), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnterpriseletterRequestRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnterpriseletterRequestRequest) UnmarshalBinary(b []byte) error {
	var res EnterpriseletterRequestRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

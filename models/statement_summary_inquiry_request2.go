// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatementSummaryInquiryRequest2 statement summary inquiry request2
//
// swagger:model StatementSummaryInquiryRequest2
type StatementSummaryInquiryRequest2 struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, DUAL IND
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	//  Max length = 3, ORG
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Org *string `json:"org,omitempty"`

	//  Max length = 8, STMT DT
	// Max Length: 8
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtDt *string `json:"stmtDt,omitempty"`

	//  Max length = 2, STMT NBR MTHS
	// Max Length: 2
	// Min Length: 0
	StmtNbrMths *string `json:"stmtNbrMths,omitempty"`

	//  Max length = 1, SVC TYP
	// Max Length: 1
	// Min Length: 0
	SvcTyp *string `json:"svcTyp,omitempty"`

	//  Max length = 1, TXN SUPP FLG
	// Max Length: 1
	// Min Length: 0
	TxnSuppFlg *string `json:"txnSuppFlg,omitempty"`
}

// Validate validates this statement summary inquiry request2
func (m *StatementSummaryInquiryRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtDt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNbrMths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcTyp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnSuppFlg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatementSummaryInquiryRequest2) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if err := validate.MinLength("org", "body", string(*m.Org), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("org", "body", string(*m.Org), 3); err != nil {
		return err
	}

	if err := validate.Pattern("org", "body", string(*m.Org), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateStmtDt(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtDt) { // not required
		return nil
	}

	if err := validate.MinLength("stmtDt", "body", string(*m.StmtDt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtDt", "body", string(*m.StmtDt), 8); err != nil {
		return err
	}

	if err := validate.Pattern("stmtDt", "body", string(*m.StmtDt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateStmtNbrMths(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNbrMths) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNbrMths", "body", string(*m.StmtNbrMths), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNbrMths", "body", string(*m.StmtNbrMths), 2); err != nil {
		return err
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateSvcTyp(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcTyp) { // not required
		return nil
	}

	if err := validate.MinLength("svcTyp", "body", string(*m.SvcTyp), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcTyp", "body", string(*m.SvcTyp), 1); err != nil {
		return err
	}

	return nil
}

func (m *StatementSummaryInquiryRequest2) validateTxnSuppFlg(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnSuppFlg) { // not required
		return nil
	}

	if err := validate.MinLength("txnSuppFlg", "body", string(*m.TxnSuppFlg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnSuppFlg", "body", string(*m.TxnSuppFlg), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatementSummaryInquiryRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatementSummaryInquiryRequest2) UnmarshalBinary(b []byte) error {
	var res StatementSummaryInquiryRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BookOfferRequest book offer request
//
// swagger:model BookOfferRequest
type BookOfferRequest struct {

	//  Max length = 6, Authorization Code which was passed in the Auth Notify message.
	// Required: true
	// Max Length: 6
	// Min Length: 0
	AuthCode *string `json:"authCode"`

	//  Max length = 19, Account Number or Card Number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, EPP Plan number which was passed in the Auth Notify message.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EppPlanNbr *string `json:"eppPlanNbr"`

	//  Max length = 20, Customer mobile number.
	// Max Length: 20
	// Min Length: 0
	OfferResponseMobile *string `json:"offerResponseMobile,omitempty"`

	//  Max length = 13, Transaction Amount.
	// Required: true
	// Max Length: 13
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnAmt *string `json:"txnAmt"`

	// Format: YYYYMMDD. Transaction Date in CCYYMMDD format
	// Required: true
	TxnDate *string `json:"txnDate"`

	//  Max length = 6, Transaction Time in HHMMSS format.
	// Required: true
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnTime *string `json:"txnTime"`

	//  Max length = 12, Visa Transaction Id which was passed in the Auth Notify message
	// Required: true
	// Max Length: 12
	// Min Length: 0
	// Pattern: ^[0-9]*$
	VisaTxnID *string `json:"visaTxnId"`
}

// Validate validates this book offer request
func (m *BookOfferRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEppPlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferResponseMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisaTxnID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BookOfferRequest) validateAuthCode(formats strfmt.Registry) error {

	if err := validate.Required("authCode", "body", m.AuthCode); err != nil {
		return err
	}

	if err := validate.MinLength("authCode", "body", string(*m.AuthCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authCode", "body", string(*m.AuthCode), 6); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *BookOfferRequest) validateEppPlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("eppPlanNbr", "body", m.EppPlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("eppPlanNbr", "body", string(*m.EppPlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("eppPlanNbr", "body", string(*m.EppPlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("eppPlanNbr", "body", string(*m.EppPlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateOfferResponseMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.OfferResponseMobile) { // not required
		return nil
	}

	if err := validate.MinLength("offerResponseMobile", "body", string(*m.OfferResponseMobile), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("offerResponseMobile", "body", string(*m.OfferResponseMobile), 20); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateTxnAmt(formats strfmt.Registry) error {

	if err := validate.Required("txnAmt", "body", m.TxnAmt); err != nil {
		return err
	}

	if err := validate.MinLength("txnAmt", "body", string(*m.TxnAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnAmt", "body", string(*m.TxnAmt), 13); err != nil {
		return err
	}

	if err := validate.Pattern("txnAmt", "body", string(*m.TxnAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateTxnDate(formats strfmt.Registry) error {

	if err := validate.Required("txnDate", "body", m.TxnDate); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateTxnTime(formats strfmt.Registry) error {

	if err := validate.Required("txnTime", "body", m.TxnTime); err != nil {
		return err
	}

	if err := validate.MinLength("txnTime", "body", string(*m.TxnTime), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnTime", "body", string(*m.TxnTime), 6); err != nil {
		return err
	}

	if err := validate.Pattern("txnTime", "body", string(*m.TxnTime), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *BookOfferRequest) validateVisaTxnID(formats strfmt.Registry) error {

	if err := validate.Required("visaTxnId", "body", m.VisaTxnID); err != nil {
		return err
	}

	if err := validate.MinLength("visaTxnId", "body", string(*m.VisaTxnID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("visaTxnId", "body", string(*m.VisaTxnID), 12); err != nil {
		return err
	}

	if err := validate.Pattern("visaTxnId", "body", string(*m.VisaTxnID), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BookOfferRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BookOfferRequest) UnmarshalBinary(b []byte) error {
	var res BookOfferRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

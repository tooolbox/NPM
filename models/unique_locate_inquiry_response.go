// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UniqueLocateInquiryResponse unique locate inquiry response
//
// swagger:model UniqueLocateInquiryResponse
type UniqueLocateInquiryResponse struct {

	// 50 occurrences of 288 bytes each.
	AcctRelationData []*AcctRelationDataForUniqueLocateInquiry1 `json:"acctRelationData"`

	//  Max length = 2, Number of customer and account cross reference records.
	AcctRelationNbrOccur string `json:"acctRelationNbrOccur,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Unique ID: Number that identifies a customer uniquely.
	UniqID string `json:"uniqId,omitempty"`
}

// Validate validates this unique locate inquiry response
func (m *UniqueLocateInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctRelationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniqueLocateInquiryResponse) validateAcctRelationData(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctRelationData) { // not required
		return nil
	}

	for i := 0; i < len(m.AcctRelationData); i++ {
		if swag.IsZero(m.AcctRelationData[i]) { // not required
			continue
		}

		if m.AcctRelationData[i] != nil {
			if err := m.AcctRelationData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acctRelationData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniqueLocateInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniqueLocateInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniqueLocateInquiryResponse) UnmarshalBinary(b []byte) error {
	var res UniqueLocateInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

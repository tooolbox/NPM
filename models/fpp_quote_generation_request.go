// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FppQuoteGenerationRequest fpp quote generation request
//
// swagger:model FppQuoteGenerationRequest
type FppQuoteGenerationRequest struct {

	//  Max length = 19, Account Number:. Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, FPP EMI Amount
	// Pattern: ^(-)?[0-9]{1,17}$
	EmiAmount string `json:"emiAmount,omitempty"`

	//  Max length = 5, The FPP Plan number to move the Initial Balance Amount to.  The plan number input must be a valid Credit Plan Number, and must be set as Active for FPP Processing.  If field is not provided then default FPP plan on account control table is picked for processing.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	FppPlan *string `json:"fppPlan,omitempty"`

	//  Max length = 17, Initial amount. The total amount to move to the FPP plan.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	InitAmt *string `json:"initAmt"`

	//  Max length = 3, Term. The Original Term for the FPP Plan. When a value of spaces is provifded, it will default this field from Credit Plan Master.  Must be a numeric value and Must be > 0
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	OrigTerm *string `json:"origTerm,omitempty"`
}

// Validate validates this fpp quote generation request
func (m *FppQuoteGenerationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmiAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFppPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FppQuoteGenerationRequest) validateAcct(formats strfmt.Registry) error {

	if err := validate.Required("acct", "body", m.Acct); err != nil {
		return err
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *FppQuoteGenerationRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *FppQuoteGenerationRequest) validateEmiAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.EmiAmount) { // not required
		return nil
	}

	if err := validate.Pattern("emiAmount", "body", string(m.EmiAmount), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *FppQuoteGenerationRequest) validateFppPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.FppPlan) { // not required
		return nil
	}

	if err := validate.MinLength("fppPlan", "body", string(*m.FppPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fppPlan", "body", string(*m.FppPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("fppPlan", "body", string(*m.FppPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FppQuoteGenerationRequest) validateInitAmt(formats strfmt.Registry) error {

	if err := validate.Required("initAmt", "body", m.InitAmt); err != nil {
		return err
	}

	if err := validate.Pattern("initAmt", "body", string(*m.InitAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *FppQuoteGenerationRequest) validateOrigTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.OrigTerm) { // not required
		return nil
	}

	if err := validate.MinLength("origTerm", "body", string(*m.OrigTerm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("origTerm", "body", string(*m.OrigTerm), 3); err != nil {
		return err
	}

	if err := validate.Pattern("origTerm", "body", string(*m.OrigTerm), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FppQuoteGenerationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FppQuoteGenerationRequest) UnmarshalBinary(b []byte) error {
	var res FppQuoteGenerationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

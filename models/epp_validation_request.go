// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EppValidationRequest epp validation request
//
// swagger:model EppValidationRequest
type EppValidationRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	//  Max length = 27, Keys for scrolling logic. Value to be populated from the previous service response. In the previous service response this value would have been populated by the service with the last data key and this can be used to scroll for next or previous page.
	// Max Length: 27
	// Min Length: 0
	AmosAmxtKey *string `json:"amosAmxtKey,omitempty"`

	//  Max length = 22, Organization Number: Three digit Identification number of the organization.  Valid values are 001-998. Organization number must be on file. Required when Account Number not provided.
	// Max Length: 22
	// Min Length: 0
	AmssAmslOrgAcct *string `json:"amssAmslOrgAcct,omitempty"`

	//  Max length = 4, Record Number. Greater than spaces for TXN EPP and spaces for Plan EPP Must be signed numeric
	// Pattern: ^(-)?[0-9]{1,4}$
	AmssAmslRecNbr string `json:"amssAmslRecNbr,omitempty"`

	//  Max length = 1, Record Type. Greater than spaces for TXN EPP and spaces for Plan EPP Must be numeric
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AmssAmslRecType *string `json:"amssAmslRecType,omitempty"`

	//  Max length = 7, Keys for scrolling logic. Value to be populated from the previous service response. In the previous service response this value would have been populated by the service with last data key this can be used to scroll for next or previous page.
	// Pattern: ^(-)?[0-9]{1,7}$
	AmssAmslStmtIDCode string `json:"amssAmslStmtIdCode,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card. Greater than zeroes for TXN EPP and zeroes for Plan EPP
	// Required: true
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, EPP Plan Number
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EppPlanNbr *string `json:"eppPlanNbr"`

	//  Max length = 7, Interest Rate: Last interest rate used for this particular credit plan.
	// Required: true
	// Max Length: 7
	// Min Length: 0
	// Pattern: ^[0-9]*$
	IntRate *string `json:"intRate"`

	//  Max length = 6, Authorisation code. Greater than spaces for TXN EPP and spaces for Plan EPP Must be alphanumeric
	// Max Length: 6
	// Min Length: 0
	MtAuthCode *string `json:"mtAuthCode,omitempty"`

	//  Max length = 40, Plan Description. Greater than spaces for TXN EPP and spaces for Plan EPP Must be alphanumeric
	// Max Length: 40
	// Min Length: 0
	MtDesc *string `json:"mtDesc,omitempty"`

	// Format: YYYYMMDD. Effective Date. Greater than zeroes for TXN EPP and zeroes for Plan EPP Must be numeric
	MtEffDate string `json:"mtEffDate,omitempty"`

	//  Max length = 1, EPP Conversion Indicator. Greater than spaces for TXN EPP and spaces for Plan EPP Must be alphanumeric
	// Max Length: 1
	// Min Length: 0
	MtEppConvInd *string `json:"mtEppConvInd,omitempty"`

	//  Max length = 3, Logic Module. Greater than zeroes for TXN EPP and zeroes for Plan EPP  Must be 01 or 43 or 601
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtLogicMod *string `json:"mtLogicMod,omitempty"`

	//  Max length = 4, Merchart Organization.
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtMerchantOrg *string `json:"mtMerchantOrg,omitempty"`

	//  Max length = 9, Merchant store Number. Greater than zeroes for TXN EPP and zeroes for Plan EPP  Must be numeric
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtMerchantStore *string `json:"mtMerchantStore,omitempty"`

	//  Max length = 5, Plan Number. Greater than spaces for TXN EPP and spaces for Plan EPP Must be numeric
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtPlan *string `json:"mtPlan,omitempty"`

	// Format: YYYYMMDD. Posting Date. Greater than zeroes for TXN EPP and zeroes for Plan EPP Must be numeric
	MtPostingDate string `json:"mtPostingDate,omitempty"`

	//  Max length = 23, Reference Number. Greater than spaces for TXN EPP and spaces for Plan EPP Must be alphanumeric
	// Max Length: 23
	// Min Length: 0
	MtRefNbr *string `json:"mtRefNbr,omitempty"`

	//  Max length = 9, Store number from the transaction record. Greater than zeroes for TXN EPP and zeroes for Plan EPP Must be numeric
	// Max Length: 9
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtSiNbr *string `json:"mtSiNbr,omitempty"`

	//  Max length = 5, Transaction Code. Greater than zeroes for TXN EPP and zeroes for Plan EPP Must be numeric
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MtTxnCode *string `json:"mtTxnCode,omitempty"`

	//  Max length = 5, Plan number: Identifies the number of the Credit Plan Master record associated with the Credit Plan Segment record.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNbr *string `json:"planNbr"`

	//  Max length = 3, Term of the loan plan.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Term *string `json:"term"`

	//  Max length = 17, Transaction amount can be entered inunits and subunits(without the commas and decimal places.  Decimal places are dependent on what value is set for the number of decimals on the Org record).  Example: if an account has available credit of EUR52.50 and the system's NOD set at 2, this field is entered as 00000000000005250.
	// Required: true
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	TxnAmt *string `json:"txnAmt"`
}

// Validate validates this epp validation request
func (m *EppValidationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmosAmxtKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslOrgAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslRecNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslRecType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmssAmslStmtIDCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEppPlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtAuthCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtEppConvInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtLogicMod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtMerchantOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtMerchantStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtRefNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtSiNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtTxnCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnAmt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EppValidationRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateAmosAmxtKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AmosAmxtKey) { // not required
		return nil
	}

	if err := validate.MinLength("amosAmxtKey", "body", string(*m.AmosAmxtKey), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amosAmxtKey", "body", string(*m.AmosAmxtKey), 27); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateAmssAmslOrgAcct(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslOrgAcct) { // not required
		return nil
	}

	if err := validate.MinLength("amssAmslOrgAcct", "body", string(*m.AmssAmslOrgAcct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amssAmslOrgAcct", "body", string(*m.AmssAmslOrgAcct), 22); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateAmssAmslRecNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslRecNbr) { // not required
		return nil
	}

	if err := validate.Pattern("amssAmslRecNbr", "body", string(m.AmssAmslRecNbr), `^(-)?[0-9]{1,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateAmssAmslRecType(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslRecType) { // not required
		return nil
	}

	if err := validate.MinLength("amssAmslRecType", "body", string(*m.AmssAmslRecType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("amssAmslRecType", "body", string(*m.AmssAmslRecType), 1); err != nil {
		return err
	}

	if err := validate.Pattern("amssAmslRecType", "body", string(*m.AmssAmslRecType), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateAmssAmslStmtIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AmssAmslStmtIDCode) { // not required
		return nil
	}

	if err := validate.Pattern("amssAmslStmtIdCode", "body", string(m.AmssAmslStmtIDCode), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateCardSeq(formats strfmt.Registry) error {

	if err := validate.Required("cardSeq", "body", m.CardSeq); err != nil {
		return err
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *EppValidationRequest) validateEppPlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("eppPlanNbr", "body", m.EppPlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("eppPlanNbr", "body", string(*m.EppPlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("eppPlanNbr", "body", string(*m.EppPlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("eppPlanNbr", "body", string(*m.EppPlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateIntRate(formats strfmt.Registry) error {

	if err := validate.Required("intRate", "body", m.IntRate); err != nil {
		return err
	}

	if err := validate.MinLength("intRate", "body", string(*m.IntRate), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("intRate", "body", string(*m.IntRate), 7); err != nil {
		return err
	}

	if err := validate.Pattern("intRate", "body", string(*m.IntRate), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtAuthCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MtAuthCode) { // not required
		return nil
	}

	if err := validate.MinLength("mtAuthCode", "body", string(*m.MtAuthCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtAuthCode", "body", string(*m.MtAuthCode), 6); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtDesc(formats strfmt.Registry) error {

	if swag.IsZero(m.MtDesc) { // not required
		return nil
	}

	if err := validate.MinLength("mtDesc", "body", string(*m.MtDesc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtDesc", "body", string(*m.MtDesc), 40); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtEppConvInd(formats strfmt.Registry) error {

	if swag.IsZero(m.MtEppConvInd) { // not required
		return nil
	}

	if err := validate.MinLength("mtEppConvInd", "body", string(*m.MtEppConvInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtEppConvInd", "body", string(*m.MtEppConvInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtLogicMod(formats strfmt.Registry) error {

	if swag.IsZero(m.MtLogicMod) { // not required
		return nil
	}

	if err := validate.MinLength("mtLogicMod", "body", string(*m.MtLogicMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtLogicMod", "body", string(*m.MtLogicMod), 3); err != nil {
		return err
	}

	if err := validate.Pattern("mtLogicMod", "body", string(*m.MtLogicMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtMerchantOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.MtMerchantOrg) { // not required
		return nil
	}

	if err := validate.MinLength("mtMerchantOrg", "body", string(*m.MtMerchantOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtMerchantOrg", "body", string(*m.MtMerchantOrg), 4); err != nil {
		return err
	}

	if err := validate.Pattern("mtMerchantOrg", "body", string(*m.MtMerchantOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtMerchantStore(formats strfmt.Registry) error {

	if swag.IsZero(m.MtMerchantStore) { // not required
		return nil
	}

	if err := validate.MinLength("mtMerchantStore", "body", string(*m.MtMerchantStore), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtMerchantStore", "body", string(*m.MtMerchantStore), 9); err != nil {
		return err
	}

	if err := validate.Pattern("mtMerchantStore", "body", string(*m.MtMerchantStore), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.MtPlan) { // not required
		return nil
	}

	if err := validate.MinLength("mtPlan", "body", string(*m.MtPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtPlan", "body", string(*m.MtPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("mtPlan", "body", string(*m.MtPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtRefNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MtRefNbr) { // not required
		return nil
	}

	if err := validate.MinLength("mtRefNbr", "body", string(*m.MtRefNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtRefNbr", "body", string(*m.MtRefNbr), 23); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtSiNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.MtSiNbr) { // not required
		return nil
	}

	if err := validate.MinLength("mtSiNbr", "body", string(*m.MtSiNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtSiNbr", "body", string(*m.MtSiNbr), 9); err != nil {
		return err
	}

	if err := validate.Pattern("mtSiNbr", "body", string(*m.MtSiNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateMtTxnCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MtTxnCode) { // not required
		return nil
	}

	if err := validate.MinLength("mtTxnCode", "body", string(*m.MtTxnCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtTxnCode", "body", string(*m.MtTxnCode), 5); err != nil {
		return err
	}

	if err := validate.Pattern("mtTxnCode", "body", string(*m.MtTxnCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validatePlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("planNbr", "body", m.PlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("planNbr", "body", string(*m.PlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNbr", "body", string(*m.PlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNbr", "body", string(*m.PlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateTerm(formats strfmt.Registry) error {

	if err := validate.Required("term", "body", m.Term); err != nil {
		return err
	}

	if err := validate.MinLength("term", "body", string(*m.Term), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("term", "body", string(*m.Term), 3); err != nil {
		return err
	}

	if err := validate.Pattern("term", "body", string(*m.Term), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EppValidationRequest) validateTxnAmt(formats strfmt.Registry) error {

	if err := validate.Required("txnAmt", "body", m.TxnAmt); err != nil {
		return err
	}

	if err := validate.MinLength("txnAmt", "body", string(*m.TxnAmt), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("txnAmt", "body", string(*m.TxnAmt), 17); err != nil {
		return err
	}

	if err := validate.Pattern("txnAmt", "body", string(*m.TxnAmt), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EppValidationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EppValidationRequest) UnmarshalBinary(b []byte) error {
	var res EppValidationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

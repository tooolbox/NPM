// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardBlockCodeUpdateRequest card block code update request
//
// swagger:model CardBlockCodeUpdateRequest
type CardBlockCodeUpdateRequest struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.  Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	//  Max length = 1, Block Codes stored at account/card level and it controls the specific processing options. Valid block codes are letters A to Z and blank.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	BlockCode *string `json:"blockCode"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr,omitempty"`

	//  Max length = 4, Card Sequence: Identification number assigned to an Embosser record to distinguish between multiple cards issued with the same card number
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CardSeq *string `json:"cardSeq,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, Reason code for the Embosser block code
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RsnBlockCode *string `json:"rsnBlockCode,omitempty"`

	//  Max length = 2, Reason code for the base segment block code 1
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RsnBlockCode1 *string `json:"rsnBlockCode1,omitempty"`

	//  Max length = 2, Reason code for the base segment block code 2
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RsnBlockCode2 *string `json:"rsnBlockCode2,omitempty"`

	//  Max length = 1, Block code service function to be performed.  Valid Values:  I - Inquire U - Update
	// Required: true
	// Max Length: 1
	// Min Length: 0
	SvcFuncCode *string `json:"svcFuncCode"`

	//  Max length = 40, User provided data
	// Max Length: 40
	// Min Length: 0
	UserData *string `json:"userData,omitempty"`
}

// Validate validates this card block code update request
func (m *CardBlockCodeUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsnBlockCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsnBlockCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRsnBlockCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardBlockCodeUpdateRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateBlockCode(formats strfmt.Registry) error {

	if err := validate.Required("blockCode", "body", m.BlockCode); err != nil {
		return err
	}

	if err := validate.MinLength("blockCode", "body", string(*m.BlockCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("blockCode", "body", string(*m.BlockCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.CardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.CardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("cardSeq", "body", string(*m.CardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardSeq", "body", string(*m.CardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("cardSeq", "body", string(*m.CardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateRsnBlockCode(formats strfmt.Registry) error {

	if swag.IsZero(m.RsnBlockCode) { // not required
		return nil
	}

	if err := validate.MinLength("rsnBlockCode", "body", string(*m.RsnBlockCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rsnBlockCode", "body", string(*m.RsnBlockCode), 2); err != nil {
		return err
	}

	if err := validate.Pattern("rsnBlockCode", "body", string(*m.RsnBlockCode), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateRsnBlockCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.RsnBlockCode1) { // not required
		return nil
	}

	if err := validate.MinLength("rsnBlockCode1", "body", string(*m.RsnBlockCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rsnBlockCode1", "body", string(*m.RsnBlockCode1), 2); err != nil {
		return err
	}

	if err := validate.Pattern("rsnBlockCode1", "body", string(*m.RsnBlockCode1), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateRsnBlockCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.RsnBlockCode2) { // not required
		return nil
	}

	if err := validate.MinLength("rsnBlockCode2", "body", string(*m.RsnBlockCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("rsnBlockCode2", "body", string(*m.RsnBlockCode2), 2); err != nil {
		return err
	}

	if err := validate.Pattern("rsnBlockCode2", "body", string(*m.RsnBlockCode2), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateSvcFuncCode(formats strfmt.Registry) error {

	if err := validate.Required("svcFuncCode", "body", m.SvcFuncCode); err != nil {
		return err
	}

	if err := validate.MinLength("svcFuncCode", "body", string(*m.SvcFuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCode", "body", string(*m.SvcFuncCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardBlockCodeUpdateRequest) validateUserData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if err := validate.MinLength("userData", "body", string(*m.UserData), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userData", "body", string(*m.UserData), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardBlockCodeUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardBlockCodeUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CardBlockCodeUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

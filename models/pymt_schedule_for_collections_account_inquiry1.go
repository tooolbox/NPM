// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PymtScheduleForCollectionsAccountInquiry1 pymt schedule for collections account inquiry1
//
// swagger:model PymtScheduleForCollectionsAccountInquiry1
type PymtScheduleForCollectionsAccountInquiry1 struct {

	//  Max length = 17, Payment Amount : Amount of the next payment
	PsAmt string `json:"psAmt,omitempty"`

	// Format: YYYYMMDD. Date on which the next payment is due.
	PsDt string `json:"psDt,omitempty"`

	//  Max length = 1, Code that reflects how often the customer will make payments. A collector can use only the options turned on in the Collector record. The values are: S = Single payment W = Weekly payment B = Biweekly payment (every other week) M = Monthly payment Q = Quarterly payment (every three months).
	PsFreq string `json:"psFreq,omitempty"`

	//  Max length = 1, Status of the arrangement.  The values are: A = Active arrangement currently in effect B = Arrangement has been broken P = Inactive arrangement, account is paid Space = No arrangement entered.
	PsStatus string `json:"psStatus,omitempty"`

	//  Max length = 2, Payment Term: Code that indicates how many payments the customer is to make. The values are 00-99 (99 = permanent terms).
	PsTerm string `json:"psTerm,omitempty"`
}

// Validate validates this pymt schedule for collections account inquiry1
func (m *PymtScheduleForCollectionsAccountInquiry1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PymtScheduleForCollectionsAccountInquiry1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PymtScheduleForCollectionsAccountInquiry1) UnmarshalBinary(b []byte) error {
	var res PymtScheduleForCollectionsAccountInquiry1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

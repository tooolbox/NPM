// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettlementQuoteInquiryRequest settlement quote inquiry request
//
// swagger:model SettlementQuoteInquiryRequest
type SettlementQuoteInquiryRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 5, Credit Plan Number: Identifies the plan number of the Credit Plan Master record associated with the Credit Plan Segment record.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Plan *string `json:"plan"`

	//  Max length = 2, Number of plans present for that particular account. Maximum allowed value is 99.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNbrOccurs *string `json:"planNbrOccurs,omitempty"`

	//  Max length = 3, Credit Plan Data Record Number: Sequence number of Credit Plan. This field value may be changed by CMS during the daily batch process if a plan segment is purged. The system will re-sequence all the plan segments on file for the account.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanSeq *string `json:"planSeq,omitempty"`

	//  Max length = 1, Request Level Flag: Request can be at account level or plan level.    This flag value can be set 'A' to get a settlement quote at account level. When the plan details are entered and the validation of it are successful then the service will generate a settlement quote for that plan, but if this field value is set to 'A' then the account level quote will be generated.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	RequestLevelFlag *string `json:"requestLevelFlag"`

	//  Max length = 1, Service Function Code. Values are: 'P' - Service Function Previous 'N' - Service Function Next Space - Service Function None
	// Max Length: 1
	// Min Length: 0
	SvcFuncCd *string `json:"svcFuncCd,omitempty"`

	//  Max length = 3, Scroll key. Start sequence number.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcStartSeqNbr *string `json:"svcStartSeqNbr,omitempty"`
}

// Validate validates this settlement quote inquiry request
func (m *SettlementQuoteInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNbrOccurs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanSeq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestLevelFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartSeqNbr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettlementQuoteInquiryRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("plan", "body", m.Plan); err != nil {
		return err
	}

	if err := validate.MinLength("plan", "body", string(*m.Plan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("plan", "body", string(*m.Plan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("plan", "body", string(*m.Plan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validatePlanNbrOccurs(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanNbrOccurs) { // not required
		return nil
	}

	if err := validate.MinLength("planNbrOccurs", "body", string(*m.PlanNbrOccurs), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNbrOccurs", "body", string(*m.PlanNbrOccurs), 2); err != nil {
		return err
	}

	if err := validate.Pattern("planNbrOccurs", "body", string(*m.PlanNbrOccurs), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validatePlanSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanSeq) { // not required
		return nil
	}

	if err := validate.MinLength("planSeq", "body", string(*m.PlanSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planSeq", "body", string(*m.PlanSeq), 3); err != nil {
		return err
	}

	if err := validate.Pattern("planSeq", "body", string(*m.PlanSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validateRequestLevelFlag(formats strfmt.Registry) error {

	if err := validate.Required("requestLevelFlag", "body", m.RequestLevelFlag); err != nil {
		return err
	}

	if err := validate.MinLength("requestLevelFlag", "body", string(*m.RequestLevelFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("requestLevelFlag", "body", string(*m.RequestLevelFlag), 1); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validateSvcFuncCd(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCd) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCd", "body", string(*m.SvcFuncCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCd", "body", string(*m.SvcFuncCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *SettlementQuoteInquiryRequest) validateSvcStartSeqNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartSeqNbr) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartSeqNbr", "body", string(*m.SvcStartSeqNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartSeqNbr", "body", string(*m.SvcStartSeqNbr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("svcStartSeqNbr", "body", string(*m.SvcStartSeqNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettlementQuoteInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettlementQuoteInquiryRequest) UnmarshalBinary(b []byte) error {
	var res SettlementQuoteInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

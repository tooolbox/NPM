// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemporaryCreditLimitUpdateRequest temporary credit limit update request
//
// swagger:model TemporaryCreditLimitUpdateRequest
type TemporaryCreditLimitUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	//  Max length = 17, Temporary line of credit for the account in whole monetary units.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	TempCrlim *string `json:"tempCrlim"`

	// Format: YYYYMMDD. Temporary Credit Limit Expiry Date: Date on which the temporary line of credit expires.
	// Required: true
	TempCrlimExpDt *string `json:"tempCrlimExpDt"`
}

// Validate validates this temporary credit limit update request
func (m *TemporaryCreditLimitUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempCrlim(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempCrlimExpDt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemporaryCreditLimitUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *TemporaryCreditLimitUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *TemporaryCreditLimitUpdateRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *TemporaryCreditLimitUpdateRequest) validateTempCrlim(formats strfmt.Registry) error {

	if err := validate.Required("tempCrlim", "body", m.TempCrlim); err != nil {
		return err
	}

	if err := validate.Pattern("tempCrlim", "body", string(*m.TempCrlim), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *TemporaryCreditLimitUpdateRequest) validateTempCrlimExpDt(formats strfmt.Registry) error {

	if err := validate.Required("tempCrlimExpDt", "body", m.TempCrlimExpDt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemporaryCreditLimitUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemporaryCreditLimitUpdateRequest) UnmarshalBinary(b []byte) error {
	var res TemporaryCreditLimitUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAttemptsInquiryRequest customer attempts inquiry request
//
// swagger:model CustomerAttemptsInquiryRequest
type CustomerAttemptsInquiryRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 1, Number Type.  Values are: 0, space - Number provided is account or card number 1 - Number provided is customer number
	// Max Length: 1
	// Min Length: 0
	NbrType *string `json:"nbrType,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001 - 998. Organization number must be on file.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Org *string `json:"org,omitempty"`

	//  Max length = 2, For  future  use.
	// Max Length: 2
	// Min Length: 0
	ResvCode1 *string `json:"resvCode1,omitempty"`

	//  Max length = 2, For  future  use.
	// Max Length: 2
	// Min Length: 0
	ResvCode2 *string `json:"resvCode2,omitempty"`

	//  Max length = 2, For  future  use.
	// Max Length: 2
	// Min Length: 0
	ResvCode3 *string `json:"resvCode3,omitempty"`

	//  Max length = 2, For  future  use.
	// Max Length: 2
	// Min Length: 0
	ResvCode4 *string `json:"resvCode4,omitempty"`

	//  Max length = 2, For  future  use.
	// Max Length: 2
	// Min Length: 0
	ResvCode5 *string `json:"resvCode5,omitempty"`

	// Format: YYYYMMDD. For  future  use.
	ResvDate1 string `json:"resvDate1,omitempty"`

	// Format: YYYYMMDD. For  future  use.
	ResvDate2 string `json:"resvDate2,omitempty"`

	// Format: YYYYMMDD. For  future  use.
	ResvDate3 string `json:"resvDate3,omitempty"`

	// Format: YYYYMMDD. For  future  use.
	ResvDate4 string `json:"resvDate4,omitempty"`

	// Format: YYYYMMDD. For  future  use.
	ResvDate5 string `json:"resvDate5,omitempty"`
}

// Validate validates this customer attempts inquiry request
func (m *CustomerAttemptsInquiryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbrType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResvCode5(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateNbrType(formats strfmt.Registry) error {

	if swag.IsZero(m.NbrType) { // not required
		return nil
	}

	if err := validate.MinLength("nbrType", "body", string(*m.NbrType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nbrType", "body", string(*m.NbrType), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if err := validate.MinLength("org", "body", string(*m.Org), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("org", "body", string(*m.Org), 3); err != nil {
		return err
	}

	if err := validate.Pattern("org", "body", string(*m.Org), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateResvCode1(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode1) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode1", "body", string(*m.ResvCode1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode1", "body", string(*m.ResvCode1), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateResvCode2(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode2) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode2", "body", string(*m.ResvCode2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode2", "body", string(*m.ResvCode2), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateResvCode3(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode3) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode3", "body", string(*m.ResvCode3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode3", "body", string(*m.ResvCode3), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateResvCode4(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode4) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode4", "body", string(*m.ResvCode4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode4", "body", string(*m.ResvCode4), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAttemptsInquiryRequest) validateResvCode5(formats strfmt.Registry) error {

	if swag.IsZero(m.ResvCode5) { // not required
		return nil
	}

	if err := validate.MinLength("resvCode5", "body", string(*m.ResvCode5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resvCode5", "body", string(*m.ResvCode5), 2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAttemptsInquiryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAttemptsInquiryRequest) UnmarshalBinary(b []byte) error {
	var res CustomerAttemptsInquiryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TxnDataForLoyaltyRedemptionInquiry1 txn data for loyalty redemption inquiry1
//
// swagger:model TxnDataForLoyaltyRedemptionInquiry1
type TxnDataForLoyaltyRedemptionInquiry1 struct {

	// Coupon Data Group; Occurs 7 times (within transaction data level)
	CpnData []*CpnDataForLoyaltyRedemptionInquiry1 `json:"cpnData"`

	//  Max length = 19, Prepaid Card Number.
	PpdCrdNbr string `json:"ppdCrdNbr,omitempty"`

	//  Max length = 17, Number of loyalty points for this points transaction.
	Pts string `json:"pts,omitempty"`

	//  Max length = 2, User-defined reason code for this points transaction.
	RsnCd string `json:"rsnCd,omitempty"`

	//  Max length = 19, Reward item name that identifies the Reward Item record assigned to the transaction.
	RwdItm string `json:"rwdItm,omitempty"`

	//  Max length = 5, Scheme ID that identifies the points scheme record assigned to the points account.
	SchmID string `json:"schmId,omitempty"`

	//  Max length = 1, Code indicates the status of the points transaction record. Values are: A - Active D - Deleted I - Incomplete
	Stat string `json:"stat,omitempty"`

	//  Max length = 26, User defined data.
	UsrData string `json:"usrData,omitempty"`
}

// Validate validates this txn data for loyalty redemption inquiry1
func (m *TxnDataForLoyaltyRedemptionInquiry1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpnData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TxnDataForLoyaltyRedemptionInquiry1) validateCpnData(formats strfmt.Registry) error {

	if swag.IsZero(m.CpnData) { // not required
		return nil
	}

	for i := 0; i < len(m.CpnData); i++ {
		if swag.IsZero(m.CpnData[i]) { // not required
			continue
		}

		if m.CpnData[i] != nil {
			if err := m.CpnData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpnData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TxnDataForLoyaltyRedemptionInquiry1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TxnDataForLoyaltyRedemptionInquiry1) UnmarshalBinary(b []byte) error {
	var res TxnDataForLoyaltyRedemptionInquiry1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

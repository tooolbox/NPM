// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardsListbyCardRequest cards listby card request
//
// swagger:model CardsListbyCardRequest
type CardsListbyCardRequest struct {

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Service Function Code. Values are: 'P' - Service Function Previous 'N' - Service Function Next Space - Service Function None
	// Max Length: 1
	// Min Length: 0
	SvcFuncCd *string `json:"svcFuncCd,omitempty"`

	//  Max length = 1, Function Code Rep can be Represented by the following : ARXCNI1Z-FN1-ALL -  ' ' ARXCNI1Z-FN1-MULTI-ALL - 'M' ARXCNI1Z-FN1-ONLY - '1' ARXCNI1Z-FN1-VALID - ' ' 'M' '1'
	// Max Length: 1
	// Min Length: 0
	SvcFuncCd1 *string `json:"svcFuncCd1,omitempty"`

	//  Max length = 1, Function Code Rep can be Represented by the following : ARXCNI1Z-FN2-NO - ' ' ARXCNI1Z-FN2-CARD-ACTIVATION - 'A' ARXCNI1Z-FN2-INACTIVE-CARDS - 'I' ARXCNI1Z-FN2-VALID  - ' ' 'A' 'I'
	// Max Length: 1
	// Min Length: 0
	SvcFuncCd2 *string `json:"svcFuncCd2,omitempty"`

	//  Max length = 1, Function Code Rep can be Represented by the following : ARXCNI1Z-FNR-REP-NOT -  ' ' ARXCNI1Z-FNR-REP-ALL -  'A' ARXCNI1Z-FNR-REP-MULTI-ALL-  'M' ARXCNI1Z-FNR-REP-YES - 'A' 'M' ARXCNI1Z-FNR-REP-VALID - '  ' 'A ' 'M'
	// Max Length: 1
	// Min Length: 0
	SvcFuncCdRep *string `json:"svcFuncCdRep,omitempty"`

	//  Max length = 19, Card Number: Unique Card number embossed on the plastic card. 1. Must be numeric and greater than 0 2. Card number must be on file 3. Card number must be valid for Org provided
	// Max Length: 19
	// Min Length: 0
	SvcStartCardNbr *string `json:"svcStartCardNbr,omitempty"`

	//  Max length = 3, Organization Number: Three digit Identification number of the organization.  Valid values are 001-998. Organization number must be on file. Required when Account Number not provided.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcStartCardOrg *string `json:"svcStartCardOrg,omitempty"`

	//  Max length = 4, Card Sequence Number: Identification number assigned to Embosser record to distinguish between multiple cards issued with the same card.1. Must be numeric and greater than 0 if provided2. Must be between 0 and 99 if smart card3. If not provided, and not a smart card, default to value of 0001
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcStartCardSeq *string `json:"svcStartCardSeq,omitempty"`
}

// Validate validates this cards listby card request
func (m *CardsListbyCardRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCd1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCd2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCdRep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartCardOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartCardSeq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardsListbyCardRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcFuncCd(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCd) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCd", "body", string(*m.SvcFuncCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCd", "body", string(*m.SvcFuncCd), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcFuncCd1(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCd1) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCd1", "body", string(*m.SvcFuncCd1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCd1", "body", string(*m.SvcFuncCd1), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcFuncCd2(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCd2) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCd2", "body", string(*m.SvcFuncCd2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCd2", "body", string(*m.SvcFuncCd2), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcFuncCdRep(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCdRep) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCdRep", "body", string(*m.SvcFuncCdRep), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCdRep", "body", string(*m.SvcFuncCdRep), 1); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcStartCardNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartCardNbr) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartCardNbr", "body", string(*m.SvcStartCardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartCardNbr", "body", string(*m.SvcStartCardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcStartCardOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartCardOrg) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartCardOrg", "body", string(*m.SvcStartCardOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartCardOrg", "body", string(*m.SvcStartCardOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("svcStartCardOrg", "body", string(*m.SvcStartCardOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CardsListbyCardRequest) validateSvcStartCardSeq(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartCardSeq) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartCardSeq", "body", string(*m.SvcStartCardSeq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartCardSeq", "body", string(*m.SvcStartCardSeq), 4); err != nil {
		return err
	}

	if err := validate.Pattern("svcStartCardSeq", "body", string(*m.SvcStartCardSeq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardsListbyCardRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardsListbyCardRequest) UnmarshalBinary(b []byte) error {
	var res CardsListbyCardRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

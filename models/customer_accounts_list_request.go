// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAccountsListRequest customer accounts list request
//
// swagger:model CustomerAccountsListRequest
type CustomerAccountsListRequest struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Customer Number: Customer Name/Address record for the person to which the card is assigned.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CustNumber *string `json:"custNumber"`

	//  Max length = 1, Service Fucntional Code indicator to scroll to the next or previous set of records.   Valid Values : Blank, 'N' and 'P' Space ' '  - Initial (New Search) 'N'            - Next 'P'            - Previous
	// Max Length: 1
	// Min Length: 0
	SvcFuncCode *string `json:"svcFuncCode,omitempty"`

	//  Max length = 19, Identification number of the account. Associated with the page scroll.
	// Max Length: 19
	// Min Length: 0
	SvcStartAcctNbr *string `json:"svcStartAcctNbr,omitempty"`

	//  Max length = 3, Organization: Three digit Identification number of the organization. Associcated with the page scroll.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcStartAcctOrg *string `json:"svcStartAcctOrg,omitempty"`

	//  Max length = 1, Valid value is A  A equals return accounts for the Customer Number entered
	// Max Length: 1
	// Min Length: 0
	SvcType *string `json:"svcType,omitempty"`
}

// Validate validates this customer accounts list request
func (m *CustomerAccountsListRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFuncCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcStartAcctOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAccountsListRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerAccountsListRequest) validateCustNumber(formats strfmt.Registry) error {

	if err := validate.Required("custNumber", "body", m.CustNumber); err != nil {
		return err
	}

	if err := validate.MinLength("custNumber", "body", string(*m.CustNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("custNumber", "body", string(*m.CustNumber), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccountsListRequest) validateSvcFuncCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFuncCode) { // not required
		return nil
	}

	if err := validate.MinLength("svcFuncCode", "body", string(*m.SvcFuncCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFuncCode", "body", string(*m.SvcFuncCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccountsListRequest) validateSvcStartAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartAcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartAcctNbr", "body", string(*m.SvcStartAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartAcctNbr", "body", string(*m.SvcStartAcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccountsListRequest) validateSvcStartAcctOrg(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcStartAcctOrg) { // not required
		return nil
	}

	if err := validate.MinLength("svcStartAcctOrg", "body", string(*m.SvcStartAcctOrg), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcStartAcctOrg", "body", string(*m.SvcStartAcctOrg), 3); err != nil {
		return err
	}

	if err := validate.Pattern("svcStartAcctOrg", "body", string(*m.SvcStartAcctOrg), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccountsListRequest) validateSvcType(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcType) { // not required
		return nil
	}

	if err := validate.MinLength("svcType", "body", string(*m.SvcType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcType", "body", string(*m.SvcType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAccountsListRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAccountsListRequest) UnmarshalBinary(b []byte) error {
	var res CustomerAccountsListRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

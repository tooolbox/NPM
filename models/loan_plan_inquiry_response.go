// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoanPlanInquiryResponse loan plan inquiry response
//
// swagger:model LoanPlanInquiryResponse
type LoanPlanInquiryResponse struct {

	// Format: YYYYMMDD. Next Amortization date: Date on which the next amortization is to occur on the loan component when the amortization does not occur on the cycle date.
	AdNextAmortDte string `json:"adNextAmortDte,omitempty"`

	//  Max length = 17, Booking Fee amount
	BookingFee string `json:"bookingFee,omitempty"`

	//  Max length = 17, First Payment: Amount of first payment for this loan.
	Cel1stPmt string `json:"cel1stPmt,omitempty"`

	// Format: YYYYMMDD. First payment date: Date of the first payment.
	Cel1stPmtDate string `json:"cel1stPmtDate,omitempty"`

	// Format: YYYYMMDD. Agreement date: Date the loan was initiated.
	CelAgrmntDate string `json:"celAgrmntDate,omitempty"`

	//  Max length = 3, Current Term: Number that identifies the current term of the loan.Begins at zero for a new loan and increment by one each cycle.
	CelCurrentTerm string `json:"celCurrentTerm,omitempty"`

	//  Max length = 17, Deposit Amount: Deposit amount for this loan plan
	CelDepositAmt string `json:"celDepositAmt,omitempty"`

	//  Max length = 1, EPP Closed Reason: Code that indicates the reason for closing the EPP plan. This field is system-generated when the EPP plan is paid off or closed. 0 = EPP not closed (Default) 1 = Automatic closure due to final payoff 2 = Automatic closure due to delinquency 3 = Manual closure due to customer request 4 = Manual closure due to mistaken conversion.
	CelEppCloseReason string `json:"celEppCloseReason,omitempty"`

	//  Max length = 17, Final Payment:  Amount of final payment for this loan.
	CelFinalPmt string `json:"celFinalPmt,omitempty"`

	// Format: YYYYMMDD. Final Payment date: Date of the final payment.
	CelFinalPmtDate string `json:"celFinalPmtDate,omitempty"`

	//  Max length = 17, Original disclosed Loan:  Amount at which the loan amount was disclosed on the loan.
	CelOrigDsclsdLoan string `json:"celOrigDsclsdLoan,omitempty"`

	//  Max length = 3, Remaining Term: Remaining number of months in the term for the loan. This number begins equal to the original term for a new loan and decreases by one each cycle.
	CelRemainingTerm string `json:"celRemainingTerm,omitempty"`

	//  Max length = 1, Rescheduled Restrict: Code that indicates whether credit plan segments under this credit plan master record are restricted from rescheduling and/ or restructuring due to account delinquency.
	CelReschedRstrct string `json:"celReschedRstrct,omitempty"`

	//  Max length = 1, Transaction Method: Method for computing the maximum amount available for redraw for a loan plan. Values are : 0 - Redraw is not active for the loan plan. 1 - Redraw is active and the maximum redraw amount is the paid principal of the loan plan minus the life-to-date redraw amount. 2 - Redraw is active and maximum redraw amount is the amount of overpayments applied to the loan plans minus the life-to-date redraw amount.
	CelTrRdMthd string `json:"celTrRdMthd,omitempty"`

	//  Max length = 3, Percentage of the initial principal amount available for additional funds to the customer (loan top-up). Values are: 000 = Top-up is not allowed (Default) 001-999 = Percentage of initial principal amount available for additional funds.
	CelTrTuPct string `json:"celTrTuPct,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, CURR-BAL
	CurrBal string `json:"currBal,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 1, Currency NOD (Number Of Decimals) at Org Level: Number of decimal positions to the right of the decimal point
	CurrencyNod string `json:"currencyNod,omitempty"`

	// Format: YYYYMMDD. Date Paid Out: Date on which the credit plan segment was paid out to a zero balance.
	DatePaidOut string `json:"datePaidOut,omitempty"`

	//  Max length = 3, Foreign organization number. This field will be populated only if the account is in dual processing environment.
	ForeignOrg string `json:"foreignOrg,omitempty"`

	//  Max length = 1, Foreign currency indicator. Values are:  0 - Local Currency indicator 1 - Foreign currency indicator
	ForeignUse string `json:"foreignUse,omitempty"`

	//  Max length = 40, Plan description: Description for the plan
	PlanDesc string `json:"planDesc,omitempty"`

	//  Max length = 1, Plan Payment Flag
	PsPmtFlg string `json:"psPmtFlg,omitempty"`

	//  Max length = 1, Record Amt
	PsRecAmt string `json:"psRecAmt,omitempty"`

	//  Max length = 17, Plan total due: Total amount due on the loan plan
	PsTotDue string `json:"psTotDue,omitempty"`

	//  Max length = 1, Projected settlement type: Code that identifies the settlement type of the current quote displayed.
	SdPrjSttlmtType string `json:"sdPrjSttlmtType,omitempty"`

	//  Max length = 2, Status: Code that indicates the status of the loan plan segment.
	Status string `json:"status,omitempty"`
}

// Validate validates this loan plan inquiry response
func (m *LoanPlanInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoanPlanInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoanPlanInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoanPlanInquiryResponse) UnmarshalBinary(b []byte) error {
	var res LoanPlanInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

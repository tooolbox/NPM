// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlanGroupForFppAdd1 plan group for fpp add1
//
// swagger:model PlanGroupForFppAdd1
type PlanGroupForFppAdd1 struct {

	//  Max length = 5, Identification number of the plan to transfer the initial balance amount. The plan number entered should be a credit plan which is active for FPP processing.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AzfxPlan *string `json:"azfxPlan,omitempty"`

	//  Max length = 17, Current balance of the selected FPP plan
	// Pattern: ^(-)?[0-9]{1,17}$
	AzfxPlanBal string `json:"azfxPlanBal,omitempty"`

	//  Max length = 3, Credit Plan Data Record Number: Sequence number of Credit Plan.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AzfxPlanRec *string `json:"azfxPlanRec,omitempty"`
}

// Validate validates this plan group for fpp add1
func (m *PlanGroupForFppAdd1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzfxPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzfxPlanBal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzfxPlanRec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanGroupForFppAdd1) validateAzfxPlan(formats strfmt.Registry) error {

	if swag.IsZero(m.AzfxPlan) { // not required
		return nil
	}

	if err := validate.MinLength("azfxPlan", "body", string(*m.AzfxPlan), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("azfxPlan", "body", string(*m.AzfxPlan), 5); err != nil {
		return err
	}

	if err := validate.Pattern("azfxPlan", "body", string(*m.AzfxPlan), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PlanGroupForFppAdd1) validateAzfxPlanBal(formats strfmt.Registry) error {

	if swag.IsZero(m.AzfxPlanBal) { // not required
		return nil
	}

	if err := validate.Pattern("azfxPlanBal", "body", string(m.AzfxPlanBal), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *PlanGroupForFppAdd1) validateAzfxPlanRec(formats strfmt.Registry) error {

	if swag.IsZero(m.AzfxPlanRec) { // not required
		return nil
	}

	if err := validate.MinLength("azfxPlanRec", "body", string(*m.AzfxPlanRec), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("azfxPlanRec", "body", string(*m.AzfxPlanRec), 3); err != nil {
		return err
	}

	if err := validate.Pattern("azfxPlanRec", "body", string(*m.AzfxPlanRec), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanGroupForFppAdd1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanGroupForFppAdd1) UnmarshalBinary(b []byte) error {
	var res PlanGroupForFppAdd1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

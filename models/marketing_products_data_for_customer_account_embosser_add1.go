// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarketingProductsDataForCustomerAccountEmbosserAdd1 marketing products data for customer account embosser add1
//
// swagger:model MarketingProductsDataForCustomerAccountEmbosserAdd1
type MarketingProductsDataForCustomerAccountEmbosserAdd1 struct {

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	CarInsurance *string `json:"carInsurance,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	CardProtection *string `json:"cardProtection,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	CoreBanking *string `json:"coreBanking,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	HomeInsurance *string `json:"homeInsurance,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	LifeInsurance *string `json:"lifeInsurance,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	Mortgage *string `json:"mortgage,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	Ppi *string `json:"ppi,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag1 *string `json:"productUserFlag1,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag10 *string `json:"productUserFlag10,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag11 *string `json:"productUserFlag11,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag2 *string `json:"productUserFlag2,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag3 *string `json:"productUserFlag3,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag4 *string `json:"productUserFlag4,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag5 *string `json:"productUserFlag5,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag6 *string `json:"productUserFlag6,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag7 *string `json:"productUserFlag7,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag8 *string `json:"productUserFlag8,omitempty"`

	//  Max length = 1, If no valid value is provided, processing will be as follows: In ADD mode the field will be set to the default value indicated in the ORG record In UPDATE mode the field will be ignored and no update to this indicator will occur Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	ProductUserFlag9 *string `json:"productUserFlag9,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	Savings *string `json:"savings,omitempty"`

	//  Max length = 1, Confirms whether the product is opted or not. Values are: Valid values: 1 = The customer has agreed to receive marketing information about this type of product, 0 = The customer does not wish to receive marketing information about this type of product
	// Max Length: 1
	// Min Length: 0
	UnsecuredLoans *string `json:"unsecuredLoans,omitempty"`
}

// Validate validates this marketing products data for customer account embosser add1
func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarInsurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoreBanking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeInsurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifeInsurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMortgage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductUserFlag9(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnsecuredLoans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateCarInsurance(formats strfmt.Registry) error {

	if swag.IsZero(m.CarInsurance) { // not required
		return nil
	}

	if err := validate.MinLength("carInsurance", "body", string(*m.CarInsurance), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("carInsurance", "body", string(*m.CarInsurance), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateCardProtection(formats strfmt.Registry) error {

	if swag.IsZero(m.CardProtection) { // not required
		return nil
	}

	if err := validate.MinLength("cardProtection", "body", string(*m.CardProtection), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardProtection", "body", string(*m.CardProtection), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateCoreBanking(formats strfmt.Registry) error {

	if swag.IsZero(m.CoreBanking) { // not required
		return nil
	}

	if err := validate.MinLength("coreBanking", "body", string(*m.CoreBanking), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("coreBanking", "body", string(*m.CoreBanking), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateHomeInsurance(formats strfmt.Registry) error {

	if swag.IsZero(m.HomeInsurance) { // not required
		return nil
	}

	if err := validate.MinLength("homeInsurance", "body", string(*m.HomeInsurance), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("homeInsurance", "body", string(*m.HomeInsurance), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateLifeInsurance(formats strfmt.Registry) error {

	if swag.IsZero(m.LifeInsurance) { // not required
		return nil
	}

	if err := validate.MinLength("lifeInsurance", "body", string(*m.LifeInsurance), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lifeInsurance", "body", string(*m.LifeInsurance), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateMortgage(formats strfmt.Registry) error {

	if swag.IsZero(m.Mortgage) { // not required
		return nil
	}

	if err := validate.MinLength("mortgage", "body", string(*m.Mortgage), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mortgage", "body", string(*m.Mortgage), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validatePpi(formats strfmt.Registry) error {

	if swag.IsZero(m.Ppi) { // not required
		return nil
	}

	if err := validate.MinLength("ppi", "body", string(*m.Ppi), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ppi", "body", string(*m.Ppi), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag1(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag1) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag1", "body", string(*m.ProductUserFlag1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag1", "body", string(*m.ProductUserFlag1), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag10(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag10) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag10", "body", string(*m.ProductUserFlag10), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag10", "body", string(*m.ProductUserFlag10), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag11(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag11) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag11", "body", string(*m.ProductUserFlag11), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag11", "body", string(*m.ProductUserFlag11), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag2(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag2) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag2", "body", string(*m.ProductUserFlag2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag2", "body", string(*m.ProductUserFlag2), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag3(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag3) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag3", "body", string(*m.ProductUserFlag3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag3", "body", string(*m.ProductUserFlag3), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag4(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag4) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag4", "body", string(*m.ProductUserFlag4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag4", "body", string(*m.ProductUserFlag4), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag5(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag5) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag5", "body", string(*m.ProductUserFlag5), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag5", "body", string(*m.ProductUserFlag5), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag6(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag6) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag6", "body", string(*m.ProductUserFlag6), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag6", "body", string(*m.ProductUserFlag6), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag7(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag7) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag7", "body", string(*m.ProductUserFlag7), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag7", "body", string(*m.ProductUserFlag7), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag8(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag8) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag8", "body", string(*m.ProductUserFlag8), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag8", "body", string(*m.ProductUserFlag8), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateProductUserFlag9(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductUserFlag9) { // not required
		return nil
	}

	if err := validate.MinLength("productUserFlag9", "body", string(*m.ProductUserFlag9), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("productUserFlag9", "body", string(*m.ProductUserFlag9), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateSavings(formats strfmt.Registry) error {

	if swag.IsZero(m.Savings) { // not required
		return nil
	}

	if err := validate.MinLength("savings", "body", string(*m.Savings), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("savings", "body", string(*m.Savings), 1); err != nil {
		return err
	}

	return nil
}

func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) validateUnsecuredLoans(formats strfmt.Registry) error {

	if swag.IsZero(m.UnsecuredLoans) { // not required
		return nil
	}

	if err := validate.MinLength("unsecuredLoans", "body", string(*m.UnsecuredLoans), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("unsecuredLoans", "body", string(*m.UnsecuredLoans), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketingProductsDataForCustomerAccountEmbosserAdd1) UnmarshalBinary(b []byte) error {
	var res MarketingProductsDataForCustomerAccountEmbosserAdd1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

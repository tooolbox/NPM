// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountOverviewRequest account overview request
//
// swagger:model AccountOverviewRequest
type AccountOverviewRequest struct {

	//  Max length = 19, Enter an account number to search for a match on either the Embosser record or the Account Base Segment record 1.  Account number required 2.  Account number  must be on file 3.  Account must be valid for Org provided.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Dual currency indicator. 0, L, SPACE = Local account 1, F = Foreign account If dual currency is not being used or the field is blank, the value is L
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	// need amip
	// Max Length: 1
	// Min Length: 0
	NeedAmip *string `json:"needAmip,omitempty"`
}

// Validate validates this account overview request
func (m *AccountOverviewRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeedAmip(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountOverviewRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountOverviewRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountOverviewRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountOverviewRequest) validateNeedAmip(formats strfmt.Registry) error {

	if swag.IsZero(m.NeedAmip) { // not required
		return nil
	}

	if err := validate.MinLength("needAmip", "body", string(*m.NeedAmip), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("needAmip", "body", string(*m.NeedAmip), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountOverviewRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountOverviewRequest) UnmarshalBinary(b []byte) error {
	var res AccountOverviewRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

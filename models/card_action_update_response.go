// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardActionUpdateResponse card action update response
//
// swagger:model CardActionUpdateResponse
type CardActionUpdateResponse struct {

	//  Max length = 1, Card Action copied from Input Message.
	Actn string `json:"actn,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 19, Unique Card Number embossed on card plastic.
	CrdNbr string `json:"crdNbr,omitempty"`

	//  Max length = 4, Card sequence number: record number assigned to the card (for card numbering schemes of 0, 1, and 3) and the sequence number assigned to the card (for card numbering schemes of 2). This number is part of the record key.
	CrdSeq string `json:"crdSeq,omitempty"`

	//  Max length = 2, Number of cards requested.
	NbrReqCrds string `json:"nbrReqCrds,omitempty"`

	//  Max length = 2, Number of cards that were returned.
	NbrRtnCrds string `json:"nbrRtnCrds,omitempty"`
}

// Validate validates this card action update response
func (m *CardActionUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardActionUpdateResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardActionUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardActionUpdateResponse) UnmarshalBinary(b []byte) error {
	var res CardActionUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

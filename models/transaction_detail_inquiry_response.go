// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransactionDetailInquiryResponse transaction detail inquiry response
//
// swagger:model TransactionDetailInquiryResponse
type TransactionDetailInquiryResponse struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrCd string `json:"currCd,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrNod string `json:"currNod,omitempty"`

	//  Max length = 1, Dual Currency Indicator  The values are: F = Foreign account L = Local account If dual currency is not being used or if the field is left blank, the value is set to  L
	DualInd string `json:"dualInd,omitempty"`

	//  Max length = 3, Number of Transaction Records
	NbrTxnRecs string `json:"nbrTxnRecs,omitempty"`

	//  Max length = 5, For internal use only (see above).
	StartSeqNbr string `json:"startSeqNbr,omitempty"`

	//  Max length = 1, For internal use only (see above).
	StartTyp string `json:"startTyp,omitempty"`

	// Format: YYYYDDD. For internal use only (see above).
	StartTypDt string `json:"startTypDt,omitempty"`

	// 50 Occurrences of transaction data
	TxnData []*TxnDataForTransactionDetailInquiry1 `json:"txnData"`

	//  Max length = 2, Transaction Month Number: Statement Month Number populated from Input Service request.
	TxnNbrMths string `json:"txnNbrMths,omitempty"`
}

// Validate validates this transaction detail inquiry response
func (m *TransactionDetailInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionDetailInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionDetailInquiryResponse) validateTxnData(formats strfmt.Registry) error {

	if swag.IsZero(m.TxnData) { // not required
		return nil
	}

	for i := 0; i < len(m.TxnData); i++ {
		if swag.IsZero(m.TxnData[i]) { // not required
			continue
		}

		if m.TxnData[i] != nil {
			if err := m.TxnData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("txnData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionDetailInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionDetailInquiryResponse) UnmarshalBinary(b []byte) error {
	var res TransactionDetailInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

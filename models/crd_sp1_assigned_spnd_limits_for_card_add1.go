// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CrdSp1AssignedSpndLimitsForCardAdd1 crd sp1 assigned spnd limits for card add1
//
// swagger:model CrdSp1AssignedSpndLimitsForCardAdd1
type CrdSp1AssignedSpndLimitsForCardAdd1 struct {

	//  Max length = 1, Code that indicates the frequency for commercial card spending limits.  The values are: 0 = Not used (Default) 1 = Daily 2 = Week-to-date
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SpndFreq *string `json:"spndFreq,omitempty"`

	//  Max length = 17, Spending limit in monetary units and subunits for each commercial card spending category.
	// Pattern: ^(-)?[0-9]{1,17}$
	SpndLimit string `json:"spndLimit,omitempty"`

	//  Max length = 9, Number of transactions allowed for the frequency defined in the FREQ field. If this field is zero, the number of transactions is unlimited.
	// Pattern: ^(-)?[0-9]{1,9}$
	SpndTrans string `json:"spndTrans,omitempty"`
}

// Validate validates this crd sp1 assigned spnd limits for card add1
func (m *CrdSp1AssignedSpndLimitsForCardAdd1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpndFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpndLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpndTrans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrdSp1AssignedSpndLimitsForCardAdd1) validateSpndFreq(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndFreq) { // not required
		return nil
	}

	if err := validate.MinLength("spndFreq", "body", string(*m.SpndFreq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("spndFreq", "body", string(*m.SpndFreq), 1); err != nil {
		return err
	}

	if err := validate.Pattern("spndFreq", "body", string(*m.SpndFreq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CrdSp1AssignedSpndLimitsForCardAdd1) validateSpndLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndLimit) { // not required
		return nil
	}

	if err := validate.Pattern("spndLimit", "body", string(m.SpndLimit), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *CrdSp1AssignedSpndLimitsForCardAdd1) validateSpndTrans(formats strfmt.Registry) error {

	if swag.IsZero(m.SpndTrans) { // not required
		return nil
	}

	if err := validate.Pattern("spndTrans", "body", string(m.SpndTrans), `^(-)?[0-9]{1,9}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrdSp1AssignedSpndLimitsForCardAdd1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrdSp1AssignedSpndLimitsForCardAdd1) UnmarshalBinary(b []byte) error {
	var res CrdSp1AssignedSpndLimitsForCardAdd1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

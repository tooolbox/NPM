// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PinBlockChangeRequest pin block change request
//
// swagger:model PinBlockChangeRequest
type PinBlockChangeRequest struct {

	//  Max length = 19, Card Nbr
	// Required: true
	// Max Length: 19
	// Min Length: 0
	CardNbr *string `json:"cardNbr"`

	//  Max length = 1, Channel for the PIN change request. Valid values are: <UL><LI> <EM>A </EM> ATM</LI> <LI><EM>I</EM> IVR</LI> <LI><EM>W</EM> Web</LI> <LI><EM>N</EM> NetBanking</LI> <LI><EM>M</EM> Mobile App</LI> <LI><EM>' '</EM> Other</LI></UL>
	// Max Length: 1
	// Min Length: 0
	Channel *string `json:"channel,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 16, Current PIN block
	// Required: true
	// Max Length: 16
	// Min Length: 0
	CurrentPinBlock *string `json:"currentPinBlock"`

	//  Max length = 3, Key association
	// Required: true
	// Max Length: 3
	// Min Length: 0
	KeyAssociation *string `json:"keyAssociation"`

	//  Max length = 16, Required PIN block
	// Required: true
	// Max Length: 16
	// Min Length: 0
	RequiredPinBlock *string `json:"requiredPinBlock"`
}

// Validate validates this pin block change request
func (m *PinBlockChangeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentPinBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyAssociation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredPinBlock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PinBlockChangeRequest) validateCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("cardNbr", "body", m.CardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("cardNbr", "body", string(*m.CardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cardNbr", "body", string(*m.CardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *PinBlockChangeRequest) validateChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	if err := validate.MinLength("channel", "body", string(*m.Channel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("channel", "body", string(*m.Channel), 1); err != nil {
		return err
	}

	return nil
}

func (m *PinBlockChangeRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *PinBlockChangeRequest) validateCurrentPinBlock(formats strfmt.Registry) error {

	if err := validate.Required("currentPinBlock", "body", m.CurrentPinBlock); err != nil {
		return err
	}

	if err := validate.MinLength("currentPinBlock", "body", string(*m.CurrentPinBlock), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("currentPinBlock", "body", string(*m.CurrentPinBlock), 16); err != nil {
		return err
	}

	return nil
}

func (m *PinBlockChangeRequest) validateKeyAssociation(formats strfmt.Registry) error {

	if err := validate.Required("keyAssociation", "body", m.KeyAssociation); err != nil {
		return err
	}

	if err := validate.MinLength("keyAssociation", "body", string(*m.KeyAssociation), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("keyAssociation", "body", string(*m.KeyAssociation), 3); err != nil {
		return err
	}

	return nil
}

func (m *PinBlockChangeRequest) validateRequiredPinBlock(formats strfmt.Registry) error {

	if err := validate.Required("requiredPinBlock", "body", m.RequiredPinBlock); err != nil {
		return err
	}

	if err := validate.MinLength("requiredPinBlock", "body", string(*m.RequiredPinBlock), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("requiredPinBlock", "body", string(*m.RequiredPinBlock), 16); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PinBlockChangeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PinBlockChangeRequest) UnmarshalBinary(b []byte) error {
	var res PinBlockChangeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

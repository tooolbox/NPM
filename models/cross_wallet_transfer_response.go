// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrossWalletTransferResponse cross wallet transfer response
//
// swagger:model CrossWalletTransferResponse
type CrossWalletTransferResponse struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero.
	AcctNbr string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Cross wallet transfer confirm indicator. Initial value will be spaces.
	ConfirmInd string `json:"confirmInd,omitempty"`

	//  Max length = 9, Conversion amount in destination wallets currency code.
	ConvAmt string `json:"convAmt,omitempty"`

	//  Max length = 9, Base Conversion Amount: Transfer from wallet amount currency will be converted into account's base currency code.
	ConvAmtBase string `json:"convAmtBase,omitempty"`

	//  Max length = 9, Conversion fee in base currency.
	FeeAmtBase string `json:"feeAmtBase,omitempty"`

	//  Max length = 9, Conversion fee in converted wallet currency.
	FeeAmtWalt string `json:"feeAmtWalt,omitempty"`

	//  Max length = 9, Net Conversion amount: Conversion amount in destination currency after deducting the corresponding fees.
	NetConvAmt string `json:"netConvAmt,omitempty"`

	//  Max length = 9, Net Base conversion amount: Net base conversion amount after deducting the corresponding fee amount.
	NetConvBase string `json:"netConvBase,omitempty"`

	//  Max length = 8, Currency conversion rate used for the cross currency transfer.
	Rate string `json:"rate,omitempty"`

	//  Max length = 9, Store: Store number associated with the transaction.
	Store string `json:"store,omitempty"`

	//  Max length = 9, Transfer Amount: Fund transfer amount from one wallet to another.
	XfrAmount string `json:"xfrAmount,omitempty"`

	//  Max length = 3, Transfer from Wallet: Transfer FROM Wallet associated with the cross wallet transfer.
	XfrFrmWalt string `json:"xfrFrmWalt,omitempty"`

	//  Max length = 1, Transfer Indicator. Valid values are: F - Full balance transfer P - Partial Default value is 'F'
	XfrInd string `json:"xfrInd,omitempty"`

	//  Max length = 3, Transfer to Wallet: Transfer TO Wallet associated with the cross wallet transfer.
	XfrToWalt string `json:"xfrToWalt,omitempty"`
}

// Validate validates this cross wallet transfer response
func (m *CrossWalletTransferResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrossWalletTransferResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrossWalletTransferResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrossWalletTransferResponse) UnmarshalBinary(b []byte) error {
	var res CrossWalletTransferResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

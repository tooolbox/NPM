// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransactionInquiryResponse3 transaction inquiry response3
//
// swagger:model TransactionInquiryResponse3
type TransactionInquiryResponse3 struct {

	//  Max length = 3, Identification number of the Logo
	AcctLogo string `json:"acctLogo,omitempty"`

	//  Max length = 3, Organisation: Three digit Identification number of the Organisation
	AcctOrg string `json:"acctOrg,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 28, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrencyDesc string `json:"currencyDesc,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyNod string `json:"currencyNod,omitempty"`

	//  Max length = 1, FOREIGN USE
	ForeignUse string `json:"foreignUse,omitempty"`

	//  Max length = 1, Code which indicates whether there are more records are on file. Values are:  N - No more records on file Y - More records on file
	MoreInd string `json:"moreInd,omitempty"`

	//  Max length = 3, Number of return items
	NbrReturnedItems string `json:"nbrReturnedItems,omitempty"`

	//  Max length = 5, To support paging logic. Next Sequence number forward key
	SeqNbrNext string `json:"seqNbrNext,omitempty"`

	// Format: YYYYMMDD. To support paging logic. Next Statement date forward key
	StmtDateNext string `json:"stmtDateNext,omitempty"`

	//  Max length = 3, This field is used to return the index of last sub account processed. For Normal accounts index will be zero.
	SubAcctIdx string `json:"subAcctIdx,omitempty"`

	// TRANSACTION DATA X
	TransactionDataX []*TransactionDataX3ForTransactionInquiry3 `json:"transactionDataX"`

	//  Max length = 2, Transaction Month Number: Statement Month Number populated from Input Service request.
	TxnNbrMonths string `json:"txnNbrMonths,omitempty"`

	//  Max length = 1, To support paging logic. Next Transaction Type forward key
	TypeNext string `json:"typeNext,omitempty"`

	//  Max length = 17, Unbilled outstanding amount
	UnbillOutstandAmt string `json:"unbillOutstandAmt,omitempty"`
}

// Validate validates this transaction inquiry response3
func (m *TransactionInquiryResponse3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDataX(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionInquiryResponse3) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionInquiryResponse3) validateTransactionDataX(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionDataX) { // not required
		return nil
	}

	for i := 0; i < len(m.TransactionDataX); i++ {
		if swag.IsZero(m.TransactionDataX[i]) { // not required
			continue
		}

		if m.TransactionDataX[i] != nil {
			if err := m.TransactionDataX[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactionDataX" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionInquiryResponse3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionInquiryResponse3) UnmarshalBinary(b []byte) error {
	var res TransactionInquiryResponse3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

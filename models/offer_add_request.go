// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OfferAddRequest offer add request
//
// swagger:model OfferAddRequest
type OfferAddRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctCardNbr *string `json:"acctCardNbr"`

	//  Max length = 10, Campaign code number from the Offer Definition record
	// Max Length: 10
	// Min Length: 0
	CampaignCode *string `json:"campaignCode,omitempty"`

	//  Max length = 5, 5 digits client ID. E.g.: 01234
	// Max Length: 5
	// Min Length: 0
	ClientID *string `json:"clientId,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, User defined field to store the communication channel of the offer
	// Max Length: 2
	// Min Length: 0
	CommunicationChannel *string `json:"communicationChannel,omitempty"`

	// 10 Occurrences 59 bytes each
	OfferData []*OfferDataForOfferAdd1 `json:"offerData"`

	//  Max length = 15, User's sign-on ID: User ID as defined in FirstVision.
	// Max Length: 15
	// Min Length: 0
	SignonName *string `json:"signonName,omitempty"`
}

// Validate validates this offer add request
func (m *OfferAddRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctCardNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampaignCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignonName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OfferAddRequest) validateAcctCardNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctCardNbr", "body", m.AcctCardNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctCardNbr", "body", string(*m.AcctCardNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctCardNbr", "body", string(*m.AcctCardNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *OfferAddRequest) validateCampaignCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CampaignCode) { // not required
		return nil
	}

	if err := validate.MinLength("campaignCode", "body", string(*m.CampaignCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("campaignCode", "body", string(*m.CampaignCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *OfferAddRequest) validateClientID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientID) { // not required
		return nil
	}

	if err := validate.MinLength("clientId", "body", string(*m.ClientID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("clientId", "body", string(*m.ClientID), 5); err != nil {
		return err
	}

	return nil
}

func (m *OfferAddRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *OfferAddRequest) validateCommunicationChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.CommunicationChannel) { // not required
		return nil
	}

	if err := validate.MinLength("communicationChannel", "body", string(*m.CommunicationChannel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("communicationChannel", "body", string(*m.CommunicationChannel), 2); err != nil {
		return err
	}

	return nil
}

func (m *OfferAddRequest) validateOfferData(formats strfmt.Registry) error {

	if swag.IsZero(m.OfferData) { // not required
		return nil
	}

	for i := 0; i < len(m.OfferData); i++ {
		if swag.IsZero(m.OfferData[i]) { // not required
			continue
		}

		if m.OfferData[i] != nil {
			if err := m.OfferData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offerData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OfferAddRequest) validateSignonName(formats strfmt.Registry) error {

	if swag.IsZero(m.SignonName) { // not required
		return nil
	}

	if err := validate.MinLength("signonName", "body", string(*m.SignonName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("signonName", "body", string(*m.SignonName), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OfferAddRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OfferAddRequest) UnmarshalBinary(b []byte) error {
	var res OfferAddRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

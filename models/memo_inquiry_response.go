// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemoInquiryResponse memo inquiry response
//
// swagger:model MemoInquiryResponse
type MemoInquiryResponse struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Indicates if there is more data to be returned than this response could contain.  Y - More data N - No more data
	ContFlag string `json:"contFlag,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrencyCode string `json:"currencyCode,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrencyNod string `json:"currencyNod,omitempty"`

	// memo dtl
	MemoDtl []*MemoDtlForMemoInquiry1 `json:"memoDtl"`

	//  Max length = 2, Number of memos returned in this message
	NbrMemos string `json:"nbrMemos,omitempty"`
}

// Validate validates this memo inquiry response
func (m *MemoInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoDtl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemoInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *MemoInquiryResponse) validateMemoDtl(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoDtl) { // not required
		return nil
	}

	for i := 0; i < len(m.MemoDtl); i++ {
		if swag.IsZero(m.MemoDtl[i]) { // not required
			continue
		}

		if m.MemoDtl[i] != nil {
			if err := m.MemoDtl[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memoDtl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemoInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoInquiryResponse) UnmarshalBinary(b []byte) error {
	var res MemoInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

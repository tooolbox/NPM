// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LetterRequestResponse letter request response
//
// swagger:model LetterRequestResponse
type LetterRequestResponse struct {

	//  Max length = 4, Action code
	ActionCode string `json:"actionCode,omitempty"`

	//  Max length = 1, Code that indicates how to send the letter to the customer The values are: 0 = Send letter to batch to print for mailing (Default) 1 = Send letter via e-mail 2 = Send letter via SMS (Short Message Service) 3 = Send letter via both e-mail and SMS 4 = Reserved for future use 5 = Reserved for future use
	ChannelType string `json:"channelType,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 60, Co-owner's e-mail address
	CoownerEmailAddr string `json:"coownerEmailAddr,omitempty"`

	//  Max length = 2, Number of attempts sending letter to co-owner through e-mail.
	CoownerEmailAttempts string `json:"coownerEmailAttempts,omitempty"`

	//  Max length = 20, Co-owner's mobile phone number
	CoownerMobilePhone string `json:"coownerMobilePhone,omitempty"`

	//  Max length = 2, Number of attempts sending letter to co-owner through SMS.
	CoownerSmsAttempts string `json:"coownerSmsAttempts,omitempty"`

	//  Max length = 1, Code that indicates if memo is to be generated The values are: 0 = Do not generate memo 1 = Generate memo
	GenMemoInd string `json:"genMemoInd,omitempty"`

	//  Max length = 1, Return description
	LetterDest string `json:"letterDest,omitempty"`

	// Letter text
	LetterText []*LetterTextForLetterRequest1 `json:"letterText"`

	//  Max length = 1, Letter status The values are: 0 = Not generated 1 = Generated to client server for processing 2 = Generated to print during LTS batch 3 = Generated electronically through client server to print during LTS batch 4 = Generated hard copy through batch and sent to client server to print
	LtrSts string `json:"ltrSts,omitempty"`

	//  Max length = 3, Number of message lines
	MsgLines string `json:"msgLines,omitempty"`

	//  Max length = 3, Operator's identification
	Operator string `json:"operator,omitempty"`

	//  Max length = 60, Owner's e-mail address
	OwnerEmailAddr string `json:"ownerEmailAddr,omitempty"`

	//  Max length = 2, Number of attempts sending letter to owner through e-mail.
	OwnerEmailAttempts string `json:"ownerEmailAttempts,omitempty"`

	//  Max length = 20, Owner's mobile phone number
	OwnerMobilePhone string `json:"ownerMobilePhone,omitempty"`

	//  Max length = 2, Number of attempts sending letter to owner through SMS.
	OwnerSmsAttempts string `json:"ownerSmsAttempts,omitempty"`

	//  Max length = 4, Printer ID
	PrinterID string `json:"printerId,omitempty"`

	//  Max length = 17, Reserved Amount 1
	ResvAmt1 string `json:"resvAmt1,omitempty"`

	//  Max length = 17, Reserved Amount 2
	ResvAmt2 string `json:"resvAmt2,omitempty"`

	//  Max length = 17, Reserved Amount 3
	ResvAmt3 string `json:"resvAmt3,omitempty"`

	//  Max length = 17, Reserved Amount 4
	ResvAmt4 string `json:"resvAmt4,omitempty"`

	//  Max length = 17, Reserved Amount 5
	ResvAmt5 string `json:"resvAmt5,omitempty"`

	//  Max length = 2, Reserved code 1
	ResvCode1 string `json:"resvCode1,omitempty"`

	//  Max length = 2, Reserved code 2
	ResvCode2 string `json:"resvCode2,omitempty"`

	//  Max length = 2, Reserved code 3
	ResvCode3 string `json:"resvCode3,omitempty"`

	//  Max length = 2, Reserved code 4
	ResvCode4 string `json:"resvCode4,omitempty"`

	//  Max length = 2, Reserved code 5
	ResvCode5 string `json:"resvCode5,omitempty"`

	// Format: YYYYMMDD. Reserved Date 1
	ResvDate1 string `json:"resvDate1,omitempty"`

	// Format: YYYYMMDD. Reserved Date 2
	ResvDate2 string `json:"resvDate2,omitempty"`

	// Format: YYYYMMDD. Reserved Date 3
	ResvDate3 string `json:"resvDate3,omitempty"`

	// Format: YYYYMMDD. Reserved Date 4
	ResvDate4 string `json:"resvDate4,omitempty"`

	// Format: YYYYMMDD. Reserved Date 5
	ResvDate5 string `json:"resvDate5,omitempty"`

	//  Max length = 1, Code that indicates e-mail should be sent to the co-owner The values are: 0 = Do not send owner e-mail 1 = Send owner e-mail
	SendCoownEmailInd string `json:"sendCoownEmailInd,omitempty"`

	//  Max length = 1, Code that indicates SMS should be sent to the co-owner The values are: 0 = Do not send owner SMS 1 = Send owner SMS
	SendCoownSmsInd string `json:"sendCoownSmsInd,omitempty"`

	//  Max length = 1, Code that indicates to whom the letter should be sent The values are: 0 = Do not send letter 1 = Send letter to owner 2 = Send letter to co-owner
	SendLetterInd string `json:"sendLetterInd,omitempty"`

	//  Max length = 1, Code that indicates e-mail should be sent to the owner The values are: 0 = Do not send owner e-mail 1 = Send owner e-mail
	SendOwnEmailInd string `json:"sendOwnEmailInd,omitempty"`

	//  Max length = 1, Code that indicates SMS should be sent to the owner The values are: 0 = Do not send owner SMS 1 = Send owner SMS
	SendOwnSmsInd string `json:"sendOwnSmsInd,omitempty"`

	//  Max length = 2, CMS organization-defined threshold limit
	Threshold string `json:"threshold,omitempty"`
}

// Validate validates this letter request response
func (m *LetterRequestResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLetterText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LetterRequestResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *LetterRequestResponse) validateLetterText(formats strfmt.Registry) error {

	if swag.IsZero(m.LetterText) { // not required
		return nil
	}

	for i := 0; i < len(m.LetterText); i++ {
		if swag.IsZero(m.LetterText[i]) { // not required
			continue
		}

		if m.LetterText[i] != nil {
			if err := m.LetterText[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("letterText" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LetterRequestResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LetterRequestResponse) UnmarshalBinary(b []byte) error {
	var res LetterRequestResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

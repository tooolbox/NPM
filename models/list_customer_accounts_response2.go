// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListCustomerAccountsResponse2 list customer accounts response2
//
// swagger:model ListCustomerAccountsResponse2
type ListCustomerAccountsResponse2 struct {

	// Group variable containing Relationship data if requested.
	AcctData []*AcctData2ForListCustomerAccounts2 `json:"acctData"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 40, Address Line 1 of the customer as defined on the Customer Name/Address record.
	CustAddr string `json:"custAddr,omitempty"`

	//  Max length = 30, City: City portion of the mailing address.
	CustCty string `json:"custCty,omitempty"`

	// Format: YYYYMMDD. Customer's date of birth.
	CustDob string `json:"custDob,omitempty"`

	//  Max length = 20, Home phone number of the accountholder.
	CustHmePhn string `json:"custHmePhn,omitempty"`

	//  Max length = 40, Name line 1 of the customer as defined on the Customer Name/Address record.
	CustName string `json:"custName,omitempty"`

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	CustNbr string `json:"custNbr,omitempty"`

	//  Max length = 3, Organization: Three digit Identification number of the organization.
	CustOrg string `json:"custOrg,omitempty"`

	//  Max length = 10, Postal Code: Postal code portion of the mailing address.
	CustPstCd string `json:"custPstCd,omitempty"`

	//  Max length = 3, State: State or province portion of the mailing address.
	CustStPr string `json:"custStPr,omitempty"`

	// Format: YYYYMMDD. Date Last Address Change: Date when the address got last changed.
	DteLstAddrChng string `json:"dteLstAddrChng,omitempty"`

	//  Max length = 40, First name of the customer
	FirstName string `json:"firstName,omitempty"`

	//  Max length = 1, Foreign Use Indicator from input.
	FrgnUse string `json:"frgnUse,omitempty"`

	//  Max length = 40, Last name of the customer
	LastName string `json:"lastName,omitempty"`

	//  Max length = 1, More Indicator: To indicate if there are more records to display or not. Based on this flag, next service can be invoked to scroll up or down function.  Values are: N - More no Y - More yes
	MoreInd string `json:"moreInd,omitempty"`

	//  Max length = 2, Number of subordinate accounts present.
	NbrAccRecs string `json:"nbrAccRecs,omitempty"`

	//  Max length = 19, Starting card number associated with the scroll
	SvcStrtAcctNbr string `json:"svcStrtAcctNbr,omitempty"`

	//  Max length = 3, Starting card organization number associated with the scroll
	SvcStrtOrg string `json:"svcStrtOrg,omitempty"`

	//  Max length = 20, Title of the customer.
	Title string `json:"title,omitempty"`
}

// Validate validates this list customer accounts response2
func (m *ListCustomerAccountsResponse2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCustomerAccountsResponse2) validateAcctData(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctData) { // not required
		return nil
	}

	for i := 0; i < len(m.AcctData); i++ {
		if swag.IsZero(m.AcctData[i]) { // not required
			continue
		}

		if m.AcctData[i] != nil {
			if err := m.AcctData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acctData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListCustomerAccountsResponse2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListCustomerAccountsResponse2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListCustomerAccountsResponse2) UnmarshalBinary(b []byte) error {
	var res ListCustomerAccountsResponse2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExtendedLookupInquiryResponse extended lookup inquiry response
//
// swagger:model ExtendedLookupInquiryResponse
type ExtendedLookupInquiryResponse struct {

	// common
	Common *Header `json:"common,omitempty"`

	// LOOKUP TABLE
	LookupTable []*LookupTableForExtendedLookupInquiry1 `json:"lookupTable"`

	//  Max length = 1, More Data Flag: Indicates if there is more data to be returned than this response could contain. Values are: Y - More data N - No more data
	MoreDataFlag string `json:"moreDataFlag,omitempty"`

	//  Max length = 2, Number of items returned.
	NbrReturnedItems string `json:"nbrReturnedItems,omitempty"`

	//  Max length = 183, Populated with the Token Key of the last item returned in this response. To scroll forward, place the contents of this field into the startToken request field of the next request
	NextToken string `json:"nextToken,omitempty"`

	//  Max length = 183, Populated with the current request starting Token Key. To scroll backwards, place the contents of this field into the startToken request field of the next request
	PrevToken string `json:"prevToken,omitempty"`
}

// Validate validates this extended lookup inquiry response
func (m *ExtendedLookupInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLookupTable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedLookupInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *ExtendedLookupInquiryResponse) validateLookupTable(formats strfmt.Registry) error {

	if swag.IsZero(m.LookupTable) { // not required
		return nil
	}

	for i := 0; i < len(m.LookupTable); i++ {
		if swag.IsZero(m.LookupTable[i]) { // not required
			continue
		}

		if m.LookupTable[i] != nil {
			if err := m.LookupTable[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lookupTable" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedLookupInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedLookupInquiryResponse) UnmarshalBinary(b []byte) error {
	var res ExtendedLookupInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

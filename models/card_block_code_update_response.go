// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardBlockCodeUpdateResponse card block code update response
//
// swagger:model CardBlockCodeUpdateResponse
type CardBlockCodeUpdateResponse struct {

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Reserved amount 1
	ResvAmt1 string `json:"resvAmt1,omitempty"`

	//  Max length = 17, Reserved amount 2
	ResvAmt2 string `json:"resvAmt2,omitempty"`

	//  Max length = 17, Reserved amount 3
	ResvAmt3 string `json:"resvAmt3,omitempty"`

	//  Max length = 17, Reserved amount 4
	ResvAmt4 string `json:"resvAmt4,omitempty"`

	//  Max length = 2, Reserved code 1
	ResvCode1 string `json:"resvCode1,omitempty"`

	//  Max length = 2, Reserved code 2
	ResvCode2 string `json:"resvCode2,omitempty"`

	//  Max length = 2, Reserved code 3
	ResvCode3 string `json:"resvCode3,omitempty"`

	//  Max length = 2, Reserved code 4
	ResvCode4 string `json:"resvCode4,omitempty"`

	// Format: YYYYMMDD. Reserved date 1
	ResvDate1 string `json:"resvDate1,omitempty"`

	// Format: YYYYMMDD. Reserved date 2
	ResvDate2 string `json:"resvDate2,omitempty"`

	// Format: YYYYMMDD. Reserved date 3
	ResvDate3 string `json:"resvDate3,omitempty"`

	// Format: YYYYMMDD. Reserved date 4
	ResvDate4 string `json:"resvDate4,omitempty"`
}

// Validate validates this card block code update response
func (m *CardBlockCodeUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardBlockCodeUpdateResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardBlockCodeUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardBlockCodeUpdateResponse) UnmarshalBinary(b []byte) error {
	var res CardBlockCodeUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountPlanlistRequest account planlist request
//
// swagger:model AccountPlanlistRequest
type AccountPlanlistRequest struct {

	//  Max length = 19, From-Account Number: Number of Customer's account.  1 Must be numeric and greater than zero. 2 Must exist as a valid Account number. 3 Account should not be in ADD PENDING, CLOSED or TO BE PURGED status.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Must be space, A, F, E or T A or Space = All plan segments on file F = All active FPP plans E = All FPP Eligible Plans and Account level Eligible balance T = Plans based on Plan Type (Retail, Cash, BTs, Flexible Payment Plans) If no selection option is provided in the input service, all plan segments on the account will be returned in the service output.
	// Max Length: 1
	// Min Length: 0
	Function *string `json:"function,omitempty"`

	//  Max length = 1, This field is mandatory if FUNCTION is T  Identifies the type of credit plan (PLAN TYPE) assigned to this Credit Plan Segment recor. Therefore it determines the type of plan that needs to be returned (example Retail, cash, BT). d
	// Max Length: 1
	// Min Length: 0
	PlanType *string `json:"planType,omitempty"`
}

// Validate validates this account planlist request
func (m *AccountPlanlistRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountPlanlistRequest) validateAcct(formats strfmt.Registry) error {

	if err := validate.Required("acct", "body", m.Acct); err != nil {
		return err
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountPlanlistRequest) validateFunction(formats strfmt.Registry) error {

	if swag.IsZero(m.Function) { // not required
		return nil
	}

	if err := validate.MinLength("function", "body", string(*m.Function), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("function", "body", string(*m.Function), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountPlanlistRequest) validatePlanType(formats strfmt.Registry) error {

	if swag.IsZero(m.PlanType) { // not required
		return nil
	}

	if err := validate.MinLength("planType", "body", string(*m.PlanType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planType", "body", string(*m.PlanType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountPlanlistRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountPlanlistRequest) UnmarshalBinary(b []byte) error {
	var res AccountPlanlistRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

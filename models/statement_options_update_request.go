// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatementOptionsUpdateRequest statement options update request
//
// swagger:model StatementOptionsUpdateRequest
type StatementOptionsUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action is applied to the local or foreign account. The values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	//  Max length = 60, Email  is required when EMAIL INDICATOR  =  1 or  2
	// Max Length: 60
	// Min Length: 0
	EmailAddr *string `json:"emailAddr,omitempty"`

	//  Max length = 1, Email Contact Indicator:  code that indicates whether you have permission from the customer  to Email. Values are:  0 - Do not send  1 - May be sent.  2 - Prefer to be sent.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	EmailInd *string `json:"emailInd,omitempty"`

	//  Max length = 1, Mobile Phone Number is required when the MOBILE PHONE INDICATOR  =  1 or  2  and SMS IND  = 1
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	MobileFlag *string `json:"mobileFlag,omitempty"`

	//  Max length = 20, Mobile Phone Indicator:  Code that specifies whether the Maker grants permission to  call this number.  Values are: 0 = No, do not contact the customer at this number 1 = Yes, you can contact the customer at this number (Default) 2 = Preferred contact method
	// Max Length: 20
	// Min Length: 0
	MobilePhone *string `json:"mobilePhone,omitempty"`

	//  Max length = 1, SMS Contact Indicator: code that indicates whether you have permission from the customer to send  SMS.  Values are:  0 - Do not send  1 - May be sent
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SmsInd *string `json:"smsInd,omitempty"`

	//  Max length = 1, Statement Notification Indicator.  Valid Values are:   0 -   NO NOTIFICATION REQD        1 -   SOFTCOPY STMTS ONLY         2 -  SOFTCOPY AND HARDCOPY STMTS
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNotifyInd *string `json:"stmtNotifyInd,omitempty"`

	//  Max length = 1, Statement Notification type:  Valid Values are:   0 -  NO NOTIFICATION (DEFAULT)    1 -  E MAIL NOTIFICATION          2 -  SMS (SHORT MESSAGE SERVICE)  3 -  SMS AND EMAIL NOTIFICATION
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNotifyMod *string `json:"stmtNotifyMod,omitempty"`
}

// Validate validates this statement options update request
func (m *StatementOptionsUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNotifyInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNotifyMod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatementOptionsUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateEmailAddr(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAddr) { // not required
		return nil
	}

	if err := validate.MinLength("emailAddr", "body", string(*m.EmailAddr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emailAddr", "body", string(*m.EmailAddr), 60); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateEmailInd(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailInd) { // not required
		return nil
	}

	if err := validate.MinLength("emailInd", "body", string(*m.EmailInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emailInd", "body", string(*m.EmailInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("emailInd", "body", string(*m.EmailInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateMobileFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.MobileFlag) { // not required
		return nil
	}

	if err := validate.MinLength("mobileFlag", "body", string(*m.MobileFlag), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobileFlag", "body", string(*m.MobileFlag), 1); err != nil {
		return err
	}

	if err := validate.Pattern("mobileFlag", "body", string(*m.MobileFlag), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateMobilePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.MobilePhone) { // not required
		return nil
	}

	if err := validate.MinLength("mobilePhone", "body", string(*m.MobilePhone), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mobilePhone", "body", string(*m.MobilePhone), 20); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateSmsInd(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsInd) { // not required
		return nil
	}

	if err := validate.MinLength("smsInd", "body", string(*m.SmsInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("smsInd", "body", string(*m.SmsInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("smsInd", "body", string(*m.SmsInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateStmtNotifyInd(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNotifyInd) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNotifyInd", "body", string(*m.StmtNotifyInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNotifyInd", "body", string(*m.StmtNotifyInd), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNotifyInd", "body", string(*m.StmtNotifyInd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *StatementOptionsUpdateRequest) validateStmtNotifyMod(formats strfmt.Registry) error {

	if swag.IsZero(m.StmtNotifyMod) { // not required
		return nil
	}

	if err := validate.MinLength("stmtNotifyMod", "body", string(*m.StmtNotifyMod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNotifyMod", "body", string(*m.StmtNotifyMod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNotifyMod", "body", string(*m.StmtNotifyMod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatementOptionsUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatementOptionsUpdateRequest) UnmarshalBinary(b []byte) error {
	var res StatementOptionsUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

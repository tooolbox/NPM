// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatementReprintUpdateRequest statement reprint update request
//
// swagger:model StatementReprintUpdateRequest
type StatementReprintUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Account *string `json:"account"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Dual Indicator: Dual Account Flag of account.Valid values are: L = Local account (default) F = Foreign account If dual currency is not being used or if the field is left blank, the value is L.
	// Max Length: 1
	// Min Length: 0
	DualInd *string `json:"dualInd,omitempty"`

	// Statement Info Group; 24 Occurrences. Minimum one occurrence needs to be provided.
	// Required: true
	StmtInfo []*StmtInfoForStatementReprintUpdate1 `json:"stmtInfo"`

	//  Max length = 2, Statement Frequency: Code that indicates how often CMS generates statements for the account.  Values are: 01 - 12 - Frequency at which to generate a statement, in months.   62 - Generate a statement during the next CMS daily run. If the account is not scheduled to cycle during the next daily run, an interim statement is produced.  99 - Do not generate statements. CMS maintains account activity on the Online Accumulated Transactions file
	// Required: true
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	StmtNbrOccur *string `json:"stmtNbrOccur"`
}

// Validate validates this statement reprint update request
func (m *StatementReprintUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualInd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStmtNbrOccur(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatementReprintUpdateRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if err := validate.MinLength("account", "body", string(*m.Account), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("account", "body", string(*m.Account), 19); err != nil {
		return err
	}

	return nil
}

func (m *StatementReprintUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *StatementReprintUpdateRequest) validateDualInd(formats strfmt.Registry) error {

	if swag.IsZero(m.DualInd) { // not required
		return nil
	}

	if err := validate.MinLength("dualInd", "body", string(*m.DualInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dualInd", "body", string(*m.DualInd), 1); err != nil {
		return err
	}

	return nil
}

func (m *StatementReprintUpdateRequest) validateStmtInfo(formats strfmt.Registry) error {

	if err := validate.Required("stmtInfo", "body", m.StmtInfo); err != nil {
		return err
	}

	for i := 0; i < len(m.StmtInfo); i++ {
		if swag.IsZero(m.StmtInfo[i]) { // not required
			continue
		}

		if m.StmtInfo[i] != nil {
			if err := m.StmtInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stmtInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StatementReprintUpdateRequest) validateStmtNbrOccur(formats strfmt.Registry) error {

	if err := validate.Required("stmtNbrOccur", "body", m.StmtNbrOccur); err != nil {
		return err
	}

	if err := validate.MinLength("stmtNbrOccur", "body", string(*m.StmtNbrOccur), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("stmtNbrOccur", "body", string(*m.StmtNbrOccur), 2); err != nil {
		return err
	}

	if err := validate.Pattern("stmtNbrOccur", "body", string(*m.StmtNbrOccur), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatementReprintUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatementReprintUpdateRequest) UnmarshalBinary(b []byte) error {
	var res StatementReprintUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlanSettlementQuoteUpdateRequest plan settlement quote update request
//
// swagger:model PlanSettlementQuoteUpdateRequest
type PlanSettlementQuoteUpdateRequest struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	Acct *string `json:"acct"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Current payoff amount. A payment of this amount prior to the payoff-by date is projected to settle the plan.
	// Required: true
	// Pattern: ^(-)?[0-9]{1,17}$
	PartialEarlyStlmntAmt *string `json:"partialEarlyStlmntAmt"`

	// Format: YYYYMMDD. Date of the current payoff-by date for the settlement quote.
	PayoffByDate string `json:"payoffByDate,omitempty"`

	//  Max length = 1, Partial Early Settlement Recalculation Method. Values are: 0 = Recalculate Fixed Payment Amount (default) 1 = Recalculate Term
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PesRecalMethod *string `json:"pesRecalMethod"`

	//  Max length = 5, Credit Plan Number: Identifies the plan number of the Credit Plan Master record associated with the Credit Plan Segment record.
	// Required: true
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PlanNbr *string `json:"planNbr"`

	//  Max length = 3, Credit Plan Data Record Number: Sequence number of Credit Plan. This field value may be changed by CMS during the daily batch process if a plan segment is purged. The system will re-sequence all the plan segments on file for the account.
	// Required: true
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RecNbr *string `json:"recNbr"`

	//  Max length = 1, Settlement Type: Code that identifies the settlement type of the current quote displayed. Values are: C - Quote Cancelled P - Quote from online W - Quote waive online
	// Required: true
	// Max Length: 1
	// Min Length: 0
	SttlmtType *string `json:"sttlmtType"`
}

// Validate validates this plan settlement quote update request
func (m *PlanSettlementQuoteUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartialEarlyStlmntAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePesRecalMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSttlmtType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validateAcct(formats strfmt.Registry) error {

	if err := validate.Required("acct", "body", m.Acct); err != nil {
		return err
	}

	if err := validate.MinLength("acct", "body", string(*m.Acct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acct", "body", string(*m.Acct), 19); err != nil {
		return err
	}

	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validatePartialEarlyStlmntAmt(formats strfmt.Registry) error {

	if err := validate.Required("partialEarlyStlmntAmt", "body", m.PartialEarlyStlmntAmt); err != nil {
		return err
	}

	if err := validate.Pattern("partialEarlyStlmntAmt", "body", string(*m.PartialEarlyStlmntAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validatePesRecalMethod(formats strfmt.Registry) error {

	if err := validate.Required("pesRecalMethod", "body", m.PesRecalMethod); err != nil {
		return err
	}

	if err := validate.MinLength("pesRecalMethod", "body", string(*m.PesRecalMethod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pesRecalMethod", "body", string(*m.PesRecalMethod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("pesRecalMethod", "body", string(*m.PesRecalMethod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validatePlanNbr(formats strfmt.Registry) error {

	if err := validate.Required("planNbr", "body", m.PlanNbr); err != nil {
		return err
	}

	if err := validate.MinLength("planNbr", "body", string(*m.PlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("planNbr", "body", string(*m.PlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("planNbr", "body", string(*m.PlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validateRecNbr(formats strfmt.Registry) error {

	if err := validate.Required("recNbr", "body", m.RecNbr); err != nil {
		return err
	}

	if err := validate.MinLength("recNbr", "body", string(*m.RecNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("recNbr", "body", string(*m.RecNbr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("recNbr", "body", string(*m.RecNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PlanSettlementQuoteUpdateRequest) validateSttlmtType(formats strfmt.Registry) error {

	if err := validate.Required("sttlmtType", "body", m.SttlmtType); err != nil {
		return err
	}

	if err := validate.MinLength("sttlmtType", "body", string(*m.SttlmtType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sttlmtType", "body", string(*m.SttlmtType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanSettlementQuoteUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanSettlementQuoteUpdateRequest) UnmarshalBinary(b []byte) error {
	var res PlanSettlementQuoteUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountTransferRequest account transfer request
//
// swagger:model AccountTransferRequest
type AccountTransferRequest struct {

	//  Max length = 3, Account-Control override value for the new account.  If no value received then default the field as  zeroes.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AcctCtlOvrd *string `json:"acctCtlOvrd,omitempty"`

	//  Max length = 2, Authorisation Days: Number of days that Credit Management System allows authorisations on the old ('transfer from') account after a product transfer or smart card Transfer.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AuthDays *string `json:"authDays,omitempty"`

	//  Max length = 9, Branch Number
	// Max Length: 9
	// Min Length: 0
	BranchNumber *string `json:"branchNumber,omitempty"`

	// Number of CARD LOGO_GRP elements ,present in this request.
	CardholderGrp []*CardholderGrpForAccountTransfer1 `json:"cardholderGrp"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 17, Account spending/credit limit: current credit limit assigned to the account.
	// Max Length: 17
	// Min Length: 0
	// Pattern: ^[0-9]*$
	CrLimit *string `json:"crLimit,omitempty"`

	//  Max length = 2, Billing cycle of the account. Valid values are 00 and 01-31.  If Input is 00, then billing cycle of old account is copied to the new account.
	// Required: true
	// Max Length: 2
	// Min Length: 0
	Cycle *string `json:"cycle"`

	//  Max length = 5, Default cash plan for the transfer-to account.  If no value received then default from  the account-control table associated with the PCT id of the new account. If Account control override table is specified then default from that.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DfltCash *string `json:"dfltCash,omitempty"`

	//  Max length = 6, Default loyalty program for the new account to be enrolled to: Code that indicates the default Loyalty Management System (LMS) loyalty program in which the account is to be enrolled.  If no value received then default the field as  zeroes.
	// Max Length: 6
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DfltLoyaltyCd *string `json:"dfltLoyaltyCd,omitempty"`

	//  Max length = 5, Default MT Plan Number: The value provided from Input service should be numeric and greater than zero If the value provided from Input service is numeric and greater than zero then the plan number should be a valid credit plan master.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DfltMtPlanNbr *string `json:"dfltMtPlanNbr,omitempty"`

	//  Max length = 5, Default Promotional BT plan for the transfer-to account.  If no value received then default from  the account-control table associated with the PCT id of the new account. If Account control override table is specified then default from that.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DfltPromo *string `json:"dfltPromo,omitempty"`

	//  Max length = 5, Default retail plan for the transfer-to account. If no value received then default from  the account-control table associated with the PCT id of the new account. If Account control override table is specified then default from that.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DfltRetail *string `json:"dfltRetail,omitempty"`

	// Format: YYYYMMDD. Effective date of the transfer.
	EffDate string `json:"effDate,omitempty"`

	//  Max length = 5, Emblem: Override value for the emblem-id at the account to be applied to the card level.  If no value received then default from logo level EMBLEM field.
	// Max Length: 5
	// Min Length: 0
	// Pattern: ^[0-9]*$
	Emblem *string `json:"emblem,omitempty"`

	//  Max length = 1, Expire Retail and Balance Transfer Promotion: Field which indicates whether the promotions for the retail and Balance transfer plans need to be force-expired. Valid values are: 0 - promotions need not be expired 1 - promotions need to be expired  If no value received then default from Logo
	// Max Length: 1
	// Min Length: 0
	ExpireRetailBtProm *string `json:"expireRetailBtProm,omitempty"`

	//  Max length = 19, From-Account Number: Number of Customer's account.  1 Must be numeric and greater than zero. 2 Must exist as a valid Account number. 3 Account should not be in ADD PENDING, CLOSED or TO BE PURGED status.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	FromAcctNbr *string `json:"fromAcctNbr"`

	//  Max length = 1, Function: Valid values are: 'C' =  Copy account 'P' = Product transfer 'R' = ,Reversal 'S' = Smart transfer 'T' = Transfer fraud.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	Function *string `json:"function"`

	// INS PRD
	InsPrd []string `json:"insPrd"`

	//  Max length = 3, Mode: field to  indicate whether account transfer service is used in validate mode or update mode.  Valid values are:  Spaces - Update  'VAL'  - validate  'V01'  - validate all Input fields except transfer and issue card logos  Validate mode will  perform field edits and cross-edits on the Input request to the service.  Update mode will perform the transfer along with the validations. If left blank, update mode is considered by default.
	// Max Length: 3
	// Min Length: 0
	Mode *string `json:"mode,omitempty"`

	//  Max length = 10, Money Transfer Offer Code: Money Transfer offer code provided in Input service should be present in offer definition file with active status. MT offer code given in Input service should be different from Offer Code filed in service Input
	// Max Length: 10
	// Min Length: 0
	MtOfferCode *string `json:"mtOfferCode,omitempty"`

	//  Max length = 10, New Account Campaign code to drive the retail offer message on the card carrier for new logo.   If no value is received, then default the field as spaces.
	// Max Length: 10
	// Min Length: 0
	NewAcctCampaign *string `json:"newAcctCampaign,omitempty"`

	//  Max length = 3, New Account Logo: Logo Number of new account. 1 Must be numeric and greater than zeroes2.  Must exist as a valid Logo
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	NewAcctLogo *string `json:"newAcctLogo,omitempty"`

	//  Max length = 19, New Account Number: Number of new account. 1 Must be numeric and greater than zeroes2.  Must exist as a valid Account number. 3.  Account should not be in ADD PENDING, CLOSED or TO BE PURGED status.
	// Max Length: 19
	// Min Length: 0
	NewAcctNbr *string `json:"newAcctNbr,omitempty"`

	//  Max length = 1, New Card Technology: Card Technology for new account, which CMS uses when reissuing the transferred card. Values are: 0 = Reissue magnetic-stripe cards 1 = Reissue smart cards. 3  = Reissue smart contactless cards 4 = Reissue mobile smart contactless cards
	// Max Length: 1
	// Min Length: 0
	NewCardTech *string `json:"newCardTech,omitempty"`

	//  Max length = 19, New Customer Number: If a 19-digit number is Input, system takes it as a non-existing customer number and creates a customer record with this number, copying old customer details.  If the Input 19-digit customer number already exists, error is returned. Other accepted values are: '/' = create a new customer number        '#' =  consider the customer number from OLD ACCOUNT      SPACE or  LOW-VALUE =  Customer number remains the same .
	// Max Length: 19
	// Min Length: 0
	NewCustNbr *string `json:"newCustNbr,omitempty"`

	//  Max length = 1, Non multi-scheme alternate card carrier indicator
	// Max Length: 1
	// Min Length: 0
	NonMsAltCardCarrier *string `json:"nonMsAltCardCarrier,omitempty"`

	//  Max length = 10, Offer code Override: Offer Code for the new account.  If no value received then default the field as spaces.
	// Max Length: 10
	// Min Length: 0
	OfferCode *string `json:"offerCode,omitempty"`

	//  Max length = 3, New PCT ID: Processing Control Table that must be assigned to the transferred account.
	// Max Length: 3
	// Min Length: 0
	Pct *string `json:"pct,omitempty"`

	//  Max length = 1, PCT Level: Code that specifies the Processing Control Table level for the pricing control indicator. The logo in which accounts reside initially determines the level at which all accounts will process.  Values are: Space - Is not used  'S' - System Level  'O' - ORG Level  'L' - LOGO level
	// Max Length: 1
	// Min Length: 0
	PctLvlOvrd *string `json:"pctLvlOvrd,omitempty"`

	//  Max length = 1, PCT Level Override DMC: Code that indicates whether the PCT level override expires after a specified number of days or months. D = Days M = Months C = Cycles.  This field is not used if the actual date of PCT level override expiration is specified in the PCT override expiration date field.
	// Max Length: 1
	// Min Length: 0
	PctLvlOvrdDmc *string `json:"pctLvlOvrdDmc,omitempty"`

	//  Max length = 3, PCT Level Override DMC Number: Number of days / months / cycles after which the PCT level override expires
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PctLvlOvrdDmcNbr *string `json:"pctLvlOvrdDmcNbr,omitempty"`

	// Format: YYYYMMDD. PCT Level Override Expiry Date: Date on which the PCT level override expires. This field is not used if the PCT_OVRD_DMC fields are used.
	PctLvlOvrdExpDate string `json:"pctLvlOvrdExpDate,omitempty"`

	//  Max length = 3, New PCT Override: Processing Control Table override that must be assigned to the transferred account. This PCT override is verified at the logo level, the organization level, and the system level, depending on PCT level override settings.
	// Max Length: 3
	// Min Length: 0
	PctOvrd *string `json:"pctOvrd,omitempty"`

	//  Max length = 1, PCT Override DMC: Code that indicates whether the PCT override expires after a specified number of days or months. Values are: D = Days M = Months C = Cycles.  This field is not used if the actual date of PCT level override expiration is specified in the PCT_OVRD_EXP_DATE field.
	// Max Length: 1
	// Min Length: 0
	PctOvrdDmc *string `json:"pctOvrdDmc,omitempty"`

	//  Max length = 3, PCT Override DMC Number: Number of days / months / cycles after which the PCT override expires.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PctOvrdDmcNbr *string `json:"pctOvrdDmcNbr,omitempty"`

	// Format: YYYYMMDD. PCT Expiry Date: Date on which the special pricing controls expire for the account.
	PctOvrdExpDate string `json:"pctOvrdExpDate,omitempty"`

	//  Max length = 5, Promotion code for new account.
	// Max Length: 5
	// Min Length: 0
	Promotion *string `json:"promotion,omitempty"`

	//  Max length = 1, Refund Annual Fee: Field that indicates if annual fee refund processing for a product  transfer should be active or not. Valid values are: 0 - Fee Refund OFF 1 - Fee Refund ON  If no value received then default from Logo
	// Max Length: 1
	// Min Length: 0
	RefundAnnFee *string `json:"refundAnnFee,omitempty"`

	//  Max length = 1, Reissue Card Numbering Scheme 3:  Code that indicates whether cards are reissued with card numbering scheme 3 The values are: Y = Yes, reissue cards with card numbering scheme 3 N = No, do not reissue cards with card numbering scheme 3
	// Max Length: 1
	// Min Length: 0
	ReissueCrdSchm3 *string `json:"reissueCrdSchm3,omitempty"`

	//  Max length = 1, Retain Pin: Code that indicates whether a new PIN is generated during the fraud card transfer. Valid values are: 0 =  1 =  2 =  9 =
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	RetainPin *string `json:"retainPin"`

	//  Max length = 3, Service charge/fee table pointer indicating which override table is to be used.
	// Max Length: 3
	// Min Length: 0
	// Pattern: ^[0-9]*$
	SvcFeeTbl *string `json:"svcFeeTbl,omitempty"`

	// Format: YYYYMMDD. Service fee table override expiration date for the new account. If no value received then defaults the field as zeroes.
	SvcFeeTblExpire string `json:"svcFeeTblExpire,omitempty"`

	//  Max length = 10, Terminal Id
	// Max Length: 10
	// Min Length: 0
	TerminalID *string `json:"terminalId,omitempty"`

	//  Max length = 1, TRIAD Check: Field that indicates whether the TRIAD call needs to be performed for the account transfer. Valid values are: 1 - Triad check to be performed 0 - Triad check to be bypassed  If no value received then default from Logo.
	// Max Length: 1
	// Min Length: 0
	TriadCheck *string `json:"triadCheck,omitempty"`

	//  Max length = 1, Transfer Replacement Indicator:  Valid values are: '0' =  transfer the Embosser record.  '1' = do not transfer the Embosser record. (Embosser warning code 1 should be 3)
	// Max Length: 1
	// Min Length: 0
	XfrReplInd *string `json:"xfrReplInd,omitempty"`
}

// Validate validates this account transfer request
func (m *AccountTransferRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctCtlOvrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardholderGrp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfltCash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfltLoyaltyCd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfltMtPlanNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfltPromo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfltRetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmblem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireRetailBtProm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtOfferCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAcctCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAcctLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewCardTech(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewCustNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonMsAltCardCarrier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctLvlOvrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctLvlOvrdDmc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctLvlOvrdDmcNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctOvrd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctOvrdDmc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePctOvrdDmcNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundAnnFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReissueCrdSchm3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetainPin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvcFeeTbl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriadCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXfrReplInd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTransferRequest) validateAcctCtlOvrd(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctCtlOvrd) { // not required
		return nil
	}

	if err := validate.MinLength("acctCtlOvrd", "body", string(*m.AcctCtlOvrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctCtlOvrd", "body", string(*m.AcctCtlOvrd), 3); err != nil {
		return err
	}

	if err := validate.Pattern("acctCtlOvrd", "body", string(*m.AcctCtlOvrd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateAuthDays(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthDays) { // not required
		return nil
	}

	if err := validate.MinLength("authDays", "body", string(*m.AuthDays), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("authDays", "body", string(*m.AuthDays), 2); err != nil {
		return err
	}

	if err := validate.Pattern("authDays", "body", string(*m.AuthDays), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateBranchNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BranchNumber) { // not required
		return nil
	}

	if err := validate.MinLength("branchNumber", "body", string(*m.BranchNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("branchNumber", "body", string(*m.BranchNumber), 9); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateCardholderGrp(formats strfmt.Registry) error {

	if swag.IsZero(m.CardholderGrp) { // not required
		return nil
	}

	for i := 0; i < len(m.CardholderGrp); i++ {
		if swag.IsZero(m.CardholderGrp[i]) { // not required
			continue
		}

		if m.CardholderGrp[i] != nil {
			if err := m.CardholderGrp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cardholderGrp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountTransferRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *AccountTransferRequest) validateCrLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.CrLimit) { // not required
		return nil
	}

	if err := validate.MinLength("crLimit", "body", string(*m.CrLimit), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("crLimit", "body", string(*m.CrLimit), 17); err != nil {
		return err
	}

	if err := validate.Pattern("crLimit", "body", string(*m.CrLimit), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateCycle(formats strfmt.Registry) error {

	if err := validate.Required("cycle", "body", m.Cycle); err != nil {
		return err
	}

	if err := validate.MinLength("cycle", "body", string(*m.Cycle), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("cycle", "body", string(*m.Cycle), 2); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateDfltCash(formats strfmt.Registry) error {

	if swag.IsZero(m.DfltCash) { // not required
		return nil
	}

	if err := validate.MinLength("dfltCash", "body", string(*m.DfltCash), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dfltCash", "body", string(*m.DfltCash), 5); err != nil {
		return err
	}

	if err := validate.Pattern("dfltCash", "body", string(*m.DfltCash), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateDfltLoyaltyCd(formats strfmt.Registry) error {

	if swag.IsZero(m.DfltLoyaltyCd) { // not required
		return nil
	}

	if err := validate.MinLength("dfltLoyaltyCd", "body", string(*m.DfltLoyaltyCd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dfltLoyaltyCd", "body", string(*m.DfltLoyaltyCd), 6); err != nil {
		return err
	}

	if err := validate.Pattern("dfltLoyaltyCd", "body", string(*m.DfltLoyaltyCd), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateDfltMtPlanNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.DfltMtPlanNbr) { // not required
		return nil
	}

	if err := validate.MinLength("dfltMtPlanNbr", "body", string(*m.DfltMtPlanNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dfltMtPlanNbr", "body", string(*m.DfltMtPlanNbr), 5); err != nil {
		return err
	}

	if err := validate.Pattern("dfltMtPlanNbr", "body", string(*m.DfltMtPlanNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateDfltPromo(formats strfmt.Registry) error {

	if swag.IsZero(m.DfltPromo) { // not required
		return nil
	}

	if err := validate.MinLength("dfltPromo", "body", string(*m.DfltPromo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dfltPromo", "body", string(*m.DfltPromo), 5); err != nil {
		return err
	}

	if err := validate.Pattern("dfltPromo", "body", string(*m.DfltPromo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateDfltRetail(formats strfmt.Registry) error {

	if swag.IsZero(m.DfltRetail) { // not required
		return nil
	}

	if err := validate.MinLength("dfltRetail", "body", string(*m.DfltRetail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("dfltRetail", "body", string(*m.DfltRetail), 5); err != nil {
		return err
	}

	if err := validate.Pattern("dfltRetail", "body", string(*m.DfltRetail), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateEmblem(formats strfmt.Registry) error {

	if swag.IsZero(m.Emblem) { // not required
		return nil
	}

	if err := validate.MinLength("emblem", "body", string(*m.Emblem), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("emblem", "body", string(*m.Emblem), 5); err != nil {
		return err
	}

	if err := validate.Pattern("emblem", "body", string(*m.Emblem), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateExpireRetailBtProm(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpireRetailBtProm) { // not required
		return nil
	}

	if err := validate.MinLength("expireRetailBtProm", "body", string(*m.ExpireRetailBtProm), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("expireRetailBtProm", "body", string(*m.ExpireRetailBtProm), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateFromAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("fromAcctNbr", "body", m.FromAcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("fromAcctNbr", "body", string(*m.FromAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("fromAcctNbr", "body", string(*m.FromAcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	if err := validate.MinLength("function", "body", string(*m.Function), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("function", "body", string(*m.Function), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := validate.MinLength("mode", "body", string(*m.Mode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mode", "body", string(*m.Mode), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateMtOfferCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MtOfferCode) { // not required
		return nil
	}

	if err := validate.MinLength("mtOfferCode", "body", string(*m.MtOfferCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("mtOfferCode", "body", string(*m.MtOfferCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateNewAcctCampaign(formats strfmt.Registry) error {

	if swag.IsZero(m.NewAcctCampaign) { // not required
		return nil
	}

	if err := validate.MinLength("newAcctCampaign", "body", string(*m.NewAcctCampaign), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("newAcctCampaign", "body", string(*m.NewAcctCampaign), 10); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateNewAcctLogo(formats strfmt.Registry) error {

	if swag.IsZero(m.NewAcctLogo) { // not required
		return nil
	}

	if err := validate.MinLength("newAcctLogo", "body", string(*m.NewAcctLogo), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("newAcctLogo", "body", string(*m.NewAcctLogo), 3); err != nil {
		return err
	}

	if err := validate.Pattern("newAcctLogo", "body", string(*m.NewAcctLogo), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateNewAcctNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.NewAcctNbr) { // not required
		return nil
	}

	if err := validate.MinLength("newAcctNbr", "body", string(*m.NewAcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("newAcctNbr", "body", string(*m.NewAcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateNewCardTech(formats strfmt.Registry) error {

	if swag.IsZero(m.NewCardTech) { // not required
		return nil
	}

	if err := validate.MinLength("newCardTech", "body", string(*m.NewCardTech), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("newCardTech", "body", string(*m.NewCardTech), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateNewCustNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.NewCustNbr) { // not required
		return nil
	}

	if err := validate.MinLength("newCustNbr", "body", string(*m.NewCustNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("newCustNbr", "body", string(*m.NewCustNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateNonMsAltCardCarrier(formats strfmt.Registry) error {

	if swag.IsZero(m.NonMsAltCardCarrier) { // not required
		return nil
	}

	if err := validate.MinLength("nonMsAltCardCarrier", "body", string(*m.NonMsAltCardCarrier), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("nonMsAltCardCarrier", "body", string(*m.NonMsAltCardCarrier), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateOfferCode(formats strfmt.Registry) error {

	if swag.IsZero(m.OfferCode) { // not required
		return nil
	}

	if err := validate.MinLength("offerCode", "body", string(*m.OfferCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("offerCode", "body", string(*m.OfferCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePct(formats strfmt.Registry) error {

	if swag.IsZero(m.Pct) { // not required
		return nil
	}

	if err := validate.MinLength("pct", "body", string(*m.Pct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pct", "body", string(*m.Pct), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePctLvlOvrd(formats strfmt.Registry) error {

	if swag.IsZero(m.PctLvlOvrd) { // not required
		return nil
	}

	if err := validate.MinLength("pctLvlOvrd", "body", string(*m.PctLvlOvrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctLvlOvrd", "body", string(*m.PctLvlOvrd), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePctLvlOvrdDmc(formats strfmt.Registry) error {

	if swag.IsZero(m.PctLvlOvrdDmc) { // not required
		return nil
	}

	if err := validate.MinLength("pctLvlOvrdDmc", "body", string(*m.PctLvlOvrdDmc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctLvlOvrdDmc", "body", string(*m.PctLvlOvrdDmc), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePctLvlOvrdDmcNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.PctLvlOvrdDmcNbr) { // not required
		return nil
	}

	if err := validate.MinLength("pctLvlOvrdDmcNbr", "body", string(*m.PctLvlOvrdDmcNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctLvlOvrdDmcNbr", "body", string(*m.PctLvlOvrdDmcNbr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("pctLvlOvrdDmcNbr", "body", string(*m.PctLvlOvrdDmcNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePctOvrd(formats strfmt.Registry) error {

	if swag.IsZero(m.PctOvrd) { // not required
		return nil
	}

	if err := validate.MinLength("pctOvrd", "body", string(*m.PctOvrd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctOvrd", "body", string(*m.PctOvrd), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePctOvrdDmc(formats strfmt.Registry) error {

	if swag.IsZero(m.PctOvrdDmc) { // not required
		return nil
	}

	if err := validate.MinLength("pctOvrdDmc", "body", string(*m.PctOvrdDmc), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctOvrdDmc", "body", string(*m.PctOvrdDmc), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePctOvrdDmcNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.PctOvrdDmcNbr) { // not required
		return nil
	}

	if err := validate.MinLength("pctOvrdDmcNbr", "body", string(*m.PctOvrdDmcNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pctOvrdDmcNbr", "body", string(*m.PctOvrdDmcNbr), 3); err != nil {
		return err
	}

	if err := validate.Pattern("pctOvrdDmcNbr", "body", string(*m.PctOvrdDmcNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validatePromotion(formats strfmt.Registry) error {

	if swag.IsZero(m.Promotion) { // not required
		return nil
	}

	if err := validate.MinLength("promotion", "body", string(*m.Promotion), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("promotion", "body", string(*m.Promotion), 5); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateRefundAnnFee(formats strfmt.Registry) error {

	if swag.IsZero(m.RefundAnnFee) { // not required
		return nil
	}

	if err := validate.MinLength("refundAnnFee", "body", string(*m.RefundAnnFee), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("refundAnnFee", "body", string(*m.RefundAnnFee), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateReissueCrdSchm3(formats strfmt.Registry) error {

	if swag.IsZero(m.ReissueCrdSchm3) { // not required
		return nil
	}

	if err := validate.MinLength("reissueCrdSchm3", "body", string(*m.ReissueCrdSchm3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("reissueCrdSchm3", "body", string(*m.ReissueCrdSchm3), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateRetainPin(formats strfmt.Registry) error {

	if err := validate.Required("retainPin", "body", m.RetainPin); err != nil {
		return err
	}

	if err := validate.MinLength("retainPin", "body", string(*m.RetainPin), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("retainPin", "body", string(*m.RetainPin), 1); err != nil {
		return err
	}

	if err := validate.Pattern("retainPin", "body", string(*m.RetainPin), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateSvcFeeTbl(formats strfmt.Registry) error {

	if swag.IsZero(m.SvcFeeTbl) { // not required
		return nil
	}

	if err := validate.MinLength("svcFeeTbl", "body", string(*m.SvcFeeTbl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("svcFeeTbl", "body", string(*m.SvcFeeTbl), 3); err != nil {
		return err
	}

	if err := validate.Pattern("svcFeeTbl", "body", string(*m.SvcFeeTbl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateTerminalID(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminalID) { // not required
		return nil
	}

	if err := validate.MinLength("terminalId", "body", string(*m.TerminalID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("terminalId", "body", string(*m.TerminalID), 10); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateTriadCheck(formats strfmt.Registry) error {

	if swag.IsZero(m.TriadCheck) { // not required
		return nil
	}

	if err := validate.MinLength("triadCheck", "body", string(*m.TriadCheck), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("triadCheck", "body", string(*m.TriadCheck), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransferRequest) validateXfrReplInd(formats strfmt.Registry) error {

	if swag.IsZero(m.XfrReplInd) { // not required
		return nil
	}

	if err := validate.MinLength("xfrReplInd", "body", string(*m.XfrReplInd), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("xfrReplInd", "body", string(*m.XfrReplInd), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountTransferRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountTransferRequest) UnmarshalBinary(b []byte) error {
	var res AccountTransferRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

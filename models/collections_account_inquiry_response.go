// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CollectionsAccountInquiryResponse collections account inquiry response
//
// swagger:model CollectionsAccountInquiryResponse
type CollectionsAccountInquiryResponse struct {

	//  Max length = 19, Account Number: Identification Number of Customer's account.
	AcctNbr string `json:"acctNbr,omitempty"`

	//  Max length = 3, CLASSIFICATION
	Classification string `json:"classification,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Currency Code at Org Level: ISO currency code that identifies the unit of currency for this account.
	CurrNbr string `json:"currNbr,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrNod string `json:"currNod,omitempty"`

	//  Max length = 1, Actual Number of Days account has been delinquent. Number of days account is past due.
	DaysFreqFlag string `json:"daysFreqFlag,omitempty"`

	// Format: YYYYMMDD. Classification Date; Date format should be CCYY-MM-DD.
	DtClass string `json:"dtClass,omitempty"`

	// Format: YYYYMMDD. Date on which the account entered  collection.
	DtEnteredColl string `json:"dtEnteredColl,omitempty"`

	// Format: YYYYMMDD. Date of last payment.
	DtLastPmt string `json:"dtLastPmt,omitempty"`

	//  Max length = 4, Last Action: Code that indicates the last action performed on the account.
	LastAction string `json:"lastAction,omitempty"`

	// Format: YYYYMMDD. Last Action Date: Date of the last action performed on the account.
	LastActionDt string `json:"lastActionDt,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`

	//  Max length = 17, Last payment received for the account.
	PmtLastAmt string `json:"pmtLastAmt,omitempty"`

	//  Max length = 17, Promise to Pay Amount.
	PromAmt string `json:"promAmt,omitempty"`

	//  Max length = 17, Total promise balance associated with this account.
	PromBal string `json:"promBal,omitempty"`

	// Format: YYYYMMDD. Promise to Pay Date.
	PromDt string `json:"promDt,omitempty"`

	//  Max length = 3, Promise to Pay (PTP) Collector ID: Identification of the collector who entered the last promise-to-pay action.
	PtpColl string `json:"ptpColl,omitempty"`

	//  Max length = 4, Payment Action Code: Action code associated with the payment schedule.
	PymtActionCd string `json:"pymtActionCd,omitempty"`

	// Payment Schedule Group. Occurs 6 times.
	PymtSchedule []*PymtScheduleForCollectionsAccountInquiry1 `json:"pymtSchedule"`

	//  Max length = 2, Collection Reason: Code that indicates the reason the account is in collections. The range is 00-99. The values are: 01 = First payment default 02 = Over credit limit 03 = Excessive usage 04 = Delinquent 05 = High priority block code 06 = Recency 07 = Low priority block code 08 = Charge-off 09 = Delinquent and over limit 10 = Generated by CMS to indicate a restructure. CTA treats it as a reason code 2 11 = Generated by CMS to indicate a restructure. CTA treats it as a reason code 9.
	TagRsn string `json:"tagRsn,omitempty"`
}

// Validate validates this collections account inquiry response
func (m *CollectionsAccountInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePymtSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionsAccountInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *CollectionsAccountInquiryResponse) validatePymtSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.PymtSchedule) { // not required
		return nil
	}

	for i := 0; i < len(m.PymtSchedule); i++ {
		if swag.IsZero(m.PymtSchedule[i]) { // not required
			continue
		}

		if m.PymtSchedule[i] != nil {
			if err := m.PymtSchedule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pymtSchedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionsAccountInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionsAccountInquiryResponse) UnmarshalBinary(b []byte) error {
	var res CollectionsAccountInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

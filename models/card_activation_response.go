// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CardActivationResponse card activation response
//
// swagger:model CardActivationResponse
type CardActivationResponse struct {

	//  Max length = 19, Card number
	CardNbr string `json:"cardNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 3, Foreign currency Organisation number
	FrgnOrg string `json:"frgnOrg,omitempty"`

	//  Max length = 3, Identification number of the logo.
	Logo string `json:"logo,omitempty"`

	//  Max length = 4, Number of cards activated for a particular account. Number accumulated by the service.
	NbrCardsActivated string `json:"nbrCardsActivated,omitempty"`

	//  Max length = 4, Number of foreign cards activated This field identifies the number of cards activated in the foreign Organisation. The field is populated only if the account is in dual processing environment. This field is accumulated by the service.
	NbrFrgnCrdActv string `json:"nbrFrgnCrdActv,omitempty"`

	//  Max length = 1, Service type.  Values are: A = Activate all cards S = Activate specific cards
	SvcType string `json:"svcType,omitempty"`
}

// Validate validates this card activation response
func (m *CardActivationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardActivationResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardActivationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardActivationResponse) UnmarshalBinary(b []byte) error {
	var res CardActivationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

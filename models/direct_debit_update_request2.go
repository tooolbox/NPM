// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectDebitUpdateRequest2 direct debit update request2
//
// swagger:model DirectDebitUpdateRequest2
type DirectDebitUpdateRequest2 struct {

	//  Max length = 19, Account Number: Number of Customer's account. Must be numeric and greater than zero. This can be either Account number or Card number.
	// Required: true
	// Max Length: 19
	// Min Length: 0
	AcctNbr *string `json:"acctNbr"`

	//  Max length = 17, Customer-nominated amount or percentage. Enter an amount in monetary units and subunits. For example, if working with U.S. dollars, enter $125.73 as 00000000000012573. Enter a percentage using only the last seven positions of the field. The location of the decimal is determined by the percentage NOD. For example, if the percentage NOD is 7, enter 15% as 00000000001500000.
	// Pattern: ^(-)?[0-9]{1,17}$
	AchAmt string `json:"achAmt,omitempty"`

	//  Max length = 1, Direct debit customer-nominated type payment The values are: 0 = Not used 1 = Fixed payment amount 2 = Percentage of account balance (cycle-ending) 3 = Full account balance (cycle-ending)
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	AchAmtPct *string `json:"achAmtPct"`

	// Format: YYYYMMDD. Date on which direct debit processing expires for the account. A value of zeros means the DD does not expire.
	AchPmtExprDate string `json:"achPmtExprDate,omitempty"`

	// Format: YYYYMMDD. Customer-nominated payment date. Field accepts julian date format.
	// Required: true
	AchStartDate *string `json:"achStartDate"`

	//  Max length = 20, Application user 2 field
	// Max Length: 20
	// Min Length: 0
	ApplicationUser2 *string `json:"applicationUser2,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 2, Direct Debit request days. Number of days prior to the payment due date or the day of the month to request direct debit payments for the account.
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdAchReqDay *string `json:"ddAchReqDay,omitempty"`

	//  Max length = 11, BIC values is required if the IBAN flag is set in the system
	// Max Length: 11
	// Min Length: 0
	DdBic *string `json:"ddBic,omitempty"`

	//  Max length = 1, Direct Debit Cancellation. Values are:  ' 0 '  - do not cancel DD ' 1 '  - Cancel DD
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdCancel *string `json:"ddCancel"`

	//  Max length = 1, Direct debit credit balance. Values are: 0 = Direct credits are not generated for accounts with credit balances 1 = Direct credits are generated for accounts with   credit balances
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdCreditBal *string `json:"ddCreditBal,omitempty"`

	//  Max length = 1, Direct debit daily frequency. Values are: 0 = Account does not generate direct debits on a daily frequency 1 = Account generates direct debits daily 2 = Account generates direct debits every week 3 = Account generates direct debits biweekly or every 14 days
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdDailyFreq *string `json:"ddDailyFreq,omitempty"`

	//  Max length = 1, Flag indicating if the client is using the facility to request the direct debit payment to the account a number of days before the direct debit is due. Valid values are: 0-DD Days same as pmt due days 1-DD Days can be different to pmt due days
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdDaysFctn *string `json:"ddDaysFctn,omitempty"`

	//  Max length = 2, The number of days before the payment is due to post the direct debit payment to the account
	// Max Length: 2
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdDaysNbr *string `json:"ddDaysNbr,omitempty"`

	//  Max length = 34, IBAN value is required if the IBAN flag is set in the system and there is no IBAN already defined for the account in question. If there is already an IBAN defined for the account then this field is optional.
	// Max Length: 34
	// Min Length: 0
	DdIban *string `json:"ddIban,omitempty"`

	//  Max length = 1, Direct debit interim payments. Values are: 0 = Do not apply interim payments 1 = Apply interim payment to the calculated payment prior to generating a direct debit transaction
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdInterimPmts *string `json:"ddInterimPmts"`

	//  Max length = 1, This field indicates the mandate status of the Direct Debit. Direct Debit will be generated only if this status is active and all other mandatory Direct DebitD parameters are set up. This field will be open to maintenance only if the MANDATE FLAG processing is set ON at the ORG level Valid values for the field are : SPACES  =  DD Mandate is not set  A =  DD Mandate is active  I=  DD Mandate is inactive C =  DD Mandate is cancelled  E=  DD Mandate is expired
	// Max Length: 1
	// Min Length: 0
	DdMandateStatus *string `json:"ddMandateStatus,omitempty"`

	//  Max length = 1, Direct DebitNotify Control flag should be numeric and either 0 or 1.
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdNotifyCntl *string `json:"ddNotifyCntl,omitempty"`

	// Format: YYYYMMDD. Direct debit payment change date <Date will be accepted as Gregorian date-CCYYMMDD format>
	DdPmtChangeDate string `json:"ddPmtChangeDate,omitempty"`

	//  Max length = 1, Counter that CMS updates whenever a payment reversal is applied to the account using logic module 031 or 032
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdPmtRevCntr *string `json:"ddPmtRevCntr,omitempty"`

	//  Max length = 1, Direct DebitSuspend    Valid values are  '0' - Inactive '1'- Active
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdSuspend *string `json:"ddSuspend,omitempty"`

	//  Max length = 1, Direct DebitSuspend  bypass  Valid values are  '0' -Do not bypass '1'-bypass
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	DdSuspendBypass *string `json:"ddSuspendBypass,omitempty"`

	//  Max length = 1, Foreign use indicator: Value indicates whether the incoming action will be applied to the local or foreign account. Values are: 0 = Local account (default) 1 = Foreign account SPACE = defaults to 0
	// Max Length: 1
	// Min Length: 0
	ForeignUse *string `json:"foreignUse,omitempty"`

	//  Max length = 7, Customer-nominated amount or percentage. Enter an amount in monetary units and subunits. For example, if working with U.S. dollars, enter $125.73 as 00000000000012573. Enter a percentage using only the last seven positions of the field. The location of the decimal is determined by the percentage NOD. For example, if the percentage NOD is 7, enter 15% as 00000000001500000.
	// Pattern: ^(-)?[0-9]{1,7}$
	NomAchPct string `json:"nomAchPct,omitempty"`

	//  Max length = 1, Payment remittance method. Values are: 1 = Standing order 2 = Direct debit
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PayRemitMethod *string `json:"payRemitMethod"`

	//  Max length = 1, Payment ACH flag The values are: 0 = No ACH 1 = ACH active 2, 7 = ACH customer-nominated 8 = Direct debit processing is active. A payment equal to the current minimum due of the account is in effect 9 = Direct debit processing is active. A customer nominated payment is in effect. If the customer-nominated payment is less than the current minimum due, the projected DD is equal to the current minimum due of the account
	// Required: true
	// Max Length: 1
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtAch *string `json:"pmtAch"`

	//  Max length = 17, Direct Debit Bank account number of the account.
	// Required: true
	// Max Length: 17
	// Min Length: 0
	PmtAchDbNbr *string `json:"pmtAchDbNbr"`

	//  Max length = 1, DD payment Type: Code that indicates the type of account to which the direct debit is sent.  Values are: D = Demand deposit account (checking) S = Savings account.
	// Required: true
	// Max Length: 1
	// Min Length: 0
	PmtAchDbType *string `json:"pmtAchDbType"`

	//  Max length = 10, Payment Automated Clearing House routing number: Dual-use field that accepts a nine-digit routing/transit number (ACH format) or a ten-digit Bank ID (non-ACH format) to identify the financial institution to receive direct debit transactions for account payments. Any entered number must be right aligned with leading zeros.
	// Required: true
	// Max Length: 10
	// Min Length: 0
	// Pattern: ^[0-9]*$
	PmtAchRtNbr *string `json:"pmtAchRtNbr"`

	//  Max length = 17, Projected ACH Payment (tentative payment calculated on statement closure)
	// Pattern: ^(-)?[0-9]{1,17}$
	ProjAchPmt string `json:"projAchPmt,omitempty"`
}

// Validate validates this direct debit update request2
func (m *DirectDebitUpdateRequest2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAchAmt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAchAmtPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAchStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationUser2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdAchReqDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdCreditBal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdDailyFreq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdDaysFctn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdDaysNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdInterimPmts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdMandateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdNotifyCntl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdPmtRevCntr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdSuspend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdSuspendBypass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForeignUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNomAchPct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayRemitMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtAch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtAchDbNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtAchDbType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmtAchRtNbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjAchPmt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitUpdateRequest2) validateAcctNbr(formats strfmt.Registry) error {

	if err := validate.Required("acctNbr", "body", m.AcctNbr); err != nil {
		return err
	}

	if err := validate.MinLength("acctNbr", "body", string(*m.AcctNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("acctNbr", "body", string(*m.AcctNbr), 19); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateAchAmt(formats strfmt.Registry) error {

	if swag.IsZero(m.AchAmt) { // not required
		return nil
	}

	if err := validate.Pattern("achAmt", "body", string(m.AchAmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateAchAmtPct(formats strfmt.Registry) error {

	if err := validate.Required("achAmtPct", "body", m.AchAmtPct); err != nil {
		return err
	}

	if err := validate.MinLength("achAmtPct", "body", string(*m.AchAmtPct), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("achAmtPct", "body", string(*m.AchAmtPct), 1); err != nil {
		return err
	}

	if err := validate.Pattern("achAmtPct", "body", string(*m.AchAmtPct), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateAchStartDate(formats strfmt.Registry) error {

	if err := validate.Required("achStartDate", "body", m.AchStartDate); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateApplicationUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationUser2) { // not required
		return nil
	}

	if err := validate.MinLength("applicationUser2", "body", string(*m.ApplicationUser2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("applicationUser2", "body", string(*m.ApplicationUser2), 20); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdAchReqDay(formats strfmt.Registry) error {

	if swag.IsZero(m.DdAchReqDay) { // not required
		return nil
	}

	if err := validate.MinLength("ddAchReqDay", "body", string(*m.DdAchReqDay), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddAchReqDay", "body", string(*m.DdAchReqDay), 2); err != nil {
		return err
	}

	if err := validate.Pattern("ddAchReqDay", "body", string(*m.DdAchReqDay), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdBic(formats strfmt.Registry) error {

	if swag.IsZero(m.DdBic) { // not required
		return nil
	}

	if err := validate.MinLength("ddBic", "body", string(*m.DdBic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddBic", "body", string(*m.DdBic), 11); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdCancel(formats strfmt.Registry) error {

	if err := validate.Required("ddCancel", "body", m.DdCancel); err != nil {
		return err
	}

	if err := validate.MinLength("ddCancel", "body", string(*m.DdCancel), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddCancel", "body", string(*m.DdCancel), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddCancel", "body", string(*m.DdCancel), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdCreditBal(formats strfmt.Registry) error {

	if swag.IsZero(m.DdCreditBal) { // not required
		return nil
	}

	if err := validate.MinLength("ddCreditBal", "body", string(*m.DdCreditBal), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddCreditBal", "body", string(*m.DdCreditBal), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddCreditBal", "body", string(*m.DdCreditBal), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdDailyFreq(formats strfmt.Registry) error {

	if swag.IsZero(m.DdDailyFreq) { // not required
		return nil
	}

	if err := validate.MinLength("ddDailyFreq", "body", string(*m.DdDailyFreq), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddDailyFreq", "body", string(*m.DdDailyFreq), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddDailyFreq", "body", string(*m.DdDailyFreq), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdDaysFctn(formats strfmt.Registry) error {

	if swag.IsZero(m.DdDaysFctn) { // not required
		return nil
	}

	if err := validate.MinLength("ddDaysFctn", "body", string(*m.DdDaysFctn), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddDaysFctn", "body", string(*m.DdDaysFctn), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddDaysFctn", "body", string(*m.DdDaysFctn), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdDaysNbr(formats strfmt.Registry) error {

	if swag.IsZero(m.DdDaysNbr) { // not required
		return nil
	}

	if err := validate.MinLength("ddDaysNbr", "body", string(*m.DdDaysNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddDaysNbr", "body", string(*m.DdDaysNbr), 2); err != nil {
		return err
	}

	if err := validate.Pattern("ddDaysNbr", "body", string(*m.DdDaysNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdIban(formats strfmt.Registry) error {

	if swag.IsZero(m.DdIban) { // not required
		return nil
	}

	if err := validate.MinLength("ddIban", "body", string(*m.DdIban), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddIban", "body", string(*m.DdIban), 34); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdInterimPmts(formats strfmt.Registry) error {

	if err := validate.Required("ddInterimPmts", "body", m.DdInterimPmts); err != nil {
		return err
	}

	if err := validate.MinLength("ddInterimPmts", "body", string(*m.DdInterimPmts), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddInterimPmts", "body", string(*m.DdInterimPmts), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddInterimPmts", "body", string(*m.DdInterimPmts), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdMandateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DdMandateStatus) { // not required
		return nil
	}

	if err := validate.MinLength("ddMandateStatus", "body", string(*m.DdMandateStatus), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddMandateStatus", "body", string(*m.DdMandateStatus), 1); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdNotifyCntl(formats strfmt.Registry) error {

	if swag.IsZero(m.DdNotifyCntl) { // not required
		return nil
	}

	if err := validate.MinLength("ddNotifyCntl", "body", string(*m.DdNotifyCntl), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddNotifyCntl", "body", string(*m.DdNotifyCntl), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddNotifyCntl", "body", string(*m.DdNotifyCntl), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdPmtRevCntr(formats strfmt.Registry) error {

	if swag.IsZero(m.DdPmtRevCntr) { // not required
		return nil
	}

	if err := validate.MinLength("ddPmtRevCntr", "body", string(*m.DdPmtRevCntr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddPmtRevCntr", "body", string(*m.DdPmtRevCntr), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddPmtRevCntr", "body", string(*m.DdPmtRevCntr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdSuspend(formats strfmt.Registry) error {

	if swag.IsZero(m.DdSuspend) { // not required
		return nil
	}

	if err := validate.MinLength("ddSuspend", "body", string(*m.DdSuspend), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddSuspend", "body", string(*m.DdSuspend), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddSuspend", "body", string(*m.DdSuspend), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateDdSuspendBypass(formats strfmt.Registry) error {

	if swag.IsZero(m.DdSuspendBypass) { // not required
		return nil
	}

	if err := validate.MinLength("ddSuspendBypass", "body", string(*m.DdSuspendBypass), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("ddSuspendBypass", "body", string(*m.DdSuspendBypass), 1); err != nil {
		return err
	}

	if err := validate.Pattern("ddSuspendBypass", "body", string(*m.DdSuspendBypass), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateForeignUse(formats strfmt.Registry) error {

	if swag.IsZero(m.ForeignUse) { // not required
		return nil
	}

	if err := validate.MinLength("foreignUse", "body", string(*m.ForeignUse), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("foreignUse", "body", string(*m.ForeignUse), 1); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateNomAchPct(formats strfmt.Registry) error {

	if swag.IsZero(m.NomAchPct) { // not required
		return nil
	}

	if err := validate.Pattern("nomAchPct", "body", string(m.NomAchPct), `^(-)?[0-9]{1,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validatePayRemitMethod(formats strfmt.Registry) error {

	if err := validate.Required("payRemitMethod", "body", m.PayRemitMethod); err != nil {
		return err
	}

	if err := validate.MinLength("payRemitMethod", "body", string(*m.PayRemitMethod), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("payRemitMethod", "body", string(*m.PayRemitMethod), 1); err != nil {
		return err
	}

	if err := validate.Pattern("payRemitMethod", "body", string(*m.PayRemitMethod), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validatePmtAch(formats strfmt.Registry) error {

	if err := validate.Required("pmtAch", "body", m.PmtAch); err != nil {
		return err
	}

	if err := validate.MinLength("pmtAch", "body", string(*m.PmtAch), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtAch", "body", string(*m.PmtAch), 1); err != nil {
		return err
	}

	if err := validate.Pattern("pmtAch", "body", string(*m.PmtAch), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validatePmtAchDbNbr(formats strfmt.Registry) error {

	if err := validate.Required("pmtAchDbNbr", "body", m.PmtAchDbNbr); err != nil {
		return err
	}

	if err := validate.MinLength("pmtAchDbNbr", "body", string(*m.PmtAchDbNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtAchDbNbr", "body", string(*m.PmtAchDbNbr), 17); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validatePmtAchDbType(formats strfmt.Registry) error {

	if err := validate.Required("pmtAchDbType", "body", m.PmtAchDbType); err != nil {
		return err
	}

	if err := validate.MinLength("pmtAchDbType", "body", string(*m.PmtAchDbType), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtAchDbType", "body", string(*m.PmtAchDbType), 1); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validatePmtAchRtNbr(formats strfmt.Registry) error {

	if err := validate.Required("pmtAchRtNbr", "body", m.PmtAchRtNbr); err != nil {
		return err
	}

	if err := validate.MinLength("pmtAchRtNbr", "body", string(*m.PmtAchRtNbr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("pmtAchRtNbr", "body", string(*m.PmtAchRtNbr), 10); err != nil {
		return err
	}

	if err := validate.Pattern("pmtAchRtNbr", "body", string(*m.PmtAchRtNbr), `^[0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitUpdateRequest2) validateProjAchPmt(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjAchPmt) { // not required
		return nil
	}

	if err := validate.Pattern("projAchPmt", "body", string(m.ProjAchPmt), `^(-)?[0-9]{1,17}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitUpdateRequest2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitUpdateRequest2) UnmarshalBinary(b []byte) error {
	var res DirectDebitUpdateRequest2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

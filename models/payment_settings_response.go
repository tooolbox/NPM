// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PaymentSettingsResponse payment settings response
//
// swagger:model paymentSettingsResponse
type PaymentSettingsResponse struct {

	// The available credit of the stored card
	AvailableCredit string `json:"availableCredit,omitempty"`

	// cancelled stored card details
	CancelledStoredCardDetails *PaymentSettingsResponseCancelledStoredCardDetails `json:"cancelledStoredCardDetails,omitempty"`

	// Are Credit cards accepted for payments?
	CreditCardsAccepted string `json:"creditCardsAccepted,omitempty"`

	// What currency is the payment, E.G GBP?
	Currency string `json:"currency,omitempty"`

	// Are Debit cards accepted for payments?
	DebitCardsAccepted string `json:"debitCardsAccepted,omitempty"`

	// The maximum amount of what a transaction can be. This figure includes a decimal point (numeric), e.g. 120.99.
	MaximummAmount string `json:"maximummAmount,omitempty"`

	// This is the result of the message request which siginifes success or failure of the call and will be populated as 0000, E001, E002 or E003. <BR/> 0000-Success, <BR/> E001-Issuer Not Found, <BR/> E002-Department Not Found, <BR/> E003-Account Not Found On Vision.
	MessageResult string `json:"messageResult,omitempty"`

	// The minimum amount of what a transaction can be. This figure includes a decimal point (numeric), e.g. 120.99.
	MinimumAmount string `json:"minimumAmount,omitempty"`

	// Does the payment require the CVV. True/False
	RequireCvv string `json:"requireCvv,omitempty"`

	// Does the payment require the card Expiry date. True/False
	RequireExpiry string `json:"requireExpiry,omitempty"`

	// stored card details
	StoredCardDetails *PaymentSettingsResponseStoredCardDetails `json:"storedCardDetails,omitempty"`

	// Populated with True / False depending on if the cards are allowed to be stored
	StoredCardsEnabled string `json:"storedCardsEnabled,omitempty"`

	// Populated by the account number from vision, if the account number was supplied in the original request.
	VisionAccountNumber string `json:"visionAccountNumber,omitempty"`

	// Populated by the card number from vision, if the account number was supplied in the orginal request.
	VisionCardNumber string `json:"visionCardNumber,omitempty"`
}

// Validate validates this payment settings response
func (m *PaymentSettingsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelledStoredCardDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoredCardDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentSettingsResponse) validateCancelledStoredCardDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.CancelledStoredCardDetails) { // not required
		return nil
	}

	if m.CancelledStoredCardDetails != nil {
		if err := m.CancelledStoredCardDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelledStoredCardDetails")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentSettingsResponse) validateStoredCardDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.StoredCardDetails) { // not required
		return nil
	}

	if m.StoredCardDetails != nil {
		if err := m.StoredCardDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storedCardDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSettingsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSettingsResponse) UnmarshalBinary(b []byte) error {
	var res PaymentSettingsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentSettingsResponseCancelledStoredCardDetails There is a clean up job that deletes stored cards based on if the card has expired or if the stored card has not been used for a set number of days (configurable in FirstPay). If a card is deleted for a given account, the next time the GetSettings method is called for that account, details of the cancellation will be returned in order that a suitable message may be displayed to the customer/user. This will only occur on the first call of GetSettings after the cancellation and not on any subsequent ones.
//
// swagger:model PaymentSettingsResponseCancelledStoredCardDetails
type PaymentSettingsResponseCancelledStoredCardDetails struct {

	// schema
	Schema *CancelledStoredCardDetails `json:"schema,omitempty"`
}

// Validate validates this payment settings response cancelled stored card details
func (m *PaymentSettingsResponseCancelledStoredCardDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentSettingsResponseCancelledStoredCardDetails) validateSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelledStoredCardDetails" + "." + "schema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSettingsResponseCancelledStoredCardDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSettingsResponseCancelledStoredCardDetails) UnmarshalBinary(b []byte) error {
	var res PaymentSettingsResponseCancelledStoredCardDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentSettingsResponseStoredCardDetails This holds the details of the stored card.
//
// swagger:model PaymentSettingsResponseStoredCardDetails
type PaymentSettingsResponseStoredCardDetails struct {

	// schema
	Schema *StoredCardDetails `json:"schema,omitempty"`
}

// Validate validates this payment settings response stored card details
func (m *PaymentSettingsResponseStoredCardDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentSettingsResponseStoredCardDetails) validateSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storedCardDetails" + "." + "schema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSettingsResponseStoredCardDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSettingsResponseStoredCardDetails) UnmarshalBinary(b []byte) error {
	var res PaymentSettingsResponseStoredCardDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

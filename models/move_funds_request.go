// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveFundsRequest move funds request
//
// swagger:model MoveFundsRequest
type MoveFundsRequest struct {

	// common
	Common *Header `json:"common,omitempty"`

	// Amount of Balance or Money Transfer requested in monetary units. This field is allowed with up to 5 digits and up to 2 optional decimals. Please pass with decimals within the field instead of depending on NOD field
	// Required: true
	// Pattern: ^[0-9]{1,5}(\.?[0-9]{1,2})?$
	DblAmount *string `json:"dblAmount"`

	// Indicates the number of day to check back for Balance Transfer Duplicates.
	// Pattern: ([0-2]?[0-9]|3[0-1])
	GetnDays string `json:"getnDays,omitempty"`

	// Options to be used while processing the Balance Transfer request. Valid Values.
	// Pattern: [0-9]{1,}
	GetnOptions string `json:"getnOptions,omitempty"`

	// Indicates the pricing and terms of a specific offer that will be applied to balance transfers. Valid Values are : 00 to 99.
	// Pattern: [0-9]{2,}
	GetnTicketTerm string `json:"getnTicketTerm,omitempty"`

	// select fields
	SelectFields []string `json:"selectFields"`

	// Destination banks account number to which the money transfer funds will be deposited into.
	// Max Length: 8
	// Min Length: 0
	StrBankAccountNumber *string `json:"strBankAccountNumber,omitempty"`

	// Destination banks sort code number.
	// Max Length: 6
	// Min Length: 0
	StrBankSortCode *string `json:"strBankSortCode,omitempty"`

	// BIC: Bank Identifier Code associated with the direct debit or direct credit accounts.
	// Max Length: 11
	// Min Length: 0
	// Pattern: ^[a-zA-Z0-9]*$
	StrBic *string `json:"strBic,omitempty"`

	// Branch Seller ID: Identification number of the Branch Seller to track the sales and sales rewards.
	// Max Length: 10
	// Min Length: 0
	StrBranchSellerID *string `json:"strBranchSellerID,omitempty"`

	// Branch Sort Code number.
	// Max Length: 10
	// Min Length: 6
	StrBranchSortCode string `json:"strBranchSortCode,omitempty"`

	// Channel Type: Indicates the channel from which the balance transfer request originated from.
	// Required: true
	// Max Length: 2
	// Min Length: 2
	StrChannelType *string `json:"strChannelType"`

	// Defaults to the account's currency code. Valid value is 'GBP'.
	// Required: true
	// Max Length: 3
	// Min Length: 3
	StrCurrency *string `json:"strCurrency"`

	// Custom field to accommodate the client reference or notes on the incoming request.
	// Max Length: 100
	// Min Length: 0
	// Pattern: ^[a-zA-Z0-9]*$
	StrCustom *string `json:"strCustom,omitempty"`

	// Destination card number to which the balance will be transferred to.
	// Max Length: 19
	// Min Length: 13
	StrDestination string `json:"strDestination,omitempty"`

	// IBAN: International Banking Number associated with the direct debit or direct credits.
	// Max Length: 34
	// Min Length: 0
	// Pattern: ^[a-zA-Z0-9]*$
	StrIban *string `json:"strIban,omitempty"`

	// Unique offer code for the balance transfer offer and this value will be defined in offer management system.
	// Required: true
	// Max Length: 10
	// Min Length: 1
	StrOfferCode *string `json:"strOfferCode"`

	// Reason code to indicate the reason for use of funds.
	// Max Length: 2
	// Min Length: 2
	StrReasonCodeMT string `json:"strReasonCodeMT,omitempty"`

	// Source card number of the cardholder from which the balance will be transferred to another card.
	// Required: true
	// Max Length: 19
	// Min Length: 13
	StrSource *string `json:"strSource"`

	// This field is used for directing the request to different backend regions based on configuration for a client. Please reach FirstData to get the right values for this field based on environment. This field should not be passed in production.
	StrUserName string `json:"strUserName,omitempty"`
}

// Validate validates this move funds request
func (m *MoveFundsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDblAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetnDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetnOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetnTicketTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrBankAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrBankSortCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrBranchSellerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrBranchSortCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrChannelType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrCustom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrOfferCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrReasonCodeMT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveFundsRequest) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *MoveFundsRequest) validateDblAmount(formats strfmt.Registry) error {

	if err := validate.Required("dblAmount", "body", m.DblAmount); err != nil {
		return err
	}

	if err := validate.Pattern("dblAmount", "body", string(*m.DblAmount), `^[0-9]{1,5}(\.?[0-9]{1,2})?$`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateGetnDays(formats strfmt.Registry) error {

	if swag.IsZero(m.GetnDays) { // not required
		return nil
	}

	if err := validate.Pattern("getnDays", "body", string(m.GetnDays), `([0-2]?[0-9]|3[0-1])`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateGetnOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.GetnOptions) { // not required
		return nil
	}

	if err := validate.Pattern("getnOptions", "body", string(m.GetnOptions), `[0-9]{1,}`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateGetnTicketTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.GetnTicketTerm) { // not required
		return nil
	}

	if err := validate.Pattern("getnTicketTerm", "body", string(m.GetnTicketTerm), `[0-9]{2,}`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrBankAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.StrBankAccountNumber) { // not required
		return nil
	}

	if err := validate.MinLength("strBankAccountNumber", "body", string(*m.StrBankAccountNumber), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strBankAccountNumber", "body", string(*m.StrBankAccountNumber), 8); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrBankSortCode(formats strfmt.Registry) error {

	if swag.IsZero(m.StrBankSortCode) { // not required
		return nil
	}

	if err := validate.MinLength("strBankSortCode", "body", string(*m.StrBankSortCode), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strBankSortCode", "body", string(*m.StrBankSortCode), 6); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrBic(formats strfmt.Registry) error {

	if swag.IsZero(m.StrBic) { // not required
		return nil
	}

	if err := validate.MinLength("strBic", "body", string(*m.StrBic), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strBic", "body", string(*m.StrBic), 11); err != nil {
		return err
	}

	if err := validate.Pattern("strBic", "body", string(*m.StrBic), `^[a-zA-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrBranchSellerID(formats strfmt.Registry) error {

	if swag.IsZero(m.StrBranchSellerID) { // not required
		return nil
	}

	if err := validate.MinLength("strBranchSellerID", "body", string(*m.StrBranchSellerID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strBranchSellerID", "body", string(*m.StrBranchSellerID), 10); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrBranchSortCode(formats strfmt.Registry) error {

	if swag.IsZero(m.StrBranchSortCode) { // not required
		return nil
	}

	if err := validate.MinLength("strBranchSortCode", "body", string(m.StrBranchSortCode), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("strBranchSortCode", "body", string(m.StrBranchSortCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrChannelType(formats strfmt.Registry) error {

	if err := validate.Required("strChannelType", "body", m.StrChannelType); err != nil {
		return err
	}

	if err := validate.MinLength("strChannelType", "body", string(*m.StrChannelType), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("strChannelType", "body", string(*m.StrChannelType), 2); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrCurrency(formats strfmt.Registry) error {

	if err := validate.Required("strCurrency", "body", m.StrCurrency); err != nil {
		return err
	}

	if err := validate.MinLength("strCurrency", "body", string(*m.StrCurrency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("strCurrency", "body", string(*m.StrCurrency), 3); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrCustom(formats strfmt.Registry) error {

	if swag.IsZero(m.StrCustom) { // not required
		return nil
	}

	if err := validate.MinLength("strCustom", "body", string(*m.StrCustom), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strCustom", "body", string(*m.StrCustom), 100); err != nil {
		return err
	}

	if err := validate.Pattern("strCustom", "body", string(*m.StrCustom), `^[a-zA-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrDestination(formats strfmt.Registry) error {

	if swag.IsZero(m.StrDestination) { // not required
		return nil
	}

	if err := validate.MinLength("strDestination", "body", string(m.StrDestination), 13); err != nil {
		return err
	}

	if err := validate.MaxLength("strDestination", "body", string(m.StrDestination), 19); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrIban(formats strfmt.Registry) error {

	if swag.IsZero(m.StrIban) { // not required
		return nil
	}

	if err := validate.MinLength("strIban", "body", string(*m.StrIban), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("strIban", "body", string(*m.StrIban), 34); err != nil {
		return err
	}

	if err := validate.Pattern("strIban", "body", string(*m.StrIban), `^[a-zA-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrOfferCode(formats strfmt.Registry) error {

	if err := validate.Required("strOfferCode", "body", m.StrOfferCode); err != nil {
		return err
	}

	if err := validate.MinLength("strOfferCode", "body", string(*m.StrOfferCode), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("strOfferCode", "body", string(*m.StrOfferCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrReasonCodeMT(formats strfmt.Registry) error {

	if swag.IsZero(m.StrReasonCodeMT) { // not required
		return nil
	}

	if err := validate.MinLength("strReasonCodeMT", "body", string(m.StrReasonCodeMT), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("strReasonCodeMT", "body", string(m.StrReasonCodeMT), 2); err != nil {
		return err
	}

	return nil
}

func (m *MoveFundsRequest) validateStrSource(formats strfmt.Registry) error {

	if err := validate.Required("strSource", "body", m.StrSource); err != nil {
		return err
	}

	if err := validate.MinLength("strSource", "body", string(*m.StrSource), 13); err != nil {
		return err
	}

	if err := validate.MaxLength("strSource", "body", string(*m.StrSource), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoveFundsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoveFundsRequest) UnmarshalBinary(b []byte) error {
	var res MoveFundsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

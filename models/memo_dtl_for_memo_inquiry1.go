// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemoDtlForMemoInquiry1 memo dtl for memo inquiry1
//
// swagger:model MemoDtlForMemoInquiry1
type MemoDtlForMemoInquiry1 struct {

	//  Max length = 4, This ASM action code for this memo
	ActnCd string `json:"actnCd,omitempty"`

	//  Max length = 20, This ASM action descriptor for this memo
	ActnDesc string `json:"actnDesc,omitempty"`

	// Format: YYYYMMDD. Memo Date converted to CCYYMMDD.
	MemoDate string `json:"memoDate,omitempty"`

	//  Max length = 60, Memo text line 1
	MemoLine1 string `json:"memoLine1,omitempty"`

	//  Max length = 60, Memo text line 2
	MemoLine2 string `json:"memoLine2,omitempty"`

	//  Max length = 60, Memo text line 3
	MemoLine3 string `json:"memoLine3,omitempty"`

	//  Max length = 60, Memo text line 4
	MemoLine4 string `json:"memoLine4,omitempty"`

	//  Max length = 60, Memo text line 5
	MemoLine5 string `json:"memoLine5,omitempty"`

	//  Max length = 1, 0 - Unspecified priority  1 - Low priority 2 - Medium priority 3 - High priority
	MemoPriority string `json:"memoPriority,omitempty"`

	//  Max length = 1, O  = Open held C = Closed R = open referred
	MemoStat string `json:"memoStat,omitempty"`

	//  Max length = 6, Memo Time (HHMMSS).
	MemoTime string `json:"memoTime,omitempty"`

	//  Max length = 18, Monetary transaction amount.  This is only populated for M type memos.
	MonAmt string `json:"monAmt,omitempty"`

	//  Max length = 6, Auth code for the transaction.
	MonAuthCd string `json:"monAuthCd,omitempty"`

	//  Max length = 19, Card number for this memo.  This is only populated for M type memos.
	MonCardNbr string `json:"monCardNbr,omitempty"`

	//  Max length = 5, Card sequence number for the transaction.
	MonCardSeq string `json:"monCardSeq,omitempty"`

	//  Max length = 5, Credit plan to which transaction was posted or default plan for specialist adjustment.
	MonCrPlan string `json:"monCrPlan,omitempty"`

	//  Max length = 4, Department code associated with the transaction.
	MonDeptCd string `json:"monDeptCd,omitempty"`

	// Format: YYYYMMDD. Effective Date for the adjustment. Will be the same as the original effective date in the case of a transaction reversal or the current date for a specialist adjustment.
	MonEffDate string `json:"monEffDate,omitempty"`

	//  Max length = 2, Credit plan sequence number for the transaction.
	MonPlanReqNbr string `json:"monPlanReqNbr,omitempty"`

	//  Max length = 9, Store number associated with the transaction.
	MonStoreNbr string `json:"monStoreNbr,omitempty"`

	//  Max length = 19, The card number for this memo.  This is only populated for N type memos.
	NonMonCardNbr string `json:"nonMonCardNbr,omitempty"`

	//  Max length = 3, Code identifying where the Memo originated.
	Originator string `json:"originator,omitempty"`

	//  Max length = 10, The number of points associated to this memo.  This is only populated for P type memos
	PtsAmt string `json:"ptsAmt,omitempty"`

	//  Max length = 1, I = ASM inquiry type record M = ASM monetary type record N = ASM nonmonetary type record P = ASM frequent shopper points type record T = ASM transcript type record
	RecType string `json:"recType,omitempty"`

	//  Max length = 18, The amount on the transcript Memo.  This is only populated for T type memos
	TranscriptAmt string `json:"transcriptAmt,omitempty"`

	//  Max length = 19, The card number for this memo.  This is only populated for T type memos.
	TranscriptCardNbr string `json:"transcriptCardNbr,omitempty"`
}

// Validate validates this memo dtl for memo inquiry1
func (m *MemoDtlForMemoInquiry1) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MemoDtlForMemoInquiry1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemoDtlForMemoInquiry1) UnmarshalBinary(b []byte) error {
	var res MemoDtlForMemoInquiry1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

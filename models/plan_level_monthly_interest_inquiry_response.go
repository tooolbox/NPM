// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlanLevelMonthlyInterestInquiryResponse plan level monthly interest inquiry response
//
// swagger:model PlanLevelMonthlyInterestInquiryResponse
type PlanLevelMonthlyInterestInquiryResponse struct {

	//  Max length = 19, Account Number: Number of Customer's account.
	AcctNbr string `json:"acctNbr,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`

	//  Max length = 1, Currency NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in monetary amount fields.
	CurrNod string `json:"currNod,omitempty"`

	//  Max length = 2, Number of Statements from which the data was retrieved.
	NbrStats string `json:"nbrStats,omitempty"`

	//  Max length = 1, Percentage NOD: Number of decimal positions to the right of the decimal point (or other decimal character) in percentage fields.
	PerNod string `json:"perNod,omitempty"`

	// Group variable. Occurs 12 times
	StatmentData []*StatmentDataForPlanLevelMonthlyInterestInquiry1 `json:"statmentData"`

	//  Max length = 17, Amount of finance charges assessed, from the beginning of this calendar year through this statement. Accumulation of all AMPS-YTD-INT for all plans associated with this account plus AMBS-PURGED-PLAN-YTD-INT.
	YtdInt string `json:"ytdInt,omitempty"`
}

// Validate validates this plan level monthly interest inquiry response
func (m *PlanLevelMonthlyInterestInquiryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatmentData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanLevelMonthlyInterestInquiryResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *PlanLevelMonthlyInterestInquiryResponse) validateStatmentData(formats strfmt.Registry) error {

	if swag.IsZero(m.StatmentData) { // not required
		return nil
	}

	for i := 0; i < len(m.StatmentData); i++ {
		if swag.IsZero(m.StatmentData[i]) { // not required
			continue
		}

		if m.StatmentData[i] != nil {
			if err := m.StatmentData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statmentData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanLevelMonthlyInterestInquiryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanLevelMonthlyInterestInquiryResponse) UnmarshalBinary(b []byte) error {
	var res PlanLevelMonthlyInterestInquiryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerAccountsListResponse customer accounts list response
//
// swagger:model CustomerAccountsListResponse
type CustomerAccountsListResponse struct {

	// Account Occurrences: Number of accounts extracted for a Customer. Maximum 20 accounts is displayed in output response for a customer.
	AcctTbl []*AcctTblForCustomerAccountsList1 `json:"acctTbl"`

	//  Max length = 1, Available Account Indicator: Indicates if more than 20 Accounts are present for a customer.  Valid values are 'Y' and 'N' 'Y' - More than 20 accounts available 'N' - No more accounts Available.
	AtMore string `json:"atMore,omitempty"`

	//  Max length = 2, Account Occurrences: Number of accounts extracted for a Customer. Maximum 20 accounts is displayed in output response for a customer.
	AtNbrOccur string `json:"atNbrOccur,omitempty"`

	// common
	Common *Header `json:"common,omitempty"`
}

// Validate validates this customer accounts list response
func (m *CustomerAccountsListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcctTbl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAccountsListResponse) validateAcctTbl(formats strfmt.Registry) error {

	if swag.IsZero(m.AcctTbl) { // not required
		return nil
	}

	for i := 0; i < len(m.AcctTbl); i++ {
		if swag.IsZero(m.AcctTbl[i]) { // not required
			continue
		}

		if m.AcctTbl[i] != nil {
			if err := m.AcctTbl[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acctTbl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerAccountsListResponse) validateCommon(formats strfmt.Registry) error {

	if swag.IsZero(m.Common) { // not required
		return nil
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAccountsListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAccountsListResponse) UnmarshalBinary(b []byte) error {
	var res CustomerAccountsListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

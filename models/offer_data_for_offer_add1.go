// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OfferDataForOfferAdd1 offer data for offer add1
//
// swagger:model OfferDataForOfferAdd1
type OfferDataForOfferAdd1 struct {

	// Format: YYYYMMDD. Must be a valid future date. Only valid for add-on product offer types such as insurance. Default value is today's date.
	EffectiveDate string `json:"effectiveDate,omitempty"`

	//  Max length = 10, Identification number of the offer assigned to the account - At least 1 entry is required
	// Required: true
	// Max Length: 10
	// Min Length: 0
	OfferID *string `json:"offerId"`

	//  Max length = 10, User defined field 1
	// Max Length: 10
	// Min Length: 0
	UserField1 *string `json:"userField1,omitempty"`

	//  Max length = 10, User defined field 2
	// Max Length: 10
	// Min Length: 0
	UserField2 *string `json:"userField2,omitempty"`

	//  Max length = 10, User defined field 3
	// Max Length: 10
	// Min Length: 0
	UserField3 *string `json:"userField3,omitempty"`

	//  Max length = 10, User defined field 4
	// Max Length: 10
	// Min Length: 0
	UserField4 *string `json:"userField4,omitempty"`
}

// Validate validates this offer data for offer add1
func (m *OfferDataForOfferAdd1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOfferID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserField1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserField2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserField3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserField4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OfferDataForOfferAdd1) validateOfferID(formats strfmt.Registry) error {

	if err := validate.Required("offerId", "body", m.OfferID); err != nil {
		return err
	}

	if err := validate.MinLength("offerId", "body", string(*m.OfferID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("offerId", "body", string(*m.OfferID), 10); err != nil {
		return err
	}

	return nil
}

func (m *OfferDataForOfferAdd1) validateUserField1(formats strfmt.Registry) error {

	if swag.IsZero(m.UserField1) { // not required
		return nil
	}

	if err := validate.MinLength("userField1", "body", string(*m.UserField1), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userField1", "body", string(*m.UserField1), 10); err != nil {
		return err
	}

	return nil
}

func (m *OfferDataForOfferAdd1) validateUserField2(formats strfmt.Registry) error {

	if swag.IsZero(m.UserField2) { // not required
		return nil
	}

	if err := validate.MinLength("userField2", "body", string(*m.UserField2), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userField2", "body", string(*m.UserField2), 10); err != nil {
		return err
	}

	return nil
}

func (m *OfferDataForOfferAdd1) validateUserField3(formats strfmt.Registry) error {

	if swag.IsZero(m.UserField3) { // not required
		return nil
	}

	if err := validate.MinLength("userField3", "body", string(*m.UserField3), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userField3", "body", string(*m.UserField3), 10); err != nil {
		return err
	}

	return nil
}

func (m *OfferDataForOfferAdd1) validateUserField4(formats strfmt.Registry) error {

	if swag.IsZero(m.UserField4) { // not required
		return nil
	}

	if err := validate.MinLength("userField4", "body", string(*m.UserField4), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("userField4", "body", string(*m.UserField4), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OfferDataForOfferAdd1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OfferDataForOfferAdd1) UnmarshalBinary(b []byte) error {
	var res OfferDataForOfferAdd1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
